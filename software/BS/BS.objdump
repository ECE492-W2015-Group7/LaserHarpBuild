
BS.elf:     file format elf32-littlenios2
BS.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0080019c

Program Header:
    LOAD off    0x00001020 vaddr 0x01104020 paddr 0x00800000 align 2**12
         filesz 0x0000019c memsz 0x0000019c flags r-x
    LOAD off    0x0000219c vaddr 0x0080019c paddr 0x0080019c align 2**12
         filesz 0x000145ec memsz 0x000145ec flags r-x
    LOAD off    0x00016788 vaddr 0x00814788 paddr 0x008162e8 align 2**12
         filesz 0x00001b60 memsz 0x00001b60 flags rw-
    LOAD off    0x00018e48 vaddr 0x00817e48 paddr 0x00817e48 align 2**12
         filesz 0x00000000 memsz 0x00007574 flags rw-
    LOAD off    0x00019000 vaddr 0x01104000 paddr 0x01104000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01104000  01104000  00019000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  01104020  00800000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00014224  0080019c  0080019c  0000219c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003c8  008143c0  008143c0  000163c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b60  00814788  008162e8  00016788  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00007574  00817e48  00817e48  00018e48  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00019020  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000f78  00000000  00000000  00019048  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000296e  00000000  00000000  00019fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002f9d1  00000000  00000000  0001c92e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009cbe  00000000  00000000  0004c2ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001b660  00000000  00000000  00055fbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002b24  00000000  00000000  00071620  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000024c5  00000000  00000000  00074144  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000090c3  00000000  00000000  00076609  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0007f6cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000878  00000000  00000000  0007f700  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  000853b1  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000853b7  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000853c3  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000853c4  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000853c5  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000853c9  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000853cd  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000853d1  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000853dc  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000853e7  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  000853f2  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000038  00000000  00000000  000853ff  2**0
                  CONTENTS, READONLY
 29 .jdi          00005269  00000000  00000000  00085437  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00086c22  00000000  00000000  0008a6a0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01104000 l    d  .entry	00000000 .entry
01104020 l    d  .exceptions	00000000 .exceptions
0080019c l    d  .text	00000000 .text
008143c0 l    d  .rodata	00000000 .rodata
00814788 l    d  .rwdata	00000000 .rwdata
00817e48 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001e4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 MidiDriver.c
00817e48 l     O .bss	00000008 VOICE_TABLE
00000000 l    df *ABS*	00000000 hello_ucosii.c
008007d0 l     F .text	00000040 laserStatusChangeInterrupt
00000000 l    df *ABS*	00000000 sf_round.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_pow.c
0081447c l     O .rodata	00000010 bp
0081448c l     O .rodata	00000010 dp_l
0081449c l     O .rodata	00000010 dp_h
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
008144ac l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 fp-bit.c
00802870 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00802f10 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
00814788 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0080600c l     F .text	00000058 std
00806118 l     F .text	00000008 __fp_lock
00806120 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
008070e0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00807140 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00807240 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0080762c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080770c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00807868 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
00807ab0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00816260 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00807d4c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00816264 l     O .rwdata	00000004 lockid
00817e78 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00816268 l     O .rwdata	00000004 lockid
00817e80 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00809784 l     F .text	00000044 OS_InitMisc
008097c8 l     F .text	0000006c OS_InitRdyList
0080992c l     F .text	000000e0 OS_InitTCBList
008096a8 l     F .text	000000dc OS_InitEventList
00809834 l     F .text	0000007c OS_InitTaskIdle
008098b0 l     F .text	0000007c OS_InitTaskStat
00809ba0 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0080bac0 l     F .text	00000110 OS_FlagTaskRdy
0080b818 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00815138 l     O .rwdata	0000106c jtag_uart_0
008161a4 l     O .rwdata	00000030 audio_and_video_config_0
008161d4 l     O .rwdata	00000030 audio_0
00816204 l     O .rwdata	0000002c character_lcd_0
00810418 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00810c30 l     F .text	000002c4 altera_avalon_jtag_uart_irq
00810ef4 l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0081170c l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio_and_video_config.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00812f1c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00813108 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00813244 l     F .text	000000dc alt_file_locked
008134a8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00814050 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 lib2-divmod.c
00814204 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
00814350 l     F .text	00000040 alt_sim_halt
0081216c g     F .text	00000038 alt_up_av_config_reset
00812610 g     F .text	00000064 alt_up_av_config_read_D5M_cfg_register
008162b6 g     O .rwdata	00000002 OSTaskNameSize
00806e84 g     F .text	00000070 _isatty_r
008121dc g     F .text	00000030 alt_up_av_config_disable_interrupt
008078c8 g     F .text	000000c8 alt_main
008046d4 g     F .text	000000a0 _puts_r
0081bf08 g     O .bss	00000100 alt_irq
008023e0 g     F .text	00000018 fabs
00806ef4 g     F .text	00000078 _lseek_r
0080c3b4 g     F .text	000000d0 OS_MemInit
00810708 g     F .text	00000060 altera_avalon_fifo_write_almostfull
008162e8 g       *ABS*	00000000 __flash_rwdata_start
008102f4 g     F .text	00000064 OSTimeSet
0081281c g     F .text	00000034 alt_up_character_lcd_send_cmd
00803a30 g     F .text	00000088 __eqdf2
00808300 g     F .text	000006b4 OSEventPendMulti
00811a84 g     F .text	00000070 alt_up_audio_read_fifo_avail
0081f3bc g       *ABS*	00000000 __alt_heap_start
008122ac g     F .text	000000ac alt_up_av_config_write_audio_cfg_register
00813ab0 g     F .text	00000020 OSTaskCreateHook
0081628e g     O .rwdata	00000002 OSMboxEn
00811af4 g     F .text	00000070 alt_up_audio_record_r
00808a08 g     F .text	0000007c OSIntEnter
00806ac0 g     F .text	00000068 __sseek
00806074 g     F .text	000000a4 __sinit
0081629e g     O .rwdata	00000002 OSQEn
00806174 g     F .text	00000068 __sfmoreglue
00807fbc g     F .text	000000d0 __malloc_unlock
00813b0c g     F .text	0000001c OSTaskStatHook
00817e88 g     O .bss	00000001 OSLockNesting
00802d08 g     F .text	00000174 __divsf3
008162dc g     O .rwdata	00000002 OSDataSize
00817e89 g     O .bss	00000001 OSRunning
008119fc g     F .text	00000088 alt_up_audio_reset_audio_core
0080555c g     F .text	000000e0 memmove
00813b44 g     F .text	0000001c OSInitHookBegin
00810450 g     F .text	000000bc altera_avalon_fifo_init
008162d4 g     O .rwdata	00000002 OSTmrSize
00806164 g     F .text	00000010 _cleanup
008107c8 g     F .text	00000064 altera_avalon_fifo_write_fifo
00802e7c g     F .text	00000094 __fixsfsi
00817e8c g     O .bss	00000004 OSIdleCtr
00803b40 g     F .text	00000088 __gtdf2
0081377c g       .text	00000000 OSStartTsk
008046c4 g     F .text	00000010 __errno
008127a0 g     F .text	0000007c get_DDRAM_addr
00809ed4 g     F .text	000002e0 OS_TCBInit
01104000 g     F .entry	0000001c __reset
00810988 g     F .text	00000028 altera_avalon_fifo_read_backpressure
008162da g     O .rwdata	00000002 OSTmrWheelTblSize
00800000 g       *ABS*	00000000 __flash_exceptions_start
0081627a g     O .rwdata	00000002 OSEventSize
00817e90 g     O .bss	00000001 OSPrioHighRdy
00806e10 g     F .text	00000074 _fstat_r
00813ad0 g     F .text	00000020 OSTaskDelHook
00817e60 g     O .bss	00000004 errno
0081375c g       .text	00000000 OSStartHighRdy
0080eac8 g     F .text	00000200 OSTaskCreateExt
0080b334 g     F .text	00000068 OSFlagPendGetFlagsRdy
008162ba g     O .rwdata	00000002 OSTaskStatStkSize
008119c0 g     F .text	0000003c alt_up_audio_write_interrupt_pending
00804184 g     F .text	0000002c __make_fp
0080a340 g     F .text	00000334 OSFlagAccept
0080caec g     F .text	000000c8 OSQFlush
0080c484 g     F .text	00000154 OSQAccept
00817e70 g     O .bss	00000004 alt_argv
0081e230 g       *ABS*	00000000 _gp
00802a54 g     F .text	00000070 __subsf3
0080e8f4 g     F .text	000001d4 OSTaskCreate
0080e380 g     F .text	00000574 OSTaskChangePrio
00817e84 g     O .bss	00000004 alt_heapsem
00810640 g     F .text	00000068 altera_avalon_fifo_clear_event
0080a1b4 g     F .text	0000018c OSDebugInit
0080ecc8 g     F .text	0000040c OSTaskDel
00800504 g     F .text	00000088 processNote
00814fb8 g     O .rwdata	00000180 alt_fd_list
0081c008 g     O .bss	00000370 OSFlagTbl
00809484 g     F .text	000000b8 OS_EventTaskRemove
00813044 g     F .text	00000094 alt_find_dev
008054bc g     F .text	000000a0 memcpy
008162a4 g     O .rwdata	00000002 OSRdyTblSize
008129b4 g     F .text	0000004c alt_up_character_lcd_write_fd
00806158 g     F .text	0000000c _cleanup_r
00803cd8 g     F .text	000000f8 __floatsidf
008131cc g     F .text	00000078 alt_io_redirect
0080058c g     F .text	000001e0 audioTask
00803bc8 g     F .text	00000088 __ltdf2
008143c0 g       *ABS*	00000000 __DTOR_END__
00804774 g     F .text	00000014 puts
0080808c g     F .text	00000130 OSEventNameGet
00816288 g     O .rwdata	00000002 OSFlagMax
00808a84 g     F .text	00000100 OSIntExit
008162c2 g     O .rwdata	00000002 OSTCBSize
00811f58 g     F .text	00000060 alt_up_audio_read_fifo_head
00800464 g     F .text	000000a0 turnOffVoice
00817e91 g     O .bss	00000001 OSPrioCur
00811170 g     F .text	000002c0 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
01104000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00814340 g     F .text	00000008 __udivsi3
008008f4 g     F .text	0000009c roundf
0080756c g     F .text	000000c0 isatty
008162a8 g     O .rwdata	00000002 OSStkWidth
0081629c g     O .rwdata	00000002 OSPtrSize
0081627c g     O .rwdata	00000002 OSEventTblSize
008136d0 g       .text	00000000 OSCtxSw
00813dcc g     F .text	00000090 alt_icache_flush
00817e54 g     O .bss	00000004 __malloc_top_pad
00817e94 g     O .bss	00000004 OSTCBList
00817e64 g     O .bss	00000004 alt_fd_list_lock
008120e0 g     F .text	0000008c alt_up_av_config_read_data
00817e50 g     O .bss	00000004 laserStatusChanged
008047fc g     F .text	0000049c __sfvwrite_r
0081c378 g     O .bss	00000c30 OSMemTbl
00817e98 g     O .bss	00000001 OSTickStepState
00805c30 g     F .text	00000070 _sbrk_r
008162a0 g     O .rwdata	00000002 OSQMax
0081cfa8 g     O .bss	00000800 OSTaskStatStk
0080bf9c g     F .text	0000010c OSMemNameGet
00816280 g     O .rwdata	00000002 OSFlagEn
00806f6c g     F .text	00000078 _read_r
008162c6 g     O .rwdata	00000002 OSTimeTickHookEn
0080d050 g     F .text	00000180 OSQPost
0080bbd0 g     F .text	000000ac OS_FlagUnlink
00816254 g     O .rwdata	00000004 alt_max_fd
00809a60 g     F .text	0000006c OS_MemCopy
00811fb8 g     F .text	00000060 alt_up_audio_write_fifo_head
00809acc g     F .text	000000d4 OS_Sched
008044c4 g     F .text	00000138 __unpack_d
00806cec g     F .text	00000110 _fclose_r
0080be98 g     F .text	00000104 OSMemGet
0080f3fc g     F .text	000001c4 OSTaskNameSet
00805fd8 g     F .text	00000034 fflush
00817e58 g     O .bss	00000004 __malloc_max_sbrked_mem
00817e9c g     O .bss	00000004 OSCtxSwCtr
00813b28 g     F .text	0000001c OSTimeTickHook
0081628a g     O .rwdata	00000002 OSFlagNameSize
0080953c g     F .text	00000104 OS_EventTaskRemoveMulti
008033a0 g     F .text	00000074 __adddf3
00809330 g     F .text	00000154 OS_EventTaskWaitMulti
008162a2 g     O .rwdata	00000002 OSQSize
00807778 g     F .text	000000f0 lseek
0080dc2c g     F .text	0000027c OSSemPend
00816230 g     O .rwdata	00000004 __fdlib_version
00816238 g     O .rwdata	00000004 _global_impure_ptr
0080563c g     F .text	000005f4 _realloc_r
0081628c g     O .rwdata	00000002 OSLowestPrio
0081f3bc g       *ABS*	00000000 __bss_end
00807474 g     F .text	000000f8 alt_iic_isr_register
00813b98 g     F .text	00000020 OSTCBInitHook
008162d2 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
008135a0 g     F .text	00000110 alt_tick
00816274 g     O .rwdata	00000002 OSEventEn
008162ce g     O .rwdata	00000002 OSTmrCfgNameSize
0081180c g     F .text	00000040 alt_up_audio_open_dev
00806140 g     F .text	00000018 __fp_lock_all
0080742c g     F .text	00000048 alt_ic_irq_enabled
0080b9dc g     F .text	000000e4 OS_FlagInit
00811c48 g     F .text	00000070 alt_up_audio_play_r
00813508 g     F .text	00000098 alt_alarm_stop
008162b0 g     O .rwdata	00000002 OSTaskIdleStkSize
00817e68 g     O .bss	00000004 alt_irq_active
0080d7b8 g     F .text	000000c0 OSSemAccept
0080c1c8 g     F .text	000000f0 OSMemPut
0080bc7c g     F .text	0000021c OSMemCreate
00817ea0 g     O .bss	00000004 OSIdleCtrMax
011040ec g     F .exceptions	000000d0 alt_irq_handler
00814f90 g     O .rwdata	00000028 alt_dev_null
008162c4 g     O .rwdata	00000002 OSTicksPerSec
0080245c g     F .text	00000210 rint
008040bc g     F .text	000000c8 __unpack_f
00812c9c g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
008136d0 g       .text	00000000 OSIntCtxSw
00812e24 g     F .text	00000044 alt_dcache_flush_all
008106a8 g     F .text	00000060 altera_avalon_fifo_write_ienable
00817ea4 g     O .bss	00000004 OSTCBFreeList
008162e8 g       *ABS*	00000000 __ram_rwdata_end
0080dea8 g     F .text	0000017c OSSemPendAbort
008105b0 g     F .text	0000002c altera_avalon_fifo_read_almostempty
0081624c g     O .rwdata	00000008 alt_dev_list
00807c2c g     F .text	00000120 write
008162c8 g     O .rwdata	00000002 OSVersionNbr
00814788 g       *ABS*	00000000 __ram_rodata_end
00800378 g     F .text	000000ec turnOnVoice
0080716c g     F .text	000000d4 fstat
00803c50 g     F .text	00000088 __ledf2
00816270 g     O .rwdata	00000004 OSEndiannessTest
00814348 g     F .text	00000008 __umodsi3
00816282 g     O .rwdata	00000002 OSFlagGrpSize
0081f3bc g       *ABS*	00000000 end
00803f5c g     F .text	00000160 __pack_f
00810af8 g     F .text	00000138 altera_avalon_jtag_uart_init
00809d44 g     F .text	000000c8 OS_TaskStat
008105dc g     F .text	0000003c altera_avalon_fifo_read_event
008143bc g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0081177c g     F .text	00000090 alt_avalon_timer_sc_init
00803edc g     F .text	00000080 __clzsi2
00811430 g     F .text	000002dc altera_avalon_jtag_uart_write
00806064 g     F .text	00000004 __sfp_lock_acquire
0081089c g     F .text	00000058 altera_avalon_fifo_read_fifo
008053d8 g     F .text	000000e4 memchr
00809a0c g     F .text	00000054 OS_MemClr
008128c4 g     F .text	00000078 alt_up_character_lcd_write
008137a0 g     F .text	00000310 OSTaskStkInit
008063f8 g     F .text	00000314 _free_r
0080908c g     F .text	00000194 OS_EventTaskRdy
00814054 g     F .text	000001b0 __call_exitprocs
00817ea8 g     O .bss	00000001 OSCPUUsage
00816240 g     O .rwdata	00000004 __malloc_sbrk_base
0080019c g     F .text	0000004c _start
00817ed8 g     O .bss	00000004 _alt_tick_rate
0080cbb4 g     F .text	00000320 OSQPend
0080fdc0 g     F .text	0000014c OSTimeDly
00811e2c g     F .text	0000012c alt_up_audio_write_fifo
0081207c g     F .text	00000064 alt_up_av_config_write_data
00817edc g     O .bss	00000004 _alt_nticks
00807990 g     F .text	00000120 read
0081038c g     F .text	0000008c alt_sys_init
00812b28 g     F .text	000000b0 alt_up_character_lcd_shift_display
00811d28 g     F .text	00000104 alt_up_audio_read_fifo
00813f1c g     F .text	00000134 __register_exitproc
00817ea9 g     O .bss	00000001 OSTaskCtr
0081273c g     F .text	00000064 alt_up_av_config_write_LTM_cfg_register
00811934 g     F .text	00000050 alt_up_audio_disable_write_interrupt
0080ff0c g     F .text	00000174 OSTimeDlyHMSM
00812bd8 g     F .text	00000090 alt_up_character_lcd_erase_pos
00800e18 g     F .text	00001300 __ieee754_pow
00817f08 g     O .bss	00002000 laserInputTaskStack
00811008 g     F .text	00000074 altera_avalon_jtag_uart_close
00800990 g     F .text	00000488 pow
00814788 g       *ABS*	00000000 __ram_rwdata_start
008143c0 g       *ABS*	00000000 __ram_rodata_start
00817ee0 g     O .bss	00000028 __malloc_current_mallinfo
00816276 g     O .rwdata	00000002 OSEventMax
0080e024 g     F .text	00000128 OSSemPost
00808c10 g     F .text	000000e4 OSSchedUnlock
008109b0 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00813cd8 g     F .text	000000f4 alt_get_fd
00817eac g     O .bss	00000004 OSMemFreeList
00808d64 g     F .text	000000ac OSStatInit
0080b744 g     F .text	000000d4 OSFlagQuery
008045fc g     F .text	000000c8 __fpcmp_parts_d
008162ac g     O .rwdata	00000002 OSTaskCreateExtEn
00806c7c g     F .text	00000070 _close_r
008118e8 g     F .text	0000004c alt_up_audio_enable_write_interrupt
00800334 g     F .text	00000044 endVoice
00813ea8 g     F .text	00000074 memcmp
00809070 g     F .text	0000001c OS_Dummy
00810a60 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0081f3bc g       *ABS*	00000000 __alt_stack_base
00810aa8 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00805ca0 g     F .text	0000013c __swsetup_r
0081d7a8 g     O .bss	000001e0 OSQTbl
0081050c g     F .text	0000003c altera_avalon_fifo_read_status
008037d8 g     F .text	00000258 __divdf3
00811898 g     F .text	00000050 alt_up_audio_disable_read_interrupt
008061dc g     F .text	000000f0 __sfp
00814b88 g     O .rwdata	00000408 __malloc_av_
00806070 g     F .text	00000004 __sinit_lock_release
00817eb0 g     O .bss	00000004 OSTCBHighRdy
00803414 g     F .text	000003c4 __muldf3
00806ba4 g     F .text	00000060 __sread
008144bc g     O .rodata	00000010 __thenan_sf
0081095c g     F .text	0000002c altera_avalon_fifo_read_other_info
00817eb4 g     O .bss	00000004 OSQFreeList
00813bb8 g     F .text	00000120 alt_find_file
00812e68 g     F .text	000000b4 alt_dev_llist_insert
00807eb4 g     F .text	00000108 __malloc_lock
00807b70 g     F .text	000000bc sbrk
008002e8 g     F .text	0000004c startVoice
008081bc g     F .text	00000144 OSEventNameSet
00805ddc g     F .text	000001fc _fflush_r
00817eb8 g     O .bss	00000001 OSRdyGrp
00817e48 g       *ABS*	00000000 __bss_start
00806a20 g     F .text	00000098 memset
00800810 g     F .text	000000e4 main
00811bd4 g     F .text	00000074 alt_up_audio_write_fifo_space
00817e74 g     O .bss	00000004 alt_envp
00817e5c g     O .bss	00000004 __malloc_max_total_mem
00810a08 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00810618 g     F .text	00000028 altera_avalon_fifo_read_level
00814608 g     O .rodata	00000100 OSUnMapTbl
008162a6 g     O .rwdata	00000002 OSSemEn
00812a78 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
0080b39c g     F .text	000003a8 OSFlagPost
00806ab8 g     F .text	00000008 __sclose
00802444 g     F .text	00000008 matherr
01000000 g       *ABS*	00000000 __alt_heap_limit
00806dfc g     F .text	00000014 fclose
00809220 g     F .text	00000110 OS_EventTaskWait
00803dd0 g     F .text	00000074 __truncdfsf2
00809e0c g     F .text	000000c8 OS_TaskStatStkChk
0081f22c g     O .bss	00000190 _atexit0
0080f0d4 g     F .text	00000170 OSTaskDelReq
00804c98 g     F .text	00000740 _malloc_r
00816258 g     O .rwdata	00000004 alt_errno
00808cf4 g     F .text	00000070 OSStart
00807e58 g     F .text	0000005c __env_unlock
008067d4 g     F .text	000000b8 _fwalk
0080f5c0 g     F .text	00000218 OSTaskResume
0080c2b8 g     F .text	000000fc OSMemQuery
008162b8 g     O .rwdata	00000002 OSTaskStatEn
00816292 g     O .rwdata	00000002 OSMemMax
0080d1d0 g     F .text	00000188 OSQPostFront
00814280 g     F .text	00000060 __divsi3
00817eb9 g     O .bss	00000003 OSRdyTbl
0081626c g     O .rwdata	00000002 OSDebugEn
008144cc g     O .rodata	00000014 __thenan_df
00812884 g     F .text	00000040 alt_up_character_lcd_open_dev
008062cc g     F .text	0000012c _malloc_trim_r
008143c0 g       *ABS*	00000000 __CTOR_END__
00802b28 g     F .text	000001e0 __mulsf3
008023f8 g     F .text	0000001c finite
00816284 g     O .rwdata	00000002 OSFlagNodeSize
008162cc g     O .rwdata	00000002 OSTmrCfgMax
00812850 g     F .text	00000034 alt_up_character_lcd_init
0080c5d8 g     F .text	00000214 OSQCreate
0080f244 g     F .text	000001b8 OSTaskNameGet
008143c0 g       *ABS*	00000000 __flash_rodata_start
0080d358 g     F .text	00000234 OSQPostOpt
00808e10 g     F .text	00000240 OSTimeTick
008162b4 g     O .rwdata	00000002 OSTaskMax
008143c0 g       *ABS*	00000000 __DTOR_LIST__
0080d878 g     F .text	00000114 OSSemCreate
008162d8 g     O .rwdata	00000002 OSTmrWheelSize
0080284c g     F .text	00000024 copysign
00803ab8 g     F .text	00000088 __nedf2
008162ae g     O .rwdata	00000002 OSTaskDelEn
01080000 g       *ABS*	00000000 __alt_mem_sram_0
00812018 g     F .text	00000064 alt_up_av_config_open_dev
0080e14c g     F .text	00000130 OSSemQuery
0080c7ec g     F .text	00000300 OSQDel
0080ced4 g     F .text	0000017c OSQPendAbort
00810358 g     F .text	00000034 alt_irq_init
00807b10 g     F .text	00000060 alt_release_fd
00812c68 g     F .text	00000034 alt_up_character_lcd_cursor_off
008144e0 g     O .rodata	00000100 __clz_tab
00813e5c g     F .text	00000014 atexit
008001e8 g     F .text	000000ac midiNote2midiFreq
0080076c g     F .text	00000064 laserInputTask
00806c04 g     F .text	00000078 _write_r
00812274 g     F .text	00000038 alt_up_av_config_read_ready
00808b84 g     F .text	0000008c OSSchedLock
0080a674 g     F .text	0000013c OSFlagCreate
00816234 g     O .rwdata	00000004 _impure_ptr
00817e6c g     O .bss	00000004 alt_argc
0080266c g     F .text	000001e0 scalbn
00812fe0 g     F .text	00000064 _do_dtors
0081627e g     O .rwdata	00000002 OSEventMultiEn
0080a7b0 g     F .text	000002a8 OSFlagDel
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00817ebc g     O .bss	00000004 OSEventFreeList
01104020 g       .exceptions	00000000 alt_irq_entry
0080acf0 g     F .text	00000644 OSFlagPend
008162ca g     O .rwdata	00000002 OSTmrEn
00806128 g     F .text	00000018 __fp_unlock_all
00816244 g     O .rwdata	00000008 alt_fs_list
00809c10 g     F .text	00000080 OS_StrCopy
00811b64 g     F .text	00000070 alt_up_audio_record_l
00816294 g     O .rwdata	00000002 OSMemNameSize
0080244c g     F .text	00000010 nan
00813b60 g     F .text	0000001c OSInitHookEnd
01104020 g       *ABS*	00000000 __ram_exceptions_start
008162c0 g     O .rwdata	00000002 OSTCBPrioTblMax
00802118 g     F .text	000002c8 __ieee754_sqrt
008162bc g     O .rwdata	00000002 OSTaskStatStkChkEn
008121a4 g     F .text	00000038 alt_up_av_config_enable_interrupt
008108f4 g     F .text	00000068 altera_avalon_fifo_write_other_info
008072a0 g     F .text	00000050 alt_ic_isr_register
00816290 g     O .rwdata	00000002 OSMemEn
0081629a g     O .rwdata	00000002 OSMutexEn
0081220c g     F .text	00000068 alt_up_av_config_read_acknowledge
008125ac g     F .text	00000064 alt_up_av_config_write_DC2_cfg_register
008162e8 g       *ABS*	00000000 _edata
0081f3bc g       *ABS*	00000000 _end
00817ec0 g     O .bss	00000001 OSIntNesting
011041bc g       *ABS*	00000000 __ram_exceptions_end
0081107c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00810080 g     F .text	00000210 OSTimeDlyResume
0080ab9c g     F .text	00000154 OSFlagNameSet
00811cb8 g     F .text	00000070 alt_up_audio_play_l
0080f7d8 g     F .text	000001fc OSTaskStkChk
0080738c g     F .text	000000a0 alt_ic_irq_disable
00816296 g     O .rwdata	00000002 OSMemSize
00806b28 g     F .text	0000007c __swrite
0081623c g     O .rwdata	00000004 __malloc_trim_threshold
008136b0 g     F .text	00000020 altera_nios2_qsys_irq_init
00817ec4 g     O .bss	00000004 OSTCBCur
00813e70 g     F .text	00000038 exit
00816298 g     O .rwdata	00000002 OSMemTblSize
0080670c g     F .text	000000c8 _fwalk_reent
008126d8 g     F .text	00000064 alt_up_av_config_read_LTM_cfg_register
008142e0 g     F .text	00000060 __modsi3
00810548 g     F .text	0000003c altera_avalon_fifo_read_ienable
01000000 g       *ABS*	00000000 __alt_data_end
01104020 g     F .exceptions	00000000 alt_exception
00806068 g     F .text	00000004 __sfp_lock_release
008089b4 g     F .text	00000054 OSInit
0080fc00 g     F .text	00000144 OSTaskQuery
0081293c g     F .text	00000078 alt_up_character_lcd_string
0080d70c g     F .text	000000ac OS_QInit
00809c90 g     F .text	00000058 OS_StrLen
0080c0a8 g     F .text	00000120 OSMemNameSet
008162b2 g     O .rwdata	00000002 OSTaskProfileEn
00817ec8 g     O .bss	00000004 OSTime
0081d988 g     O .bss	00000800 OSTaskIdleStk
00814390 g     F .text	0000002c _exit
00802414 g     F .text	00000030 __isnand
00819f08 g     O .bss	00002000 audioTaskStack
00812cd0 g     F .text	00000154 alt_alarm_start
0080aa58 g     F .text	00000144 OSFlagNameGet
00810290 g     F .text	00000064 OSTimeGet
00803e44 g     F .text	00000098 __muldi3
00810584 g     F .text	0000002c altera_avalon_fifo_read_almostfull
0080688c g     F .text	00000194 __smakebuf_r
00804788 g     F .text	00000074 strlen
00813af0 g     F .text	0000001c OSTaskSwHook
00813320 g     F .text	00000188 open
0081e188 g     O .bss	00000b40 OSEventTbl
0081082c g     F .text	00000070 altera_avalon_read_fifo
0081ecc8 g     O .bss	00000510 OSTCBTbl
0080e27c g     F .text	00000104 OSSemSet
00812358 g     F .text	000000f8 alt_up_av_config_read_video_cfg_register
008130d8 g     F .text	00000030 alt_icache_flush_all
00812a00 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
0081625c g     O .rwdata	00000004 alt_priority_mask
00800294 g     F .text	00000054 midiFreq2sampleFreq
0080d98c g     F .text	000002a0 OSSemDel
00817ecc g     O .bss	00000004 OSFlagFreeList
008072f0 g     F .text	0000009c alt_ic_irq_enable
00816278 g     O .rwdata	00000002 OSEventNameSize
00817ed0 g     O .bss	00000001 OSStatRdy
00812674 g     F .text	00000064 alt_up_av_config_write_D5M_cfg_register
0081f1d8 g     O .bss	00000054 OSTCBPrioTbl
00807dac g     F .text	000000ac __env_lock
008162be g     O .rwdata	00000002 OSTaskSwHookEn
00803320 g     F .text	00000080 __subdf3
00810768 g     F .text	00000060 altera_avalon_fifo_write_almostempty
008162e0 g     O .rwdata	00000008 alt_alarm_list
00816286 g     O .rwdata	00000002 OSFlagWidth
00812f7c g     F .text	00000064 _do_ctors
00806fe4 g     F .text	000000fc close
00802ac4 g     F .text	00000064 __addsf3
00817e7c g     O .bss	00000004 alt_envsem
00817ed4 g     O .bss	00000004 OSIdleCtrRun
00809050 g     F .text	00000020 OSVersion
008162d0 g     O .rwdata	00000002 OSTmrCfgWheelSize
0080768c g     F .text	00000080 alt_load
0081184c g     F .text	0000004c alt_up_audio_enable_read_interrupt
0080fd44 g     F .text	0000007c OS_TaskStkClr
00812450 g     F .text	000000f8 alt_up_av_config_write_video_cfg_register
008041b0 g     F .text	00000314 __pack_d
008162aa g     O .rwdata	00000002 OSTaskCreateEn
00809640 g     F .text	00000068 OS_EventWaitListInit
00813b7c g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
0080606c g     F .text	00000004 __sinit_lock_acquire
0080f9d4 g     F .text	0000022c OSTaskSuspend
00812548 g     F .text	00000064 alt_up_av_config_read_DC2_cfg_register
00809ce8 g     F .text	0000005c OS_TaskIdle
008162d6 g     O .rwdata	00000002 OSTmrTblSize
00811984 g     F .text	0000003c alt_up_audio_read_interrupt_pending
0080d58c g     F .text	00000180 OSQQuery



Disassembly of section .entry:

01104000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1104000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1104004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1104008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 110400c:	00bffd16 	blt	zero,r2,1104004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1104010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
 1104014:	08406714 	ori	at,at,412
    jmp r1
 1104018:	0800683a 	jmp	at
 110401c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>

Disassembly of section .exceptions:

01104020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1104020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1104024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1104028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 110402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1104030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1104034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1104038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 110403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1104040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1104044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1104048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 110404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1104050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1104054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1104058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 110405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1104060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1104064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1104068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 110406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1104070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1104074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1104078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 110407c:	10000326 	beq	r2,zero,110408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1104080:	20000226 	beq	r4,zero,110408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1104084:	11040ec0 	call	11040ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1104088:	00000306 	br	1104098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 110408c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1104090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1104094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1104098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 110409c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 11040a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 11040a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 11040a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 11040ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 11040b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 11040b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 11040b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 11040bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 11040c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 11040c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 11040c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 11040cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 11040d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 11040d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 11040d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 11040dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 11040e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 11040e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 11040e8:	ef80083a 	eret

011040ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 11040ec:	defff904 	addi	sp,sp,-28
 11040f0:	dfc00615 	stw	ra,24(sp)
 11040f4:	df000515 	stw	fp,20(sp)
 11040f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 11040fc:	0808a080 	call	808a08 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1104100:	0005313a 	rdctl	r2,ipending
 1104104:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1104108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 110410c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 1104110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1104114:	00800044 	movi	r2,1
 1104118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 110411c:	e0ffff17 	ldw	r3,-4(fp)
 1104120:	e0bffe17 	ldw	r2,-8(fp)
 1104124:	1884703a 	and	r2,r3,r2
 1104128:	1005003a 	cmpeq	r2,r2,zero
 110412c:	1000161e 	bne	r2,zero,1104188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 1104130:	e0bffd17 	ldw	r2,-12(fp)
 1104134:	00c020b4 	movhi	r3,130
 1104138:	18efc204 	addi	r3,r3,-16632
 110413c:	100490fa 	slli	r2,r2,3
 1104140:	10c5883a 	add	r2,r2,r3
 1104144:	11400017 	ldw	r5,0(r2)
 1104148:	e0bffd17 	ldw	r2,-12(fp)
 110414c:	00c020b4 	movhi	r3,130
 1104150:	18efc204 	addi	r3,r3,-16632
 1104154:	100490fa 	slli	r2,r2,3
 1104158:	10c5883a 	add	r2,r2,r3
 110415c:	10800104 	addi	r2,r2,4
 1104160:	11000017 	ldw	r4,0(r2)
 1104164:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1104168:	0005313a 	rdctl	r2,ipending
 110416c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 1104170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1104174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1104178:	e0bfff17 	ldw	r2,-4(fp)
 110417c:	1004c03a 	cmpne	r2,r2,zero
 1104180:	103fe31e 	bne	r2,zero,1104110 <alt_irq_handler+0x24>
 1104184:	00000706 	br	11041a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1104188:	e0bffe17 	ldw	r2,-8(fp)
 110418c:	1085883a 	add	r2,r2,r2
 1104190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1104194:	e0bffd17 	ldw	r2,-12(fp)
 1104198:	10800044 	addi	r2,r2,1
 110419c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 11041a0:	003fde06 	br	110411c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 11041a4:	0808a840 	call	808a84 <OSIntExit>
}
 11041a8:	e037883a 	mov	sp,fp
 11041ac:	dfc00117 	ldw	ra,4(sp)
 11041b0:	df000017 	ldw	fp,0(sp)
 11041b4:	dec00204 	addi	sp,sp,8
 11041b8:	f800283a 	ret

Disassembly of section .text:

0080019c <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  80019c:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  8001a0:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001a4:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001a8:	00bffd16 	blt	zero,r2,8001a0 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001ac:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001b0:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001b4:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001b8:	d6b88c14 	ori	gp,gp,57904
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001bc:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001c0:	109f9214 	ori	r2,r2,32328

    movhi r3, %hi(__bss_end)
  8001c4:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001c8:	18fcef14 	ori	r3,r3,62396

    beq r2, r3, 1f
  8001cc:	10c00326 	beq	r2,r3,8001dc <_start+0x40>

0:
    stw zero, (r2)
  8001d0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001d4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001d8:	10fffd36 	bltu	r2,r3,8001d0 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001dc:	080768c0 	call	80768c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001e0:	08078c80 	call	8078c8 <alt_main>

008001e4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001e4:	003fff06 	br	8001e4 <alt_after_alt_main>

008001e8 <midiNote2midiFreq>:
static struct voice VOICE_TABLE[TOTAL_VOICES];

/**
 * This will calculate the frequency of the midi note
 */
float midiNote2midiFreq(double midiNote) {
  8001e8:	defffc04 	addi	sp,sp,-16
  8001ec:	dfc00315 	stw	ra,12(sp)
  8001f0:	df000215 	stw	fp,8(sp)
  8001f4:	df000204 	addi	fp,sp,8
  8001f8:	e13ffe15 	stw	r4,-8(fp)
  8001fc:	e17fff15 	stw	r5,-4(fp)
	return (FREQ_BASE * pow(2, (midiNote / 12)));
  800200:	e13ffe17 	ldw	r4,-8(fp)
  800204:	e17fff17 	ldw	r5,-4(fp)
  800208:	000d883a 	mov	r6,zero
  80020c:	01d00a34 	movhi	r7,16424
  800210:	08037d80 	call	8037d8 <__divdf3>
  800214:	1009883a 	mov	r4,r2
  800218:	180b883a 	mov	r5,r3
  80021c:	2005883a 	mov	r2,r4
  800220:	2807883a 	mov	r3,r5
  800224:	0009883a 	mov	r4,zero
  800228:	01500034 	movhi	r5,16384
  80022c:	100d883a 	mov	r6,r2
  800230:	180f883a 	mov	r7,r3
  800234:	08009900 	call	800990 <pow>
  800238:	1009883a 	mov	r4,r2
  80023c:	180b883a 	mov	r5,r3
  800240:	2005883a 	mov	r2,r4
  800244:	2807883a 	mov	r3,r5
  800248:	1009883a 	mov	r4,r2
  80024c:	180b883a 	mov	r5,r3
  800250:	019430b4 	movhi	r6,20674
  800254:	31964e44 	addi	r6,r6,22841
  800258:	01d00834 	movhi	r7,16416
  80025c:	39d68084 	addi	r7,r7,23042
  800260:	08034140 	call	803414 <__muldf3>
  800264:	1009883a 	mov	r4,r2
  800268:	180b883a 	mov	r5,r3
  80026c:	2005883a 	mov	r2,r4
  800270:	2807883a 	mov	r3,r5
  800274:	1009883a 	mov	r4,r2
  800278:	180b883a 	mov	r5,r3
  80027c:	0803dd00 	call	803dd0 <__truncdfsf2>
}
  800280:	e037883a 	mov	sp,fp
  800284:	dfc00117 	ldw	ra,4(sp)
  800288:	df000017 	ldw	fp,0(sp)
  80028c:	dec00204 	addi	sp,sp,8
  800290:	f800283a 	ret

00800294 <midiFreq2sampleFreq>:

/**
 * This will calculate the sampling frequency used to sample the SINE LUT
 */
float midiFreq2sampleFreq(float midiFreq) {
  800294:	defffc04 	addi	sp,sp,-16
  800298:	dfc00315 	stw	ra,12(sp)
  80029c:	df000215 	stw	fp,8(sp)
  8002a0:	df000204 	addi	fp,sp,8
  8002a4:	e13fff15 	stw	r4,-4(fp)

	float sampleFreq = (midiFreq / SAMPLE_RATE) * NUMBER_OF_POINTS_IN_WAVE_LUT * BITSHIFT_COMPENSATION;
  8002a8:	e13fff17 	ldw	r4,-4(fp)
  8002ac:	0151beb4 	movhi	r5,18170
  8002b0:	0802d080 	call	802d08 <__divsf3>
  8002b4:	1009883a 	mov	r4,r2
  8002b8:	01516034 	movhi	r5,17792
  8002bc:	0802b280 	call	802b28 <__mulsf3>
  8002c0:	1009883a 	mov	r4,r2
  8002c4:	01506034 	movhi	r5,16768
  8002c8:	0802b280 	call	802b28 <__mulsf3>
  8002cc:	e0bffe15 	stw	r2,-8(fp)

	return sampleFreq;
  8002d0:	e0bffe17 	ldw	r2,-8(fp)

}
  8002d4:	e037883a 	mov	sp,fp
  8002d8:	dfc00117 	ldw	ra,4(sp)
  8002dc:	df000017 	ldw	fp,0(sp)
  8002e0:	dec00204 	addi	sp,sp,8
  8002e4:	f800283a 	ret

008002e8 <startVoice>:

/**Tested!*/
void startVoice(int voiceNum, int sampleRate){
  8002e8:	defffc04 	addi	sp,sp,-16
  8002ec:	df000315 	stw	fp,12(sp)
  8002f0:	df000304 	addi	fp,sp,12
  8002f4:	e13ffe15 	stw	r4,-8(fp)
  8002f8:	e17fff15 	stw	r5,-4(fp)
	int * voiceAddr;
	switch (voiceNum) {
  8002fc:	e0bffe17 	ldw	r2,-8(fp)
  800300:	1005003a 	cmpeq	r2,r2,zero
  800304:	1000011e 	bne	r2,zero,80030c <startVoice+0x24>
  800308:	00000306 	br	800318 <startVoice+0x30>
	case 0:
		voiceAddr = SYNTHESIZER_0_BASE;
  80030c:	00804474 	movhi	r2,273
  800310:	10a42f04 	addi	r2,r2,-28484
  800314:	e0bffd15 	stw	r2,-12(fp)
		break;
	default:
		//return;
		break;
	}
	*voiceAddr = sampleRate;
  800318:	e0fffd17 	ldw	r3,-12(fp)
  80031c:	e0bfff17 	ldw	r2,-4(fp)
  800320:	18800015 	stw	r2,0(r3)

}
  800324:	e037883a 	mov	sp,fp
  800328:	df000017 	ldw	fp,0(sp)
  80032c:	dec00104 	addi	sp,sp,4
  800330:	f800283a 	ret

00800334 <endVoice>:


/**Tested!*/
void endVoice(int voiceNum){
  800334:	defffd04 	addi	sp,sp,-12
  800338:	df000215 	stw	fp,8(sp)
  80033c:	df000204 	addi	fp,sp,8
  800340:	e13fff15 	stw	r4,-4(fp)
	int * voiceAddr;
	switch (voiceNum) {
  800344:	e0bfff17 	ldw	r2,-4(fp)
  800348:	1005003a 	cmpeq	r2,r2,zero
  80034c:	1000011e 	bne	r2,zero,800354 <endVoice+0x20>
  800350:	00000306 	br	800360 <endVoice+0x2c>
	case 0:
		voiceAddr = SYNTHESIZER_0_BASE;
  800354:	00804474 	movhi	r2,273
  800358:	10a42f04 	addi	r2,r2,-28484
  80035c:	e0bffe15 	stw	r2,-8(fp)
		break;
	default:
		//return;
		break;
	}
	*voiceAddr = 0;
  800360:	e0bffe17 	ldw	r2,-8(fp)
  800364:	10000015 	stw	zero,0(r2)

}
  800368:	e037883a 	mov	sp,fp
  80036c:	df000017 	ldw	fp,0(sp)
  800370:	dec00104 	addi	sp,sp,4
  800374:	f800283a 	ret

00800378 <turnOnVoice>:
 * If it finds an unused (off) note, it will use that voice
 * If all the voices are used, it does nothing
 *
 * it returns the index
 */
void turnOnVoice(int noteNum) {
  800378:	defffa04 	addi	sp,sp,-24
  80037c:	dfc00515 	stw	ra,20(sp)
  800380:	df000415 	stw	fp,16(sp)
  800384:	df000404 	addi	fp,sp,16
  800388:	e13fff15 	stw	r4,-4(fp)

	int index = 0;
  80038c:	e03ffe15 	stw	zero,-8(fp)
	float midiFreq= 0;
  800390:	e03ffd15 	stw	zero,-12(fp)
	float sampleFreq = 0;
  800394:	e03ffc15 	stw	zero,-16(fp)

	for (index = 0; index < TOTAL_VOICES; index++) {
  800398:	e03ffe15 	stw	zero,-8(fp)
  80039c:	00002906 	br	800444 <turnOnVoice+0xcc>
		if (NOTE_OFF == VOICE_TABLE[index].status) {
  8003a0:	e0bffe17 	ldw	r2,-8(fp)
  8003a4:	100690fa 	slli	r3,r2,3
  8003a8:	d0a70604 	addi	r2,gp,-25576
  8003ac:	1885883a 	add	r2,r3,r2
  8003b0:	10800017 	ldw	r2,0(r2)
  8003b4:	1004c03a 	cmpne	r2,r2,zero
  8003b8:	10001f1e 	bne	r2,zero,800438 <turnOnVoice+0xc0>
			VOICE_TABLE[index].note = noteNum;
  8003bc:	e0bffe17 	ldw	r2,-8(fp)
  8003c0:	100690fa 	slli	r3,r2,3
  8003c4:	00802074 	movhi	r2,129
  8003c8:	109f9304 	addi	r2,r2,32332
  8003cc:	1887883a 	add	r3,r3,r2
  8003d0:	e0bfff17 	ldw	r2,-4(fp)
  8003d4:	18800015 	stw	r2,0(r3)
			VOICE_TABLE[index].status = NOTE_ON;
  8003d8:	e0bffe17 	ldw	r2,-8(fp)
  8003dc:	100690fa 	slli	r3,r2,3
  8003e0:	d0a70604 	addi	r2,gp,-25576
  8003e4:	1887883a 	add	r3,r3,r2
  8003e8:	00800044 	movi	r2,1
  8003ec:	18800015 	stw	r2,0(r3)


			midiFreq = midiNote2midiFreq(noteNum);
  8003f0:	e13fff17 	ldw	r4,-4(fp)
  8003f4:	0803cd80 	call	803cd8 <__floatsidf>
  8003f8:	100b883a 	mov	r5,r2
  8003fc:	180d883a 	mov	r6,r3
  800400:	2809883a 	mov	r4,r5
  800404:	300b883a 	mov	r5,r6
  800408:	08001e80 	call	8001e8 <midiNote2midiFreq>
  80040c:	e0bffd15 	stw	r2,-12(fp)
			sampleFreq = midiFreq2sampleFreq(midiFreq);
  800410:	e13ffd17 	ldw	r4,-12(fp)
  800414:	08002940 	call	800294 <midiFreq2sampleFreq>
  800418:	e0bffc15 	stw	r2,-16(fp)
			startVoice(index, (int) roundf(sampleFreq));
  80041c:	e13ffc17 	ldw	r4,-16(fp)
  800420:	08008f40 	call	8008f4 <roundf>
  800424:	1009883a 	mov	r4,r2
  800428:	0802e7c0 	call	802e7c <__fixsfsi>
  80042c:	100b883a 	mov	r5,r2
  800430:	e13ffe17 	ldw	r4,-8(fp)
  800434:	08002e80 	call	8002e8 <startVoice>

	int index = 0;
	float midiFreq= 0;
	float sampleFreq = 0;

	for (index = 0; index < TOTAL_VOICES; index++) {
  800438:	e0bffe17 	ldw	r2,-8(fp)
  80043c:	10800044 	addi	r2,r2,1
  800440:	e0bffe15 	stw	r2,-8(fp)
  800444:	e0bffe17 	ldw	r2,-8(fp)
  800448:	10800050 	cmplti	r2,r2,1
  80044c:	103fd41e 	bne	r2,zero,8003a0 <turnOnVoice+0x28>
			sampleFreq = midiFreq2sampleFreq(midiFreq);
			startVoice(index, (int) roundf(sampleFreq));
		}
	}

}
  800450:	e037883a 	mov	sp,fp
  800454:	dfc00117 	ldw	ra,4(sp)
  800458:	df000017 	ldw	fp,0(sp)
  80045c:	dec00204 	addi	sp,sp,8
  800460:	f800283a 	ret

00800464 <turnOffVoice>:
/**
 * This Iterate through the voice/note table and look for a note to turn off
 * If it finds a specific note, it will reset the note to an off state
 * If it doesn't find it, it does nothing
 */
void turnOffVoice(int noteNum) {
  800464:	defffc04 	addi	sp,sp,-16
  800468:	dfc00315 	stw	ra,12(sp)
  80046c:	df000215 	stw	fp,8(sp)
  800470:	df000204 	addi	fp,sp,8
  800474:	e13fff15 	stw	r4,-4(fp)

	int index = 0;
  800478:	e03ffe15 	stw	zero,-8(fp)

	for (index = 0; index < TOTAL_VOICES; index++) {
  80047c:	e03ffe15 	stw	zero,-8(fp)
  800480:	00001806 	br	8004e4 <turnOffVoice+0x80>
		if (noteNum == VOICE_TABLE[index].note) {
  800484:	e0bffe17 	ldw	r2,-8(fp)
  800488:	100690fa 	slli	r3,r2,3
  80048c:	00802074 	movhi	r2,129
  800490:	109f9304 	addi	r2,r2,32332
  800494:	1885883a 	add	r2,r3,r2
  800498:	10c00017 	ldw	r3,0(r2)
  80049c:	e0bfff17 	ldw	r2,-4(fp)
  8004a0:	18800d1e 	bne	r3,r2,8004d8 <turnOffVoice+0x74>
			VOICE_TABLE[index].note = EMPTY_NOTE;
  8004a4:	e0bffe17 	ldw	r2,-8(fp)
  8004a8:	100690fa 	slli	r3,r2,3
  8004ac:	00802074 	movhi	r2,129
  8004b0:	109f9304 	addi	r2,r2,32332
  8004b4:	1885883a 	add	r2,r3,r2
  8004b8:	10000015 	stw	zero,0(r2)
			VOICE_TABLE[index].status = NOTE_OFF;
  8004bc:	e0bffe17 	ldw	r2,-8(fp)
  8004c0:	100690fa 	slli	r3,r2,3
  8004c4:	d0a70604 	addi	r2,gp,-25576
  8004c8:	1885883a 	add	r2,r3,r2
  8004cc:	10000015 	stw	zero,0(r2)
			endVoice(index);
  8004d0:	e13ffe17 	ldw	r4,-8(fp)
  8004d4:	08003340 	call	800334 <endVoice>
 */
void turnOffVoice(int noteNum) {

	int index = 0;

	for (index = 0; index < TOTAL_VOICES; index++) {
  8004d8:	e0bffe17 	ldw	r2,-8(fp)
  8004dc:	10800044 	addi	r2,r2,1
  8004e0:	e0bffe15 	stw	r2,-8(fp)
  8004e4:	e0bffe17 	ldw	r2,-8(fp)
  8004e8:	10800050 	cmplti	r2,r2,1
  8004ec:	103fe51e 	bne	r2,zero,800484 <turnOffVoice+0x20>
			VOICE_TABLE[index].note = EMPTY_NOTE;
			VOICE_TABLE[index].status = NOTE_OFF;
			endVoice(index);
		}
	}
}
  8004f0:	e037883a 	mov	sp,fp
  8004f4:	dfc00117 	ldw	ra,4(sp)
  8004f8:	df000017 	ldw	fp,0(sp)
  8004fc:	dec00204 	addi	sp,sp,8
  800500:	f800283a 	ret

00800504 <processNote>:
/*This is the API for the midiDriver*
 * It requires the status of the note
 * the pitch (midi note numbeR)
 * and the velocity (velocity of 0 will result in note off
 */
void processNote(int noteStatus, int pitch, int velocity) {
  800504:	defff804 	addi	sp,sp,-32
  800508:	dfc00715 	stw	ra,28(sp)
  80050c:	df000615 	stw	fp,24(sp)
  800510:	df000604 	addi	fp,sp,24
  800514:	e13ffd15 	stw	r4,-12(fp)
  800518:	e17ffe15 	stw	r5,-8(fp)
  80051c:	e1bfff15 	stw	r6,-4(fp)

	float midiFreq = 0;
  800520:	e03ffc15 	stw	zero,-16(fp)
	float sampleFreq = 0;
  800524:	e03ffb15 	stw	zero,-20(fp)
	int voiceNumber = 0;
  800528:	e03ffa15 	stw	zero,-24(fp)


	if (velocity != 0) {
  80052c:	e0bfff17 	ldw	r2,-4(fp)
  800530:	1005003a 	cmpeq	r2,r2,zero
  800534:	10000e1e 	bne	r2,zero,800570 <processNote+0x6c>
		midiFreq = midiNote2midiFreq(pitch);
  800538:	e13ffe17 	ldw	r4,-8(fp)
  80053c:	0803cd80 	call	803cd8 <__floatsidf>
  800540:	100b883a 	mov	r5,r2
  800544:	180d883a 	mov	r6,r3
  800548:	2809883a 	mov	r4,r5
  80054c:	300b883a 	mov	r5,r6
  800550:	08001e80 	call	8001e8 <midiNote2midiFreq>
  800554:	e0bffc15 	stw	r2,-16(fp)
		sampleFreq = midiFreq2sampleFreq(midiFreq);
  800558:	e13ffc17 	ldw	r4,-16(fp)
  80055c:	08002940 	call	800294 <midiFreq2sampleFreq>
  800560:	e0bffb15 	stw	r2,-20(fp)
		turnOnVoice(pitch);
  800564:	e13ffe17 	ldw	r4,-8(fp)
  800568:	08003780 	call	800378 <turnOnVoice>
  80056c:	00000206 	br	800578 <processNote+0x74>
	} else {
		turnOffVoice(pitch);
  800570:	e13ffe17 	ldw	r4,-8(fp)
  800574:	08004640 	call	800464 <turnOffVoice>
	}

}
  800578:	e037883a 	mov	sp,fp
  80057c:	dfc00117 	ldw	ra,4(sp)
  800580:	df000017 	ldw	fp,0(sp)
  800584:	dec00204 	addi	sp,sp,8
  800588:	f800283a 	ret

0080058c <audioTask>:

OS_EVENT * laserStatusChanged;


void audioTask(void* pdata)
{
  80058c:	deff7604 	addi	sp,sp,-552
  800590:	dfc08915 	stw	ra,548(sp)
  800594:	df008815 	stw	fp,544(sp)
  800598:	dc008715 	stw	r16,540(sp)
  80059c:	df008704 	addi	fp,sp,540
  8005a0:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
    alt_up_audio_dev * audio_dev;
    alt_up_av_config_dev * audio_config_dev;

    unsigned int buffer[BUFFER_SIZE];
    int i = 0;
  8005a4:	e03f7b15 	stw	zero,-532(fp)

    audio_config_dev = alt_up_av_config_open_dev("/dev/audio_and_video_config_0");
  8005a8:	01002074 	movhi	r4,129
  8005ac:	2110f004 	addi	r4,r4,17344
  8005b0:	08120180 	call	812018 <alt_up_av_config_open_dev>
  8005b4:	e0bf7c15 	stw	r2,-528(fp)
    if ( audio_config_dev == NULL)
  8005b8:	e0bf7c17 	ldw	r2,-528(fp)
  8005bc:	1004c03a 	cmpne	r2,r2,zero
  8005c0:	1000041e 	bne	r2,zero,8005d4 <audioTask+0x48>
        printf("Error: could not open audio config device \n");
  8005c4:	01002074 	movhi	r4,129
  8005c8:	2110f804 	addi	r4,r4,17376
  8005cc:	08047740 	call	804774 <puts>
  8005d0:	00000306 	br	8005e0 <audioTask+0x54>
    else
        printf("Opened audio config device \n");
  8005d4:	01002074 	movhi	r4,129
  8005d8:	21110304 	addi	r4,r4,17420
  8005dc:	08047740 	call	804774 <puts>

    /* Open Devices */
    audio_dev = alt_up_audio_open_dev ("/dev/audio_0");
  8005e0:	01002074 	movhi	r4,129
  8005e4:	21110a04 	addi	r4,r4,17448
  8005e8:	081180c0 	call	81180c <alt_up_audio_open_dev>
  8005ec:	e0bf7d15 	stw	r2,-524(fp)
    if ( audio_dev == NULL)
  8005f0:	e0bf7d17 	ldw	r2,-524(fp)
  8005f4:	1004c03a 	cmpne	r2,r2,zero
  8005f8:	1000041e 	bne	r2,zero,80060c <audioTask+0x80>
        printf("Error: could not open audio device \n");
  8005fc:	01002074 	movhi	r4,129
  800600:	21110e04 	addi	r4,r4,17464
  800604:	08047740 	call	804774 <puts>
  800608:	00000306 	br	800618 <audioTask+0x8c>
    else
        printf("Opened audio device \n");
  80060c:	01002074 	movhi	r4,129
  800610:	21111704 	addi	r4,r4,17500
  800614:	08047740 	call	804774 <puts>

    /* Configure WM8731 */
    alt_up_av_config_reset(audio_config_dev);
  800618:	e13f7c17 	ldw	r4,-528(fp)
  80061c:	081216c0 	call	81216c <alt_up_av_config_reset>
    alt_up_audio_reset_audio_core(audio_dev);
  800620:	e13f7d17 	ldw	r4,-524(fp)
  800624:	08119fc0 	call	8119fc <alt_up_audio_reset_audio_core>

    /* Write to configuration registers in the audio codec; see datasheet for what these values mean */
    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x0, 0x17);
  800628:	e13f7c17 	ldw	r4,-528(fp)
  80062c:	000b883a 	mov	r5,zero
  800630:	018005c4 	movi	r6,23
  800634:	08122ac0 	call	8122ac <alt_up_av_config_write_audio_cfg_register>
    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x1, 0x17);
  800638:	e13f7c17 	ldw	r4,-528(fp)
  80063c:	01400044 	movi	r5,1
  800640:	018005c4 	movi	r6,23
  800644:	08122ac0 	call	8122ac <alt_up_av_config_write_audio_cfg_register>
    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x2, 0x50);
  800648:	e13f7c17 	ldw	r4,-528(fp)
  80064c:	01400084 	movi	r5,2
  800650:	01801404 	movi	r6,80
  800654:	08122ac0 	call	8122ac <alt_up_av_config_write_audio_cfg_register>
    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x3, 0x50);
  800658:	e13f7c17 	ldw	r4,-528(fp)
  80065c:	014000c4 	movi	r5,3
  800660:	01801404 	movi	r6,80
  800664:	08122ac0 	call	8122ac <alt_up_av_config_write_audio_cfg_register>
    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x4, 0x15);
  800668:	e13f7c17 	ldw	r4,-528(fp)
  80066c:	01400104 	movi	r5,4
  800670:	01800544 	movi	r6,21
  800674:	08122ac0 	call	8122ac <alt_up_av_config_write_audio_cfg_register>
    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x5, 0x06);
  800678:	e13f7c17 	ldw	r4,-528(fp)
  80067c:	01400144 	movi	r5,5
  800680:	01800184 	movi	r6,6
  800684:	08122ac0 	call	8122ac <alt_up_av_config_write_audio_cfg_register>
    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x6, 0x00);
  800688:	e13f7c17 	ldw	r4,-528(fp)
  80068c:	01400184 	movi	r5,6
  800690:	000d883a 	mov	r6,zero
  800694:	08122ac0 	call	8122ac <alt_up_av_config_write_audio_cfg_register>

	altera_avalon_fifo_init(FIFO_0_OUT_CSR_BASE, 0x0, 10, FIFO_0_OUT_CSR_FIFO_DEPTH-10);
  800698:	01004474 	movhi	r4,273
  80069c:	21240804 	addi	r4,r4,-28640
  8006a0:	000b883a 	mov	r5,zero
  8006a4:	01800284 	movi	r6,10
  8006a8:	01c01d84 	movi	r7,118
  8006ac:	08104500 	call	810450 <altera_avalon_fifo_init>

	unsigned int data;
	unsigned int level;
	altera_avalon_fifo_read_fifo(FIFO_0_OUT_BASE, FIFO_0_OUT_CSR_BASE);
  8006b0:	01004474 	movhi	r4,273
  8006b4:	21242804 	addi	r4,r4,-28512
  8006b8:	01404474 	movhi	r5,273
  8006bc:	29640804 	addi	r5,r5,-28640
  8006c0:	081089c0 	call	81089c <altera_avalon_fifo_read_fifo>
	while (1){
		level = altera_avalon_fifo_read_level(FIFO_0_OUT_CSR_BASE);
  8006c4:	01004474 	movhi	r4,273
  8006c8:	21240804 	addi	r4,r4,-28640
  8006cc:	08106180 	call	810618 <altera_avalon_fifo_read_level>
  8006d0:	e0bf7915 	stw	r2,-540(fp)
		if (level>0){
  8006d4:	e0bf7917 	ldw	r2,-540(fp)
  8006d8:	1005003a 	cmpeq	r2,r2,zero
  8006dc:	1000181e 	bne	r2,zero,800740 <audioTask+0x1b4>
			for (i=0;i<level;i++){
  8006e0:	e03f7b15 	stw	zero,-532(fp)
  8006e4:	00001306 	br	800734 <audioTask+0x1a8>
				buffer[i]=altera_avalon_fifo_read_fifo(FIFO_0_OUT_BASE, FIFO_0_OUT_CSR_BASE)>>16 + 0x7fff;
  8006e8:	e43f7b17 	ldw	r16,-532(fp)
  8006ec:	01004474 	movhi	r4,273
  8006f0:	21242804 	addi	r4,r4,-28512
  8006f4:	01404474 	movhi	r5,273
  8006f8:	29640804 	addi	r5,r5,-28640
  8006fc:	081089c0 	call	81089c <altera_avalon_fifo_read_fifo>
  800700:	1007883a 	mov	r3,r2
  800704:	00a003d4 	movui	r2,32783
  800708:	1885d83a 	sra	r2,r3,r2
  80070c:	1007883a 	mov	r3,r2
  800710:	8405883a 	add	r2,r16,r16
  800714:	1085883a 	add	r2,r2,r2
  800718:	e13f7904 	addi	r4,fp,-540
  80071c:	1105883a 	add	r2,r2,r4
  800720:	10800604 	addi	r2,r2,24
  800724:	10c00015 	stw	r3,0(r2)
	unsigned int level;
	altera_avalon_fifo_read_fifo(FIFO_0_OUT_BASE, FIFO_0_OUT_CSR_BASE);
	while (1){
		level = altera_avalon_fifo_read_level(FIFO_0_OUT_CSR_BASE);
		if (level>0){
			for (i=0;i<level;i++){
  800728:	e0bf7b17 	ldw	r2,-532(fp)
  80072c:	10800044 	addi	r2,r2,1
  800730:	e0bf7b15 	stw	r2,-532(fp)
  800734:	e0ff7b17 	ldw	r3,-532(fp)
  800738:	e0bf7917 	ldw	r2,-540(fp)
  80073c:	18bfea36 	bltu	r3,r2,8006e8 <audioTask+0x15c>
				buffer[i]=altera_avalon_fifo_read_fifo(FIFO_0_OUT_BASE, FIFO_0_OUT_CSR_BASE)>>16 + 0x7fff;
			}
		}


        alt_up_audio_write_fifo (audio_dev, buffer, level, ALT_UP_AUDIO_RIGHT);
  800740:	e1bf7917 	ldw	r6,-540(fp)
  800744:	e17f7f04 	addi	r5,fp,-516
  800748:	e13f7d17 	ldw	r4,-524(fp)
  80074c:	01c00044 	movi	r7,1
  800750:	0811e2c0 	call	811e2c <alt_up_audio_write_fifo>
        alt_up_audio_write_fifo (audio_dev, buffer, level, ALT_UP_AUDIO_LEFT);
  800754:	e1bf7917 	ldw	r6,-540(fp)
  800758:	e17f7f04 	addi	r5,fp,-516
  80075c:	e13f7d17 	ldw	r4,-524(fp)
  800760:	000f883a 	mov	r7,zero
  800764:	0811e2c0 	call	811e2c <alt_up_audio_write_fifo>



	}
  800768:	003fd606 	br	8006c4 <audioTask+0x138>

0080076c <laserInputTask>:
}

void laserInputTask(void* pdata){
  80076c:	defffa04 	addi	sp,sp,-24
  800770:	dfc00515 	stw	ra,20(sp)
  800774:	df000415 	stw	fp,16(sp)
  800778:	df000404 	addi	fp,sp,16
  80077c:	e13fff15 	stw	r4,-4(fp)
	INT8U err;

	int note = 48;
  800780:	00800c04 	movi	r2,48
  800784:	e0bffd15 	stw	r2,-12(fp)
	int noteStatus = 0;
  800788:	e03ffc15 	stw	zero,-16(fp)
  80078c:	00000006 	br	800790 <laserInputTask+0x24>

	while(1){
		OSSemPend(laserStatusChanged, 0, &err);
  800790:	d1270817 	ldw	r4,-25568(gp)
  800794:	e1bffe04 	addi	r6,fp,-8
  800798:	000b883a 	mov	r5,zero
  80079c:	080dc2c0 	call	80dc2c <OSSemPend>
		if (noteStatus==0){
  8007a0:	e0bffc17 	ldw	r2,-16(fp)
  8007a4:	1004c03a 	cmpne	r2,r2,zero
  8007a8:	1000051e 	bne	r2,zero,8007c0 <laserInputTask+0x54>
			turnOnVoice(note);
  8007ac:	e13ffd17 	ldw	r4,-12(fp)
  8007b0:	08003780 	call	800378 <turnOnVoice>
			noteStatus = 1;
  8007b4:	00800044 	movi	r2,1
  8007b8:	e0bffc15 	stw	r2,-16(fp)
  8007bc:	003ff406 	br	800790 <laserInputTask+0x24>
		}else{
			turnOffVoice(note);
  8007c0:	e13ffd17 	ldw	r4,-12(fp)
  8007c4:	08004640 	call	800464 <turnOffVoice>
			noteStatus = 0;
  8007c8:	e03ffc15 	stw	zero,-16(fp)
		}
	}
  8007cc:	003ff006 	br	800790 <laserInputTask+0x24>

008007d0 <laserStatusChangeInterrupt>:
}



static void laserStatusChangeInterrupt( void * context) {
  8007d0:	defffd04 	addi	sp,sp,-12
  8007d4:	dfc00215 	stw	ra,8(sp)
  8007d8:	df000115 	stw	fp,4(sp)
  8007dc:	df000104 	addi	fp,sp,4
  8007e0:	e13fff15 	stw	r4,-4(fp)
	OSSemPost(laserStatusChanged);
  8007e4:	d1270817 	ldw	r4,-25568(gp)
  8007e8:	080e0240 	call	80e024 <OSSemPost>
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SWITCH_BASE, 1);
  8007ec:	00c04474 	movhi	r3,273
  8007f0:	18e41b04 	addi	r3,r3,-28564
  8007f4:	00800044 	movi	r2,1
  8007f8:	18800035 	stwio	r2,0(r3)
}
  8007fc:	e037883a 	mov	sp,fp
  800800:	dfc00117 	ldw	ra,4(sp)
  800804:	df000017 	ldw	fp,0(sp)
  800808:	dec00204 	addi	sp,sp,8
  80080c:	f800283a 	ret

00800810 <main>:


int main(void)
{
  800810:	defff904 	addi	sp,sp,-28
  800814:	dfc00615 	stw	ra,24(sp)
  800818:	df000515 	stw	fp,20(sp)
  80081c:	df000504 	addi	fp,sp,20
	laserStatusChanged = OSSemCreate(0);
  800820:	0009883a 	mov	r4,zero
  800824:	080d8780 	call	80d878 <OSSemCreate>
  800828:	d0a70815 	stw	r2,-25568(gp)

	alt_ic_isr_register(SWITCH_IRQ_INTERRUPT_CONTROLLER_ID, //alt_u32 ic_id
  80082c:	d8000015 	stw	zero,0(sp)
  800830:	0009883a 	mov	r4,zero
  800834:	014000c4 	movi	r5,3
  800838:	01802034 	movhi	r6,128
  80083c:	3181f404 	addi	r6,r6,2000
  800840:	000f883a 	mov	r7,zero
  800844:	08072a00 	call	8072a0 <alt_ic_isr_register>
						SWITCH_IRQ, //alt_u32 irq
						laserStatusChangeInterrupt, //alt_isr_func isr
						NULL,
						NULL);
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(SWITCH_BASE,1);
  800848:	00c04474 	movhi	r3,273
  80084c:	18e41a04 	addi	r3,r3,-28568
  800850:	00800044 	movi	r2,1
  800854:	18800035 	stwio	r2,0(r3)

	OSTaskCreateExt(audioTask,
  800858:	018020b4 	movhi	r6,130
  80085c:	31afc104 	addi	r6,r6,-16636
  800860:	00c02034 	movhi	r3,128
  800864:	18c16304 	addi	r3,r3,1420
  800868:	00800084 	movi	r2,2
  80086c:	d8800015 	stw	r2,0(sp)
  800870:	d8c00115 	stw	r3,4(sp)
  800874:	00820004 	movi	r2,2048
  800878:	d8800215 	stw	r2,8(sp)
  80087c:	d8000315 	stw	zero,12(sp)
  800880:	d8000415 	stw	zero,16(sp)
  800884:	01002034 	movhi	r4,128
  800888:	21016304 	addi	r4,r4,1420
  80088c:	000b883a 	mov	r5,zero
  800890:	01c00084 	movi	r7,2
  800894:	080eac80 	call	80eac8 <OSTaskCreateExt>
					  audioTask,
					  TASK_STACKSIZE,
					  NULL,
					  0);

  OSTaskCreateExt(laserInputTask,
  800898:	018020b4 	movhi	r6,130
  80089c:	31a7c104 	addi	r6,r6,-24828
  8008a0:	00800044 	movi	r2,1
  8008a4:	d8800015 	stw	r2,0(sp)
  8008a8:	00802074 	movhi	r2,129
  8008ac:	109fc204 	addi	r2,r2,32520
  8008b0:	d8800115 	stw	r2,4(sp)
  8008b4:	00820004 	movi	r2,2048
  8008b8:	d8800215 	stw	r2,8(sp)
  8008bc:	d8000315 	stw	zero,12(sp)
  8008c0:	d8000415 	stw	zero,16(sp)
  8008c4:	01002034 	movhi	r4,128
  8008c8:	2101db04 	addi	r4,r4,1900
  8008cc:	000b883a 	mov	r5,zero
  8008d0:	01c00044 	movi	r7,1
  8008d4:	080eac80 	call	80eac8 <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);


  OSStart();
  8008d8:	0808cf40 	call	808cf4 <OSStart>
  return 0;
  8008dc:	0005883a 	mov	r2,zero
}
  8008e0:	e037883a 	mov	sp,fp
  8008e4:	dfc00117 	ldw	ra,4(sp)
  8008e8:	df000017 	ldw	fp,0(sp)
  8008ec:	dec00204 	addi	sp,sp,8
  8008f0:	f800283a 	ret

008008f4 <roundf>:
  8008f4:	209fe02c 	andhi	r2,r4,32640
  8008f8:	1004d5fa 	srli	r2,r2,23
  8008fc:	deffff04 	addi	sp,sp,-4
  800900:	00c00584 	movi	r3,22
  800904:	11bfe044 	addi	r6,r2,-127
  800908:	dfc00015 	stw	ra,0(sp)
  80090c:	200f883a 	mov	r7,r4
  800910:	19801016 	blt	r3,r6,800954 <roundf+0x60>
  800914:	00802034 	movhi	r2,128
  800918:	10bfffc4 	addi	r2,r2,-1
  80091c:	1189d83a 	sra	r4,r2,r6
  800920:	30001516 	blt	r6,zero,800978 <roundf+0x84>
  800924:	00801034 	movhi	r2,64
  800928:	1185d83a 	sra	r2,r2,r6
  80092c:	0106303a 	nor	r3,zero,r4
  800930:	3908703a 	and	r4,r7,r4
  800934:	3885883a 	add	r2,r7,r2
  800938:	10c6703a 	and	r3,r2,r3
  80093c:	20000126 	beq	r4,zero,800944 <roundf+0x50>
  800940:	180f883a 	mov	r7,r3
  800944:	3805883a 	mov	r2,r7
  800948:	dfc00017 	ldw	ra,0(sp)
  80094c:	dec00104 	addi	sp,sp,4
  800950:	f800283a 	ret
  800954:	00802004 	movi	r2,128
  800958:	200b883a 	mov	r5,r4
  80095c:	30bff91e 	bne	r6,r2,800944 <roundf+0x50>
  800960:	0802ac40 	call	802ac4 <__addsf3>
  800964:	100f883a 	mov	r7,r2
  800968:	3805883a 	mov	r2,r7
  80096c:	dfc00017 	ldw	ra,0(sp)
  800970:	dec00104 	addi	sp,sp,4
  800974:	f800283a 	ret
  800978:	00bfffc4 	movi	r2,-1
  80097c:	38e0002c 	andhi	r3,r7,32768
  800980:	30bfef1e 	bne	r6,r2,800940 <roundf+0x4c>
  800984:	18cfe034 	orhi	r3,r3,16256
  800988:	180f883a 	mov	r7,r3
  80098c:	003fed06 	br	800944 <roundf+0x50>

00800990 <pow>:
  800990:	deffee04 	addi	sp,sp,-72
  800994:	ddc01015 	stw	r23,64(sp)
  800998:	05c02074 	movhi	r23,129
  80099c:	bdd88c04 	addi	r23,r23,25136
  8009a0:	dd800f15 	stw	r22,60(sp)
  8009a4:	dd400e15 	stw	r21,56(sp)
  8009a8:	dd000d15 	stw	r20,52(sp)
  8009ac:	dcc00c15 	stw	r19,48(sp)
  8009b0:	dc800b15 	stw	r18,44(sp)
  8009b4:	dc400a15 	stw	r17,40(sp)
  8009b8:	dc000915 	stw	r16,36(sp)
  8009bc:	2029883a 	mov	r20,r4
  8009c0:	dfc01115 	stw	ra,68(sp)
  8009c4:	3025883a 	mov	r18,r6
  8009c8:	282b883a 	mov	r21,r5
  8009cc:	3827883a 	mov	r19,r7
  8009d0:	0800e180 	call	800e18 <__ieee754_pow>
  8009d4:	b9000017 	ldw	r4,0(r23)
  8009d8:	05bfffc4 	movi	r22,-1
  8009dc:	1021883a 	mov	r16,r2
  8009e0:	1823883a 	mov	r17,r3
  8009e4:	25800426 	beq	r4,r22,8009f8 <pow+0x68>
  8009e8:	9009883a 	mov	r4,r18
  8009ec:	980b883a 	mov	r5,r19
  8009f0:	08024140 	call	802414 <__isnand>
  8009f4:	10000d26 	beq	r2,zero,800a2c <pow+0x9c>
  8009f8:	8005883a 	mov	r2,r16
  8009fc:	8807883a 	mov	r3,r17
  800a00:	dfc01117 	ldw	ra,68(sp)
  800a04:	ddc01017 	ldw	r23,64(sp)
  800a08:	dd800f17 	ldw	r22,60(sp)
  800a0c:	dd400e17 	ldw	r21,56(sp)
  800a10:	dd000d17 	ldw	r20,52(sp)
  800a14:	dcc00c17 	ldw	r19,48(sp)
  800a18:	dc800b17 	ldw	r18,44(sp)
  800a1c:	dc400a17 	ldw	r17,40(sp)
  800a20:	dc000917 	ldw	r16,36(sp)
  800a24:	dec01204 	addi	sp,sp,72
  800a28:	f800283a 	ret
  800a2c:	a009883a 	mov	r4,r20
  800a30:	a80b883a 	mov	r5,r21
  800a34:	08024140 	call	802414 <__isnand>
  800a38:	1000151e 	bne	r2,zero,800a90 <pow+0x100>
  800a3c:	000d883a 	mov	r6,zero
  800a40:	000f883a 	mov	r7,zero
  800a44:	a009883a 	mov	r4,r20
  800a48:	a80b883a 	mov	r5,r21
  800a4c:	0803a300 	call	803a30 <__eqdf2>
  800a50:	1000541e 	bne	r2,zero,800ba4 <pow+0x214>
  800a54:	000d883a 	mov	r6,zero
  800a58:	000f883a 	mov	r7,zero
  800a5c:	9009883a 	mov	r4,r18
  800a60:	980b883a 	mov	r5,r19
  800a64:	0803a300 	call	803a30 <__eqdf2>
  800a68:	10002c1e 	bne	r2,zero,800b1c <pow+0x18c>
  800a6c:	b8800017 	ldw	r2,0(r23)
  800a70:	d8000615 	stw	zero,24(sp)
  800a74:	d8000715 	stw	zero,28(sp)
  800a78:	10001226 	beq	r2,zero,800ac4 <pow+0x134>
  800a7c:	008ffc34 	movhi	r2,16368
  800a80:	d8800715 	stw	r2,28(sp)
  800a84:	dc000617 	ldw	r16,24(sp)
  800a88:	dc400717 	ldw	r17,28(sp)
  800a8c:	003fda06 	br	8009f8 <pow+0x68>
  800a90:	000d883a 	mov	r6,zero
  800a94:	000f883a 	mov	r7,zero
  800a98:	9009883a 	mov	r4,r18
  800a9c:	980b883a 	mov	r5,r19
  800aa0:	0803a300 	call	803a30 <__eqdf2>
  800aa4:	103fd41e 	bne	r2,zero,8009f8 <pow+0x68>
  800aa8:	b8c00017 	ldw	r3,0(r23)
  800aac:	010ffc34 	movhi	r4,16368
  800ab0:	d8000615 	stw	zero,24(sp)
  800ab4:	d9000715 	stw	r4,28(sp)
  800ab8:	1d801526 	beq	r3,r22,800b10 <pow+0x180>
  800abc:	00800084 	movi	r2,2
  800ac0:	18801326 	beq	r3,r2,800b10 <pow+0x180>
  800ac4:	00802074 	movhi	r2,129
  800ac8:	10911d04 	addi	r2,r2,17524
  800acc:	00c00044 	movi	r3,1
  800ad0:	d809883a 	mov	r4,sp
  800ad4:	dcc00515 	stw	r19,20(sp)
  800ad8:	dd400315 	stw	r21,12(sp)
  800adc:	d8800115 	stw	r2,4(sp)
  800ae0:	d8c00015 	stw	r3,0(sp)
  800ae4:	dc800415 	stw	r18,16(sp)
  800ae8:	dd000215 	stw	r20,8(sp)
  800aec:	d8000815 	stw	zero,32(sp)
  800af0:	08024440 	call	802444 <matherr>
  800af4:	10002726 	beq	r2,zero,800b94 <pow+0x204>
  800af8:	d8800817 	ldw	r2,32(sp)
  800afc:	103fe126 	beq	r2,zero,800a84 <pow+0xf4>
  800b00:	08046c40 	call	8046c4 <__errno>
  800b04:	d8c00817 	ldw	r3,32(sp)
  800b08:	10c00015 	stw	r3,0(r2)
  800b0c:	003fdd06 	br	800a84 <pow+0xf4>
  800b10:	d9000715 	stw	r4,28(sp)
  800b14:	d8000615 	stw	zero,24(sp)
  800b18:	003fda06 	br	800a84 <pow+0xf4>
  800b1c:	9009883a 	mov	r4,r18
  800b20:	980b883a 	mov	r5,r19
  800b24:	08023f80 	call	8023f8 <finite>
  800b28:	103fb326 	beq	r2,zero,8009f8 <pow+0x68>
  800b2c:	000d883a 	mov	r6,zero
  800b30:	000f883a 	mov	r7,zero
  800b34:	9009883a 	mov	r4,r18
  800b38:	980b883a 	mov	r5,r19
  800b3c:	0803bc80 	call	803bc8 <__ltdf2>
  800b40:	103fad0e 	bge	r2,zero,8009f8 <pow+0x68>
  800b44:	b9000017 	ldw	r4,0(r23)
  800b48:	00800044 	movi	r2,1
  800b4c:	00c02074 	movhi	r3,129
  800b50:	18d11d04 	addi	r3,r3,17524
  800b54:	d8800015 	stw	r2,0(sp)
  800b58:	d8c00115 	stw	r3,4(sp)
  800b5c:	dd400315 	stw	r21,12(sp)
  800b60:	dcc00515 	stw	r19,20(sp)
  800b64:	d8000815 	stw	zero,32(sp)
  800b68:	dd000215 	stw	r20,8(sp)
  800b6c:	dc800415 	stw	r18,16(sp)
  800b70:	20005626 	beq	r4,zero,800ccc <pow+0x33c>
  800b74:	00bffc34 	movhi	r2,65520
  800b78:	d8800715 	stw	r2,28(sp)
  800b7c:	00800084 	movi	r2,2
  800b80:	d8000615 	stw	zero,24(sp)
  800b84:	20800326 	beq	r4,r2,800b94 <pow+0x204>
  800b88:	d809883a 	mov	r4,sp
  800b8c:	08024440 	call	802444 <matherr>
  800b90:	103fd91e 	bne	r2,zero,800af8 <pow+0x168>
  800b94:	08046c40 	call	8046c4 <__errno>
  800b98:	00c00844 	movi	r3,33
  800b9c:	10c00015 	stw	r3,0(r2)
  800ba0:	003fd506 	br	800af8 <pow+0x168>
  800ba4:	8009883a 	mov	r4,r16
  800ba8:	880b883a 	mov	r5,r17
  800bac:	08023f80 	call	8023f8 <finite>
  800bb0:	10002426 	beq	r2,zero,800c44 <pow+0x2b4>
  800bb4:	000d883a 	mov	r6,zero
  800bb8:	000f883a 	mov	r7,zero
  800bbc:	8009883a 	mov	r4,r16
  800bc0:	880b883a 	mov	r5,r17
  800bc4:	0803a300 	call	803a30 <__eqdf2>
  800bc8:	103f8b1e 	bne	r2,zero,8009f8 <pow+0x68>
  800bcc:	a009883a 	mov	r4,r20
  800bd0:	a80b883a 	mov	r5,r21
  800bd4:	08023f80 	call	8023f8 <finite>
  800bd8:	103f8726 	beq	r2,zero,8009f8 <pow+0x68>
  800bdc:	9009883a 	mov	r4,r18
  800be0:	980b883a 	mov	r5,r19
  800be4:	08023f80 	call	8023f8 <finite>
  800be8:	103f8326 	beq	r2,zero,8009f8 <pow+0x68>
  800bec:	b9000017 	ldw	r4,0(r23)
  800bf0:	00800104 	movi	r2,4
  800bf4:	d8800015 	stw	r2,0(sp)
  800bf8:	00c02074 	movhi	r3,129
  800bfc:	18d11d04 	addi	r3,r3,17524
  800c00:	00800084 	movi	r2,2
  800c04:	d8c00115 	stw	r3,4(sp)
  800c08:	dd400315 	stw	r21,12(sp)
  800c0c:	dcc00515 	stw	r19,20(sp)
  800c10:	d8000815 	stw	zero,32(sp)
  800c14:	dd000215 	stw	r20,8(sp)
  800c18:	dc800415 	stw	r18,16(sp)
  800c1c:	d8000615 	stw	zero,24(sp)
  800c20:	d8000715 	stw	zero,28(sp)
  800c24:	20800326 	beq	r4,r2,800c34 <pow+0x2a4>
  800c28:	d809883a 	mov	r4,sp
  800c2c:	08024440 	call	802444 <matherr>
  800c30:	103fb11e 	bne	r2,zero,800af8 <pow+0x168>
  800c34:	08046c40 	call	8046c4 <__errno>
  800c38:	00c00884 	movi	r3,34
  800c3c:	10c00015 	stw	r3,0(r2)
  800c40:	003fad06 	br	800af8 <pow+0x168>
  800c44:	a009883a 	mov	r4,r20
  800c48:	a80b883a 	mov	r5,r21
  800c4c:	08023f80 	call	8023f8 <finite>
  800c50:	103fd826 	beq	r2,zero,800bb4 <pow+0x224>
  800c54:	9009883a 	mov	r4,r18
  800c58:	980b883a 	mov	r5,r19
  800c5c:	08023f80 	call	8023f8 <finite>
  800c60:	103fd426 	beq	r2,zero,800bb4 <pow+0x224>
  800c64:	880b883a 	mov	r5,r17
  800c68:	8009883a 	mov	r4,r16
  800c6c:	08024140 	call	802414 <__isnand>
  800c70:	10001926 	beq	r2,zero,800cd8 <pow+0x348>
  800c74:	bc000017 	ldw	r16,0(r23)
  800c78:	00800044 	movi	r2,1
  800c7c:	00c02074 	movhi	r3,129
  800c80:	18d11d04 	addi	r3,r3,17524
  800c84:	d8800015 	stw	r2,0(sp)
  800c88:	d8c00115 	stw	r3,4(sp)
  800c8c:	dd400315 	stw	r21,12(sp)
  800c90:	dcc00515 	stw	r19,20(sp)
  800c94:	d8000815 	stw	zero,32(sp)
  800c98:	dd000215 	stw	r20,8(sp)
  800c9c:	dc800415 	stw	r18,16(sp)
  800ca0:	80000a26 	beq	r16,zero,800ccc <pow+0x33c>
  800ca4:	0009883a 	mov	r4,zero
  800ca8:	000d883a 	mov	r6,zero
  800cac:	000b883a 	mov	r5,zero
  800cb0:	000f883a 	mov	r7,zero
  800cb4:	08037d80 	call	8037d8 <__divdf3>
  800cb8:	d8800615 	stw	r2,24(sp)
  800cbc:	00800084 	movi	r2,2
  800cc0:	d8c00715 	stw	r3,28(sp)
  800cc4:	80bfb01e 	bne	r16,r2,800b88 <pow+0x1f8>
  800cc8:	003fb206 	br	800b94 <pow+0x204>
  800ccc:	d8000615 	stw	zero,24(sp)
  800cd0:	d8000715 	stw	zero,28(sp)
  800cd4:	003fac06 	br	800b88 <pow+0x1f8>
  800cd8:	b8800017 	ldw	r2,0(r23)
  800cdc:	00c000c4 	movi	r3,3
  800ce0:	01002074 	movhi	r4,129
  800ce4:	21111d04 	addi	r4,r4,17524
  800ce8:	d8c00015 	stw	r3,0(sp)
  800cec:	d9000115 	stw	r4,4(sp)
  800cf0:	d8000815 	stw	zero,32(sp)
  800cf4:	dd000215 	stw	r20,8(sp)
  800cf8:	dd400315 	stw	r21,12(sp)
  800cfc:	dc800415 	stw	r18,16(sp)
  800d00:	dcc00515 	stw	r19,20(sp)
  800d04:	1000251e 	bne	r2,zero,800d9c <pow+0x40c>
  800d08:	05b80034 	movhi	r22,57344
  800d0c:	0091fc34 	movhi	r2,18416
  800d10:	10bfffc4 	addi	r2,r2,-1
  800d14:	000d883a 	mov	r6,zero
  800d18:	000f883a 	mov	r7,zero
  800d1c:	a80b883a 	mov	r5,r21
  800d20:	a009883a 	mov	r4,r20
  800d24:	d8800715 	stw	r2,28(sp)
  800d28:	dd800615 	stw	r22,24(sp)
  800d2c:	0803bc80 	call	803bc8 <__ltdf2>
  800d30:	103fbd0e 	bge	r2,zero,800c28 <pow+0x298>
  800d34:	0005883a 	mov	r2,zero
  800d38:	00cff834 	movhi	r3,16352
  800d3c:	180f883a 	mov	r7,r3
  800d40:	100d883a 	mov	r6,r2
  800d44:	980b883a 	mov	r5,r19
  800d48:	9009883a 	mov	r4,r18
  800d4c:	08034140 	call	803414 <__muldf3>
  800d50:	1009883a 	mov	r4,r2
  800d54:	180b883a 	mov	r5,r3
  800d58:	1021883a 	mov	r16,r2
  800d5c:	1823883a 	mov	r17,r3
  800d60:	080245c0 	call	80245c <rint>
  800d64:	180f883a 	mov	r7,r3
  800d68:	8009883a 	mov	r4,r16
  800d6c:	880b883a 	mov	r5,r17
  800d70:	100d883a 	mov	r6,r2
  800d74:	0803ab80 	call	803ab8 <__nedf2>
  800d78:	10000426 	beq	r2,zero,800d8c <pow+0x3fc>
  800d7c:	00b1fc34 	movhi	r2,51184
  800d80:	10bfffc4 	addi	r2,r2,-1
  800d84:	dd800615 	stw	r22,24(sp)
  800d88:	d8800715 	stw	r2,28(sp)
  800d8c:	b8c00017 	ldw	r3,0(r23)
  800d90:	00800084 	movi	r2,2
  800d94:	18bfa41e 	bne	r3,r2,800c28 <pow+0x298>
  800d98:	003fa606 	br	800c34 <pow+0x2a4>
  800d9c:	009ffc34 	movhi	r2,32752
  800da0:	000d883a 	mov	r6,zero
  800da4:	000f883a 	mov	r7,zero
  800da8:	a80b883a 	mov	r5,r21
  800dac:	a009883a 	mov	r4,r20
  800db0:	d8800715 	stw	r2,28(sp)
  800db4:	d8000615 	stw	zero,24(sp)
  800db8:	0803bc80 	call	803bc8 <__ltdf2>
  800dbc:	103ff30e 	bge	r2,zero,800d8c <pow+0x3fc>
  800dc0:	0005883a 	mov	r2,zero
  800dc4:	00cff834 	movhi	r3,16352
  800dc8:	180f883a 	mov	r7,r3
  800dcc:	100d883a 	mov	r6,r2
  800dd0:	980b883a 	mov	r5,r19
  800dd4:	9009883a 	mov	r4,r18
  800dd8:	08034140 	call	803414 <__muldf3>
  800ddc:	1009883a 	mov	r4,r2
  800de0:	180b883a 	mov	r5,r3
  800de4:	1021883a 	mov	r16,r2
  800de8:	1823883a 	mov	r17,r3
  800dec:	080245c0 	call	80245c <rint>
  800df0:	180f883a 	mov	r7,r3
  800df4:	8009883a 	mov	r4,r16
  800df8:	880b883a 	mov	r5,r17
  800dfc:	100d883a 	mov	r6,r2
  800e00:	0803ab80 	call	803ab8 <__nedf2>
  800e04:	103fe126 	beq	r2,zero,800d8c <pow+0x3fc>
  800e08:	00bffc34 	movhi	r2,65520
  800e0c:	d8800715 	stw	r2,28(sp)
  800e10:	d8000615 	stw	zero,24(sp)
  800e14:	003fdd06 	br	800d8c <pow+0x3fc>

00800e18 <__ieee754_pow>:
  800e18:	deffbb04 	addi	sp,sp,-276
  800e1c:	3005883a 	mov	r2,r6
  800e20:	dd404015 	stw	r21,256(sp)
  800e24:	dd003f15 	stw	r20,252(sp)
  800e28:	d9802815 	stw	r6,160(sp)
  800e2c:	2029883a 	mov	r20,r4
  800e30:	282b883a 	mov	r21,r5
  800e34:	3009883a 	mov	r4,r6
  800e38:	380b883a 	mov	r5,r7
  800e3c:	01a00034 	movhi	r6,32768
  800e40:	31bfffc4 	addi	r6,r6,-1
  800e44:	dc003b15 	stw	r16,236(sp)
  800e48:	29a0703a 	and	r16,r5,r6
  800e4c:	1404b03a 	or	r2,r2,r16
  800e50:	dd804115 	stw	r22,260(sp)
  800e54:	dc403c15 	stw	r17,240(sp)
  800e58:	d9c02915 	stw	r7,164(sp)
  800e5c:	382d883a 	mov	r22,r7
  800e60:	dfc04415 	stw	ra,272(sp)
  800e64:	200f883a 	mov	r7,r4
  800e68:	df004315 	stw	fp,268(sp)
  800e6c:	ddc04215 	stw	r23,264(sp)
  800e70:	dcc03e15 	stw	r19,248(sp)
  800e74:	dc803d15 	stw	r18,244(sp)
  800e78:	a023883a 	mov	r17,r20
  800e7c:	2809883a 	mov	r4,r5
  800e80:	10000826 	beq	r2,zero,800ea4 <__ieee754_pow+0x8c>
  800e84:	a9a4703a 	and	r18,r21,r6
  800e88:	009ffc34 	movhi	r2,32752
  800e8c:	a827883a 	mov	r19,r21
  800e90:	1480180e 	bge	r2,r18,800ef4 <__ieee754_pow+0xdc>
  800e94:	00b00434 	movhi	r2,49168
  800e98:	9085883a 	add	r2,r18,r2
  800e9c:	8884b03a 	or	r2,r17,r2
  800ea0:	1000321e 	bne	r2,zero,800f6c <__ieee754_pow+0x154>
  800ea4:	0009883a 	mov	r4,zero
  800ea8:	014ffc34 	movhi	r5,16368
  800eac:	d9002815 	stw	r4,160(sp)
  800eb0:	d9402915 	stw	r5,164(sp)
  800eb4:	d9002817 	ldw	r4,160(sp)
  800eb8:	d9402917 	ldw	r5,164(sp)
  800ebc:	2005883a 	mov	r2,r4
  800ec0:	2807883a 	mov	r3,r5
  800ec4:	dfc04417 	ldw	ra,272(sp)
  800ec8:	df004317 	ldw	fp,268(sp)
  800ecc:	ddc04217 	ldw	r23,264(sp)
  800ed0:	dd804117 	ldw	r22,260(sp)
  800ed4:	dd404017 	ldw	r21,256(sp)
  800ed8:	dd003f17 	ldw	r20,252(sp)
  800edc:	dcc03e17 	ldw	r19,248(sp)
  800ee0:	dc803d17 	ldw	r18,244(sp)
  800ee4:	dc403c17 	ldw	r17,240(sp)
  800ee8:	dc003b17 	ldw	r16,236(sp)
  800eec:	dec04504 	addi	sp,sp,276
  800ef0:	f800283a 	ret
  800ef4:	90802b26 	beq	r18,r2,800fa4 <__ieee754_pow+0x18c>
  800ef8:	143fe616 	blt	r2,r16,800e94 <__ieee754_pow+0x7c>
  800efc:	80806126 	beq	r16,r2,801084 <__ieee754_pow+0x26c>
  800f00:	982e403a 	cmpge	r23,r19,zero
  800f04:	b8004e26 	beq	r23,zero,801040 <__ieee754_pow+0x228>
  800f08:	0039883a 	mov	fp,zero
  800f0c:	3800281e 	bne	r7,zero,800fb0 <__ieee754_pow+0x198>
  800f10:	009ffc34 	movhi	r2,32752
  800f14:	80804f26 	beq	r16,r2,801054 <__ieee754_pow+0x23c>
  800f18:	008ffc34 	movhi	r2,16368
  800f1c:	80808226 	beq	r16,r2,801128 <__ieee754_pow+0x310>
  800f20:	00900034 	movhi	r2,16384
  800f24:	20828426 	beq	r4,r2,801938 <__ieee754_pow+0xb20>
  800f28:	008ff834 	movhi	r2,16352
  800f2c:	2080201e 	bne	r4,r2,800fb0 <__ieee754_pow+0x198>
  800f30:	98001f16 	blt	r19,zero,800fb0 <__ieee754_pow+0x198>
  800f34:	a80b883a 	mov	r5,r21
  800f38:	a009883a 	mov	r4,r20
  800f3c:	dfc04417 	ldw	ra,272(sp)
  800f40:	df004317 	ldw	fp,268(sp)
  800f44:	ddc04217 	ldw	r23,264(sp)
  800f48:	dd804117 	ldw	r22,260(sp)
  800f4c:	dd404017 	ldw	r21,256(sp)
  800f50:	dd003f17 	ldw	r20,252(sp)
  800f54:	dcc03e17 	ldw	r19,248(sp)
  800f58:	dc803d17 	ldw	r18,244(sp)
  800f5c:	dc403c17 	ldw	r17,240(sp)
  800f60:	dc003b17 	ldw	r16,236(sp)
  800f64:	dec04504 	addi	sp,sp,276
  800f68:	08021181 	jmpi	802118 <__ieee754_sqrt>
  800f6c:	01002074 	movhi	r4,129
  800f70:	21111e04 	addi	r4,r4,17528
  800f74:	dfc04417 	ldw	ra,272(sp)
  800f78:	df004317 	ldw	fp,268(sp)
  800f7c:	ddc04217 	ldw	r23,264(sp)
  800f80:	dd804117 	ldw	r22,260(sp)
  800f84:	dd404017 	ldw	r21,256(sp)
  800f88:	dd003f17 	ldw	r20,252(sp)
  800f8c:	dcc03e17 	ldw	r19,248(sp)
  800f90:	dc803d17 	ldw	r18,244(sp)
  800f94:	dc403c17 	ldw	r17,240(sp)
  800f98:	dc003b17 	ldw	r16,236(sp)
  800f9c:	dec04504 	addi	sp,sp,276
  800fa0:	080244c1 	jmpi	80244c <nan>
  800fa4:	a03fbb1e 	bne	r20,zero,800e94 <__ieee754_pow+0x7c>
  800fa8:	003fd306 	br	800ef8 <__ieee754_pow+0xe0>
  800fac:	0039883a 	mov	fp,zero
  800fb0:	a009883a 	mov	r4,r20
  800fb4:	a80b883a 	mov	r5,r21
  800fb8:	08023e00 	call	8023e0 <fabs>
  800fbc:	1015883a 	mov	r10,r2
  800fc0:	1817883a 	mov	r11,r3
  800fc4:	88001226 	beq	r17,zero,801010 <__ieee754_pow+0x1f8>
  800fc8:	9804d7fa 	srli	r2,r19,31
  800fcc:	10bfffc4 	addi	r2,r2,-1
  800fd0:	1706b03a 	or	r3,r2,fp
  800fd4:	d8802515 	stw	r2,148(sp)
  800fd8:	18002c1e 	bne	r3,zero,80108c <__ieee754_pow+0x274>
  800fdc:	a80f883a 	mov	r7,r21
  800fe0:	a009883a 	mov	r4,r20
  800fe4:	a80b883a 	mov	r5,r21
  800fe8:	a00d883a 	mov	r6,r20
  800fec:	08033200 	call	803320 <__subdf3>
  800ff0:	1009883a 	mov	r4,r2
  800ff4:	180b883a 	mov	r5,r3
  800ff8:	100d883a 	mov	r6,r2
  800ffc:	180f883a 	mov	r7,r3
  801000:	08037d80 	call	8037d8 <__divdf3>
  801004:	d8802815 	stw	r2,160(sp)
  801008:	d8c02915 	stw	r3,164(sp)
  80100c:	003fa906 	br	800eb4 <__ieee754_pow+0x9c>
  801010:	009ffc34 	movhi	r2,32752
  801014:	90800326 	beq	r18,r2,801024 <__ieee754_pow+0x20c>
  801018:	90000226 	beq	r18,zero,801024 <__ieee754_pow+0x20c>
  80101c:	008ffc34 	movhi	r2,16368
  801020:	90bfe91e 	bne	r18,r2,800fc8 <__ieee754_pow+0x1b0>
  801024:	b0026316 	blt	r22,zero,8019b4 <__ieee754_pow+0xb9c>
  801028:	5011883a 	mov	r8,r10
  80102c:	5813883a 	mov	r9,r11
  801030:	b8023126 	beq	r23,zero,8018f8 <__ieee754_pow+0xae0>
  801034:	da002815 	stw	r8,160(sp)
  801038:	da402915 	stw	r9,164(sp)
  80103c:	003f9d06 	br	800eb4 <__ieee754_pow+0x9c>
  801040:	0090d034 	movhi	r2,17216
  801044:	10bfffc4 	addi	r2,r2,-1
  801048:	1400270e 	bge	r2,r16,8010e8 <__ieee754_pow+0x2d0>
  80104c:	07000084 	movi	fp,2
  801050:	003fae06 	br	800f0c <__ieee754_pow+0xf4>
  801054:	00b00434 	movhi	r2,49168
  801058:	9085883a 	add	r2,r18,r2
  80105c:	8884b03a 	or	r2,r17,r2
  801060:	103f9026 	beq	r2,zero,800ea4 <__ieee754_pow+0x8c>
  801064:	008ffc34 	movhi	r2,16368
  801068:	10bfffc4 	addi	r2,r2,-1
  80106c:	1482d00e 	bge	r2,r18,801bb0 <__ieee754_pow+0xd98>
  801070:	b03f900e 	bge	r22,zero,800eb4 <__ieee754_pow+0x9c>
  801074:	0005883a 	mov	r2,zero
  801078:	d8802815 	stw	r2,160(sp)
  80107c:	d8802915 	stw	r2,164(sp)
  801080:	003f8c06 	br	800eb4 <__ieee754_pow+0x9c>
  801084:	383f9e26 	beq	r7,zero,800f00 <__ieee754_pow+0xe8>
  801088:	003f8206 	br	800e94 <__ieee754_pow+0x7c>
  80108c:	00907834 	movhi	r2,16864
  801090:	1400290e 	bge	r2,r16,801138 <__ieee754_pow+0x320>
  801094:	0090fc34 	movhi	r2,17392
  801098:	1402500e 	bge	r2,r16,8019dc <__ieee754_pow+0xbc4>
  80109c:	008ffc34 	movhi	r2,16368
  8010a0:	10bfffc4 	addi	r2,r2,-1
  8010a4:	14800b0e 	bge	r2,r18,8010d4 <__ieee754_pow+0x2bc>
  8010a8:	05800b0e 	bge	zero,r22,8010d8 <__ieee754_pow+0x2c0>
  8010ac:	00a20034 	movhi	r2,34816
  8010b0:	109d6704 	addi	r2,r2,30108
  8010b4:	00df8e34 	movhi	r3,32312
  8010b8:	18f90f04 	addi	r3,r3,-7108
  8010bc:	100d883a 	mov	r6,r2
  8010c0:	180f883a 	mov	r7,r3
  8010c4:	1009883a 	mov	r4,r2
  8010c8:	180b883a 	mov	r5,r3
  8010cc:	08034140 	call	803414 <__muldf3>
  8010d0:	003fcc06 	br	801004 <__ieee754_pow+0x1ec>
  8010d4:	b03ff516 	blt	r22,zero,8010ac <__ieee754_pow+0x294>
  8010d8:	0007883a 	mov	r3,zero
  8010dc:	d8c02815 	stw	r3,160(sp)
  8010e0:	d8c02915 	stw	r3,164(sp)
  8010e4:	003f7306 	br	800eb4 <__ieee754_pow+0x9c>
  8010e8:	008ffc34 	movhi	r2,16368
  8010ec:	10bfffc4 	addi	r2,r2,-1
  8010f0:	143f850e 	bge	r2,r16,800f08 <__ieee754_pow+0xf0>
  8010f4:	8005d53a 	srai	r2,r16,20
  8010f8:	01400504 	movi	r5,20
  8010fc:	10ff0044 	addi	r3,r2,-1023
  801100:	28c3e10e 	bge	r5,r3,802088 <__ieee754_pow+0x1270>
  801104:	00800d04 	movi	r2,52
  801108:	10c5c83a 	sub	r2,r2,r3
  80110c:	3886d83a 	srl	r3,r7,r2
  801110:	1884983a 	sll	r2,r3,r2
  801114:	38bf7c1e 	bne	r7,r2,800f08 <__ieee754_pow+0xf0>
  801118:	18c0004c 	andi	r3,r3,1
  80111c:	00800084 	movi	r2,2
  801120:	10f9c83a 	sub	fp,r2,r3
  801124:	003f7906 	br	800f0c <__ieee754_pow+0xf4>
  801128:	b0038516 	blt	r22,zero,801f40 <__ieee754_pow+0x1128>
  80112c:	dd002815 	stw	r20,160(sp)
  801130:	dd402915 	stw	r21,164(sp)
  801134:	003f5f06 	br	800eb4 <__ieee754_pow+0x9c>
  801138:	00800434 	movhi	r2,16
  80113c:	10bfffc4 	addi	r2,r2,-1
  801140:	1482900e 	bge	r2,r18,801b84 <__ieee754_pow+0xd6c>
  801144:	000b883a 	mov	r5,zero
  801148:	9005d53a 	srai	r2,r18,20
  80114c:	00c00434 	movhi	r3,16
  801150:	18ffffc4 	addi	r3,r3,-1
  801154:	90c8703a 	and	r4,r18,r3
  801158:	2887883a 	add	r3,r5,r2
  80115c:	18bf0044 	addi	r2,r3,-1023
  801160:	d8800015 	stw	r2,0(sp)
  801164:	00800134 	movhi	r2,4
  801168:	10a62384 	addi	r2,r2,-26482
  80116c:	250ffc34 	orhi	r20,r4,16368
  801170:	1101ee0e 	bge	r2,r4,80192c <__ieee754_pow+0xb14>
  801174:	00800334 	movhi	r2,12
  801178:	10ad9e44 	addi	r2,r2,-18823
  80117c:	1101e716 	blt	r2,r4,80191c <__ieee754_pow+0xb04>
  801180:	01000044 	movi	r4,1
  801184:	04000334 	movhi	r16,12
  801188:	200890fa 	slli	r4,r4,3
  80118c:	da800115 	stw	r10,4(sp)
  801190:	dd000215 	stw	r20,8(sp)
  801194:	d9002c15 	stw	r4,176(sp)
  801198:	d9402c17 	ldw	r5,176(sp)
  80119c:	01002074 	movhi	r4,129
  8011a0:	21111f04 	addi	r4,r4,17532
  8011a4:	a02bd07a 	srai	r21,r20,1
  8011a8:	2909883a 	add	r4,r5,r4
  8011ac:	25800017 	ldw	r22,0(r4)
  8011b0:	25c00117 	ldw	r23,4(r4)
  8011b4:	a00b883a 	mov	r5,r20
  8011b8:	5009883a 	mov	r4,r10
  8011bc:	b00d883a 	mov	r6,r22
  8011c0:	b80f883a 	mov	r7,r23
  8011c4:	08033200 	call	803320 <__subdf3>
  8011c8:	d9000117 	ldw	r4,4(sp)
  8011cc:	a00b883a 	mov	r5,r20
  8011d0:	b00d883a 	mov	r6,r22
  8011d4:	b80f883a 	mov	r7,r23
  8011d8:	1025883a 	mov	r18,r2
  8011dc:	1827883a 	mov	r19,r3
  8011e0:	08033a00 	call	8033a0 <__adddf3>
  8011e4:	0011883a 	mov	r8,zero
  8011e8:	024ffc34 	movhi	r9,16368
  8011ec:	480b883a 	mov	r5,r9
  8011f0:	4009883a 	mov	r4,r8
  8011f4:	180f883a 	mov	r7,r3
  8011f8:	100d883a 	mov	r6,r2
  8011fc:	08037d80 	call	8037d8 <__divdf3>
  801200:	d8c02e15 	stw	r3,184(sp)
  801204:	d8800f15 	stw	r2,60(sp)
  801208:	d8802d15 	stw	r2,180(sp)
  80120c:	d8802e17 	ldw	r2,184(sp)
  801210:	d9800f17 	ldw	r6,60(sp)
  801214:	9009883a 	mov	r4,r18
  801218:	980b883a 	mov	r5,r19
  80121c:	100f883a 	mov	r7,r2
  801220:	dc800b15 	stw	r18,44(sp)
  801224:	dcc00c15 	stw	r19,48(sp)
  801228:	d8801015 	stw	r2,64(sp)
  80122c:	08034140 	call	803414 <__muldf3>
  801230:	d8c03015 	stw	r3,192(sp)
  801234:	d9003017 	ldw	r4,192(sp)
  801238:	d8802f15 	stw	r2,188(sp)
  80123c:	d8800315 	stw	r2,12(sp)
  801240:	ad480034 	orhi	r21,r21,8192
  801244:	0005883a 	mov	r2,zero
  801248:	ac2b883a 	add	r21,r21,r16
  80124c:	000b883a 	mov	r5,zero
  801250:	1021883a 	mov	r16,r2
  801254:	2005883a 	mov	r2,r4
  801258:	800d883a 	mov	r6,r16
  80125c:	a80f883a 	mov	r7,r21
  801260:	d9000415 	stw	r4,16(sp)
  801264:	d9002715 	stw	r4,156(sp)
  801268:	d9402615 	stw	r5,152(sp)
  80126c:	d9401615 	stw	r5,88(sp)
  801270:	d9001715 	stw	r4,92(sp)
  801274:	100b883a 	mov	r5,r2
  801278:	0009883a 	mov	r4,zero
  80127c:	08034140 	call	803414 <__muldf3>
  801280:	d9000b17 	ldw	r4,44(sp)
  801284:	980b883a 	mov	r5,r19
  801288:	180f883a 	mov	r7,r3
  80128c:	100d883a 	mov	r6,r2
  801290:	08033200 	call	803320 <__subdf3>
  801294:	8009883a 	mov	r4,r16
  801298:	a80b883a 	mov	r5,r21
  80129c:	b80f883a 	mov	r7,r23
  8012a0:	b00d883a 	mov	r6,r22
  8012a4:	1021883a 	mov	r16,r2
  8012a8:	1823883a 	mov	r17,r3
  8012ac:	08033200 	call	803320 <__subdf3>
  8012b0:	d9000117 	ldw	r4,4(sp)
  8012b4:	a00b883a 	mov	r5,r20
  8012b8:	180f883a 	mov	r7,r3
  8012bc:	100d883a 	mov	r6,r2
  8012c0:	08033200 	call	803320 <__subdf3>
  8012c4:	d9001617 	ldw	r4,88(sp)
  8012c8:	d9402717 	ldw	r5,156(sp)
  8012cc:	180f883a 	mov	r7,r3
  8012d0:	100d883a 	mov	r6,r2
  8012d4:	08034140 	call	803414 <__muldf3>
  8012d8:	180f883a 	mov	r7,r3
  8012dc:	880b883a 	mov	r5,r17
  8012e0:	8009883a 	mov	r4,r16
  8012e4:	100d883a 	mov	r6,r2
  8012e8:	08033200 	call	803320 <__subdf3>
  8012ec:	d9000f17 	ldw	r4,60(sp)
  8012f0:	d9402e17 	ldw	r5,184(sp)
  8012f4:	180f883a 	mov	r7,r3
  8012f8:	100d883a 	mov	r6,r2
  8012fc:	08034140 	call	803414 <__muldf3>
  801300:	d9000317 	ldw	r4,12(sp)
  801304:	d9403017 	ldw	r5,192(sp)
  801308:	d8803115 	stw	r2,196(sp)
  80130c:	200d883a 	mov	r6,r4
  801310:	280f883a 	mov	r7,r5
  801314:	d8c03215 	stw	r3,200(sp)
  801318:	08034140 	call	803414 <__muldf3>
  80131c:	1009883a 	mov	r4,r2
  801320:	180b883a 	mov	r5,r3
  801324:	100d883a 	mov	r6,r2
  801328:	180f883a 	mov	r7,r3
  80132c:	1021883a 	mov	r16,r2
  801330:	1823883a 	mov	r17,r3
  801334:	08034140 	call	803414 <__muldf3>
  801338:	02129174 	movhi	r8,19013
  80133c:	4213bbc4 	addi	r8,r8,20207
  801340:	024ff2b4 	movhi	r9,16330
  801344:	4a5f8a04 	addi	r9,r9,32296
  801348:	480f883a 	mov	r7,r9
  80134c:	8009883a 	mov	r4,r16
  801350:	880b883a 	mov	r5,r17
  801354:	400d883a 	mov	r6,r8
  801358:	1029883a 	mov	r20,r2
  80135c:	182b883a 	mov	r21,r3
  801360:	08034140 	call	803414 <__muldf3>
  801364:	0224f2b4 	movhi	r8,37834
  801368:	4236d944 	addi	r8,r8,-9371
  80136c:	024ff3b4 	movhi	r9,16334
  801370:	4a619284 	addi	r9,r9,-31158
  801374:	480f883a 	mov	r7,r9
  801378:	400d883a 	mov	r6,r8
  80137c:	180b883a 	mov	r5,r3
  801380:	1009883a 	mov	r4,r2
  801384:	08033a00 	call	8033a0 <__adddf3>
  801388:	180f883a 	mov	r7,r3
  80138c:	8009883a 	mov	r4,r16
  801390:	880b883a 	mov	r5,r17
  801394:	100d883a 	mov	r6,r2
  801398:	08034140 	call	803414 <__muldf3>
  80139c:	022a4774 	movhi	r8,43293
  8013a0:	42104044 	addi	r8,r8,16641
  8013a4:	024ff474 	movhi	r9,16337
  8013a8:	4a5d1804 	addi	r9,r9,29792
  8013ac:	480f883a 	mov	r7,r9
  8013b0:	400d883a 	mov	r6,r8
  8013b4:	180b883a 	mov	r5,r3
  8013b8:	1009883a 	mov	r4,r2
  8013bc:	08033a00 	call	8033a0 <__adddf3>
  8013c0:	180f883a 	mov	r7,r3
  8013c4:	8009883a 	mov	r4,r16
  8013c8:	880b883a 	mov	r5,r17
  8013cc:	100d883a 	mov	r6,r2
  8013d0:	08034140 	call	803414 <__muldf3>
  8013d4:	021463f4 	movhi	r8,20879
  8013d8:	42099344 	addi	r8,r8,9805
  8013dc:	024ff574 	movhi	r9,16341
  8013e0:	4a555544 	addi	r9,r9,21845
  8013e4:	480f883a 	mov	r7,r9
  8013e8:	400d883a 	mov	r6,r8
  8013ec:	180b883a 	mov	r5,r3
  8013f0:	1009883a 	mov	r4,r2
  8013f4:	08033a00 	call	8033a0 <__adddf3>
  8013f8:	180f883a 	mov	r7,r3
  8013fc:	8009883a 	mov	r4,r16
  801400:	880b883a 	mov	r5,r17
  801404:	100d883a 	mov	r6,r2
  801408:	08034140 	call	803414 <__muldf3>
  80140c:	0236dc34 	movhi	r8,56176
  801410:	422affc4 	addi	r8,r8,-21505
  801414:	024ff6f4 	movhi	r9,16347
  801418:	4a5b6d84 	addi	r9,r9,28086
  80141c:	480f883a 	mov	r7,r9
  801420:	400d883a 	mov	r6,r8
  801424:	180b883a 	mov	r5,r3
  801428:	1009883a 	mov	r4,r2
  80142c:	08033a00 	call	8033a0 <__adddf3>
  801430:	180f883a 	mov	r7,r3
  801434:	8009883a 	mov	r4,r16
  801438:	880b883a 	mov	r5,r17
  80143c:	100d883a 	mov	r6,r2
  801440:	08034140 	call	803414 <__muldf3>
  801444:	020cccf4 	movhi	r8,13107
  801448:	420cc0c4 	addi	r8,r8,13059
  80144c:	024ff8f4 	movhi	r9,16355
  801450:	4a4cccc4 	addi	r9,r9,13107
  801454:	480f883a 	mov	r7,r9
  801458:	400d883a 	mov	r6,r8
  80145c:	180b883a 	mov	r5,r3
  801460:	1009883a 	mov	r4,r2
  801464:	08033a00 	call	8033a0 <__adddf3>
  801468:	180f883a 	mov	r7,r3
  80146c:	a80b883a 	mov	r5,r21
  801470:	a009883a 	mov	r4,r20
  801474:	100d883a 	mov	r6,r2
  801478:	08034140 	call	803414 <__muldf3>
  80147c:	d9000317 	ldw	r4,12(sp)
  801480:	d9403017 	ldw	r5,192(sp)
  801484:	d9801617 	ldw	r6,88(sp)
  801488:	d9c02717 	ldw	r7,156(sp)
  80148c:	1021883a 	mov	r16,r2
  801490:	1823883a 	mov	r17,r3
  801494:	08033a00 	call	8033a0 <__adddf3>
  801498:	d9003117 	ldw	r4,196(sp)
  80149c:	d9403217 	ldw	r5,200(sp)
  8014a0:	180f883a 	mov	r7,r3
  8014a4:	100d883a 	mov	r6,r2
  8014a8:	d9001415 	stw	r4,80(sp)
  8014ac:	d9401515 	stw	r5,84(sp)
  8014b0:	08034140 	call	803414 <__muldf3>
  8014b4:	180f883a 	mov	r7,r3
  8014b8:	8009883a 	mov	r4,r16
  8014bc:	880b883a 	mov	r5,r17
  8014c0:	100d883a 	mov	r6,r2
  8014c4:	08033a00 	call	8033a0 <__adddf3>
  8014c8:	d9001617 	ldw	r4,88(sp)
  8014cc:	d9402717 	ldw	r5,156(sp)
  8014d0:	d8803315 	stw	r2,204(sp)
  8014d4:	200d883a 	mov	r6,r4
  8014d8:	280f883a 	mov	r7,r5
  8014dc:	d8c03415 	stw	r3,208(sp)
  8014e0:	08034140 	call	803414 <__muldf3>
  8014e4:	182f883a 	mov	r23,r3
  8014e8:	05500234 	movhi	r21,16392
  8014ec:	0029883a 	mov	r20,zero
  8014f0:	b80b883a 	mov	r5,r23
  8014f4:	a00d883a 	mov	r6,r20
  8014f8:	a80f883a 	mov	r7,r21
  8014fc:	1009883a 	mov	r4,r2
  801500:	d8800715 	stw	r2,28(sp)
  801504:	d8c00815 	stw	r3,32(sp)
  801508:	08033a00 	call	8033a0 <__adddf3>
  80150c:	d9003317 	ldw	r4,204(sp)
  801510:	d9403417 	ldw	r5,208(sp)
  801514:	180f883a 	mov	r7,r3
  801518:	100d883a 	mov	r6,r2
  80151c:	d9000515 	stw	r4,20(sp)
  801520:	d9400615 	stw	r5,24(sp)
  801524:	08033a00 	call	8033a0 <__adddf3>
  801528:	d9001617 	ldw	r4,88(sp)
  80152c:	d9402717 	ldw	r5,156(sp)
  801530:	0025883a 	mov	r18,zero
  801534:	900d883a 	mov	r6,r18
  801538:	180f883a 	mov	r7,r3
  80153c:	1823883a 	mov	r17,r3
  801540:	08034140 	call	803414 <__muldf3>
  801544:	d9001417 	ldw	r4,80(sp)
  801548:	d9403217 	ldw	r5,200(sp)
  80154c:	880f883a 	mov	r7,r17
  801550:	900d883a 	mov	r6,r18
  801554:	d8803515 	stw	r2,212(sp)
  801558:	d8c03615 	stw	r3,216(sp)
  80155c:	08034140 	call	803414 <__muldf3>
  801560:	a80f883a 	mov	r7,r21
  801564:	880b883a 	mov	r5,r17
  801568:	000d883a 	mov	r6,zero
  80156c:	9009883a 	mov	r4,r18
  801570:	1021883a 	mov	r16,r2
  801574:	1823883a 	mov	r17,r3
  801578:	08033200 	call	803320 <__subdf3>
  80157c:	d9800717 	ldw	r6,28(sp)
  801580:	b80f883a 	mov	r7,r23
  801584:	180b883a 	mov	r5,r3
  801588:	1009883a 	mov	r4,r2
  80158c:	08033200 	call	803320 <__subdf3>
  801590:	d9000517 	ldw	r4,20(sp)
  801594:	d9403417 	ldw	r5,208(sp)
  801598:	180f883a 	mov	r7,r3
  80159c:	100d883a 	mov	r6,r2
  8015a0:	08033200 	call	803320 <__subdf3>
  8015a4:	d9000317 	ldw	r4,12(sp)
  8015a8:	d9403017 	ldw	r5,192(sp)
  8015ac:	180f883a 	mov	r7,r3
  8015b0:	100d883a 	mov	r6,r2
  8015b4:	08034140 	call	803414 <__muldf3>
  8015b8:	180f883a 	mov	r7,r3
  8015bc:	880b883a 	mov	r5,r17
  8015c0:	8009883a 	mov	r4,r16
  8015c4:	100d883a 	mov	r6,r2
  8015c8:	08033a00 	call	8033a0 <__adddf3>
  8015cc:	102d883a 	mov	r22,r2
  8015d0:	d9003617 	ldw	r4,216(sp)
  8015d4:	d8803517 	ldw	r2,212(sp)
  8015d8:	d9403617 	ldw	r5,216(sp)
  8015dc:	182f883a 	mov	r23,r3
  8015e0:	b00d883a 	mov	r6,r22
  8015e4:	b80f883a 	mov	r7,r23
  8015e8:	d9000a15 	stw	r4,40(sp)
  8015ec:	1009883a 	mov	r4,r2
  8015f0:	054ffbf4 	movhi	r21,16367
  8015f4:	ad71c244 	addi	r21,r21,-14583
  8015f8:	dd800d15 	stw	r22,52(sp)
  8015fc:	ddc00e15 	stw	r23,56(sp)
  801600:	05380034 	movhi	r20,57344
  801604:	d8800915 	stw	r2,36(sp)
  801608:	08033a00 	call	8033a0 <__adddf3>
  80160c:	180b883a 	mov	r5,r3
  801610:	a00d883a 	mov	r6,r20
  801614:	a80f883a 	mov	r7,r21
  801618:	9009883a 	mov	r4,r18
  80161c:	1823883a 	mov	r17,r3
  801620:	08034140 	call	803414 <__muldf3>
  801624:	020516f4 	movhi	r8,5211
  801628:	42007d44 	addi	r8,r8,501
  80162c:	026f8fb4 	movhi	r9,48702
  801630:	4a4bf804 	addi	r9,r9,12256
  801634:	480f883a 	mov	r7,r9
  801638:	400d883a 	mov	r6,r8
  80163c:	880b883a 	mov	r5,r17
  801640:	9009883a 	mov	r4,r18
  801644:	d8803715 	stw	r2,220(sp)
  801648:	d8c03815 	stw	r3,224(sp)
  80164c:	08034140 	call	803414 <__muldf3>
  801650:	d9800917 	ldw	r6,36(sp)
  801654:	d9c03617 	ldw	r7,216(sp)
  801658:	880b883a 	mov	r5,r17
  80165c:	9009883a 	mov	r4,r18
  801660:	1021883a 	mov	r16,r2
  801664:	1823883a 	mov	r17,r3
  801668:	08033200 	call	803320 <__subdf3>
  80166c:	d9000d17 	ldw	r4,52(sp)
  801670:	b80b883a 	mov	r5,r23
  801674:	180f883a 	mov	r7,r3
  801678:	100d883a 	mov	r6,r2
  80167c:	08033200 	call	803320 <__subdf3>
  801680:	180b883a 	mov	r5,r3
  801684:	a80f883a 	mov	r7,r21
  801688:	01b70eb4 	movhi	r6,56378
  80168c:	3180ff44 	addi	r6,r6,1021
  801690:	1009883a 	mov	r4,r2
  801694:	08034140 	call	803414 <__muldf3>
  801698:	180f883a 	mov	r7,r3
  80169c:	880b883a 	mov	r5,r17
  8016a0:	8009883a 	mov	r4,r16
  8016a4:	100d883a 	mov	r6,r2
  8016a8:	08033a00 	call	8033a0 <__adddf3>
  8016ac:	d9402c17 	ldw	r5,176(sp)
  8016b0:	01002074 	movhi	r4,129
  8016b4:	21112304 	addi	r4,r4,17548
  8016b8:	2909883a 	add	r4,r5,r4
  8016bc:	22400117 	ldw	r9,4(r4)
  8016c0:	22000017 	ldw	r8,0(r4)
  8016c4:	180b883a 	mov	r5,r3
  8016c8:	480f883a 	mov	r7,r9
  8016cc:	400d883a 	mov	r6,r8
  8016d0:	1009883a 	mov	r4,r2
  8016d4:	08033a00 	call	8033a0 <__adddf3>
  8016d8:	d9000017 	ldw	r4,0(sp)
  8016dc:	182f883a 	mov	r23,r3
  8016e0:	102d883a 	mov	r22,r2
  8016e4:	0803cd80 	call	803cd8 <__floatsidf>
  8016e8:	d9402c17 	ldw	r5,176(sp)
  8016ec:	01002074 	movhi	r4,129
  8016f0:	21112704 	addi	r4,r4,17564
  8016f4:	b00d883a 	mov	r6,r22
  8016f8:	2911883a 	add	r8,r5,r4
  8016fc:	d9003717 	ldw	r4,220(sp)
  801700:	d9403817 	ldw	r5,224(sp)
  801704:	45000017 	ldw	r20,0(r8)
  801708:	d9002315 	stw	r4,140(sp)
  80170c:	d9003817 	ldw	r4,224(sp)
  801710:	45400117 	ldw	r21,4(r8)
  801714:	b80f883a 	mov	r7,r23
  801718:	d9002415 	stw	r4,144(sp)
  80171c:	d9002317 	ldw	r4,140(sp)
  801720:	1021883a 	mov	r16,r2
  801724:	1823883a 	mov	r17,r3
  801728:	dd802115 	stw	r22,132(sp)
  80172c:	ddc02215 	stw	r23,136(sp)
  801730:	08033a00 	call	8033a0 <__adddf3>
  801734:	180b883a 	mov	r5,r3
  801738:	1009883a 	mov	r4,r2
  80173c:	a00d883a 	mov	r6,r20
  801740:	a80f883a 	mov	r7,r21
  801744:	08033a00 	call	8033a0 <__adddf3>
  801748:	180f883a 	mov	r7,r3
  80174c:	8009883a 	mov	r4,r16
  801750:	880b883a 	mov	r5,r17
  801754:	100d883a 	mov	r6,r2
  801758:	08033a00 	call	8033a0 <__adddf3>
  80175c:	180b883a 	mov	r5,r3
  801760:	0009883a 	mov	r4,zero
  801764:	800d883a 	mov	r6,r16
  801768:	880f883a 	mov	r7,r17
  80176c:	d9001b15 	stw	r4,108(sp)
  801770:	d8c01c15 	stw	r3,112(sp)
  801774:	08033200 	call	803320 <__subdf3>
  801778:	180b883a 	mov	r5,r3
  80177c:	a80f883a 	mov	r7,r21
  801780:	1009883a 	mov	r4,r2
  801784:	a00d883a 	mov	r6,r20
  801788:	08033200 	call	803320 <__subdf3>
  80178c:	d9802317 	ldw	r6,140(sp)
  801790:	d9c03817 	ldw	r7,224(sp)
  801794:	180b883a 	mov	r5,r3
  801798:	1009883a 	mov	r4,r2
  80179c:	08033200 	call	803320 <__subdf3>
  8017a0:	d9002117 	ldw	r4,132(sp)
  8017a4:	1011883a 	mov	r8,r2
  8017a8:	1813883a 	mov	r9,r3
  8017ac:	b80b883a 	mov	r5,r23
  8017b0:	480f883a 	mov	r7,r9
  8017b4:	400d883a 	mov	r6,r8
  8017b8:	08033200 	call	803320 <__subdf3>
  8017bc:	1823883a 	mov	r17,r3
  8017c0:	d8c02517 	ldw	r3,148(sp)
  8017c4:	1021883a 	mov	r16,r2
  8017c8:	e0bfffc4 	addi	r2,fp,-1
  8017cc:	1884b03a 	or	r2,r3,r2
  8017d0:	1000731e 	bne	r2,zero,8019a0 <__ieee754_pow+0xb88>
  8017d4:	0009883a 	mov	r4,zero
  8017d8:	016ffc34 	movhi	r5,49136
  8017dc:	d9001915 	stw	r4,100(sp)
  8017e0:	d9401a15 	stw	r5,104(sp)
  8017e4:	d9402917 	ldw	r5,164(sp)
  8017e8:	d9002817 	ldw	r4,160(sp)
  8017ec:	0029883a 	mov	r20,zero
  8017f0:	a00d883a 	mov	r6,r20
  8017f4:	280f883a 	mov	r7,r5
  8017f8:	2827883a 	mov	r19,r5
  8017fc:	08033200 	call	803320 <__subdf3>
  801800:	d9001b17 	ldw	r4,108(sp)
  801804:	d9401c17 	ldw	r5,112(sp)
  801808:	180f883a 	mov	r7,r3
  80180c:	100d883a 	mov	r6,r2
  801810:	08034140 	call	803414 <__muldf3>
  801814:	d9c02917 	ldw	r7,164(sp)
  801818:	d9802817 	ldw	r6,160(sp)
  80181c:	880b883a 	mov	r5,r17
  801820:	8009883a 	mov	r4,r16
  801824:	1823883a 	mov	r17,r3
  801828:	1021883a 	mov	r16,r2
  80182c:	08034140 	call	803414 <__muldf3>
  801830:	180f883a 	mov	r7,r3
  801834:	880b883a 	mov	r5,r17
  801838:	8009883a 	mov	r4,r16
  80183c:	100d883a 	mov	r6,r2
  801840:	08033a00 	call	8033a0 <__adddf3>
  801844:	d9401c17 	ldw	r5,112(sp)
  801848:	d9001b17 	ldw	r4,108(sp)
  80184c:	a00d883a 	mov	r6,r20
  801850:	980f883a 	mov	r7,r19
  801854:	1029883a 	mov	r20,r2
  801858:	182b883a 	mov	r21,r3
  80185c:	08034140 	call	803414 <__muldf3>
  801860:	1025883a 	mov	r18,r2
  801864:	1827883a 	mov	r19,r3
  801868:	a009883a 	mov	r4,r20
  80186c:	a80b883a 	mov	r5,r21
  801870:	900d883a 	mov	r6,r18
  801874:	980f883a 	mov	r7,r19
  801878:	dd001d15 	stw	r20,116(sp)
  80187c:	dc801f15 	stw	r18,124(sp)
  801880:	dd401e15 	stw	r21,120(sp)
  801884:	dcc02015 	stw	r19,128(sp)
  801888:	08033a00 	call	8033a0 <__adddf3>
  80188c:	1823883a 	mov	r17,r3
  801890:	01102434 	movhi	r4,16528
  801894:	213fffc4 	addi	r4,r4,-1
  801898:	1021883a 	mov	r16,r2
  80189c:	182f883a 	mov	r23,r3
  8018a0:	dc401815 	stw	r17,96(sp)
  8018a4:	100b883a 	mov	r5,r2
  8018a8:	20c02c0e 	bge	r4,r3,80195c <__ieee754_pow+0xb44>
  8018ac:	00afdc34 	movhi	r2,49008
  8018b0:	1885883a 	add	r2,r3,r2
  8018b4:	2884b03a 	or	r2,r5,r2
  8018b8:	1001a626 	beq	r2,zero,801f54 <__ieee754_pow+0x113c>
  8018bc:	04220034 	movhi	r16,34816
  8018c0:	841d6704 	addi	r16,r16,30108
  8018c4:	045f8e34 	movhi	r17,32312
  8018c8:	8c790f04 	addi	r17,r17,-7108
  8018cc:	d9401a17 	ldw	r5,104(sp)
  8018d0:	d9001917 	ldw	r4,100(sp)
  8018d4:	800d883a 	mov	r6,r16
  8018d8:	880f883a 	mov	r7,r17
  8018dc:	08034140 	call	803414 <__muldf3>
  8018e0:	180b883a 	mov	r5,r3
  8018e4:	800d883a 	mov	r6,r16
  8018e8:	880f883a 	mov	r7,r17
  8018ec:	1009883a 	mov	r4,r2
  8018f0:	08034140 	call	803414 <__muldf3>
  8018f4:	003dc306 	br	801004 <__ieee754_pow+0x1ec>
  8018f8:	00b00434 	movhi	r2,49168
  8018fc:	9085883a 	add	r2,r18,r2
  801900:	e084b03a 	or	r2,fp,r2
  801904:	1000af1e 	bne	r2,zero,801bc4 <__ieee754_pow+0xdac>
  801908:	480f883a 	mov	r7,r9
  80190c:	4009883a 	mov	r4,r8
  801910:	480b883a 	mov	r5,r9
  801914:	400d883a 	mov	r6,r8
  801918:	003db406 	br	800fec <__ieee754_pow+0x1d4>
  80191c:	00bffc34 	movhi	r2,65520
  801920:	18ff0084 	addi	r3,r3,-1022
  801924:	a0a9883a 	add	r20,r20,r2
  801928:	d8c00015 	stw	r3,0(sp)
  80192c:	0009883a 	mov	r4,zero
  801930:	04000234 	movhi	r16,8
  801934:	003e1406 	br	801188 <__ieee754_pow+0x370>
  801938:	a80f883a 	mov	r7,r21
  80193c:	a009883a 	mov	r4,r20
  801940:	a80b883a 	mov	r5,r21
  801944:	a00d883a 	mov	r6,r20
  801948:	08034140 	call	803414 <__muldf3>
  80194c:	180b883a 	mov	r5,r3
  801950:	d8802815 	stw	r2,160(sp)
  801954:	d9402915 	stw	r5,164(sp)
  801958:	003d5606 	br	800eb4 <__ieee754_pow+0x9c>
  80195c:	d9001817 	ldw	r4,96(sp)
  801960:	00a00034 	movhi	r2,32768
  801964:	10bfffc4 	addi	r2,r2,-1
  801968:	00d02474 	movhi	r3,16529
  80196c:	18f2ffc4 	addi	r3,r3,-13313
  801970:	20b8703a 	and	fp,r4,r2
  801974:	1f009d0e 	bge	r3,fp,801bec <__ieee754_pow+0xdd4>
  801978:	008fdbf4 	movhi	r2,16239
  80197c:	108d0004 	addi	r2,r2,13312
  801980:	2085883a 	add	r2,r4,r2
  801984:	1144b03a 	or	r2,r2,r5
  801988:	1001c626 	beq	r2,zero,8020a4 <__ieee754_pow+0x128c>
  80198c:	0430be74 	movhi	r16,49913
  801990:	843cd644 	addi	r16,r16,-3239
  801994:	04406974 	movhi	r17,421
  801998:	8c5b87c4 	addi	r17,r17,28191
  80199c:	003fcb06 	br	8018cc <__ieee754_pow+0xab4>
  8019a0:	0005883a 	mov	r2,zero
  8019a4:	00cffc34 	movhi	r3,16368
  8019a8:	d8801915 	stw	r2,100(sp)
  8019ac:	d8c01a15 	stw	r3,104(sp)
  8019b0:	003f8c06 	br	8017e4 <__ieee754_pow+0x9cc>
  8019b4:	0005883a 	mov	r2,zero
  8019b8:	00cffc34 	movhi	r3,16368
  8019bc:	180b883a 	mov	r5,r3
  8019c0:	580f883a 	mov	r7,r11
  8019c4:	1009883a 	mov	r4,r2
  8019c8:	500d883a 	mov	r6,r10
  8019cc:	08037d80 	call	8037d8 <__divdf3>
  8019d0:	1011883a 	mov	r8,r2
  8019d4:	1813883a 	mov	r9,r3
  8019d8:	003d9506 	br	801030 <__ieee754_pow+0x218>
  8019dc:	008ffc34 	movhi	r2,16368
  8019e0:	10bfff84 	addi	r2,r2,-2
  8019e4:	14bdbb0e 	bge	r2,r18,8010d4 <__ieee754_pow+0x2bc>
  8019e8:	008ffc34 	movhi	r2,16368
  8019ec:	14bdae16 	blt	r2,r18,8010a8 <__ieee754_pow+0x290>
  8019f0:	580b883a 	mov	r5,r11
  8019f4:	5009883a 	mov	r4,r10
  8019f8:	000d883a 	mov	r6,zero
  8019fc:	100f883a 	mov	r7,r2
  801a00:	08033200 	call	803320 <__subdf3>
  801a04:	1021883a 	mov	r16,r2
  801a08:	1823883a 	mov	r17,r3
  801a0c:	00980034 	movhi	r2,24576
  801a10:	00cffdf4 	movhi	r3,16375
  801a14:	18c551c4 	addi	r3,r3,5447
  801a18:	8009883a 	mov	r4,r16
  801a1c:	880b883a 	mov	r5,r17
  801a20:	180f883a 	mov	r7,r3
  801a24:	100d883a 	mov	r6,r2
  801a28:	08034140 	call	803414 <__muldf3>
  801a2c:	023e17b4 	movhi	r8,63582
  801a30:	4237d104 	addi	r8,r8,-8380
  801a34:	024f9574 	movhi	r9,15957
  801a38:	4a6b82c4 	addi	r9,r9,-20981
  801a3c:	480f883a 	mov	r7,r9
  801a40:	400d883a 	mov	r6,r8
  801a44:	8009883a 	mov	r4,r16
  801a48:	880b883a 	mov	r5,r17
  801a4c:	102d883a 	mov	r22,r2
  801a50:	182f883a 	mov	r23,r3
  801a54:	08034140 	call	803414 <__muldf3>
  801a58:	8009883a 	mov	r4,r16
  801a5c:	880b883a 	mov	r5,r17
  801a60:	800d883a 	mov	r6,r16
  801a64:	880f883a 	mov	r7,r17
  801a68:	d8802a15 	stw	r2,168(sp)
  801a6c:	d8c02b15 	stw	r3,172(sp)
  801a70:	08034140 	call	803414 <__muldf3>
  801a74:	0011883a 	mov	r8,zero
  801a78:	026ff434 	movhi	r9,49104
  801a7c:	480f883a 	mov	r7,r9
  801a80:	8009883a 	mov	r4,r16
  801a84:	880b883a 	mov	r5,r17
  801a88:	400d883a 	mov	r6,r8
  801a8c:	1029883a 	mov	r20,r2
  801a90:	182b883a 	mov	r21,r3
  801a94:	08034140 	call	803414 <__muldf3>
  801a98:	02155574 	movhi	r8,21845
  801a9c:	42155544 	addi	r8,r8,21845
  801aa0:	024ff574 	movhi	r9,16341
  801aa4:	4a555544 	addi	r9,r9,21845
  801aa8:	480f883a 	mov	r7,r9
  801aac:	400d883a 	mov	r6,r8
  801ab0:	180b883a 	mov	r5,r3
  801ab4:	1009883a 	mov	r4,r2
  801ab8:	08033a00 	call	8033a0 <__adddf3>
  801abc:	180f883a 	mov	r7,r3
  801ac0:	8009883a 	mov	r4,r16
  801ac4:	880b883a 	mov	r5,r17
  801ac8:	100d883a 	mov	r6,r2
  801acc:	08034140 	call	803414 <__muldf3>
  801ad0:	0011883a 	mov	r8,zero
  801ad4:	024ff834 	movhi	r9,16352
  801ad8:	480b883a 	mov	r5,r9
  801adc:	4009883a 	mov	r4,r8
  801ae0:	180f883a 	mov	r7,r3
  801ae4:	100d883a 	mov	r6,r2
  801ae8:	08033200 	call	803320 <__subdf3>
  801aec:	180f883a 	mov	r7,r3
  801af0:	a80b883a 	mov	r5,r21
  801af4:	a009883a 	mov	r4,r20
  801af8:	100d883a 	mov	r6,r2
  801afc:	08034140 	call	803414 <__muldf3>
  801b00:	02194b34 	movhi	r8,25900
  801b04:	4220bf84 	addi	r8,r8,-32002
  801b08:	026ffdf4 	movhi	r9,49143
  801b0c:	4a4551c4 	addi	r9,r9,5447
  801b10:	480f883a 	mov	r7,r9
  801b14:	400d883a 	mov	r6,r8
  801b18:	180b883a 	mov	r5,r3
  801b1c:	1009883a 	mov	r4,r2
  801b20:	08034140 	call	803414 <__muldf3>
  801b24:	d9402b17 	ldw	r5,172(sp)
  801b28:	d9002a17 	ldw	r4,168(sp)
  801b2c:	180f883a 	mov	r7,r3
  801b30:	100d883a 	mov	r6,r2
  801b34:	08033a00 	call	8033a0 <__adddf3>
  801b38:	100d883a 	mov	r6,r2
  801b3c:	b009883a 	mov	r4,r22
  801b40:	b80b883a 	mov	r5,r23
  801b44:	180f883a 	mov	r7,r3
  801b48:	1021883a 	mov	r16,r2
  801b4c:	1823883a 	mov	r17,r3
  801b50:	08033a00 	call	8033a0 <__adddf3>
  801b54:	180b883a 	mov	r5,r3
  801b58:	0009883a 	mov	r4,zero
  801b5c:	b00d883a 	mov	r6,r22
  801b60:	b80f883a 	mov	r7,r23
  801b64:	d9001b15 	stw	r4,108(sp)
  801b68:	d8c01c15 	stw	r3,112(sp)
  801b6c:	08033200 	call	803320 <__subdf3>
  801b70:	1011883a 	mov	r8,r2
  801b74:	1813883a 	mov	r9,r3
  801b78:	8009883a 	mov	r4,r16
  801b7c:	880b883a 	mov	r5,r17
  801b80:	003f0b06 	br	8017b0 <__ieee754_pow+0x998>
  801b84:	0005883a 	mov	r2,zero
  801b88:	00d0d034 	movhi	r3,17216
  801b8c:	580b883a 	mov	r5,r11
  801b90:	5009883a 	mov	r4,r10
  801b94:	180f883a 	mov	r7,r3
  801b98:	100d883a 	mov	r6,r2
  801b9c:	08034140 	call	803414 <__muldf3>
  801ba0:	1015883a 	mov	r10,r2
  801ba4:	1825883a 	mov	r18,r3
  801ba8:	017ff2c4 	movi	r5,-53
  801bac:	003d6606 	br	801148 <__ieee754_pow+0x330>
  801bb0:	b03d300e 	bge	r22,zero,801074 <__ieee754_pow+0x25c>
  801bb4:	d9402917 	ldw	r5,164(sp)
  801bb8:	28e0003c 	xorhi	r3,r5,32768
  801bbc:	d8c02915 	stw	r3,164(sp)
  801bc0:	003cbc06 	br	800eb4 <__ieee754_pow+0x9c>
  801bc4:	00800044 	movi	r2,1
  801bc8:	e0bd1a1e 	bne	fp,r2,801034 <__ieee754_pow+0x21c>
  801bcc:	48e0003c 	xorhi	r3,r9,32768
  801bd0:	da002815 	stw	r8,160(sp)
  801bd4:	d8c02915 	stw	r3,164(sp)
  801bd8:	003cb606 	br	800eb4 <__ieee754_pow+0x9c>
  801bdc:	d9001817 	ldw	r4,96(sp)
  801be0:	00a00034 	movhi	r2,32768
  801be4:	10bfffc4 	addi	r2,r2,-1
  801be8:	20b8703a 	and	fp,r4,r2
  801bec:	008ff834 	movhi	r2,16352
  801bf0:	1700fc16 	blt	r2,fp,801fe4 <__ieee754_pow+0x11cc>
  801bf4:	0039883a 	mov	fp,zero
  801bf8:	d8001315 	stw	zero,76(sp)
  801bfc:	0025883a 	mov	r18,zero
  801c00:	0005883a 	mov	r2,zero
  801c04:	00cff9b4 	movhi	r3,16358
  801c08:	18cb90c4 	addi	r3,r3,11843
  801c0c:	9009883a 	mov	r4,r18
  801c10:	b80b883a 	mov	r5,r23
  801c14:	180f883a 	mov	r7,r3
  801c18:	100d883a 	mov	r6,r2
  801c1c:	08034140 	call	803414 <__muldf3>
  801c20:	d9c02017 	ldw	r7,128(sp)
  801c24:	d9801f17 	ldw	r6,124(sp)
  801c28:	9009883a 	mov	r4,r18
  801c2c:	b80b883a 	mov	r5,r23
  801c30:	b823883a 	mov	r17,r23
  801c34:	102d883a 	mov	r22,r2
  801c38:	182f883a 	mov	r23,r3
  801c3c:	08033200 	call	803320 <__subdf3>
  801c40:	d9401e17 	ldw	r5,120(sp)
  801c44:	d9001d17 	ldw	r4,116(sp)
  801c48:	180f883a 	mov	r7,r3
  801c4c:	100d883a 	mov	r6,r2
  801c50:	08033200 	call	803320 <__subdf3>
  801c54:	023fbeb4 	movhi	r8,65274
  801c58:	420e7bc4 	addi	r8,r8,14831
  801c5c:	024ff9b4 	movhi	r9,16358
  801c60:	4a4b9084 	addi	r9,r9,11842
  801c64:	480f883a 	mov	r7,r9
  801c68:	400d883a 	mov	r6,r8
  801c6c:	180b883a 	mov	r5,r3
  801c70:	1009883a 	mov	r4,r2
  801c74:	08034140 	call	803414 <__muldf3>
  801c78:	02032a34 	movhi	r8,3240
  801c7c:	421b0e44 	addi	r8,r8,27705
  801c80:	026f8834 	movhi	r9,48672
  801c84:	4a571844 	addi	r9,r9,23649
  801c88:	480f883a 	mov	r7,r9
  801c8c:	400d883a 	mov	r6,r8
  801c90:	9009883a 	mov	r4,r18
  801c94:	880b883a 	mov	r5,r17
  801c98:	1021883a 	mov	r16,r2
  801c9c:	1823883a 	mov	r17,r3
  801ca0:	08034140 	call	803414 <__muldf3>
  801ca4:	180f883a 	mov	r7,r3
  801ca8:	880b883a 	mov	r5,r17
  801cac:	8009883a 	mov	r4,r16
  801cb0:	100d883a 	mov	r6,r2
  801cb4:	08033a00 	call	8033a0 <__adddf3>
  801cb8:	100d883a 	mov	r6,r2
  801cbc:	b009883a 	mov	r4,r22
  801cc0:	b80b883a 	mov	r5,r23
  801cc4:	180f883a 	mov	r7,r3
  801cc8:	1021883a 	mov	r16,r2
  801ccc:	1823883a 	mov	r17,r3
  801cd0:	08033a00 	call	8033a0 <__adddf3>
  801cd4:	1009883a 	mov	r4,r2
  801cd8:	180b883a 	mov	r5,r3
  801cdc:	b00d883a 	mov	r6,r22
  801ce0:	b80f883a 	mov	r7,r23
  801ce4:	d8803915 	stw	r2,228(sp)
  801ce8:	d8c03a15 	stw	r3,232(sp)
  801cec:	d8801115 	stw	r2,68(sp)
  801cf0:	d8c01215 	stw	r3,72(sp)
  801cf4:	08033200 	call	803320 <__subdf3>
  801cf8:	180f883a 	mov	r7,r3
  801cfc:	8009883a 	mov	r4,r16
  801d00:	880b883a 	mov	r5,r17
  801d04:	100d883a 	mov	r6,r2
  801d08:	08033200 	call	803320 <__subdf3>
  801d0c:	d9001117 	ldw	r4,68(sp)
  801d10:	d9403a17 	ldw	r5,232(sp)
  801d14:	1029883a 	mov	r20,r2
  801d18:	200d883a 	mov	r6,r4
  801d1c:	280f883a 	mov	r7,r5
  801d20:	182b883a 	mov	r21,r3
  801d24:	08034140 	call	803414 <__muldf3>
  801d28:	1021883a 	mov	r16,r2
  801d2c:	1823883a 	mov	r17,r3
  801d30:	009caff4 	movhi	r2,29375
  801d34:	10a93404 	addi	r2,r2,-23344
  801d38:	00cf99b4 	movhi	r3,15974
  801d3c:	18cdda44 	addi	r3,r3,14185
  801d40:	8009883a 	mov	r4,r16
  801d44:	880b883a 	mov	r5,r17
  801d48:	180f883a 	mov	r7,r3
  801d4c:	100d883a 	mov	r6,r2
  801d50:	08034140 	call	803414 <__muldf3>
  801d54:	023174b4 	movhi	r8,50642
  801d58:	421afc44 	addi	r8,r8,27633
  801d5c:	024faf34 	movhi	r9,16060
  801d60:	4a6f5044 	addi	r9,r9,-17087
  801d64:	480f883a 	mov	r7,r9
  801d68:	400d883a 	mov	r6,r8
  801d6c:	180b883a 	mov	r5,r3
  801d70:	1009883a 	mov	r4,r2
  801d74:	08033200 	call	803320 <__subdf3>
  801d78:	180f883a 	mov	r7,r3
  801d7c:	8009883a 	mov	r4,r16
  801d80:	880b883a 	mov	r5,r17
  801d84:	100d883a 	mov	r6,r2
  801d88:	08034140 	call	803414 <__muldf3>
  801d8c:	022bc9b4 	movhi	r8,44838
  801d90:	42378b04 	addi	r8,r8,-8660
  801d94:	024fc474 	movhi	r9,16145
  801d98:	4a559a84 	addi	r9,r9,22122
  801d9c:	480f883a 	mov	r7,r9
  801da0:	400d883a 	mov	r6,r8
  801da4:	180b883a 	mov	r5,r3
  801da8:	1009883a 	mov	r4,r2
  801dac:	08033a00 	call	8033a0 <__adddf3>
  801db0:	180f883a 	mov	r7,r3
  801db4:	8009883a 	mov	r4,r16
  801db8:	880b883a 	mov	r5,r17
  801dbc:	100d883a 	mov	r6,r2
  801dc0:	08034140 	call	803414 <__muldf3>
  801dc4:	0205aff4 	movhi	r8,5823
  801dc8:	422f64c4 	addi	r8,r8,-17005
  801dcc:	024fd9f4 	movhi	r9,16231
  801dd0:	4a705b04 	addi	r9,r9,-16020
  801dd4:	480f883a 	mov	r7,r9
  801dd8:	400d883a 	mov	r6,r8
  801ddc:	180b883a 	mov	r5,r3
  801de0:	1009883a 	mov	r4,r2
  801de4:	08033200 	call	803320 <__subdf3>
  801de8:	180f883a 	mov	r7,r3
  801dec:	8009883a 	mov	r4,r16
  801df0:	880b883a 	mov	r5,r17
  801df4:	100d883a 	mov	r6,r2
  801df8:	08034140 	call	803414 <__muldf3>
  801dfc:	02155574 	movhi	r8,21845
  801e00:	42154f84 	addi	r8,r8,21822
  801e04:	024ff174 	movhi	r9,16325
  801e08:	4a555544 	addi	r9,r9,21845
  801e0c:	480f883a 	mov	r7,r9
  801e10:	400d883a 	mov	r6,r8
  801e14:	180b883a 	mov	r5,r3
  801e18:	1009883a 	mov	r4,r2
  801e1c:	08033a00 	call	8033a0 <__adddf3>
  801e20:	180f883a 	mov	r7,r3
  801e24:	8009883a 	mov	r4,r16
  801e28:	880b883a 	mov	r5,r17
  801e2c:	100d883a 	mov	r6,r2
  801e30:	08034140 	call	803414 <__muldf3>
  801e34:	d9001117 	ldw	r4,68(sp)
  801e38:	d9403a17 	ldw	r5,232(sp)
  801e3c:	180f883a 	mov	r7,r3
  801e40:	100d883a 	mov	r6,r2
  801e44:	08033200 	call	803320 <__subdf3>
  801e48:	d9001117 	ldw	r4,68(sp)
  801e4c:	d9403a17 	ldw	r5,232(sp)
  801e50:	100d883a 	mov	r6,r2
  801e54:	180f883a 	mov	r7,r3
  801e58:	1021883a 	mov	r16,r2
  801e5c:	1823883a 	mov	r17,r3
  801e60:	08034140 	call	803414 <__muldf3>
  801e64:	0011883a 	mov	r8,zero
  801e68:	02500034 	movhi	r9,16384
  801e6c:	480f883a 	mov	r7,r9
  801e70:	400d883a 	mov	r6,r8
  801e74:	8009883a 	mov	r4,r16
  801e78:	880b883a 	mov	r5,r17
  801e7c:	1021883a 	mov	r16,r2
  801e80:	1823883a 	mov	r17,r3
  801e84:	08033200 	call	803320 <__subdf3>
  801e88:	180f883a 	mov	r7,r3
  801e8c:	880b883a 	mov	r5,r17
  801e90:	8009883a 	mov	r4,r16
  801e94:	100d883a 	mov	r6,r2
  801e98:	08037d80 	call	8037d8 <__divdf3>
  801e9c:	d9001117 	ldw	r4,68(sp)
  801ea0:	d9403a17 	ldw	r5,232(sp)
  801ea4:	a00d883a 	mov	r6,r20
  801ea8:	a80f883a 	mov	r7,r21
  801eac:	1025883a 	mov	r18,r2
  801eb0:	1827883a 	mov	r19,r3
  801eb4:	08034140 	call	803414 <__muldf3>
  801eb8:	180f883a 	mov	r7,r3
  801ebc:	a009883a 	mov	r4,r20
  801ec0:	a80b883a 	mov	r5,r21
  801ec4:	100d883a 	mov	r6,r2
  801ec8:	08033a00 	call	8033a0 <__adddf3>
  801ecc:	180f883a 	mov	r7,r3
  801ed0:	980b883a 	mov	r5,r19
  801ed4:	9009883a 	mov	r4,r18
  801ed8:	100d883a 	mov	r6,r2
  801edc:	08033200 	call	803320 <__subdf3>
  801ee0:	d9801117 	ldw	r6,68(sp)
  801ee4:	d9c03a17 	ldw	r7,232(sp)
  801ee8:	180b883a 	mov	r5,r3
  801eec:	1009883a 	mov	r4,r2
  801ef0:	08033200 	call	803320 <__subdf3>
  801ef4:	0011883a 	mov	r8,zero
  801ef8:	024ffc34 	movhi	r9,16368
  801efc:	480b883a 	mov	r5,r9
  801f00:	180f883a 	mov	r7,r3
  801f04:	4009883a 	mov	r4,r8
  801f08:	100d883a 	mov	r6,r2
  801f0c:	08033200 	call	803320 <__subdf3>
  801f10:	100b883a 	mov	r5,r2
  801f14:	d8801317 	ldw	r2,76(sp)
  801f18:	10d5883a 	add	r10,r2,r3
  801f1c:	5005d53a 	srai	r2,r10,20
  801f20:	0080720e 	bge	zero,r2,8020ec <__ieee754_pow+0x12d4>
  801f24:	2811883a 	mov	r8,r5
  801f28:	5013883a 	mov	r9,r10
  801f2c:	d9c01a17 	ldw	r7,104(sp)
  801f30:	d9801917 	ldw	r6,100(sp)
  801f34:	480b883a 	mov	r5,r9
  801f38:	4009883a 	mov	r4,r8
  801f3c:	003e8206 	br	801948 <__ieee754_pow+0xb30>
  801f40:	0009883a 	mov	r4,zero
  801f44:	800b883a 	mov	r5,r16
  801f48:	a80f883a 	mov	r7,r21
  801f4c:	a00d883a 	mov	r6,r20
  801f50:	003c2b06 	br	801000 <__ieee754_pow+0x1e8>
  801f54:	d9001d17 	ldw	r4,116(sp)
  801f58:	00994b34 	movhi	r2,25900
  801f5c:	10a0bf84 	addi	r2,r2,-32002
  801f60:	00cf25f4 	movhi	r3,15511
  801f64:	18c551c4 	addi	r3,r3,5447
  801f68:	a80b883a 	mov	r5,r21
  801f6c:	180f883a 	mov	r7,r3
  801f70:	100d883a 	mov	r6,r2
  801f74:	08033a00 	call	8033a0 <__adddf3>
  801f78:	d9801f17 	ldw	r6,124(sp)
  801f7c:	880b883a 	mov	r5,r17
  801f80:	8009883a 	mov	r4,r16
  801f84:	980f883a 	mov	r7,r19
  801f88:	1021883a 	mov	r16,r2
  801f8c:	1823883a 	mov	r17,r3
  801f90:	08033200 	call	803320 <__subdf3>
  801f94:	180f883a 	mov	r7,r3
  801f98:	880b883a 	mov	r5,r17
  801f9c:	8009883a 	mov	r4,r16
  801fa0:	100d883a 	mov	r6,r2
  801fa4:	0803b400 	call	803b40 <__gtdf2>
  801fa8:	00bf0c0e 	bge	zero,r2,801bdc <__ieee754_pow+0xdc4>
  801fac:	04220034 	movhi	r16,34816
  801fb0:	841d6704 	addi	r16,r16,30108
  801fb4:	045f8e34 	movhi	r17,32312
  801fb8:	8c790f04 	addi	r17,r17,-7108
  801fbc:	d9401a17 	ldw	r5,104(sp)
  801fc0:	d9001917 	ldw	r4,100(sp)
  801fc4:	800d883a 	mov	r6,r16
  801fc8:	880f883a 	mov	r7,r17
  801fcc:	08034140 	call	803414 <__muldf3>
  801fd0:	180b883a 	mov	r5,r3
  801fd4:	800d883a 	mov	r6,r16
  801fd8:	880f883a 	mov	r7,r17
  801fdc:	1009883a 	mov	r4,r2
  801fe0:	003e5906 	br	801948 <__ieee754_pow+0xb30>
  801fe4:	e005d53a 	srai	r2,fp,20
  801fe8:	01800434 	movhi	r6,16
  801fec:	d9401817 	ldw	r5,96(sp)
  801ff0:	10bf0084 	addi	r2,r2,-1022
  801ff4:	308dd83a 	sra	r6,r6,r2
  801ff8:	02000434 	movhi	r8,16
  801ffc:	423fffc4 	addi	r8,r8,-1
  802000:	0005883a 	mov	r2,zero
  802004:	298d883a 	add	r6,r5,r6
  802008:	318b883a 	add	r5,r6,r6
  80200c:	320e703a 	and	r7,r6,r8
  802010:	1013883a 	mov	r9,r2
  802014:	280ad57a 	srli	r5,r5,21
  802018:	d8801817 	ldw	r2,96(sp)
  80201c:	01000504 	movi	r4,20
  802020:	297f0044 	addi	r5,r5,-1023
  802024:	4151d83a 	sra	r8,r8,r5
  802028:	39c00434 	orhi	r7,r7,16
  80202c:	2149c83a 	sub	r4,r4,r5
  802030:	0210303a 	nor	r8,zero,r8
  802034:	3939d83a 	sra	fp,r7,r4
  802038:	320e703a 	and	r7,r6,r8
  80203c:	10002916 	blt	r2,zero,8020e4 <__ieee754_pow+0x12cc>
  802040:	d9402017 	ldw	r5,128(sp)
  802044:	d9001f17 	ldw	r4,124(sp)
  802048:	480d883a 	mov	r6,r9
  80204c:	08033200 	call	803320 <__subdf3>
  802050:	180b883a 	mov	r5,r3
  802054:	d9402015 	stw	r5,128(sp)
  802058:	280f883a 	mov	r7,r5
  80205c:	d9001d17 	ldw	r4,116(sp)
  802060:	d9401e17 	ldw	r5,120(sp)
  802064:	1007883a 	mov	r3,r2
  802068:	180d883a 	mov	r6,r3
  80206c:	d8801f15 	stw	r2,124(sp)
  802070:	08033a00 	call	8033a0 <__adddf3>
  802074:	180b883a 	mov	r5,r3
  802078:	e006953a 	slli	r3,fp,20
  80207c:	282f883a 	mov	r23,r5
  802080:	d8c01315 	stw	r3,76(sp)
  802084:	003edd06 	br	801bfc <__ieee754_pow+0xde4>
  802088:	383bc81e 	bne	r7,zero,800fac <__ieee754_pow+0x194>
  80208c:	28c5c83a 	sub	r2,r5,r3
  802090:	8087d83a 	sra	r3,r16,r2
  802094:	1884983a 	sll	r2,r3,r2
  802098:	80801b26 	beq	r16,r2,802108 <__ieee754_pow+0x12f0>
  80209c:	0039883a 	mov	fp,zero
  8020a0:	003b9d06 	br	800f18 <__ieee754_pow+0x100>
  8020a4:	d9801f17 	ldw	r6,124(sp)
  8020a8:	8009883a 	mov	r4,r16
  8020ac:	880b883a 	mov	r5,r17
  8020b0:	980f883a 	mov	r7,r19
  8020b4:	08033200 	call	803320 <__subdf3>
  8020b8:	d9001d17 	ldw	r4,116(sp)
  8020bc:	a80b883a 	mov	r5,r21
  8020c0:	180f883a 	mov	r7,r3
  8020c4:	100d883a 	mov	r6,r2
  8020c8:	0803c500 	call	803c50 <__ledf2>
  8020cc:	00bfc516 	blt	zero,r2,801fe4 <__ieee754_pow+0x11cc>
  8020d0:	0430be74 	movhi	r16,49913
  8020d4:	843cd644 	addi	r16,r16,-3239
  8020d8:	04406974 	movhi	r17,421
  8020dc:	8c5b87c4 	addi	r17,r17,28191
  8020e0:	003fb606 	br	801fbc <__ieee754_pow+0x11a4>
  8020e4:	0739c83a 	sub	fp,zero,fp
  8020e8:	003fd506 	br	802040 <__ieee754_pow+0x1228>
  8020ec:	2809883a 	mov	r4,r5
  8020f0:	e00d883a 	mov	r6,fp
  8020f4:	180b883a 	mov	r5,r3
  8020f8:	080266c0 	call	80266c <scalbn>
  8020fc:	1011883a 	mov	r8,r2
  802100:	1813883a 	mov	r9,r3
  802104:	003f8906 	br	801f2c <__ieee754_pow+0x1114>
  802108:	18c0004c 	andi	r3,r3,1
  80210c:	00800084 	movi	r2,2
  802110:	10f9c83a 	sub	fp,r2,r3
  802114:	003b8006 	br	800f18 <__ieee754_pow+0x100>

00802118 <__ieee754_sqrt>:
  802118:	defffd04 	addi	sp,sp,-12
  80211c:	dc000015 	stw	r16,0(sp)
  802120:	009ffc34 	movhi	r2,32752
  802124:	2021883a 	mov	r16,r4
  802128:	291ffc2c 	andhi	r4,r5,32752
  80212c:	dc400115 	stw	r17,4(sp)
  802130:	dfc00215 	stw	ra,8(sp)
  802134:	2823883a 	mov	r17,r5
  802138:	280f883a 	mov	r7,r5
  80213c:	2807883a 	mov	r3,r5
  802140:	8011883a 	mov	r8,r16
  802144:	20807d26 	beq	r4,r2,80233c <__ieee754_sqrt+0x224>
  802148:	01408d0e 	bge	zero,r5,802380 <__ieee754_sqrt+0x268>
  80214c:	380dd53a 	srai	r6,r7,20
  802150:	3000131e 	bne	r6,zero,8021a0 <__ieee754_sqrt+0x88>
  802154:	1800041e 	bne	r3,zero,802168 <__ieee754_sqrt+0x50>
  802158:	400ed2fa 	srli	r7,r8,11
  80215c:	31bffac4 	addi	r6,r6,-21
  802160:	4010957a 	slli	r8,r8,21
  802164:	383ffc26 	beq	r7,zero,802158 <__ieee754_sqrt+0x40>
  802168:	3880042c 	andhi	r2,r7,16
  80216c:	1000991e 	bne	r2,zero,8023d4 <__ieee754_sqrt+0x2bc>
  802170:	0009883a 	mov	r4,zero
  802174:	39cf883a 	add	r7,r7,r7
  802178:	3880042c 	andhi	r2,r7,16
  80217c:	21000044 	addi	r4,r4,1
  802180:	103ffc26 	beq	r2,zero,802174 <__ieee754_sqrt+0x5c>
  802184:	00800804 	movi	r2,32
  802188:	1105c83a 	sub	r2,r2,r4
  80218c:	4086d83a 	srl	r3,r8,r2
  802190:	4110983a 	sll	r8,r8,r4
  802194:	3105c83a 	sub	r2,r6,r4
  802198:	38ceb03a 	or	r7,r7,r3
  80219c:	11800044 	addi	r6,r2,1
  8021a0:	31bf0044 	addi	r6,r6,-1023
  8021a4:	30c0004c 	andi	r3,r6,1
  8021a8:	00800434 	movhi	r2,16
  8021ac:	10bfffc4 	addi	r2,r2,-1
  8021b0:	3884703a 	and	r2,r7,r2
  8021b4:	1807003a 	cmpeq	r3,r3,zero
  8021b8:	11000434 	orhi	r4,r2,16
  8021bc:	18005426 	beq	r3,zero,802310 <__ieee754_sqrt+0x1f8>
  8021c0:	4004d7fa 	srli	r2,r8,31
  8021c4:	4207883a 	add	r3,r8,r8
  8021c8:	02800834 	movhi	r10,32
  8021cc:	1105883a 	add	r2,r2,r4
  8021d0:	2089883a 	add	r4,r4,r2
  8021d4:	0011883a 	mov	r8,zero
  8021d8:	000b883a 	mov	r5,zero
  8021dc:	0013883a 	mov	r9,zero
  8021e0:	02c00584 	movi	r11,22
  8021e4:	520f883a 	add	r7,r10,r8
  8021e8:	1804d7fa 	srli	r2,r3,31
  8021ec:	4a400044 	addi	r9,r9,1
  8021f0:	18c7883a 	add	r3,r3,r3
  8021f4:	21c00316 	blt	r4,r7,802204 <__ieee754_sqrt+0xec>
  8021f8:	21c9c83a 	sub	r4,r4,r7
  8021fc:	2a8b883a 	add	r5,r5,r10
  802200:	51d1883a 	add	r8,r10,r7
  802204:	1105883a 	add	r2,r2,r4
  802208:	5014d07a 	srli	r10,r10,1
  80220c:	2089883a 	add	r4,r4,r2
  802210:	4afff41e 	bne	r9,r11,8021e4 <__ieee754_sqrt+0xcc>
  802214:	02600034 	movhi	r9,32768
  802218:	0017883a 	mov	r11,zero
  80221c:	0019883a 	mov	r12,zero
  802220:	0015883a 	mov	r10,zero
  802224:	4821883a 	mov	r16,r9
  802228:	03c00804 	movi	r15,32
  80222c:	00000806 	br	802250 <__ieee754_sqrt+0x138>
  802230:	22003426 	beq	r4,r8,802304 <__ieee754_sqrt+0x1ec>
  802234:	1804d7fa 	srli	r2,r3,31
  802238:	52800044 	addi	r10,r10,1
  80223c:	18c7883a 	add	r3,r3,r3
  802240:	1105883a 	add	r2,r2,r4
  802244:	2089883a 	add	r4,r4,r2
  802248:	4812d07a 	srli	r9,r9,1
  80224c:	53c01326 	beq	r10,r15,80229c <__ieee754_sqrt+0x184>
  802250:	4acf883a 	add	r7,r9,r11
  802254:	413ff60e 	bge	r8,r4,802230 <__ieee754_sqrt+0x118>
  802258:	38a0002c 	andhi	r2,r7,32768
  80225c:	3a57883a 	add	r11,r7,r9
  802260:	14002426 	beq	r2,r16,8022f4 <__ieee754_sqrt+0x1dc>
  802264:	4005883a 	mov	r2,r8
  802268:	2209c83a 	sub	r4,r4,r8
  80226c:	19c0012e 	bgeu	r3,r7,802274 <__ieee754_sqrt+0x15c>
  802270:	213fffc4 	addi	r4,r4,-1
  802274:	19c7c83a 	sub	r3,r3,r7
  802278:	1011883a 	mov	r8,r2
  80227c:	1804d7fa 	srli	r2,r3,31
  802280:	52800044 	addi	r10,r10,1
  802284:	6259883a 	add	r12,r12,r9
  802288:	1105883a 	add	r2,r2,r4
  80228c:	18c7883a 	add	r3,r3,r3
  802290:	2089883a 	add	r4,r4,r2
  802294:	4812d07a 	srli	r9,r9,1
  802298:	53ffed1e 	bne	r10,r15,802250 <__ieee754_sqrt+0x138>
  80229c:	20c4b03a 	or	r2,r4,r3
  8022a0:	1000201e 	bne	r2,zero,802324 <__ieee754_sqrt+0x20c>
  8022a4:	600ed07a 	srli	r7,r12,1
  8022a8:	2880004c 	andi	r2,r5,1
  8022ac:	1005003a 	cmpeq	r2,r2,zero
  8022b0:	1000011e 	bne	r2,zero,8022b8 <__ieee754_sqrt+0x1a0>
  8022b4:	39e00034 	orhi	r7,r7,32768
  8022b8:	300dd07a 	srai	r6,r6,1
  8022bc:	280bd07a 	srai	r5,r5,1
  8022c0:	010ff834 	movhi	r4,16352
  8022c4:	300c953a 	slli	r6,r6,20
  8022c8:	290b883a 	add	r5,r5,r4
  8022cc:	3821883a 	mov	r16,r7
  8022d0:	299d883a 	add	r14,r5,r6
  8022d4:	7023883a 	mov	r17,r14
  8022d8:	8005883a 	mov	r2,r16
  8022dc:	8807883a 	mov	r3,r17
  8022e0:	dfc00217 	ldw	ra,8(sp)
  8022e4:	dc400117 	ldw	r17,4(sp)
  8022e8:	dc000017 	ldw	r16,0(sp)
  8022ec:	dec00304 	addi	sp,sp,12
  8022f0:	f800283a 	ret
  8022f4:	5884703a 	and	r2,r11,r2
  8022f8:	103fda1e 	bne	r2,zero,802264 <__ieee754_sqrt+0x14c>
  8022fc:	40800044 	addi	r2,r8,1
  802300:	003fd906 	br	802268 <__ieee754_sqrt+0x150>
  802304:	19ffd42e 	bgeu	r3,r7,802258 <__ieee754_sqrt+0x140>
  802308:	2011883a 	mov	r8,r4
  80230c:	003fc906 	br	802234 <__ieee754_sqrt+0x11c>
  802310:	4004d7fa 	srli	r2,r8,31
  802314:	4211883a 	add	r8,r8,r8
  802318:	1105883a 	add	r2,r2,r4
  80231c:	2089883a 	add	r4,r4,r2
  802320:	003fa706 	br	8021c0 <__ieee754_sqrt+0xa8>
  802324:	00bfffc4 	movi	r2,-1
  802328:	60802726 	beq	r12,r2,8023c8 <__ieee754_sqrt+0x2b0>
  80232c:	6080004c 	andi	r2,r12,1
  802330:	6085883a 	add	r2,r12,r2
  802334:	100ed07a 	srli	r7,r2,1
  802338:	003fdb06 	br	8022a8 <__ieee754_sqrt+0x190>
  80233c:	8009883a 	mov	r4,r16
  802340:	800d883a 	mov	r6,r16
  802344:	08034140 	call	803414 <__muldf3>
  802348:	180f883a 	mov	r7,r3
  80234c:	880b883a 	mov	r5,r17
  802350:	8009883a 	mov	r4,r16
  802354:	100d883a 	mov	r6,r2
  802358:	08033a00 	call	8033a0 <__adddf3>
  80235c:	1021883a 	mov	r16,r2
  802360:	1823883a 	mov	r17,r3
  802364:	8005883a 	mov	r2,r16
  802368:	8807883a 	mov	r3,r17
  80236c:	dfc00217 	ldw	ra,8(sp)
  802370:	dc400117 	ldw	r17,4(sp)
  802374:	dc000017 	ldw	r16,0(sp)
  802378:	dec00304 	addi	sp,sp,12
  80237c:	f800283a 	ret
  802380:	00a00034 	movhi	r2,32768
  802384:	10bfffc4 	addi	r2,r2,-1
  802388:	2884703a 	and	r2,r5,r2
  80238c:	8084b03a 	or	r2,r16,r2
  802390:	103fd126 	beq	r2,zero,8022d8 <__ieee754_sqrt+0x1c0>
  802394:	283f6d26 	beq	r5,zero,80214c <__ieee754_sqrt+0x34>
  802398:	280f883a 	mov	r7,r5
  80239c:	8009883a 	mov	r4,r16
  8023a0:	800d883a 	mov	r6,r16
  8023a4:	08033200 	call	803320 <__subdf3>
  8023a8:	1009883a 	mov	r4,r2
  8023ac:	180b883a 	mov	r5,r3
  8023b0:	100d883a 	mov	r6,r2
  8023b4:	180f883a 	mov	r7,r3
  8023b8:	08037d80 	call	8037d8 <__divdf3>
  8023bc:	1021883a 	mov	r16,r2
  8023c0:	1823883a 	mov	r17,r3
  8023c4:	003fc406 	br	8022d8 <__ieee754_sqrt+0x1c0>
  8023c8:	29400044 	addi	r5,r5,1
  8023cc:	000f883a 	mov	r7,zero
  8023d0:	003fb506 	br	8022a8 <__ieee754_sqrt+0x190>
  8023d4:	0009883a 	mov	r4,zero
  8023d8:	00800804 	movi	r2,32
  8023dc:	003f6b06 	br	80218c <__ieee754_sqrt+0x74>

008023e0 <fabs>:
  8023e0:	01e00034 	movhi	r7,32768
  8023e4:	39ffffc4 	addi	r7,r7,-1
  8023e8:	394e703a 	and	r7,r7,r5
  8023ec:	2005883a 	mov	r2,r4
  8023f0:	3807883a 	mov	r3,r7
  8023f4:	f800283a 	ret

008023f8 <finite>:
  8023f8:	00a00034 	movhi	r2,32768
  8023fc:	10bfffc4 	addi	r2,r2,-1
  802400:	2884703a 	and	r2,r5,r2
  802404:	01600434 	movhi	r5,32784
  802408:	1145883a 	add	r2,r2,r5
  80240c:	1004d7fa 	srli	r2,r2,31
  802410:	f800283a 	ret

00802414 <__isnand>:
  802414:	200d883a 	mov	r6,r4
  802418:	0109c83a 	sub	r4,zero,r4
  80241c:	2188b03a 	or	r4,r4,r6
  802420:	2008d7fa 	srli	r4,r4,31
  802424:	00a00034 	movhi	r2,32768
  802428:	10bfffc4 	addi	r2,r2,-1
  80242c:	1144703a 	and	r2,r2,r5
  802430:	2088b03a 	or	r4,r4,r2
  802434:	009ffc34 	movhi	r2,32752
  802438:	1105c83a 	sub	r2,r2,r4
  80243c:	1004d7fa 	srli	r2,r2,31
  802440:	f800283a 	ret

00802444 <matherr>:
  802444:	0005883a 	mov	r2,zero
  802448:	f800283a 	ret

0080244c <nan>:
  80244c:	015ffe34 	movhi	r5,32760
  802450:	0005883a 	mov	r2,zero
  802454:	2807883a 	mov	r3,r5
  802458:	f800283a 	ret

0080245c <rint>:
  80245c:	2015883a 	mov	r10,r4
  802460:	2809d53a 	srai	r4,r5,20
  802464:	defff904 	addi	sp,sp,-28
  802468:	034004c4 	movi	r13,19
  80246c:	2101ffcc 	andi	r4,r4,2047
  802470:	227f0044 	addi	r9,r4,-1023
  802474:	dc800415 	stw	r18,16(sp)
  802478:	dfc00615 	stw	ra,24(sp)
  80247c:	dcc00515 	stw	r19,20(sp)
  802480:	dc400315 	stw	r17,12(sp)
  802484:	dc000215 	stw	r16,8(sp)
  802488:	2817883a 	mov	r11,r5
  80248c:	500d883a 	mov	r6,r10
  802490:	2824d7fa 	srli	r18,r5,31
  802494:	6a403016 	blt	r13,r9,802558 <rint+0xfc>
  802498:	48004916 	blt	r9,zero,8025c0 <rint+0x164>
  80249c:	00800434 	movhi	r2,16
  8024a0:	10bfffc4 	addi	r2,r2,-1
  8024a4:	1247d83a 	sra	r3,r2,r9
  8024a8:	2809883a 	mov	r4,r5
  8024ac:	1944703a 	and	r2,r3,r5
  8024b0:	5084b03a 	or	r2,r10,r2
  8024b4:	10001f26 	beq	r2,zero,802534 <rint+0xd8>
  8024b8:	180ad07a 	srli	r5,r3,1
  8024bc:	5944703a 	and	r2,r11,r5
  8024c0:	5084b03a 	or	r2,r10,r2
  8024c4:	10000626 	beq	r2,zero,8024e0 <rint+0x84>
  8024c8:	4b406626 	beq	r9,r13,802664 <rint+0x208>
  8024cc:	00c000b4 	movhi	r3,2
  8024d0:	1a47d83a 	sra	r3,r3,r9
  8024d4:	0144303a 	nor	r2,zero,r5
  8024d8:	5884703a 	and	r2,r11,r2
  8024dc:	10c8b03a 	or	r4,r2,r3
  8024e0:	900690fa 	slli	r3,r18,3
  8024e4:	00802074 	movhi	r2,129
  8024e8:	10912b04 	addi	r2,r2,17580
  8024ec:	200f883a 	mov	r7,r4
  8024f0:	1887883a 	add	r3,r3,r2
  8024f4:	1c000017 	ldw	r16,0(r3)
  8024f8:	1c400117 	ldw	r17,4(r3)
  8024fc:	8009883a 	mov	r4,r16
  802500:	880b883a 	mov	r5,r17
  802504:	08033a00 	call	8033a0 <__adddf3>
  802508:	d8800015 	stw	r2,0(sp)
  80250c:	d8c00115 	stw	r3,4(sp)
  802510:	d8800017 	ldw	r2,0(sp)
  802514:	d8c00117 	ldw	r3,4(sp)
  802518:	880f883a 	mov	r7,r17
  80251c:	800d883a 	mov	r6,r16
  802520:	180b883a 	mov	r5,r3
  802524:	1009883a 	mov	r4,r2
  802528:	08033200 	call	803320 <__subdf3>
  80252c:	1015883a 	mov	r10,r2
  802530:	1817883a 	mov	r11,r3
  802534:	5005883a 	mov	r2,r10
  802538:	5807883a 	mov	r3,r11
  80253c:	dfc00617 	ldw	ra,24(sp)
  802540:	dcc00517 	ldw	r19,20(sp)
  802544:	dc800417 	ldw	r18,16(sp)
  802548:	dc400317 	ldw	r17,12(sp)
  80254c:	dc000217 	ldw	r16,8(sp)
  802550:	dec00704 	addi	sp,sp,28
  802554:	f800283a 	ret
  802558:	00800cc4 	movi	r2,51
  80255c:	12400f16 	blt	r2,r9,80259c <rint+0x140>
  802560:	213efb44 	addi	r4,r4,-1043
  802564:	00bfffc4 	movi	r2,-1
  802568:	1104d83a 	srl	r2,r2,r4
  80256c:	5086703a 	and	r3,r10,r2
  802570:	183ff026 	beq	r3,zero,802534 <rint+0xd8>
  802574:	100ad07a 	srli	r5,r2,1
  802578:	5144703a 	and	r2,r10,r5
  80257c:	10000526 	beq	r2,zero,802594 <rint+0x138>
  802580:	00d00034 	movhi	r3,16384
  802584:	1907d83a 	sra	r3,r3,r4
  802588:	0144303a 	nor	r2,zero,r5
  80258c:	5084703a 	and	r2,r10,r2
  802590:	10ccb03a 	or	r6,r2,r3
  802594:	5809883a 	mov	r4,r11
  802598:	003fd106 	br	8024e0 <rint+0x84>
  80259c:	00810004 	movi	r2,1024
  8025a0:	48bfe41e 	bne	r9,r2,802534 <rint+0xd8>
  8025a4:	5009883a 	mov	r4,r10
  8025a8:	500d883a 	mov	r6,r10
  8025ac:	280f883a 	mov	r7,r5
  8025b0:	08033a00 	call	8033a0 <__adddf3>
  8025b4:	1015883a 	mov	r10,r2
  8025b8:	1817883a 	mov	r11,r3
  8025bc:	003fdd06 	br	802534 <rint+0xd8>
  8025c0:	04e00034 	movhi	r19,32768
  8025c4:	9cffffc4 	addi	r19,r19,-1
  8025c8:	2cc4703a 	and	r2,r5,r19
  8025cc:	5084b03a 	or	r2,r10,r2
  8025d0:	103fd826 	beq	r2,zero,802534 <rint+0xd8>
  8025d4:	00c00434 	movhi	r3,16
  8025d8:	18ffffc4 	addi	r3,r3,-1
  8025dc:	28c6703a 	and	r3,r5,r3
  8025e0:	50c6b03a 	or	r3,r10,r3
  8025e4:	00cdc83a 	sub	r6,zero,r3
  8025e8:	900a90fa 	slli	r5,r18,3
  8025ec:	1986b03a 	or	r3,r3,r6
  8025f0:	01002074 	movhi	r4,129
  8025f4:	21112b04 	addi	r4,r4,17580
  8025f8:	1806d33a 	srli	r3,r3,12
  8025fc:	290b883a 	add	r5,r5,r4
  802600:	2c000017 	ldw	r16,0(r5)
  802604:	2c400117 	ldw	r17,4(r5)
  802608:	593fffac 	andhi	r4,r11,65534
  80260c:	18c0022c 	andhi	r3,r3,8
  802610:	1906b03a 	or	r3,r3,r4
  802614:	500d883a 	mov	r6,r10
  802618:	180f883a 	mov	r7,r3
  80261c:	8009883a 	mov	r4,r16
  802620:	880b883a 	mov	r5,r17
  802624:	08033a00 	call	8033a0 <__adddf3>
  802628:	d8800015 	stw	r2,0(sp)
  80262c:	d8c00115 	stw	r3,4(sp)
  802630:	d8800017 	ldw	r2,0(sp)
  802634:	d8c00117 	ldw	r3,4(sp)
  802638:	880f883a 	mov	r7,r17
  80263c:	800d883a 	mov	r6,r16
  802640:	180b883a 	mov	r5,r3
  802644:	1009883a 	mov	r4,r2
  802648:	08033200 	call	803320 <__subdf3>
  80264c:	901297fa 	slli	r9,r18,31
  802650:	98d0703a 	and	r8,r19,r3
  802654:	1015883a 	mov	r10,r2
  802658:	4250b03a 	or	r8,r8,r9
  80265c:	4017883a 	mov	r11,r8
  802660:	003fb406 	br	802534 <rint+0xd8>
  802664:	01900034 	movhi	r6,16384
  802668:	003f9d06 	br	8024e0 <rint+0x84>

0080266c <scalbn>:
  80266c:	2011883a 	mov	r8,r4
  802670:	291ffc2c 	andhi	r4,r5,32752
  802674:	2009d53a 	srai	r4,r4,20
  802678:	defffd04 	addi	sp,sp,-12
  80267c:	dc000015 	stw	r16,0(sp)
  802680:	dfc00215 	stw	ra,8(sp)
  802684:	dc400115 	stw	r17,4(sp)
  802688:	2813883a 	mov	r9,r5
  80268c:	2815883a 	mov	r10,r5
  802690:	3021883a 	mov	r16,r6
  802694:	2000281e 	bne	r4,zero,802738 <scalbn+0xcc>
  802698:	00a00034 	movhi	r2,32768
  80269c:	10bfffc4 	addi	r2,r2,-1
  8026a0:	2884703a 	and	r2,r5,r2
  8026a4:	4084b03a 	or	r2,r8,r2
  8026a8:	10001826 	beq	r2,zero,80270c <scalbn+0xa0>
  8026ac:	0005883a 	mov	r2,zero
  8026b0:	00d0d434 	movhi	r3,17232
  8026b4:	4009883a 	mov	r4,r8
  8026b8:	100d883a 	mov	r6,r2
  8026bc:	180f883a 	mov	r7,r3
  8026c0:	08034140 	call	803414 <__muldf3>
  8026c4:	100b883a 	mov	r5,r2
  8026c8:	1011883a 	mov	r8,r2
  8026cc:	00bffff4 	movhi	r2,65535
  8026d0:	108f2c04 	addi	r2,r2,15536
  8026d4:	180d883a 	mov	r6,r3
  8026d8:	1813883a 	mov	r9,r3
  8026dc:	8080120e 	bge	r16,r2,802728 <scalbn+0xbc>
  8026e0:	00b0be74 	movhi	r2,49913
  8026e4:	10bcd644 	addi	r2,r2,-3239
  8026e8:	00c06974 	movhi	r3,421
  8026ec:	18db87c4 	addi	r3,r3,28191
  8026f0:	2809883a 	mov	r4,r5
  8026f4:	180f883a 	mov	r7,r3
  8026f8:	300b883a 	mov	r5,r6
  8026fc:	100d883a 	mov	r6,r2
  802700:	08034140 	call	803414 <__muldf3>
  802704:	1011883a 	mov	r8,r2
  802708:	1813883a 	mov	r9,r3
  80270c:	4005883a 	mov	r2,r8
  802710:	4807883a 	mov	r3,r9
  802714:	dfc00217 	ldw	ra,8(sp)
  802718:	dc400117 	ldw	r17,4(sp)
  80271c:	dc000017 	ldw	r16,0(sp)
  802720:	dec00304 	addi	sp,sp,12
  802724:	f800283a 	ret
  802728:	189ffc2c 	andhi	r2,r3,32752
  80272c:	1005d53a 	srai	r2,r2,20
  802730:	1815883a 	mov	r10,r3
  802734:	113ff284 	addi	r4,r2,-54
  802738:	0081ffc4 	movi	r2,2047
  80273c:	20801126 	beq	r4,r2,802784 <scalbn+0x118>
  802740:	2409883a 	add	r4,r4,r16
  802744:	0081ff84 	movi	r2,2046
  802748:	11001c16 	blt	r2,r4,8027bc <scalbn+0x150>
  80274c:	0100290e 	bge	zero,r4,8027f4 <scalbn+0x188>
  802750:	200a953a 	slli	r5,r4,20
  802754:	01200434 	movhi	r4,32784
  802758:	213fffc4 	addi	r4,r4,-1
  80275c:	5108703a 	and	r4,r10,r4
  802760:	2148b03a 	or	r4,r4,r5
  802764:	2013883a 	mov	r9,r4
  802768:	4005883a 	mov	r2,r8
  80276c:	4807883a 	mov	r3,r9
  802770:	dfc00217 	ldw	ra,8(sp)
  802774:	dc400117 	ldw	r17,4(sp)
  802778:	dc000017 	ldw	r16,0(sp)
  80277c:	dec00304 	addi	sp,sp,12
  802780:	f800283a 	ret
  802784:	480f883a 	mov	r7,r9
  802788:	4009883a 	mov	r4,r8
  80278c:	480b883a 	mov	r5,r9
  802790:	400d883a 	mov	r6,r8
  802794:	08033a00 	call	8033a0 <__adddf3>
  802798:	1011883a 	mov	r8,r2
  80279c:	1813883a 	mov	r9,r3
  8027a0:	4005883a 	mov	r2,r8
  8027a4:	4807883a 	mov	r3,r9
  8027a8:	dfc00217 	ldw	ra,8(sp)
  8027ac:	dc400117 	ldw	r17,4(sp)
  8027b0:	dc000017 	ldw	r16,0(sp)
  8027b4:	dec00304 	addi	sp,sp,12
  8027b8:	f800283a 	ret
  8027bc:	04220034 	movhi	r16,34816
  8027c0:	841d6704 	addi	r16,r16,30108
  8027c4:	045f8e34 	movhi	r17,32312
  8027c8:	8c790f04 	addi	r17,r17,-7108
  8027cc:	480f883a 	mov	r7,r9
  8027d0:	400d883a 	mov	r6,r8
  8027d4:	8009883a 	mov	r4,r16
  8027d8:	880b883a 	mov	r5,r17
  8027dc:	080284c0 	call	80284c <copysign>
  8027e0:	180b883a 	mov	r5,r3
  8027e4:	800d883a 	mov	r6,r16
  8027e8:	880f883a 	mov	r7,r17
  8027ec:	1009883a 	mov	r4,r2
  8027f0:	003fc306 	br	802700 <scalbn+0x94>
  8027f4:	00bff284 	movi	r2,-54
  8027f8:	11000716 	blt	r2,r4,802818 <scalbn+0x1ac>
  8027fc:	00b0d414 	movui	r2,50000
  802800:	143fee16 	blt	r2,r16,8027bc <scalbn+0x150>
  802804:	0430be74 	movhi	r16,49913
  802808:	843cd644 	addi	r16,r16,-3239
  80280c:	04406974 	movhi	r17,421
  802810:	8c5b87c4 	addi	r17,r17,28191
  802814:	003fed06 	br	8027cc <scalbn+0x160>
  802818:	21000d84 	addi	r4,r4,54
  80281c:	2008953a 	slli	r4,r4,20
  802820:	01e00434 	movhi	r7,32784
  802824:	39ffffc4 	addi	r7,r7,-1
  802828:	51ce703a 	and	r7,r10,r7
  80282c:	390eb03a 	or	r7,r7,r4
  802830:	024f2434 	movhi	r9,15504
  802834:	4009883a 	mov	r4,r8
  802838:	0011883a 	mov	r8,zero
  80283c:	380b883a 	mov	r5,r7
  802840:	400d883a 	mov	r6,r8
  802844:	480f883a 	mov	r7,r9
  802848:	003fad06 	br	802700 <scalbn+0x94>

0080284c <copysign>:
  80284c:	3813883a 	mov	r9,r7
  802850:	01e00034 	movhi	r7,32768
  802854:	39ffffc4 	addi	r7,r7,-1
  802858:	394e703a 	and	r7,r7,r5
  80285c:	4aa0002c 	andhi	r10,r9,32768
  802860:	3a8eb03a 	or	r7,r7,r10
  802864:	2005883a 	mov	r2,r4
  802868:	3807883a 	mov	r3,r7
  80286c:	f800283a 	ret

00802870 <_fpadd_parts>:
  802870:	21c00017 	ldw	r7,0(r4)
  802874:	02000044 	movi	r8,1
  802878:	41c0332e 	bgeu	r8,r7,802948 <_fpadd_parts+0xd8>
  80287c:	28800017 	ldw	r2,0(r5)
  802880:	4080462e 	bgeu	r8,r2,80299c <_fpadd_parts+0x12c>
  802884:	00c00104 	movi	r3,4
  802888:	38c06b26 	beq	r7,r3,802a38 <_fpadd_parts+0x1c8>
  80288c:	10c04326 	beq	r2,r3,80299c <_fpadd_parts+0x12c>
  802890:	00c00084 	movi	r3,2
  802894:	10c02e26 	beq	r2,r3,802950 <_fpadd_parts+0xe0>
  802898:	38c04026 	beq	r7,r3,80299c <_fpadd_parts+0x12c>
  80289c:	22800217 	ldw	r10,8(r4)
  8028a0:	28c00217 	ldw	r3,8(r5)
  8028a4:	23000317 	ldw	r12,12(r4)
  8028a8:	2a400317 	ldw	r9,12(r5)
  8028ac:	50cfc83a 	sub	r7,r10,r3
  8028b0:	3817883a 	mov	r11,r7
  8028b4:	38004f16 	blt	r7,zero,8029f4 <_fpadd_parts+0x184>
  8028b8:	008007c4 	movi	r2,31
  8028bc:	11c03316 	blt	r2,r7,80298c <_fpadd_parts+0x11c>
  8028c0:	02c0540e 	bge	zero,r11,802a14 <_fpadd_parts+0x1a4>
  8028c4:	41c4983a 	sll	r2,r8,r7
  8028c8:	49c6d83a 	srl	r3,r9,r7
  8028cc:	10bfffc4 	addi	r2,r2,-1
  8028d0:	4884703a 	and	r2,r9,r2
  8028d4:	1004c03a 	cmpne	r2,r2,zero
  8028d8:	1892b03a 	or	r9,r3,r2
  8028dc:	20c00117 	ldw	r3,4(r4)
  8028e0:	28800117 	ldw	r2,4(r5)
  8028e4:	18803c26 	beq	r3,r2,8029d8 <_fpadd_parts+0x168>
  8028e8:	18002f26 	beq	r3,zero,8029a8 <_fpadd_parts+0x138>
  8028ec:	4b05c83a 	sub	r2,r9,r12
  8028f0:	10004216 	blt	r2,zero,8029fc <_fpadd_parts+0x18c>
  8028f4:	32800215 	stw	r10,8(r6)
  8028f8:	30800315 	stw	r2,12(r6)
  8028fc:	30000115 	stw	zero,4(r6)
  802900:	31000317 	ldw	r4,12(r6)
  802904:	01d00034 	movhi	r7,16384
  802908:	39ffff84 	addi	r7,r7,-2
  80290c:	20bfffc4 	addi	r2,r4,-1
  802910:	2007883a 	mov	r3,r4
  802914:	38800836 	bltu	r7,r2,802938 <_fpadd_parts+0xc8>
  802918:	31400217 	ldw	r5,8(r6)
  80291c:	18c9883a 	add	r4,r3,r3
  802920:	20bfffc4 	addi	r2,r4,-1
  802924:	297fffc4 	addi	r5,r5,-1
  802928:	2007883a 	mov	r3,r4
  80292c:	38bffb2e 	bgeu	r7,r2,80291c <_fpadd_parts+0xac>
  802930:	31400215 	stw	r5,8(r6)
  802934:	31000315 	stw	r4,12(r6)
  802938:	008000c4 	movi	r2,3
  80293c:	30800015 	stw	r2,0(r6)
  802940:	20001b16 	blt	r4,zero,8029b0 <_fpadd_parts+0x140>
  802944:	3009883a 	mov	r4,r6
  802948:	2005883a 	mov	r2,r4
  80294c:	f800283a 	ret
  802950:	38fffd1e 	bne	r7,r3,802948 <_fpadd_parts+0xd8>
  802954:	31c00015 	stw	r7,0(r6)
  802958:	20800117 	ldw	r2,4(r4)
  80295c:	30800115 	stw	r2,4(r6)
  802960:	20c00217 	ldw	r3,8(r4)
  802964:	30c00215 	stw	r3,8(r6)
  802968:	20800317 	ldw	r2,12(r4)
  80296c:	30800315 	stw	r2,12(r6)
  802970:	20c00117 	ldw	r3,4(r4)
  802974:	28800117 	ldw	r2,4(r5)
  802978:	3009883a 	mov	r4,r6
  80297c:	1886703a 	and	r3,r3,r2
  802980:	2005883a 	mov	r2,r4
  802984:	30c00115 	stw	r3,4(r6)
  802988:	f800283a 	ret
  80298c:	1a801716 	blt	r3,r10,8029ec <_fpadd_parts+0x17c>
  802990:	1815883a 	mov	r10,r3
  802994:	0019883a 	mov	r12,zero
  802998:	003fd006 	br	8028dc <_fpadd_parts+0x6c>
  80299c:	2809883a 	mov	r4,r5
  8029a0:	2005883a 	mov	r2,r4
  8029a4:	f800283a 	ret
  8029a8:	6245c83a 	sub	r2,r12,r9
  8029ac:	003fd006 	br	8028f0 <_fpadd_parts+0x80>
  8029b0:	30800217 	ldw	r2,8(r6)
  8029b4:	2006d07a 	srli	r3,r4,1
  8029b8:	2100004c 	andi	r4,r4,1
  8029bc:	10800044 	addi	r2,r2,1
  8029c0:	1906b03a 	or	r3,r3,r4
  8029c4:	3009883a 	mov	r4,r6
  8029c8:	30800215 	stw	r2,8(r6)
  8029cc:	2005883a 	mov	r2,r4
  8029d0:	30c00315 	stw	r3,12(r6)
  8029d4:	f800283a 	ret
  8029d8:	4b09883a 	add	r4,r9,r12
  8029dc:	30c00115 	stw	r3,4(r6)
  8029e0:	32800215 	stw	r10,8(r6)
  8029e4:	31000315 	stw	r4,12(r6)
  8029e8:	003fd306 	br	802938 <_fpadd_parts+0xc8>
  8029ec:	0013883a 	mov	r9,zero
  8029f0:	003fba06 	br	8028dc <_fpadd_parts+0x6c>
  8029f4:	01cfc83a 	sub	r7,zero,r7
  8029f8:	003faf06 	br	8028b8 <_fpadd_parts+0x48>
  8029fc:	0089c83a 	sub	r4,zero,r2
  802a00:	00800044 	movi	r2,1
  802a04:	30800115 	stw	r2,4(r6)
  802a08:	32800215 	stw	r10,8(r6)
  802a0c:	31000315 	stw	r4,12(r6)
  802a10:	003fbb06 	br	802900 <_fpadd_parts+0x90>
  802a14:	583fb126 	beq	r11,zero,8028dc <_fpadd_parts+0x6c>
  802a18:	41c4983a 	sll	r2,r8,r7
  802a1c:	61c6d83a 	srl	r3,r12,r7
  802a20:	51d5883a 	add	r10,r10,r7
  802a24:	10bfffc4 	addi	r2,r2,-1
  802a28:	6084703a 	and	r2,r12,r2
  802a2c:	1004c03a 	cmpne	r2,r2,zero
  802a30:	1898b03a 	or	r12,r3,r2
  802a34:	003fa906 	br	8028dc <_fpadd_parts+0x6c>
  802a38:	11ffc31e 	bne	r2,r7,802948 <_fpadd_parts+0xd8>
  802a3c:	28c00117 	ldw	r3,4(r5)
  802a40:	20800117 	ldw	r2,4(r4)
  802a44:	10ffc026 	beq	r2,r3,802948 <_fpadd_parts+0xd8>
  802a48:	01002074 	movhi	r4,129
  802a4c:	21112f04 	addi	r4,r4,17596
  802a50:	003fbd06 	br	802948 <_fpadd_parts+0xd8>

00802a54 <__subsf3>:
  802a54:	deffef04 	addi	sp,sp,-68
  802a58:	dcc00f15 	stw	r19,60(sp)
  802a5c:	dcc00204 	addi	r19,sp,8
  802a60:	dc400e15 	stw	r17,56(sp)
  802a64:	d9000015 	stw	r4,0(sp)
  802a68:	d9400115 	stw	r5,4(sp)
  802a6c:	d809883a 	mov	r4,sp
  802a70:	980b883a 	mov	r5,r19
  802a74:	dc400604 	addi	r17,sp,24
  802a78:	dfc01015 	stw	ra,64(sp)
  802a7c:	08040bc0 	call	8040bc <__unpack_f>
  802a80:	d9000104 	addi	r4,sp,4
  802a84:	880b883a 	mov	r5,r17
  802a88:	08040bc0 	call	8040bc <__unpack_f>
  802a8c:	d8800717 	ldw	r2,28(sp)
  802a90:	9809883a 	mov	r4,r19
  802a94:	880b883a 	mov	r5,r17
  802a98:	d9800a04 	addi	r6,sp,40
  802a9c:	1080005c 	xori	r2,r2,1
  802aa0:	d8800715 	stw	r2,28(sp)
  802aa4:	08028700 	call	802870 <_fpadd_parts>
  802aa8:	1009883a 	mov	r4,r2
  802aac:	0803f5c0 	call	803f5c <__pack_f>
  802ab0:	dfc01017 	ldw	ra,64(sp)
  802ab4:	dcc00f17 	ldw	r19,60(sp)
  802ab8:	dc400e17 	ldw	r17,56(sp)
  802abc:	dec01104 	addi	sp,sp,68
  802ac0:	f800283a 	ret

00802ac4 <__addsf3>:
  802ac4:	deffef04 	addi	sp,sp,-68
  802ac8:	dcc00f15 	stw	r19,60(sp)
  802acc:	dcc00204 	addi	r19,sp,8
  802ad0:	dc400e15 	stw	r17,56(sp)
  802ad4:	d9000015 	stw	r4,0(sp)
  802ad8:	d9400115 	stw	r5,4(sp)
  802adc:	d809883a 	mov	r4,sp
  802ae0:	980b883a 	mov	r5,r19
  802ae4:	dc400604 	addi	r17,sp,24
  802ae8:	dfc01015 	stw	ra,64(sp)
  802aec:	08040bc0 	call	8040bc <__unpack_f>
  802af0:	d9000104 	addi	r4,sp,4
  802af4:	880b883a 	mov	r5,r17
  802af8:	08040bc0 	call	8040bc <__unpack_f>
  802afc:	d9800a04 	addi	r6,sp,40
  802b00:	9809883a 	mov	r4,r19
  802b04:	880b883a 	mov	r5,r17
  802b08:	08028700 	call	802870 <_fpadd_parts>
  802b0c:	1009883a 	mov	r4,r2
  802b10:	0803f5c0 	call	803f5c <__pack_f>
  802b14:	dfc01017 	ldw	ra,64(sp)
  802b18:	dcc00f17 	ldw	r19,60(sp)
  802b1c:	dc400e17 	ldw	r17,56(sp)
  802b20:	dec01104 	addi	sp,sp,68
  802b24:	f800283a 	ret

00802b28 <__mulsf3>:
  802b28:	deffef04 	addi	sp,sp,-68
  802b2c:	dc400f15 	stw	r17,60(sp)
  802b30:	dc400204 	addi	r17,sp,8
  802b34:	dc000e15 	stw	r16,56(sp)
  802b38:	d9000015 	stw	r4,0(sp)
  802b3c:	d9400115 	stw	r5,4(sp)
  802b40:	d809883a 	mov	r4,sp
  802b44:	880b883a 	mov	r5,r17
  802b48:	dc000604 	addi	r16,sp,24
  802b4c:	dfc01015 	stw	ra,64(sp)
  802b50:	08040bc0 	call	8040bc <__unpack_f>
  802b54:	d9000104 	addi	r4,sp,4
  802b58:	800b883a 	mov	r5,r16
  802b5c:	08040bc0 	call	8040bc <__unpack_f>
  802b60:	d9000217 	ldw	r4,8(sp)
  802b64:	00800044 	movi	r2,1
  802b68:	01400104 	movi	r5,4
  802b6c:	1100142e 	bgeu	r2,r4,802bc0 <__mulsf3+0x98>
  802b70:	d8c00617 	ldw	r3,24(sp)
  802b74:	10c0052e 	bgeu	r2,r3,802b8c <__mulsf3+0x64>
  802b78:	21400f26 	beq	r4,r5,802bb8 <__mulsf3+0x90>
  802b7c:	19405d26 	beq	r3,r5,802cf4 <__mulsf3+0x1cc>
  802b80:	00800084 	movi	r2,2
  802b84:	20800e26 	beq	r4,r2,802bc0 <__mulsf3+0x98>
  802b88:	1880181e 	bne	r3,r2,802bec <__mulsf3+0xc4>
  802b8c:	d8c00717 	ldw	r3,28(sp)
  802b90:	d8800317 	ldw	r2,12(sp)
  802b94:	8009883a 	mov	r4,r16
  802b98:	10c4c03a 	cmpne	r2,r2,r3
  802b9c:	d8800715 	stw	r2,28(sp)
  802ba0:	0803f5c0 	call	803f5c <__pack_f>
  802ba4:	dfc01017 	ldw	ra,64(sp)
  802ba8:	dc400f17 	ldw	r17,60(sp)
  802bac:	dc000e17 	ldw	r16,56(sp)
  802bb0:	dec01104 	addi	sp,sp,68
  802bb4:	f800283a 	ret
  802bb8:	00800084 	movi	r2,2
  802bbc:	18804f26 	beq	r3,r2,802cfc <__mulsf3+0x1d4>
  802bc0:	d8800317 	ldw	r2,12(sp)
  802bc4:	d8c00717 	ldw	r3,28(sp)
  802bc8:	8809883a 	mov	r4,r17
  802bcc:	10c4c03a 	cmpne	r2,r2,r3
  802bd0:	d8800315 	stw	r2,12(sp)
  802bd4:	0803f5c0 	call	803f5c <__pack_f>
  802bd8:	dfc01017 	ldw	ra,64(sp)
  802bdc:	dc400f17 	ldw	r17,60(sp)
  802be0:	dc000e17 	ldw	r16,56(sp)
  802be4:	dec01104 	addi	sp,sp,68
  802be8:	f800283a 	ret
  802bec:	d8800517 	ldw	r2,20(sp)
  802bf0:	da000917 	ldw	r8,36(sp)
  802bf4:	0013883a 	mov	r9,zero
  802bf8:	0007883a 	mov	r3,zero
  802bfc:	480f883a 	mov	r7,r9
  802c00:	180b883a 	mov	r5,r3
  802c04:	400d883a 	mov	r6,r8
  802c08:	1009883a 	mov	r4,r2
  802c0c:	0803e440 	call	803e44 <__muldi3>
  802c10:	da800417 	ldw	r10,16(sp)
  802c14:	d9800817 	ldw	r6,32(sp)
  802c18:	da400317 	ldw	r9,12(sp)
  802c1c:	52800084 	addi	r10,r10,2
  802c20:	3295883a 	add	r10,r6,r10
  802c24:	d9800717 	ldw	r6,28(sp)
  802c28:	180b883a 	mov	r5,r3
  802c2c:	180f883a 	mov	r7,r3
  802c30:	4992c03a 	cmpne	r9,r9,r6
  802c34:	da400b15 	stw	r9,44(sp)
  802c38:	1007883a 	mov	r3,r2
  802c3c:	da800c15 	stw	r10,48(sp)
  802c40:	2800070e 	bge	r5,zero,802c60 <__mulsf3+0x138>
  802c44:	2880004c 	andi	r2,r5,1
  802c48:	1005003a 	cmpeq	r2,r2,zero
  802c4c:	500d883a 	mov	r6,r10
  802c50:	10001e26 	beq	r2,zero,802ccc <__mulsf3+0x1a4>
  802c54:	380ed07a 	srli	r7,r7,1
  802c58:	31800044 	addi	r6,r6,1
  802c5c:	d9800c15 	stw	r6,48(sp)
  802c60:	01100034 	movhi	r4,16384
  802c64:	213fffc4 	addi	r4,r4,-1
  802c68:	21c00b36 	bltu	r4,r7,802c98 <__mulsf3+0x170>
  802c6c:	d8800c17 	ldw	r2,48(sp)
  802c70:	00000206 	br	802c7c <__mulsf3+0x154>
  802c74:	18c7883a 	add	r3,r3,r3
  802c78:	21c00636 	bltu	r4,r7,802c94 <__mulsf3+0x16c>
  802c7c:	10bfffc4 	addi	r2,r2,-1
  802c80:	39cf883a 	add	r7,r7,r7
  802c84:	183ffb0e 	bge	r3,zero,802c74 <__mulsf3+0x14c>
  802c88:	39c00054 	ori	r7,r7,1
  802c8c:	18c7883a 	add	r3,r3,r3
  802c90:	21fffa2e 	bgeu	r4,r7,802c7c <__mulsf3+0x154>
  802c94:	d8800c15 	stw	r2,48(sp)
  802c98:	39001fcc 	andi	r4,r7,127
  802c9c:	00801004 	movi	r2,64
  802ca0:	20800d26 	beq	r4,r2,802cd8 <__mulsf3+0x1b0>
  802ca4:	008000c4 	movi	r2,3
  802ca8:	d9000a04 	addi	r4,sp,40
  802cac:	d9c00d15 	stw	r7,52(sp)
  802cb0:	d8800a15 	stw	r2,40(sp)
  802cb4:	0803f5c0 	call	803f5c <__pack_f>
  802cb8:	dfc01017 	ldw	ra,64(sp)
  802cbc:	dc400f17 	ldw	r17,60(sp)
  802cc0:	dc000e17 	ldw	r16,56(sp)
  802cc4:	dec01104 	addi	sp,sp,68
  802cc8:	f800283a 	ret
  802ccc:	1804d07a 	srli	r2,r3,1
  802cd0:	10e00034 	orhi	r3,r2,32768
  802cd4:	003fdf06 	br	802c54 <__mulsf3+0x12c>
  802cd8:	3880200c 	andi	r2,r7,128
  802cdc:	103ff11e 	bne	r2,zero,802ca4 <__mulsf3+0x17c>
  802ce0:	183ff026 	beq	r3,zero,802ca4 <__mulsf3+0x17c>
  802ce4:	3907883a 	add	r3,r7,r4
  802ce8:	00bfe004 	movi	r2,-128
  802cec:	188e703a 	and	r7,r3,r2
  802cf0:	003fec06 	br	802ca4 <__mulsf3+0x17c>
  802cf4:	00800084 	movi	r2,2
  802cf8:	20bfa41e 	bne	r4,r2,802b8c <__mulsf3+0x64>
  802cfc:	01002074 	movhi	r4,129
  802d00:	21112f04 	addi	r4,r4,17596
  802d04:	003fb306 	br	802bd4 <__mulsf3+0xac>

00802d08 <__divsf3>:
  802d08:	defff304 	addi	sp,sp,-52
  802d0c:	dc400b15 	stw	r17,44(sp)
  802d10:	dc400204 	addi	r17,sp,8
  802d14:	dc000a15 	stw	r16,40(sp)
  802d18:	d9000015 	stw	r4,0(sp)
  802d1c:	d9400115 	stw	r5,4(sp)
  802d20:	d809883a 	mov	r4,sp
  802d24:	880b883a 	mov	r5,r17
  802d28:	dc000604 	addi	r16,sp,24
  802d2c:	dfc00c15 	stw	ra,48(sp)
  802d30:	08040bc0 	call	8040bc <__unpack_f>
  802d34:	d9000104 	addi	r4,sp,4
  802d38:	800b883a 	mov	r5,r16
  802d3c:	08040bc0 	call	8040bc <__unpack_f>
  802d40:	d9000217 	ldw	r4,8(sp)
  802d44:	00800044 	movi	r2,1
  802d48:	01800104 	movi	r6,4
  802d4c:	11000a2e 	bgeu	r2,r4,802d78 <__divsf3+0x70>
  802d50:	d9400617 	ldw	r5,24(sp)
  802d54:	1140432e 	bgeu	r2,r5,802e64 <__divsf3+0x15c>
  802d58:	d8800317 	ldw	r2,12(sp)
  802d5c:	d8c00717 	ldw	r3,28(sp)
  802d60:	10c4f03a 	xor	r2,r2,r3
  802d64:	d8800315 	stw	r2,12(sp)
  802d68:	21800226 	beq	r4,r6,802d74 <__divsf3+0x6c>
  802d6c:	00800084 	movi	r2,2
  802d70:	2080101e 	bne	r4,r2,802db4 <__divsf3+0xac>
  802d74:	29000726 	beq	r5,r4,802d94 <__divsf3+0x8c>
  802d78:	8809883a 	mov	r4,r17
  802d7c:	0803f5c0 	call	803f5c <__pack_f>
  802d80:	dfc00c17 	ldw	ra,48(sp)
  802d84:	dc400b17 	ldw	r17,44(sp)
  802d88:	dc000a17 	ldw	r16,40(sp)
  802d8c:	dec00d04 	addi	sp,sp,52
  802d90:	f800283a 	ret
  802d94:	01002074 	movhi	r4,129
  802d98:	21112f04 	addi	r4,r4,17596
  802d9c:	0803f5c0 	call	803f5c <__pack_f>
  802da0:	dfc00c17 	ldw	ra,48(sp)
  802da4:	dc400b17 	ldw	r17,44(sp)
  802da8:	dc000a17 	ldw	r16,40(sp)
  802dac:	dec00d04 	addi	sp,sp,52
  802db0:	f800283a 	ret
  802db4:	29802d26 	beq	r5,r6,802e6c <__divsf3+0x164>
  802db8:	28801a26 	beq	r5,r2,802e24 <__divsf3+0x11c>
  802dbc:	d8c00417 	ldw	r3,16(sp)
  802dc0:	d8800817 	ldw	r2,32(sp)
  802dc4:	d9000517 	ldw	r4,20(sp)
  802dc8:	d9800917 	ldw	r6,36(sp)
  802dcc:	1885c83a 	sub	r2,r3,r2
  802dd0:	d8800415 	stw	r2,16(sp)
  802dd4:	2180032e 	bgeu	r4,r6,802de4 <__divsf3+0xdc>
  802dd8:	10bfffc4 	addi	r2,r2,-1
  802ddc:	d8800415 	stw	r2,16(sp)
  802de0:	2109883a 	add	r4,r4,r4
  802de4:	01500034 	movhi	r5,16384
  802de8:	0007883a 	mov	r3,zero
  802dec:	0005883a 	mov	r2,zero
  802df0:	01c007c4 	movi	r7,31
  802df4:	10800044 	addi	r2,r2,1
  802df8:	21800236 	bltu	r4,r6,802e04 <__divsf3+0xfc>
  802dfc:	1946b03a 	or	r3,r3,r5
  802e00:	2189c83a 	sub	r4,r4,r6
  802e04:	280ad07a 	srli	r5,r5,1
  802e08:	2109883a 	add	r4,r4,r4
  802e0c:	11fff91e 	bne	r2,r7,802df4 <__divsf3+0xec>
  802e10:	19401fcc 	andi	r5,r3,127
  802e14:	00801004 	movi	r2,64
  802e18:	28800a26 	beq	r5,r2,802e44 <__divsf3+0x13c>
  802e1c:	d8c00515 	stw	r3,20(sp)
  802e20:	003fd506 	br	802d78 <__divsf3+0x70>
  802e24:	8809883a 	mov	r4,r17
  802e28:	d9800215 	stw	r6,8(sp)
  802e2c:	0803f5c0 	call	803f5c <__pack_f>
  802e30:	dfc00c17 	ldw	ra,48(sp)
  802e34:	dc400b17 	ldw	r17,44(sp)
  802e38:	dc000a17 	ldw	r16,40(sp)
  802e3c:	dec00d04 	addi	sp,sp,52
  802e40:	f800283a 	ret
  802e44:	1880200c 	andi	r2,r3,128
  802e48:	103ff41e 	bne	r2,zero,802e1c <__divsf3+0x114>
  802e4c:	203ff326 	beq	r4,zero,802e1c <__divsf3+0x114>
  802e50:	1947883a 	add	r3,r3,r5
  802e54:	00bfe004 	movi	r2,-128
  802e58:	1886703a 	and	r3,r3,r2
  802e5c:	d8c00515 	stw	r3,20(sp)
  802e60:	003fc506 	br	802d78 <__divsf3+0x70>
  802e64:	8009883a 	mov	r4,r16
  802e68:	003fc406 	br	802d7c <__divsf3+0x74>
  802e6c:	8809883a 	mov	r4,r17
  802e70:	d8000515 	stw	zero,20(sp)
  802e74:	d8000415 	stw	zero,16(sp)
  802e78:	003fc006 	br	802d7c <__divsf3+0x74>

00802e7c <__fixsfsi>:
  802e7c:	defffa04 	addi	sp,sp,-24
  802e80:	d9000015 	stw	r4,0(sp)
  802e84:	d9400104 	addi	r5,sp,4
  802e88:	d809883a 	mov	r4,sp
  802e8c:	dfc00515 	stw	ra,20(sp)
  802e90:	08040bc0 	call	8040bc <__unpack_f>
  802e94:	d8c00117 	ldw	r3,4(sp)
  802e98:	00800084 	movi	r2,2
  802e9c:	1880041e 	bne	r3,r2,802eb0 <__fixsfsi+0x34>
  802ea0:	0005883a 	mov	r2,zero
  802ea4:	dfc00517 	ldw	ra,20(sp)
  802ea8:	dec00604 	addi	sp,sp,24
  802eac:	f800283a 	ret
  802eb0:	00800044 	movi	r2,1
  802eb4:	10fffa2e 	bgeu	r2,r3,802ea0 <__fixsfsi+0x24>
  802eb8:	00800104 	movi	r2,4
  802ebc:	18800426 	beq	r3,r2,802ed0 <__fixsfsi+0x54>
  802ec0:	d8800317 	ldw	r2,12(sp)
  802ec4:	103ff616 	blt	r2,zero,802ea0 <__fixsfsi+0x24>
  802ec8:	00c00784 	movi	r3,30
  802ecc:	1880070e 	bge	r3,r2,802eec <__fixsfsi+0x70>
  802ed0:	d8800217 	ldw	r2,8(sp)
  802ed4:	10000c1e 	bne	r2,zero,802f08 <__fixsfsi+0x8c>
  802ed8:	00a00034 	movhi	r2,32768
  802edc:	10bfffc4 	addi	r2,r2,-1
  802ee0:	dfc00517 	ldw	ra,20(sp)
  802ee4:	dec00604 	addi	sp,sp,24
  802ee8:	f800283a 	ret
  802eec:	1885c83a 	sub	r2,r3,r2
  802ef0:	d9000217 	ldw	r4,8(sp)
  802ef4:	d8c00417 	ldw	r3,16(sp)
  802ef8:	1884d83a 	srl	r2,r3,r2
  802efc:	203fe926 	beq	r4,zero,802ea4 <__fixsfsi+0x28>
  802f00:	0085c83a 	sub	r2,zero,r2
  802f04:	003fe706 	br	802ea4 <__fixsfsi+0x28>
  802f08:	00a00034 	movhi	r2,32768
  802f0c:	003fe506 	br	802ea4 <__fixsfsi+0x28>

00802f10 <_fpadd_parts>:
  802f10:	defff804 	addi	sp,sp,-32
  802f14:	dcc00315 	stw	r19,12(sp)
  802f18:	2027883a 	mov	r19,r4
  802f1c:	21000017 	ldw	r4,0(r4)
  802f20:	00c00044 	movi	r3,1
  802f24:	dd400515 	stw	r21,20(sp)
  802f28:	dd000415 	stw	r20,16(sp)
  802f2c:	ddc00715 	stw	r23,28(sp)
  802f30:	dd800615 	stw	r22,24(sp)
  802f34:	dc800215 	stw	r18,8(sp)
  802f38:	dc400115 	stw	r17,4(sp)
  802f3c:	dc000015 	stw	r16,0(sp)
  802f40:	282b883a 	mov	r21,r5
  802f44:	3029883a 	mov	r20,r6
  802f48:	1900632e 	bgeu	r3,r4,8030d8 <_fpadd_parts+0x1c8>
  802f4c:	28800017 	ldw	r2,0(r5)
  802f50:	1880812e 	bgeu	r3,r2,803158 <_fpadd_parts+0x248>
  802f54:	00c00104 	movi	r3,4
  802f58:	20c0dc26 	beq	r4,r3,8032cc <_fpadd_parts+0x3bc>
  802f5c:	10c07e26 	beq	r2,r3,803158 <_fpadd_parts+0x248>
  802f60:	00c00084 	movi	r3,2
  802f64:	10c06726 	beq	r2,r3,803104 <_fpadd_parts+0x1f4>
  802f68:	20c07b26 	beq	r4,r3,803158 <_fpadd_parts+0x248>
  802f6c:	9dc00217 	ldw	r23,8(r19)
  802f70:	28c00217 	ldw	r3,8(r5)
  802f74:	9c400317 	ldw	r17,12(r19)
  802f78:	2bc00317 	ldw	r15,12(r5)
  802f7c:	b8cdc83a 	sub	r6,r23,r3
  802f80:	9c800417 	ldw	r18,16(r19)
  802f84:	2c000417 	ldw	r16,16(r5)
  802f88:	3009883a 	mov	r4,r6
  802f8c:	30009716 	blt	r6,zero,8031ec <_fpadd_parts+0x2dc>
  802f90:	00800fc4 	movi	r2,63
  802f94:	11806b16 	blt	r2,r6,803144 <_fpadd_parts+0x234>
  802f98:	0100a40e 	bge	zero,r4,80322c <_fpadd_parts+0x31c>
  802f9c:	35bff804 	addi	r22,r6,-32
  802fa0:	b000bc16 	blt	r22,zero,803294 <_fpadd_parts+0x384>
  802fa4:	8596d83a 	srl	r11,r16,r22
  802fa8:	0019883a 	mov	r12,zero
  802fac:	0013883a 	mov	r9,zero
  802fb0:	01000044 	movi	r4,1
  802fb4:	0015883a 	mov	r10,zero
  802fb8:	b000be16 	blt	r22,zero,8032b4 <_fpadd_parts+0x3a4>
  802fbc:	2590983a 	sll	r8,r4,r22
  802fc0:	000f883a 	mov	r7,zero
  802fc4:	00bfffc4 	movi	r2,-1
  802fc8:	3889883a 	add	r4,r7,r2
  802fcc:	408b883a 	add	r5,r8,r2
  802fd0:	21cd803a 	cmpltu	r6,r4,r7
  802fd4:	314b883a 	add	r5,r6,r5
  802fd8:	7904703a 	and	r2,r15,r4
  802fdc:	8146703a 	and	r3,r16,r5
  802fe0:	10c4b03a 	or	r2,r2,r3
  802fe4:	10000226 	beq	r2,zero,802ff0 <_fpadd_parts+0xe0>
  802fe8:	02400044 	movi	r9,1
  802fec:	0015883a 	mov	r10,zero
  802ff0:	5a5eb03a 	or	r15,r11,r9
  802ff4:	62a0b03a 	or	r16,r12,r10
  802ff8:	99400117 	ldw	r5,4(r19)
  802ffc:	a8800117 	ldw	r2,4(r21)
  803000:	28806e26 	beq	r5,r2,8031bc <_fpadd_parts+0x2ac>
  803004:	28006626 	beq	r5,zero,8031a0 <_fpadd_parts+0x290>
  803008:	7c45c83a 	sub	r2,r15,r17
  80300c:	7889803a 	cmpltu	r4,r15,r2
  803010:	8487c83a 	sub	r3,r16,r18
  803014:	1909c83a 	sub	r4,r3,r4
  803018:	100d883a 	mov	r6,r2
  80301c:	200f883a 	mov	r7,r4
  803020:	38007716 	blt	r7,zero,803200 <_fpadd_parts+0x2f0>
  803024:	a5c00215 	stw	r23,8(r20)
  803028:	a1c00415 	stw	r7,16(r20)
  80302c:	a0000115 	stw	zero,4(r20)
  803030:	a1800315 	stw	r6,12(r20)
  803034:	a2000317 	ldw	r8,12(r20)
  803038:	a2400417 	ldw	r9,16(r20)
  80303c:	00bfffc4 	movi	r2,-1
  803040:	408b883a 	add	r5,r8,r2
  803044:	2a09803a 	cmpltu	r4,r5,r8
  803048:	488d883a 	add	r6,r9,r2
  80304c:	01c40034 	movhi	r7,4096
  803050:	39ffffc4 	addi	r7,r7,-1
  803054:	218d883a 	add	r6,r4,r6
  803058:	39801736 	bltu	r7,r6,8030b8 <_fpadd_parts+0x1a8>
  80305c:	31c06526 	beq	r6,r7,8031f4 <_fpadd_parts+0x2e4>
  803060:	a3000217 	ldw	r12,8(r20)
  803064:	4209883a 	add	r4,r8,r8
  803068:	00bfffc4 	movi	r2,-1
  80306c:	220f803a 	cmpltu	r7,r4,r8
  803070:	4a4b883a 	add	r5,r9,r9
  803074:	394f883a 	add	r7,r7,r5
  803078:	2095883a 	add	r10,r4,r2
  80307c:	3897883a 	add	r11,r7,r2
  803080:	510d803a 	cmpltu	r6,r10,r4
  803084:	6099883a 	add	r12,r12,r2
  803088:	32d7883a 	add	r11,r6,r11
  80308c:	00840034 	movhi	r2,4096
  803090:	10bfffc4 	addi	r2,r2,-1
  803094:	2011883a 	mov	r8,r4
  803098:	3813883a 	mov	r9,r7
  80309c:	a1000315 	stw	r4,12(r20)
  8030a0:	a1c00415 	stw	r7,16(r20)
  8030a4:	a3000215 	stw	r12,8(r20)
  8030a8:	12c00336 	bltu	r2,r11,8030b8 <_fpadd_parts+0x1a8>
  8030ac:	58bfed1e 	bne	r11,r2,803064 <_fpadd_parts+0x154>
  8030b0:	00bfff84 	movi	r2,-2
  8030b4:	12bfeb2e 	bgeu	r2,r10,803064 <_fpadd_parts+0x154>
  8030b8:	a2800417 	ldw	r10,16(r20)
  8030bc:	008000c4 	movi	r2,3
  8030c0:	00c80034 	movhi	r3,8192
  8030c4:	18ffffc4 	addi	r3,r3,-1
  8030c8:	a2400317 	ldw	r9,12(r20)
  8030cc:	a0800015 	stw	r2,0(r20)
  8030d0:	1a802336 	bltu	r3,r10,803160 <_fpadd_parts+0x250>
  8030d4:	a027883a 	mov	r19,r20
  8030d8:	9805883a 	mov	r2,r19
  8030dc:	ddc00717 	ldw	r23,28(sp)
  8030e0:	dd800617 	ldw	r22,24(sp)
  8030e4:	dd400517 	ldw	r21,20(sp)
  8030e8:	dd000417 	ldw	r20,16(sp)
  8030ec:	dcc00317 	ldw	r19,12(sp)
  8030f0:	dc800217 	ldw	r18,8(sp)
  8030f4:	dc400117 	ldw	r17,4(sp)
  8030f8:	dc000017 	ldw	r16,0(sp)
  8030fc:	dec00804 	addi	sp,sp,32
  803100:	f800283a 	ret
  803104:	20fff41e 	bne	r4,r3,8030d8 <_fpadd_parts+0x1c8>
  803108:	31000015 	stw	r4,0(r6)
  80310c:	98800117 	ldw	r2,4(r19)
  803110:	30800115 	stw	r2,4(r6)
  803114:	98c00217 	ldw	r3,8(r19)
  803118:	30c00215 	stw	r3,8(r6)
  80311c:	98800317 	ldw	r2,12(r19)
  803120:	30800315 	stw	r2,12(r6)
  803124:	98c00417 	ldw	r3,16(r19)
  803128:	30c00415 	stw	r3,16(r6)
  80312c:	98800117 	ldw	r2,4(r19)
  803130:	28c00117 	ldw	r3,4(r5)
  803134:	3027883a 	mov	r19,r6
  803138:	10c4703a 	and	r2,r2,r3
  80313c:	30800115 	stw	r2,4(r6)
  803140:	003fe506 	br	8030d8 <_fpadd_parts+0x1c8>
  803144:	1dc02616 	blt	r3,r23,8031e0 <_fpadd_parts+0x2d0>
  803148:	0023883a 	mov	r17,zero
  80314c:	182f883a 	mov	r23,r3
  803150:	0025883a 	mov	r18,zero
  803154:	003fa806 	br	802ff8 <_fpadd_parts+0xe8>
  803158:	a827883a 	mov	r19,r21
  80315c:	003fde06 	br	8030d8 <_fpadd_parts+0x1c8>
  803160:	01800044 	movi	r6,1
  803164:	500497fa 	slli	r2,r10,31
  803168:	4808d07a 	srli	r4,r9,1
  80316c:	518ad83a 	srl	r5,r10,r6
  803170:	a2000217 	ldw	r8,8(r20)
  803174:	1108b03a 	or	r4,r2,r4
  803178:	0007883a 	mov	r3,zero
  80317c:	4984703a 	and	r2,r9,r6
  803180:	208cb03a 	or	r6,r4,r2
  803184:	28ceb03a 	or	r7,r5,r3
  803188:	42000044 	addi	r8,r8,1
  80318c:	a027883a 	mov	r19,r20
  803190:	a1c00415 	stw	r7,16(r20)
  803194:	a2000215 	stw	r8,8(r20)
  803198:	a1800315 	stw	r6,12(r20)
  80319c:	003fce06 	br	8030d8 <_fpadd_parts+0x1c8>
  8031a0:	8bc5c83a 	sub	r2,r17,r15
  8031a4:	8889803a 	cmpltu	r4,r17,r2
  8031a8:	9407c83a 	sub	r3,r18,r16
  8031ac:	1909c83a 	sub	r4,r3,r4
  8031b0:	100d883a 	mov	r6,r2
  8031b4:	200f883a 	mov	r7,r4
  8031b8:	003f9906 	br	803020 <_fpadd_parts+0x110>
  8031bc:	7c45883a 	add	r2,r15,r17
  8031c0:	13c9803a 	cmpltu	r4,r2,r15
  8031c4:	8487883a 	add	r3,r16,r18
  8031c8:	20c9883a 	add	r4,r4,r3
  8031cc:	a1400115 	stw	r5,4(r20)
  8031d0:	a5c00215 	stw	r23,8(r20)
  8031d4:	a0800315 	stw	r2,12(r20)
  8031d8:	a1000415 	stw	r4,16(r20)
  8031dc:	003fb606 	br	8030b8 <_fpadd_parts+0x1a8>
  8031e0:	001f883a 	mov	r15,zero
  8031e4:	0021883a 	mov	r16,zero
  8031e8:	003f8306 	br	802ff8 <_fpadd_parts+0xe8>
  8031ec:	018dc83a 	sub	r6,zero,r6
  8031f0:	003f6706 	br	802f90 <_fpadd_parts+0x80>
  8031f4:	00bfff84 	movi	r2,-2
  8031f8:	117faf36 	bltu	r2,r5,8030b8 <_fpadd_parts+0x1a8>
  8031fc:	003f9806 	br	803060 <_fpadd_parts+0x150>
  803200:	0005883a 	mov	r2,zero
  803204:	1189c83a 	sub	r4,r2,r6
  803208:	1105803a 	cmpltu	r2,r2,r4
  80320c:	01cbc83a 	sub	r5,zero,r7
  803210:	2885c83a 	sub	r2,r5,r2
  803214:	01800044 	movi	r6,1
  803218:	a1800115 	stw	r6,4(r20)
  80321c:	a5c00215 	stw	r23,8(r20)
  803220:	a1000315 	stw	r4,12(r20)
  803224:	a0800415 	stw	r2,16(r20)
  803228:	003f8206 	br	803034 <_fpadd_parts+0x124>
  80322c:	203f7226 	beq	r4,zero,802ff8 <_fpadd_parts+0xe8>
  803230:	35bff804 	addi	r22,r6,-32
  803234:	b9af883a 	add	r23,r23,r6
  803238:	b0003116 	blt	r22,zero,803300 <_fpadd_parts+0x3f0>
  80323c:	959ad83a 	srl	r13,r18,r22
  803240:	001d883a 	mov	r14,zero
  803244:	000f883a 	mov	r7,zero
  803248:	01000044 	movi	r4,1
  80324c:	0011883a 	mov	r8,zero
  803250:	b0002516 	blt	r22,zero,8032e8 <_fpadd_parts+0x3d8>
  803254:	2594983a 	sll	r10,r4,r22
  803258:	0013883a 	mov	r9,zero
  80325c:	00bfffc4 	movi	r2,-1
  803260:	4889883a 	add	r4,r9,r2
  803264:	508b883a 	add	r5,r10,r2
  803268:	224d803a 	cmpltu	r6,r4,r9
  80326c:	314b883a 	add	r5,r6,r5
  803270:	8904703a 	and	r2,r17,r4
  803274:	9146703a 	and	r3,r18,r5
  803278:	10c4b03a 	or	r2,r2,r3
  80327c:	10000226 	beq	r2,zero,803288 <_fpadd_parts+0x378>
  803280:	01c00044 	movi	r7,1
  803284:	0011883a 	mov	r8,zero
  803288:	69e2b03a 	or	r17,r13,r7
  80328c:	7224b03a 	or	r18,r14,r8
  803290:	003f5906 	br	802ff8 <_fpadd_parts+0xe8>
  803294:	8407883a 	add	r3,r16,r16
  803298:	008007c4 	movi	r2,31
  80329c:	1185c83a 	sub	r2,r2,r6
  8032a0:	1886983a 	sll	r3,r3,r2
  8032a4:	7996d83a 	srl	r11,r15,r6
  8032a8:	8198d83a 	srl	r12,r16,r6
  8032ac:	1ad6b03a 	or	r11,r3,r11
  8032b0:	003f3e06 	br	802fac <_fpadd_parts+0x9c>
  8032b4:	2006d07a 	srli	r3,r4,1
  8032b8:	008007c4 	movi	r2,31
  8032bc:	1185c83a 	sub	r2,r2,r6
  8032c0:	1890d83a 	srl	r8,r3,r2
  8032c4:	218e983a 	sll	r7,r4,r6
  8032c8:	003f3e06 	br	802fc4 <_fpadd_parts+0xb4>
  8032cc:	113f821e 	bne	r2,r4,8030d8 <_fpadd_parts+0x1c8>
  8032d0:	28c00117 	ldw	r3,4(r5)
  8032d4:	98800117 	ldw	r2,4(r19)
  8032d8:	10ff7f26 	beq	r2,r3,8030d8 <_fpadd_parts+0x1c8>
  8032dc:	04c02074 	movhi	r19,129
  8032e0:	9cd13304 	addi	r19,r19,17612
  8032e4:	003f7c06 	br	8030d8 <_fpadd_parts+0x1c8>
  8032e8:	2006d07a 	srli	r3,r4,1
  8032ec:	008007c4 	movi	r2,31
  8032f0:	1185c83a 	sub	r2,r2,r6
  8032f4:	1894d83a 	srl	r10,r3,r2
  8032f8:	2192983a 	sll	r9,r4,r6
  8032fc:	003fd706 	br	80325c <_fpadd_parts+0x34c>
  803300:	9487883a 	add	r3,r18,r18
  803304:	008007c4 	movi	r2,31
  803308:	1185c83a 	sub	r2,r2,r6
  80330c:	1886983a 	sll	r3,r3,r2
  803310:	899ad83a 	srl	r13,r17,r6
  803314:	919cd83a 	srl	r14,r18,r6
  803318:	1b5ab03a 	or	r13,r3,r13
  80331c:	003fc906 	br	803244 <_fpadd_parts+0x334>

00803320 <__subdf3>:
  803320:	deffea04 	addi	sp,sp,-88
  803324:	dcc01415 	stw	r19,80(sp)
  803328:	dcc00404 	addi	r19,sp,16
  80332c:	2011883a 	mov	r8,r4
  803330:	2813883a 	mov	r9,r5
  803334:	dc401315 	stw	r17,76(sp)
  803338:	d809883a 	mov	r4,sp
  80333c:	980b883a 	mov	r5,r19
  803340:	dc400904 	addi	r17,sp,36
  803344:	dfc01515 	stw	ra,84(sp)
  803348:	da400115 	stw	r9,4(sp)
  80334c:	d9c00315 	stw	r7,12(sp)
  803350:	da000015 	stw	r8,0(sp)
  803354:	d9800215 	stw	r6,8(sp)
  803358:	08044c40 	call	8044c4 <__unpack_d>
  80335c:	d9000204 	addi	r4,sp,8
  803360:	880b883a 	mov	r5,r17
  803364:	08044c40 	call	8044c4 <__unpack_d>
  803368:	d8800a17 	ldw	r2,40(sp)
  80336c:	880b883a 	mov	r5,r17
  803370:	9809883a 	mov	r4,r19
  803374:	d9800e04 	addi	r6,sp,56
  803378:	1080005c 	xori	r2,r2,1
  80337c:	d8800a15 	stw	r2,40(sp)
  803380:	0802f100 	call	802f10 <_fpadd_parts>
  803384:	1009883a 	mov	r4,r2
  803388:	08041b00 	call	8041b0 <__pack_d>
  80338c:	dfc01517 	ldw	ra,84(sp)
  803390:	dcc01417 	ldw	r19,80(sp)
  803394:	dc401317 	ldw	r17,76(sp)
  803398:	dec01604 	addi	sp,sp,88
  80339c:	f800283a 	ret

008033a0 <__adddf3>:
  8033a0:	deffea04 	addi	sp,sp,-88
  8033a4:	dcc01415 	stw	r19,80(sp)
  8033a8:	dcc00404 	addi	r19,sp,16
  8033ac:	2011883a 	mov	r8,r4
  8033b0:	2813883a 	mov	r9,r5
  8033b4:	dc401315 	stw	r17,76(sp)
  8033b8:	d809883a 	mov	r4,sp
  8033bc:	980b883a 	mov	r5,r19
  8033c0:	dc400904 	addi	r17,sp,36
  8033c4:	dfc01515 	stw	ra,84(sp)
  8033c8:	da400115 	stw	r9,4(sp)
  8033cc:	d9c00315 	stw	r7,12(sp)
  8033d0:	da000015 	stw	r8,0(sp)
  8033d4:	d9800215 	stw	r6,8(sp)
  8033d8:	08044c40 	call	8044c4 <__unpack_d>
  8033dc:	d9000204 	addi	r4,sp,8
  8033e0:	880b883a 	mov	r5,r17
  8033e4:	08044c40 	call	8044c4 <__unpack_d>
  8033e8:	d9800e04 	addi	r6,sp,56
  8033ec:	9809883a 	mov	r4,r19
  8033f0:	880b883a 	mov	r5,r17
  8033f4:	0802f100 	call	802f10 <_fpadd_parts>
  8033f8:	1009883a 	mov	r4,r2
  8033fc:	08041b00 	call	8041b0 <__pack_d>
  803400:	dfc01517 	ldw	ra,84(sp)
  803404:	dcc01417 	ldw	r19,80(sp)
  803408:	dc401317 	ldw	r17,76(sp)
  80340c:	dec01604 	addi	sp,sp,88
  803410:	f800283a 	ret

00803414 <__muldf3>:
  803414:	deffe004 	addi	sp,sp,-128
  803418:	dc401815 	stw	r17,96(sp)
  80341c:	dc400404 	addi	r17,sp,16
  803420:	2011883a 	mov	r8,r4
  803424:	2813883a 	mov	r9,r5
  803428:	dc001715 	stw	r16,92(sp)
  80342c:	d809883a 	mov	r4,sp
  803430:	880b883a 	mov	r5,r17
  803434:	dc000904 	addi	r16,sp,36
  803438:	dfc01f15 	stw	ra,124(sp)
  80343c:	da400115 	stw	r9,4(sp)
  803440:	d9c00315 	stw	r7,12(sp)
  803444:	da000015 	stw	r8,0(sp)
  803448:	d9800215 	stw	r6,8(sp)
  80344c:	ddc01e15 	stw	r23,120(sp)
  803450:	dd801d15 	stw	r22,116(sp)
  803454:	dd401c15 	stw	r21,112(sp)
  803458:	dd001b15 	stw	r20,108(sp)
  80345c:	dcc01a15 	stw	r19,104(sp)
  803460:	dc801915 	stw	r18,100(sp)
  803464:	08044c40 	call	8044c4 <__unpack_d>
  803468:	d9000204 	addi	r4,sp,8
  80346c:	800b883a 	mov	r5,r16
  803470:	08044c40 	call	8044c4 <__unpack_d>
  803474:	d9000417 	ldw	r4,16(sp)
  803478:	00800044 	movi	r2,1
  80347c:	1100102e 	bgeu	r2,r4,8034c0 <__muldf3+0xac>
  803480:	d8c00917 	ldw	r3,36(sp)
  803484:	10c0062e 	bgeu	r2,r3,8034a0 <__muldf3+0x8c>
  803488:	00800104 	movi	r2,4
  80348c:	20800a26 	beq	r4,r2,8034b8 <__muldf3+0xa4>
  803490:	1880cc26 	beq	r3,r2,8037c4 <__muldf3+0x3b0>
  803494:	00800084 	movi	r2,2
  803498:	20800926 	beq	r4,r2,8034c0 <__muldf3+0xac>
  80349c:	1880191e 	bne	r3,r2,803504 <__muldf3+0xf0>
  8034a0:	d8c00a17 	ldw	r3,40(sp)
  8034a4:	d8800517 	ldw	r2,20(sp)
  8034a8:	8009883a 	mov	r4,r16
  8034ac:	10c4c03a 	cmpne	r2,r2,r3
  8034b0:	d8800a15 	stw	r2,40(sp)
  8034b4:	00000706 	br	8034d4 <__muldf3+0xc0>
  8034b8:	00800084 	movi	r2,2
  8034bc:	1880c326 	beq	r3,r2,8037cc <__muldf3+0x3b8>
  8034c0:	d8800517 	ldw	r2,20(sp)
  8034c4:	d8c00a17 	ldw	r3,40(sp)
  8034c8:	8809883a 	mov	r4,r17
  8034cc:	10c4c03a 	cmpne	r2,r2,r3
  8034d0:	d8800515 	stw	r2,20(sp)
  8034d4:	08041b00 	call	8041b0 <__pack_d>
  8034d8:	dfc01f17 	ldw	ra,124(sp)
  8034dc:	ddc01e17 	ldw	r23,120(sp)
  8034e0:	dd801d17 	ldw	r22,116(sp)
  8034e4:	dd401c17 	ldw	r21,112(sp)
  8034e8:	dd001b17 	ldw	r20,108(sp)
  8034ec:	dcc01a17 	ldw	r19,104(sp)
  8034f0:	dc801917 	ldw	r18,100(sp)
  8034f4:	dc401817 	ldw	r17,96(sp)
  8034f8:	dc001717 	ldw	r16,92(sp)
  8034fc:	dec02004 	addi	sp,sp,128
  803500:	f800283a 	ret
  803504:	dd800717 	ldw	r22,28(sp)
  803508:	dc800c17 	ldw	r18,48(sp)
  80350c:	002b883a 	mov	r21,zero
  803510:	0023883a 	mov	r17,zero
  803514:	a80b883a 	mov	r5,r21
  803518:	b00d883a 	mov	r6,r22
  80351c:	880f883a 	mov	r7,r17
  803520:	ddc00817 	ldw	r23,32(sp)
  803524:	dcc00d17 	ldw	r19,52(sp)
  803528:	9009883a 	mov	r4,r18
  80352c:	0803e440 	call	803e44 <__muldi3>
  803530:	001b883a 	mov	r13,zero
  803534:	680f883a 	mov	r7,r13
  803538:	b009883a 	mov	r4,r22
  80353c:	000b883a 	mov	r5,zero
  803540:	980d883a 	mov	r6,r19
  803544:	b82d883a 	mov	r22,r23
  803548:	002f883a 	mov	r23,zero
  80354c:	db401615 	stw	r13,88(sp)
  803550:	d8801315 	stw	r2,76(sp)
  803554:	d8c01415 	stw	r3,80(sp)
  803558:	dcc01515 	stw	r19,84(sp)
  80355c:	0803e440 	call	803e44 <__muldi3>
  803560:	b00d883a 	mov	r6,r22
  803564:	000b883a 	mov	r5,zero
  803568:	9009883a 	mov	r4,r18
  80356c:	b80f883a 	mov	r7,r23
  803570:	1021883a 	mov	r16,r2
  803574:	1823883a 	mov	r17,r3
  803578:	0803e440 	call	803e44 <__muldi3>
  80357c:	8085883a 	add	r2,r16,r2
  803580:	140d803a 	cmpltu	r6,r2,r16
  803584:	88c7883a 	add	r3,r17,r3
  803588:	30cd883a 	add	r6,r6,r3
  80358c:	1029883a 	mov	r20,r2
  803590:	302b883a 	mov	r21,r6
  803594:	da801317 	ldw	r10,76(sp)
  803598:	dac01417 	ldw	r11,80(sp)
  80359c:	db001517 	ldw	r12,84(sp)
  8035a0:	db401617 	ldw	r13,88(sp)
  8035a4:	3440612e 	bgeu	r6,r17,80372c <__muldf3+0x318>
  8035a8:	0009883a 	mov	r4,zero
  8035ac:	5105883a 	add	r2,r10,r4
  8035b0:	128d803a 	cmpltu	r6,r2,r10
  8035b4:	5d07883a 	add	r3,r11,r20
  8035b8:	30cd883a 	add	r6,r6,r3
  8035bc:	0021883a 	mov	r16,zero
  8035c0:	04400044 	movi	r17,1
  8035c4:	1025883a 	mov	r18,r2
  8035c8:	3027883a 	mov	r19,r6
  8035cc:	32c06236 	bltu	r6,r11,803758 <__muldf3+0x344>
  8035d0:	59807a26 	beq	r11,r6,8037bc <__muldf3+0x3a8>
  8035d4:	680b883a 	mov	r5,r13
  8035d8:	b80f883a 	mov	r7,r23
  8035dc:	6009883a 	mov	r4,r12
  8035e0:	b00d883a 	mov	r6,r22
  8035e4:	0803e440 	call	803e44 <__muldi3>
  8035e8:	1009883a 	mov	r4,r2
  8035ec:	000f883a 	mov	r7,zero
  8035f0:	1545883a 	add	r2,r2,r21
  8035f4:	1111803a 	cmpltu	r8,r2,r4
  8035f8:	19c7883a 	add	r3,r3,r7
  8035fc:	40c7883a 	add	r3,r8,r3
  803600:	88cb883a 	add	r5,r17,r3
  803604:	d8c00617 	ldw	r3,24(sp)
  803608:	8089883a 	add	r4,r16,r2
  80360c:	d8800b17 	ldw	r2,44(sp)
  803610:	18c00104 	addi	r3,r3,4
  803614:	240d803a 	cmpltu	r6,r4,r16
  803618:	10c7883a 	add	r3,r2,r3
  80361c:	2013883a 	mov	r9,r4
  803620:	d8800a17 	ldw	r2,40(sp)
  803624:	d9000517 	ldw	r4,20(sp)
  803628:	314d883a 	add	r6,r6,r5
  80362c:	3015883a 	mov	r10,r6
  803630:	2088c03a 	cmpne	r4,r4,r2
  803634:	00880034 	movhi	r2,8192
  803638:	10bfffc4 	addi	r2,r2,-1
  80363c:	d9000f15 	stw	r4,60(sp)
  803640:	d8c01015 	stw	r3,64(sp)
  803644:	1180162e 	bgeu	r2,r6,8036a0 <__muldf3+0x28c>
  803648:	1811883a 	mov	r8,r3
  80364c:	101f883a 	mov	r15,r2
  803650:	980497fa 	slli	r2,r19,31
  803654:	9016d07a 	srli	r11,r18,1
  803658:	500697fa 	slli	r3,r10,31
  80365c:	480cd07a 	srli	r6,r9,1
  803660:	500ed07a 	srli	r7,r10,1
  803664:	12d6b03a 	or	r11,r2,r11
  803668:	00800044 	movi	r2,1
  80366c:	198cb03a 	or	r6,r3,r6
  803670:	4888703a 	and	r4,r9,r2
  803674:	9818d07a 	srli	r12,r19,1
  803678:	001b883a 	mov	r13,zero
  80367c:	03a00034 	movhi	r14,32768
  803680:	3013883a 	mov	r9,r6
  803684:	3815883a 	mov	r10,r7
  803688:	4091883a 	add	r8,r8,r2
  80368c:	20000226 	beq	r4,zero,803698 <__muldf3+0x284>
  803690:	5b64b03a 	or	r18,r11,r13
  803694:	63a6b03a 	or	r19,r12,r14
  803698:	7abfed36 	bltu	r15,r10,803650 <__muldf3+0x23c>
  80369c:	da001015 	stw	r8,64(sp)
  8036a0:	00840034 	movhi	r2,4096
  8036a4:	10bfffc4 	addi	r2,r2,-1
  8036a8:	12801436 	bltu	r2,r10,8036fc <__muldf3+0x2e8>
  8036ac:	da001017 	ldw	r8,64(sp)
  8036b0:	101f883a 	mov	r15,r2
  8036b4:	4a45883a 	add	r2,r9,r9
  8036b8:	124d803a 	cmpltu	r6,r2,r9
  8036bc:	5287883a 	add	r3,r10,r10
  8036c0:	9497883a 	add	r11,r18,r18
  8036c4:	5c8f803a 	cmpltu	r7,r11,r18
  8036c8:	9cd9883a 	add	r12,r19,r19
  8036cc:	01000044 	movi	r4,1
  8036d0:	30cd883a 	add	r6,r6,r3
  8036d4:	3b0f883a 	add	r7,r7,r12
  8036d8:	423fffc4 	addi	r8,r8,-1
  8036dc:	1013883a 	mov	r9,r2
  8036e0:	3015883a 	mov	r10,r6
  8036e4:	111ab03a 	or	r13,r2,r4
  8036e8:	98003016 	blt	r19,zero,8037ac <__muldf3+0x398>
  8036ec:	5825883a 	mov	r18,r11
  8036f0:	3827883a 	mov	r19,r7
  8036f4:	7abfef2e 	bgeu	r15,r10,8036b4 <__muldf3+0x2a0>
  8036f8:	da001015 	stw	r8,64(sp)
  8036fc:	00803fc4 	movi	r2,255
  803700:	488e703a 	and	r7,r9,r2
  803704:	00802004 	movi	r2,128
  803708:	0007883a 	mov	r3,zero
  80370c:	0011883a 	mov	r8,zero
  803710:	38801826 	beq	r7,r2,803774 <__muldf3+0x360>
  803714:	008000c4 	movi	r2,3
  803718:	d9000e04 	addi	r4,sp,56
  80371c:	da801215 	stw	r10,72(sp)
  803720:	d8800e15 	stw	r2,56(sp)
  803724:	da401115 	stw	r9,68(sp)
  803728:	003f6a06 	br	8034d4 <__muldf3+0xc0>
  80372c:	89802126 	beq	r17,r6,8037b4 <__muldf3+0x3a0>
  803730:	0009883a 	mov	r4,zero
  803734:	5105883a 	add	r2,r10,r4
  803738:	128d803a 	cmpltu	r6,r2,r10
  80373c:	5d07883a 	add	r3,r11,r20
  803740:	30cd883a 	add	r6,r6,r3
  803744:	0021883a 	mov	r16,zero
  803748:	0023883a 	mov	r17,zero
  80374c:	1025883a 	mov	r18,r2
  803750:	3027883a 	mov	r19,r6
  803754:	32ff9e2e 	bgeu	r6,r11,8035d0 <__muldf3+0x1bc>
  803758:	00800044 	movi	r2,1
  80375c:	8089883a 	add	r4,r16,r2
  803760:	240d803a 	cmpltu	r6,r4,r16
  803764:	344d883a 	add	r6,r6,r17
  803768:	2021883a 	mov	r16,r4
  80376c:	3023883a 	mov	r17,r6
  803770:	003f9806 	br	8035d4 <__muldf3+0x1c0>
  803774:	403fe71e 	bne	r8,zero,803714 <__muldf3+0x300>
  803778:	01004004 	movi	r4,256
  80377c:	4904703a 	and	r2,r9,r4
  803780:	10c4b03a 	or	r2,r2,r3
  803784:	103fe31e 	bne	r2,zero,803714 <__muldf3+0x300>
  803788:	94c4b03a 	or	r2,r18,r19
  80378c:	103fe126 	beq	r2,zero,803714 <__muldf3+0x300>
  803790:	49c5883a 	add	r2,r9,r7
  803794:	1251803a 	cmpltu	r8,r2,r9
  803798:	4291883a 	add	r8,r8,r10
  80379c:	013fc004 	movi	r4,-256
  8037a0:	1112703a 	and	r9,r2,r4
  8037a4:	4015883a 	mov	r10,r8
  8037a8:	003fda06 	br	803714 <__muldf3+0x300>
  8037ac:	6813883a 	mov	r9,r13
  8037b0:	003fce06 	br	8036ec <__muldf3+0x2d8>
  8037b4:	143f7c36 	bltu	r2,r16,8035a8 <__muldf3+0x194>
  8037b8:	003fdd06 	br	803730 <__muldf3+0x31c>
  8037bc:	12bf852e 	bgeu	r2,r10,8035d4 <__muldf3+0x1c0>
  8037c0:	003fe506 	br	803758 <__muldf3+0x344>
  8037c4:	00800084 	movi	r2,2
  8037c8:	20bf351e 	bne	r4,r2,8034a0 <__muldf3+0x8c>
  8037cc:	01002074 	movhi	r4,129
  8037d0:	21113304 	addi	r4,r4,17612
  8037d4:	003f3f06 	br	8034d4 <__muldf3+0xc0>

008037d8 <__divdf3>:
  8037d8:	deffed04 	addi	sp,sp,-76
  8037dc:	dcc01115 	stw	r19,68(sp)
  8037e0:	dcc00404 	addi	r19,sp,16
  8037e4:	2011883a 	mov	r8,r4
  8037e8:	2813883a 	mov	r9,r5
  8037ec:	dc000e15 	stw	r16,56(sp)
  8037f0:	d809883a 	mov	r4,sp
  8037f4:	980b883a 	mov	r5,r19
  8037f8:	dc000904 	addi	r16,sp,36
  8037fc:	dfc01215 	stw	ra,72(sp)
  803800:	da400115 	stw	r9,4(sp)
  803804:	d9c00315 	stw	r7,12(sp)
  803808:	da000015 	stw	r8,0(sp)
  80380c:	d9800215 	stw	r6,8(sp)
  803810:	dc801015 	stw	r18,64(sp)
  803814:	dc400f15 	stw	r17,60(sp)
  803818:	08044c40 	call	8044c4 <__unpack_d>
  80381c:	d9000204 	addi	r4,sp,8
  803820:	800b883a 	mov	r5,r16
  803824:	08044c40 	call	8044c4 <__unpack_d>
  803828:	d9000417 	ldw	r4,16(sp)
  80382c:	00800044 	movi	r2,1
  803830:	11000b2e 	bgeu	r2,r4,803860 <__divdf3+0x88>
  803834:	d9400917 	ldw	r5,36(sp)
  803838:	1140762e 	bgeu	r2,r5,803a14 <__divdf3+0x23c>
  80383c:	d8800517 	ldw	r2,20(sp)
  803840:	d8c00a17 	ldw	r3,40(sp)
  803844:	01800104 	movi	r6,4
  803848:	10c4f03a 	xor	r2,r2,r3
  80384c:	d8800515 	stw	r2,20(sp)
  803850:	21800226 	beq	r4,r6,80385c <__divdf3+0x84>
  803854:	00800084 	movi	r2,2
  803858:	2080141e 	bne	r4,r2,8038ac <__divdf3+0xd4>
  80385c:	29000926 	beq	r5,r4,803884 <__divdf3+0xac>
  803860:	9809883a 	mov	r4,r19
  803864:	08041b00 	call	8041b0 <__pack_d>
  803868:	dfc01217 	ldw	ra,72(sp)
  80386c:	dcc01117 	ldw	r19,68(sp)
  803870:	dc801017 	ldw	r18,64(sp)
  803874:	dc400f17 	ldw	r17,60(sp)
  803878:	dc000e17 	ldw	r16,56(sp)
  80387c:	dec01304 	addi	sp,sp,76
  803880:	f800283a 	ret
  803884:	01002074 	movhi	r4,129
  803888:	21113304 	addi	r4,r4,17612
  80388c:	08041b00 	call	8041b0 <__pack_d>
  803890:	dfc01217 	ldw	ra,72(sp)
  803894:	dcc01117 	ldw	r19,68(sp)
  803898:	dc801017 	ldw	r18,64(sp)
  80389c:	dc400f17 	ldw	r17,60(sp)
  8038a0:	dc000e17 	ldw	r16,56(sp)
  8038a4:	dec01304 	addi	sp,sp,76
  8038a8:	f800283a 	ret
  8038ac:	29805b26 	beq	r5,r6,803a1c <__divdf3+0x244>
  8038b0:	28802d26 	beq	r5,r2,803968 <__divdf3+0x190>
  8038b4:	d8c00617 	ldw	r3,24(sp)
  8038b8:	d8800b17 	ldw	r2,44(sp)
  8038bc:	d9c00817 	ldw	r7,32(sp)
  8038c0:	dc400d17 	ldw	r17,52(sp)
  8038c4:	188bc83a 	sub	r5,r3,r2
  8038c8:	d9800717 	ldw	r6,28(sp)
  8038cc:	dc000c17 	ldw	r16,48(sp)
  8038d0:	d9400615 	stw	r5,24(sp)
  8038d4:	3c403836 	bltu	r7,r17,8039b8 <__divdf3+0x1e0>
  8038d8:	89c03626 	beq	r17,r7,8039b4 <__divdf3+0x1dc>
  8038dc:	0015883a 	mov	r10,zero
  8038e0:	001d883a 	mov	r14,zero
  8038e4:	02c40034 	movhi	r11,4096
  8038e8:	001f883a 	mov	r15,zero
  8038ec:	003f883a 	mov	ra,zero
  8038f0:	04800f44 	movi	r18,61
  8038f4:	00000f06 	br	803934 <__divdf3+0x15c>
  8038f8:	601d883a 	mov	r14,r12
  8038fc:	681f883a 	mov	r15,r13
  803900:	400d883a 	mov	r6,r8
  803904:	100f883a 	mov	r7,r2
  803908:	3191883a 	add	r8,r6,r6
  80390c:	5808d07a 	srli	r4,r11,1
  803910:	4185803a 	cmpltu	r2,r8,r6
  803914:	39d3883a 	add	r9,r7,r7
  803918:	28c6b03a 	or	r3,r5,r3
  80391c:	1245883a 	add	r2,r2,r9
  803920:	1815883a 	mov	r10,r3
  803924:	2017883a 	mov	r11,r4
  803928:	400d883a 	mov	r6,r8
  80392c:	100f883a 	mov	r7,r2
  803930:	fc801726 	beq	ra,r18,803990 <__divdf3+0x1b8>
  803934:	580a97fa 	slli	r5,r11,31
  803938:	5006d07a 	srli	r3,r10,1
  80393c:	ffc00044 	addi	ra,ra,1
  803940:	3c7ff136 	bltu	r7,r17,803908 <__divdf3+0x130>
  803944:	3411c83a 	sub	r8,r6,r16
  803948:	3205803a 	cmpltu	r2,r6,r8
  80394c:	3c53c83a 	sub	r9,r7,r17
  803950:	7298b03a 	or	r12,r14,r10
  803954:	7adab03a 	or	r13,r15,r11
  803958:	4885c83a 	sub	r2,r9,r2
  80395c:	89ffe61e 	bne	r17,r7,8038f8 <__divdf3+0x120>
  803960:	343fe936 	bltu	r6,r16,803908 <__divdf3+0x130>
  803964:	003fe406 	br	8038f8 <__divdf3+0x120>
  803968:	9809883a 	mov	r4,r19
  80396c:	d9800415 	stw	r6,16(sp)
  803970:	08041b00 	call	8041b0 <__pack_d>
  803974:	dfc01217 	ldw	ra,72(sp)
  803978:	dcc01117 	ldw	r19,68(sp)
  80397c:	dc801017 	ldw	r18,64(sp)
  803980:	dc400f17 	ldw	r17,60(sp)
  803984:	dc000e17 	ldw	r16,56(sp)
  803988:	dec01304 	addi	sp,sp,76
  80398c:	f800283a 	ret
  803990:	00803fc4 	movi	r2,255
  803994:	7090703a 	and	r8,r14,r2
  803998:	00802004 	movi	r2,128
  80399c:	0007883a 	mov	r3,zero
  8039a0:	0013883a 	mov	r9,zero
  8039a4:	40800d26 	beq	r8,r2,8039dc <__divdf3+0x204>
  8039a8:	dbc00815 	stw	r15,32(sp)
  8039ac:	db800715 	stw	r14,28(sp)
  8039b0:	003fab06 	br	803860 <__divdf3+0x88>
  8039b4:	343fc92e 	bgeu	r6,r16,8038dc <__divdf3+0x104>
  8039b8:	3185883a 	add	r2,r6,r6
  8039bc:	1189803a 	cmpltu	r4,r2,r6
  8039c0:	39c7883a 	add	r3,r7,r7
  8039c4:	20c9883a 	add	r4,r4,r3
  8039c8:	297fffc4 	addi	r5,r5,-1
  8039cc:	100d883a 	mov	r6,r2
  8039d0:	200f883a 	mov	r7,r4
  8039d4:	d9400615 	stw	r5,24(sp)
  8039d8:	003fc006 	br	8038dc <__divdf3+0x104>
  8039dc:	483ff21e 	bne	r9,zero,8039a8 <__divdf3+0x1d0>
  8039e0:	01004004 	movi	r4,256
  8039e4:	7104703a 	and	r2,r14,r4
  8039e8:	10c4b03a 	or	r2,r2,r3
  8039ec:	103fee1e 	bne	r2,zero,8039a8 <__divdf3+0x1d0>
  8039f0:	31c4b03a 	or	r2,r6,r7
  8039f4:	103fec26 	beq	r2,zero,8039a8 <__divdf3+0x1d0>
  8039f8:	7205883a 	add	r2,r14,r8
  8039fc:	1391803a 	cmpltu	r8,r2,r14
  803a00:	43d1883a 	add	r8,r8,r15
  803a04:	013fc004 	movi	r4,-256
  803a08:	111c703a 	and	r14,r2,r4
  803a0c:	401f883a 	mov	r15,r8
  803a10:	003fe506 	br	8039a8 <__divdf3+0x1d0>
  803a14:	8009883a 	mov	r4,r16
  803a18:	003f9206 	br	803864 <__divdf3+0x8c>
  803a1c:	9809883a 	mov	r4,r19
  803a20:	d8000715 	stw	zero,28(sp)
  803a24:	d8000815 	stw	zero,32(sp)
  803a28:	d8000615 	stw	zero,24(sp)
  803a2c:	003f8d06 	br	803864 <__divdf3+0x8c>

00803a30 <__eqdf2>:
  803a30:	deffef04 	addi	sp,sp,-68
  803a34:	dc400f15 	stw	r17,60(sp)
  803a38:	dc400404 	addi	r17,sp,16
  803a3c:	2005883a 	mov	r2,r4
  803a40:	2807883a 	mov	r3,r5
  803a44:	dc000e15 	stw	r16,56(sp)
  803a48:	d809883a 	mov	r4,sp
  803a4c:	880b883a 	mov	r5,r17
  803a50:	dc000904 	addi	r16,sp,36
  803a54:	d8c00115 	stw	r3,4(sp)
  803a58:	d8800015 	stw	r2,0(sp)
  803a5c:	d9800215 	stw	r6,8(sp)
  803a60:	dfc01015 	stw	ra,64(sp)
  803a64:	d9c00315 	stw	r7,12(sp)
  803a68:	08044c40 	call	8044c4 <__unpack_d>
  803a6c:	d9000204 	addi	r4,sp,8
  803a70:	800b883a 	mov	r5,r16
  803a74:	08044c40 	call	8044c4 <__unpack_d>
  803a78:	d8800417 	ldw	r2,16(sp)
  803a7c:	00c00044 	movi	r3,1
  803a80:	180d883a 	mov	r6,r3
  803a84:	1880062e 	bgeu	r3,r2,803aa0 <__eqdf2+0x70>
  803a88:	d8800917 	ldw	r2,36(sp)
  803a8c:	8809883a 	mov	r4,r17
  803a90:	800b883a 	mov	r5,r16
  803a94:	1880022e 	bgeu	r3,r2,803aa0 <__eqdf2+0x70>
  803a98:	08045fc0 	call	8045fc <__fpcmp_parts_d>
  803a9c:	100d883a 	mov	r6,r2
  803aa0:	3005883a 	mov	r2,r6
  803aa4:	dfc01017 	ldw	ra,64(sp)
  803aa8:	dc400f17 	ldw	r17,60(sp)
  803aac:	dc000e17 	ldw	r16,56(sp)
  803ab0:	dec01104 	addi	sp,sp,68
  803ab4:	f800283a 	ret

00803ab8 <__nedf2>:
  803ab8:	deffef04 	addi	sp,sp,-68
  803abc:	dc400f15 	stw	r17,60(sp)
  803ac0:	dc400404 	addi	r17,sp,16
  803ac4:	2005883a 	mov	r2,r4
  803ac8:	2807883a 	mov	r3,r5
  803acc:	dc000e15 	stw	r16,56(sp)
  803ad0:	d809883a 	mov	r4,sp
  803ad4:	880b883a 	mov	r5,r17
  803ad8:	dc000904 	addi	r16,sp,36
  803adc:	d8c00115 	stw	r3,4(sp)
  803ae0:	d8800015 	stw	r2,0(sp)
  803ae4:	d9800215 	stw	r6,8(sp)
  803ae8:	dfc01015 	stw	ra,64(sp)
  803aec:	d9c00315 	stw	r7,12(sp)
  803af0:	08044c40 	call	8044c4 <__unpack_d>
  803af4:	d9000204 	addi	r4,sp,8
  803af8:	800b883a 	mov	r5,r16
  803afc:	08044c40 	call	8044c4 <__unpack_d>
  803b00:	d8800417 	ldw	r2,16(sp)
  803b04:	00c00044 	movi	r3,1
  803b08:	180d883a 	mov	r6,r3
  803b0c:	1880062e 	bgeu	r3,r2,803b28 <__nedf2+0x70>
  803b10:	d8800917 	ldw	r2,36(sp)
  803b14:	8809883a 	mov	r4,r17
  803b18:	800b883a 	mov	r5,r16
  803b1c:	1880022e 	bgeu	r3,r2,803b28 <__nedf2+0x70>
  803b20:	08045fc0 	call	8045fc <__fpcmp_parts_d>
  803b24:	100d883a 	mov	r6,r2
  803b28:	3005883a 	mov	r2,r6
  803b2c:	dfc01017 	ldw	ra,64(sp)
  803b30:	dc400f17 	ldw	r17,60(sp)
  803b34:	dc000e17 	ldw	r16,56(sp)
  803b38:	dec01104 	addi	sp,sp,68
  803b3c:	f800283a 	ret

00803b40 <__gtdf2>:
  803b40:	deffef04 	addi	sp,sp,-68
  803b44:	dc400f15 	stw	r17,60(sp)
  803b48:	dc400404 	addi	r17,sp,16
  803b4c:	2005883a 	mov	r2,r4
  803b50:	2807883a 	mov	r3,r5
  803b54:	dc000e15 	stw	r16,56(sp)
  803b58:	d809883a 	mov	r4,sp
  803b5c:	880b883a 	mov	r5,r17
  803b60:	dc000904 	addi	r16,sp,36
  803b64:	d8c00115 	stw	r3,4(sp)
  803b68:	d8800015 	stw	r2,0(sp)
  803b6c:	d9800215 	stw	r6,8(sp)
  803b70:	dfc01015 	stw	ra,64(sp)
  803b74:	d9c00315 	stw	r7,12(sp)
  803b78:	08044c40 	call	8044c4 <__unpack_d>
  803b7c:	d9000204 	addi	r4,sp,8
  803b80:	800b883a 	mov	r5,r16
  803b84:	08044c40 	call	8044c4 <__unpack_d>
  803b88:	d8800417 	ldw	r2,16(sp)
  803b8c:	00c00044 	movi	r3,1
  803b90:	01bfffc4 	movi	r6,-1
  803b94:	1880062e 	bgeu	r3,r2,803bb0 <__gtdf2+0x70>
  803b98:	d8800917 	ldw	r2,36(sp)
  803b9c:	8809883a 	mov	r4,r17
  803ba0:	800b883a 	mov	r5,r16
  803ba4:	1880022e 	bgeu	r3,r2,803bb0 <__gtdf2+0x70>
  803ba8:	08045fc0 	call	8045fc <__fpcmp_parts_d>
  803bac:	100d883a 	mov	r6,r2
  803bb0:	3005883a 	mov	r2,r6
  803bb4:	dfc01017 	ldw	ra,64(sp)
  803bb8:	dc400f17 	ldw	r17,60(sp)
  803bbc:	dc000e17 	ldw	r16,56(sp)
  803bc0:	dec01104 	addi	sp,sp,68
  803bc4:	f800283a 	ret

00803bc8 <__ltdf2>:
  803bc8:	deffef04 	addi	sp,sp,-68
  803bcc:	dc400f15 	stw	r17,60(sp)
  803bd0:	dc400404 	addi	r17,sp,16
  803bd4:	2005883a 	mov	r2,r4
  803bd8:	2807883a 	mov	r3,r5
  803bdc:	dc000e15 	stw	r16,56(sp)
  803be0:	d809883a 	mov	r4,sp
  803be4:	880b883a 	mov	r5,r17
  803be8:	dc000904 	addi	r16,sp,36
  803bec:	d8c00115 	stw	r3,4(sp)
  803bf0:	d8800015 	stw	r2,0(sp)
  803bf4:	d9800215 	stw	r6,8(sp)
  803bf8:	dfc01015 	stw	ra,64(sp)
  803bfc:	d9c00315 	stw	r7,12(sp)
  803c00:	08044c40 	call	8044c4 <__unpack_d>
  803c04:	d9000204 	addi	r4,sp,8
  803c08:	800b883a 	mov	r5,r16
  803c0c:	08044c40 	call	8044c4 <__unpack_d>
  803c10:	d8800417 	ldw	r2,16(sp)
  803c14:	00c00044 	movi	r3,1
  803c18:	180d883a 	mov	r6,r3
  803c1c:	1880062e 	bgeu	r3,r2,803c38 <__ltdf2+0x70>
  803c20:	d8800917 	ldw	r2,36(sp)
  803c24:	8809883a 	mov	r4,r17
  803c28:	800b883a 	mov	r5,r16
  803c2c:	1880022e 	bgeu	r3,r2,803c38 <__ltdf2+0x70>
  803c30:	08045fc0 	call	8045fc <__fpcmp_parts_d>
  803c34:	100d883a 	mov	r6,r2
  803c38:	3005883a 	mov	r2,r6
  803c3c:	dfc01017 	ldw	ra,64(sp)
  803c40:	dc400f17 	ldw	r17,60(sp)
  803c44:	dc000e17 	ldw	r16,56(sp)
  803c48:	dec01104 	addi	sp,sp,68
  803c4c:	f800283a 	ret

00803c50 <__ledf2>:
  803c50:	deffef04 	addi	sp,sp,-68
  803c54:	dc400f15 	stw	r17,60(sp)
  803c58:	dc400404 	addi	r17,sp,16
  803c5c:	2005883a 	mov	r2,r4
  803c60:	2807883a 	mov	r3,r5
  803c64:	dc000e15 	stw	r16,56(sp)
  803c68:	d809883a 	mov	r4,sp
  803c6c:	880b883a 	mov	r5,r17
  803c70:	dc000904 	addi	r16,sp,36
  803c74:	d8c00115 	stw	r3,4(sp)
  803c78:	d8800015 	stw	r2,0(sp)
  803c7c:	d9800215 	stw	r6,8(sp)
  803c80:	dfc01015 	stw	ra,64(sp)
  803c84:	d9c00315 	stw	r7,12(sp)
  803c88:	08044c40 	call	8044c4 <__unpack_d>
  803c8c:	d9000204 	addi	r4,sp,8
  803c90:	800b883a 	mov	r5,r16
  803c94:	08044c40 	call	8044c4 <__unpack_d>
  803c98:	d8800417 	ldw	r2,16(sp)
  803c9c:	00c00044 	movi	r3,1
  803ca0:	180d883a 	mov	r6,r3
  803ca4:	1880062e 	bgeu	r3,r2,803cc0 <__ledf2+0x70>
  803ca8:	d8800917 	ldw	r2,36(sp)
  803cac:	8809883a 	mov	r4,r17
  803cb0:	800b883a 	mov	r5,r16
  803cb4:	1880022e 	bgeu	r3,r2,803cc0 <__ledf2+0x70>
  803cb8:	08045fc0 	call	8045fc <__fpcmp_parts_d>
  803cbc:	100d883a 	mov	r6,r2
  803cc0:	3005883a 	mov	r2,r6
  803cc4:	dfc01017 	ldw	ra,64(sp)
  803cc8:	dc400f17 	ldw	r17,60(sp)
  803ccc:	dc000e17 	ldw	r16,56(sp)
  803cd0:	dec01104 	addi	sp,sp,68
  803cd4:	f800283a 	ret

00803cd8 <__floatsidf>:
  803cd8:	2006d7fa 	srli	r3,r4,31
  803cdc:	defff604 	addi	sp,sp,-40
  803ce0:	008000c4 	movi	r2,3
  803ce4:	dfc00915 	stw	ra,36(sp)
  803ce8:	dcc00815 	stw	r19,32(sp)
  803cec:	dc800715 	stw	r18,28(sp)
  803cf0:	dc400615 	stw	r17,24(sp)
  803cf4:	dc000515 	stw	r16,20(sp)
  803cf8:	d8800015 	stw	r2,0(sp)
  803cfc:	d8c00115 	stw	r3,4(sp)
  803d00:	20000f1e 	bne	r4,zero,803d40 <__floatsidf+0x68>
  803d04:	00800084 	movi	r2,2
  803d08:	d8800015 	stw	r2,0(sp)
  803d0c:	d809883a 	mov	r4,sp
  803d10:	08041b00 	call	8041b0 <__pack_d>
  803d14:	1009883a 	mov	r4,r2
  803d18:	180b883a 	mov	r5,r3
  803d1c:	2005883a 	mov	r2,r4
  803d20:	2807883a 	mov	r3,r5
  803d24:	dfc00917 	ldw	ra,36(sp)
  803d28:	dcc00817 	ldw	r19,32(sp)
  803d2c:	dc800717 	ldw	r18,28(sp)
  803d30:	dc400617 	ldw	r17,24(sp)
  803d34:	dc000517 	ldw	r16,20(sp)
  803d38:	dec00a04 	addi	sp,sp,40
  803d3c:	f800283a 	ret
  803d40:	00800f04 	movi	r2,60
  803d44:	1807003a 	cmpeq	r3,r3,zero
  803d48:	d8800215 	stw	r2,8(sp)
  803d4c:	18001126 	beq	r3,zero,803d94 <__floatsidf+0xbc>
  803d50:	0027883a 	mov	r19,zero
  803d54:	2025883a 	mov	r18,r4
  803d58:	d9000315 	stw	r4,12(sp)
  803d5c:	dcc00415 	stw	r19,16(sp)
  803d60:	0803edc0 	call	803edc <__clzsi2>
  803d64:	11000744 	addi	r4,r2,29
  803d68:	013fe80e 	bge	zero,r4,803d0c <__floatsidf+0x34>
  803d6c:	10bfff44 	addi	r2,r2,-3
  803d70:	10000c16 	blt	r2,zero,803da4 <__floatsidf+0xcc>
  803d74:	90a2983a 	sll	r17,r18,r2
  803d78:	0021883a 	mov	r16,zero
  803d7c:	d8800217 	ldw	r2,8(sp)
  803d80:	dc400415 	stw	r17,16(sp)
  803d84:	dc000315 	stw	r16,12(sp)
  803d88:	1105c83a 	sub	r2,r2,r4
  803d8c:	d8800215 	stw	r2,8(sp)
  803d90:	003fde06 	br	803d0c <__floatsidf+0x34>
  803d94:	00a00034 	movhi	r2,32768
  803d98:	20800a26 	beq	r4,r2,803dc4 <__floatsidf+0xec>
  803d9c:	0109c83a 	sub	r4,zero,r4
  803da0:	003feb06 	br	803d50 <__floatsidf+0x78>
  803da4:	9006d07a 	srli	r3,r18,1
  803da8:	008007c4 	movi	r2,31
  803dac:	1105c83a 	sub	r2,r2,r4
  803db0:	1886d83a 	srl	r3,r3,r2
  803db4:	9922983a 	sll	r17,r19,r4
  803db8:	9120983a 	sll	r16,r18,r4
  803dbc:	1c62b03a 	or	r17,r3,r17
  803dc0:	003fee06 	br	803d7c <__floatsidf+0xa4>
  803dc4:	0009883a 	mov	r4,zero
  803dc8:	01707834 	movhi	r5,49632
  803dcc:	003fd306 	br	803d1c <__floatsidf+0x44>

00803dd0 <__truncdfsf2>:
  803dd0:	defff804 	addi	sp,sp,-32
  803dd4:	2005883a 	mov	r2,r4
  803dd8:	2807883a 	mov	r3,r5
  803ddc:	d809883a 	mov	r4,sp
  803de0:	d9400204 	addi	r5,sp,8
  803de4:	d8c00115 	stw	r3,4(sp)
  803de8:	d8800015 	stw	r2,0(sp)
  803dec:	dfc00715 	stw	ra,28(sp)
  803df0:	08044c40 	call	8044c4 <__unpack_d>
  803df4:	d9c00517 	ldw	r7,20(sp)
  803df8:	da000617 	ldw	r8,24(sp)
  803dfc:	02d00034 	movhi	r11,16384
  803e00:	5affffc4 	addi	r11,r11,-1
  803e04:	3812d7ba 	srli	r9,r7,30
  803e08:	401a90ba 	slli	r13,r8,2
  803e0c:	3ac4703a 	and	r2,r7,r11
  803e10:	0007883a 	mov	r3,zero
  803e14:	6a52b03a 	or	r9,r13,r9
  803e18:	10c4b03a 	or	r2,r2,r3
  803e1c:	d9000217 	ldw	r4,8(sp)
  803e20:	d9400317 	ldw	r5,12(sp)
  803e24:	d9800417 	ldw	r6,16(sp)
  803e28:	480f883a 	mov	r7,r9
  803e2c:	10000126 	beq	r2,zero,803e34 <__truncdfsf2+0x64>
  803e30:	49c00054 	ori	r7,r9,1
  803e34:	08041840 	call	804184 <__make_fp>
  803e38:	dfc00717 	ldw	ra,28(sp)
  803e3c:	dec00804 	addi	sp,sp,32
  803e40:	f800283a 	ret

00803e44 <__muldi3>:
  803e44:	2011883a 	mov	r8,r4
  803e48:	427fffcc 	andi	r9,r8,65535
  803e4c:	4018d43a 	srli	r12,r8,16
  803e50:	32bfffcc 	andi	r10,r6,65535
  803e54:	3016d43a 	srli	r11,r6,16
  803e58:	4a85383a 	mul	r2,r9,r10
  803e5c:	6295383a 	mul	r10,r12,r10
  803e60:	4ad3383a 	mul	r9,r9,r11
  803e64:	113fffcc 	andi	r4,r2,65535
  803e68:	1004d43a 	srli	r2,r2,16
  803e6c:	4a93883a 	add	r9,r9,r10
  803e70:	3807883a 	mov	r3,r7
  803e74:	1245883a 	add	r2,r2,r9
  803e78:	280f883a 	mov	r7,r5
  803e7c:	180b883a 	mov	r5,r3
  803e80:	1006943a 	slli	r3,r2,16
  803e84:	defffd04 	addi	sp,sp,-12
  803e88:	dc800215 	stw	r18,8(sp)
  803e8c:	1907883a 	add	r3,r3,r4
  803e90:	dc400115 	stw	r17,4(sp)
  803e94:	dc000015 	stw	r16,0(sp)
  803e98:	4165383a 	mul	r18,r8,r5
  803e9c:	31e3383a 	mul	r17,r6,r7
  803ea0:	1012d43a 	srli	r9,r2,16
  803ea4:	62d9383a 	mul	r12,r12,r11
  803ea8:	181f883a 	mov	r15,r3
  803eac:	1280022e 	bgeu	r2,r10,803eb8 <__muldi3+0x74>
  803eb0:	00800074 	movhi	r2,1
  803eb4:	6099883a 	add	r12,r12,r2
  803eb8:	624d883a 	add	r6,r12,r9
  803ebc:	9187883a 	add	r3,r18,r6
  803ec0:	88c7883a 	add	r3,r17,r3
  803ec4:	7805883a 	mov	r2,r15
  803ec8:	dc800217 	ldw	r18,8(sp)
  803ecc:	dc400117 	ldw	r17,4(sp)
  803ed0:	dc000017 	ldw	r16,0(sp)
  803ed4:	dec00304 	addi	sp,sp,12
  803ed8:	f800283a 	ret

00803edc <__clzsi2>:
  803edc:	00bfffd4 	movui	r2,65535
  803ee0:	11000e36 	bltu	r2,r4,803f1c <__clzsi2+0x40>
  803ee4:	00803fc4 	movi	r2,255
  803ee8:	01400204 	movi	r5,8
  803eec:	0007883a 	mov	r3,zero
  803ef0:	11001036 	bltu	r2,r4,803f34 <__clzsi2+0x58>
  803ef4:	000b883a 	mov	r5,zero
  803ef8:	20c6d83a 	srl	r3,r4,r3
  803efc:	00802074 	movhi	r2,129
  803f00:	10913804 	addi	r2,r2,17632
  803f04:	1887883a 	add	r3,r3,r2
  803f08:	18800003 	ldbu	r2,0(r3)
  803f0c:	00c00804 	movi	r3,32
  803f10:	2885883a 	add	r2,r5,r2
  803f14:	1885c83a 	sub	r2,r3,r2
  803f18:	f800283a 	ret
  803f1c:	01400404 	movi	r5,16
  803f20:	00804034 	movhi	r2,256
  803f24:	10bfffc4 	addi	r2,r2,-1
  803f28:	2807883a 	mov	r3,r5
  803f2c:	113ff22e 	bgeu	r2,r4,803ef8 <__clzsi2+0x1c>
  803f30:	01400604 	movi	r5,24
  803f34:	2807883a 	mov	r3,r5
  803f38:	20c6d83a 	srl	r3,r4,r3
  803f3c:	00802074 	movhi	r2,129
  803f40:	10913804 	addi	r2,r2,17632
  803f44:	1887883a 	add	r3,r3,r2
  803f48:	18800003 	ldbu	r2,0(r3)
  803f4c:	00c00804 	movi	r3,32
  803f50:	2885883a 	add	r2,r5,r2
  803f54:	1885c83a 	sub	r2,r3,r2
  803f58:	f800283a 	ret

00803f5c <__pack_f>:
  803f5c:	20c00017 	ldw	r3,0(r4)
  803f60:	01c00044 	movi	r7,1
  803f64:	21800317 	ldw	r6,12(r4)
  803f68:	21400117 	ldw	r5,4(r4)
  803f6c:	38c02d2e 	bgeu	r7,r3,804024 <__pack_f+0xc8>
  803f70:	00800104 	movi	r2,4
  803f74:	18802826 	beq	r3,r2,804018 <__pack_f+0xbc>
  803f78:	00800084 	movi	r2,2
  803f7c:	18800126 	beq	r3,r2,803f84 <__pack_f+0x28>
  803f80:	3000101e 	bne	r6,zero,803fc4 <__pack_f+0x68>
  803f84:	000d883a 	mov	r6,zero
  803f88:	0007883a 	mov	r3,zero
  803f8c:	19003fcc 	andi	r4,r3,255
  803f90:	200895fa 	slli	r4,r4,23
  803f94:	00c02034 	movhi	r3,128
  803f98:	18ffffc4 	addi	r3,r3,-1
  803f9c:	30c6703a 	and	r3,r6,r3
  803fa0:	10a0002c 	andhi	r2,r2,32768
  803fa4:	10c4b03a 	or	r2,r2,r3
  803fa8:	280a97fa 	slli	r5,r5,31
  803fac:	1104b03a 	or	r2,r2,r4
  803fb0:	00e00034 	movhi	r3,32768
  803fb4:	18ffffc4 	addi	r3,r3,-1
  803fb8:	10c4703a 	and	r2,r2,r3
  803fbc:	1144b03a 	or	r2,r2,r5
  803fc0:	f800283a 	ret
  803fc4:	21000217 	ldw	r4,8(r4)
  803fc8:	00bfe084 	movi	r2,-126
  803fcc:	20801b16 	blt	r4,r2,80403c <__pack_f+0xe0>
  803fd0:	00801fc4 	movi	r2,127
  803fd4:	11001016 	blt	r2,r4,804018 <__pack_f+0xbc>
  803fd8:	308e703a 	and	r7,r6,r2
  803fdc:	2087883a 	add	r3,r4,r2
  803fe0:	00801004 	movi	r2,64
  803fe4:	38800526 	beq	r7,r2,803ffc <__pack_f+0xa0>
  803fe8:	31800fc4 	addi	r6,r6,63
  803fec:	30000716 	blt	r6,zero,80400c <__pack_f+0xb0>
  803ff0:	300490ba 	slli	r2,r6,2
  803ff4:	100cd27a 	srli	r6,r2,9
  803ff8:	003fe406 	br	803f8c <__pack_f+0x30>
  803ffc:	3080200c 	andi	r2,r6,128
  804000:	103ffa26 	beq	r2,zero,803fec <__pack_f+0x90>
  804004:	31cd883a 	add	r6,r6,r7
  804008:	003ff806 	br	803fec <__pack_f+0x90>
  80400c:	300cd07a 	srli	r6,r6,1
  804010:	18c00044 	addi	r3,r3,1
  804014:	003ff606 	br	803ff0 <__pack_f+0x94>
  804018:	000d883a 	mov	r6,zero
  80401c:	00ffffc4 	movi	r3,-1
  804020:	003fda06 	br	803f8c <__pack_f+0x30>
  804024:	31800434 	orhi	r6,r6,16
  804028:	00802034 	movhi	r2,128
  80402c:	10bfffc4 	addi	r2,r2,-1
  804030:	308c703a 	and	r6,r6,r2
  804034:	00ffffc4 	movi	r3,-1
  804038:	003fd406 	br	803f8c <__pack_f+0x30>
  80403c:	1109c83a 	sub	r4,r2,r4
  804040:	00800644 	movi	r2,25
  804044:	11001216 	blt	r2,r4,804090 <__pack_f+0x134>
  804048:	3904983a 	sll	r2,r7,r4
  80404c:	3106d83a 	srl	r3,r6,r4
  804050:	10bfffc4 	addi	r2,r2,-1
  804054:	3084703a 	and	r2,r6,r2
  804058:	1004c03a 	cmpne	r2,r2,zero
  80405c:	1886b03a 	or	r3,r3,r2
  804060:	19001fcc 	andi	r4,r3,127
  804064:	00801004 	movi	r2,64
  804068:	20800c26 	beq	r4,r2,80409c <__pack_f+0x140>
  80406c:	18c00fc4 	addi	r3,r3,63
  804070:	00900034 	movhi	r2,16384
  804074:	10bfffc4 	addi	r2,r2,-1
  804078:	180cd1fa 	srli	r6,r3,7
  80407c:	10c7803a 	cmpltu	r3,r2,r3
  804080:	00802034 	movhi	r2,128
  804084:	10bfffc4 	addi	r2,r2,-1
  804088:	308c703a 	and	r6,r6,r2
  80408c:	003fbf06 	br	803f8c <__pack_f+0x30>
  804090:	0007883a 	mov	r3,zero
  804094:	000d883a 	mov	r6,zero
  804098:	003ff906 	br	804080 <__pack_f+0x124>
  80409c:	1880200c 	andi	r2,r3,128
  8040a0:	10000126 	beq	r2,zero,8040a8 <__pack_f+0x14c>
  8040a4:	1907883a 	add	r3,r3,r4
  8040a8:	180cd1fa 	srli	r6,r3,7
  8040ac:	00900034 	movhi	r2,16384
  8040b0:	10bfffc4 	addi	r2,r2,-1
  8040b4:	10c7803a 	cmpltu	r3,r2,r3
  8040b8:	003ff106 	br	804080 <__pack_f+0x124>

008040bc <__unpack_f>:
  8040bc:	21800017 	ldw	r6,0(r4)
  8040c0:	00c02034 	movhi	r3,128
  8040c4:	18ffffc4 	addi	r3,r3,-1
  8040c8:	3004d5fa 	srli	r2,r6,23
  8040cc:	3008d7fa 	srli	r4,r6,31
  8040d0:	30ce703a 	and	r7,r6,r3
  8040d4:	10c03fcc 	andi	r3,r2,255
  8040d8:	29000115 	stw	r4,4(r5)
  8040dc:	1800131e 	bne	r3,zero,80412c <__unpack_f+0x70>
  8040e0:	38000f26 	beq	r7,zero,804120 <__unpack_f+0x64>
  8040e4:	380691fa 	slli	r3,r7,7
  8040e8:	01bfe084 	movi	r6,-126
  8040ec:	008000c4 	movi	r2,3
  8040f0:	01100034 	movhi	r4,16384
  8040f4:	213fffc4 	addi	r4,r4,-1
  8040f8:	28800015 	stw	r2,0(r5)
  8040fc:	29800215 	stw	r6,8(r5)
  804100:	20c00536 	bltu	r4,r3,804118 <__unpack_f+0x5c>
  804104:	3005883a 	mov	r2,r6
  804108:	18c7883a 	add	r3,r3,r3
  80410c:	10bfffc4 	addi	r2,r2,-1
  804110:	20fffd2e 	bgeu	r4,r3,804108 <__unpack_f+0x4c>
  804114:	28800215 	stw	r2,8(r5)
  804118:	28c00315 	stw	r3,12(r5)
  80411c:	f800283a 	ret
  804120:	00800084 	movi	r2,2
  804124:	28800015 	stw	r2,0(r5)
  804128:	f800283a 	ret
  80412c:	00803fc4 	movi	r2,255
  804130:	18800826 	beq	r3,r2,804154 <__unpack_f+0x98>
  804134:	380491fa 	slli	r2,r7,7
  804138:	18ffe044 	addi	r3,r3,-127
  80413c:	28c00215 	stw	r3,8(r5)
  804140:	10900034 	orhi	r2,r2,16384
  804144:	28800315 	stw	r2,12(r5)
  804148:	008000c4 	movi	r2,3
  80414c:	28800015 	stw	r2,0(r5)
  804150:	f800283a 	ret
  804154:	3800031e 	bne	r7,zero,804164 <__unpack_f+0xa8>
  804158:	00800104 	movi	r2,4
  80415c:	28800015 	stw	r2,0(r5)
  804160:	f800283a 	ret
  804164:	3080042c 	andhi	r2,r6,16
  804168:	10000426 	beq	r2,zero,80417c <__unpack_f+0xc0>
  80416c:	00800044 	movi	r2,1
  804170:	28800015 	stw	r2,0(r5)
  804174:	29c00315 	stw	r7,12(r5)
  804178:	f800283a 	ret
  80417c:	28000015 	stw	zero,0(r5)
  804180:	003ffc06 	br	804174 <__unpack_f+0xb8>

00804184 <__make_fp>:
  804184:	defffb04 	addi	sp,sp,-20
  804188:	d9000015 	stw	r4,0(sp)
  80418c:	d809883a 	mov	r4,sp
  804190:	dfc00415 	stw	ra,16(sp)
  804194:	d9400115 	stw	r5,4(sp)
  804198:	d9800215 	stw	r6,8(sp)
  80419c:	d9c00315 	stw	r7,12(sp)
  8041a0:	0803f5c0 	call	803f5c <__pack_f>
  8041a4:	dfc00417 	ldw	ra,16(sp)
  8041a8:	dec00504 	addi	sp,sp,20
  8041ac:	f800283a 	ret

008041b0 <__pack_d>:
  8041b0:	20c00017 	ldw	r3,0(r4)
  8041b4:	defffd04 	addi	sp,sp,-12
  8041b8:	dc000015 	stw	r16,0(sp)
  8041bc:	dc800215 	stw	r18,8(sp)
  8041c0:	dc400115 	stw	r17,4(sp)
  8041c4:	00800044 	movi	r2,1
  8041c8:	22000317 	ldw	r8,12(r4)
  8041cc:	001f883a 	mov	r15,zero
  8041d0:	22400417 	ldw	r9,16(r4)
  8041d4:	24000117 	ldw	r16,4(r4)
  8041d8:	10c0552e 	bgeu	r2,r3,804330 <__pack_d+0x180>
  8041dc:	00800104 	movi	r2,4
  8041e0:	18804f26 	beq	r3,r2,804320 <__pack_d+0x170>
  8041e4:	00800084 	movi	r2,2
  8041e8:	18800226 	beq	r3,r2,8041f4 <__pack_d+0x44>
  8041ec:	4244b03a 	or	r2,r8,r9
  8041f0:	10001a1e 	bne	r2,zero,80425c <__pack_d+0xac>
  8041f4:	000d883a 	mov	r6,zero
  8041f8:	000f883a 	mov	r7,zero
  8041fc:	0011883a 	mov	r8,zero
  804200:	00800434 	movhi	r2,16
  804204:	10bfffc4 	addi	r2,r2,-1
  804208:	301d883a 	mov	r14,r6
  80420c:	3884703a 	and	r2,r7,r2
  804210:	400a953a 	slli	r5,r8,20
  804214:	79bffc2c 	andhi	r6,r15,65520
  804218:	308cb03a 	or	r6,r6,r2
  80421c:	00e00434 	movhi	r3,32784
  804220:	18ffffc4 	addi	r3,r3,-1
  804224:	800497fa 	slli	r2,r16,31
  804228:	30c6703a 	and	r3,r6,r3
  80422c:	1946b03a 	or	r3,r3,r5
  804230:	01600034 	movhi	r5,32768
  804234:	297fffc4 	addi	r5,r5,-1
  804238:	194a703a 	and	r5,r3,r5
  80423c:	288ab03a 	or	r5,r5,r2
  804240:	2807883a 	mov	r3,r5
  804244:	7005883a 	mov	r2,r14
  804248:	dc800217 	ldw	r18,8(sp)
  80424c:	dc400117 	ldw	r17,4(sp)
  804250:	dc000017 	ldw	r16,0(sp)
  804254:	dec00304 	addi	sp,sp,12
  804258:	f800283a 	ret
  80425c:	21000217 	ldw	r4,8(r4)
  804260:	00bf0084 	movi	r2,-1022
  804264:	20803f16 	blt	r4,r2,804364 <__pack_d+0x1b4>
  804268:	0080ffc4 	movi	r2,1023
  80426c:	11002c16 	blt	r2,r4,804320 <__pack_d+0x170>
  804270:	00803fc4 	movi	r2,255
  804274:	408c703a 	and	r6,r8,r2
  804278:	00802004 	movi	r2,128
  80427c:	0007883a 	mov	r3,zero
  804280:	000f883a 	mov	r7,zero
  804284:	2280ffc4 	addi	r10,r4,1023
  804288:	30801e26 	beq	r6,r2,804304 <__pack_d+0x154>
  80428c:	00801fc4 	movi	r2,127
  804290:	4089883a 	add	r4,r8,r2
  804294:	220d803a 	cmpltu	r6,r4,r8
  804298:	324d883a 	add	r6,r6,r9
  80429c:	2011883a 	mov	r8,r4
  8042a0:	3013883a 	mov	r9,r6
  8042a4:	00880034 	movhi	r2,8192
  8042a8:	10bfffc4 	addi	r2,r2,-1
  8042ac:	12400d36 	bltu	r2,r9,8042e4 <__pack_d+0x134>
  8042b0:	4804963a 	slli	r2,r9,24
  8042b4:	400cd23a 	srli	r6,r8,8
  8042b8:	480ed23a 	srli	r7,r9,8
  8042bc:	013fffc4 	movi	r4,-1
  8042c0:	118cb03a 	or	r6,r2,r6
  8042c4:	01400434 	movhi	r5,16
  8042c8:	297fffc4 	addi	r5,r5,-1
  8042cc:	3104703a 	and	r2,r6,r4
  8042d0:	3946703a 	and	r3,r7,r5
  8042d4:	5201ffcc 	andi	r8,r10,2047
  8042d8:	100d883a 	mov	r6,r2
  8042dc:	180f883a 	mov	r7,r3
  8042e0:	003fc706 	br	804200 <__pack_d+0x50>
  8042e4:	480897fa 	slli	r4,r9,31
  8042e8:	4004d07a 	srli	r2,r8,1
  8042ec:	4806d07a 	srli	r3,r9,1
  8042f0:	52800044 	addi	r10,r10,1
  8042f4:	2084b03a 	or	r2,r4,r2
  8042f8:	1011883a 	mov	r8,r2
  8042fc:	1813883a 	mov	r9,r3
  804300:	003feb06 	br	8042b0 <__pack_d+0x100>
  804304:	383fe11e 	bne	r7,zero,80428c <__pack_d+0xdc>
  804308:	01004004 	movi	r4,256
  80430c:	4104703a 	and	r2,r8,r4
  804310:	10c4b03a 	or	r2,r2,r3
  804314:	103fe326 	beq	r2,zero,8042a4 <__pack_d+0xf4>
  804318:	3005883a 	mov	r2,r6
  80431c:	003fdc06 	br	804290 <__pack_d+0xe0>
  804320:	000d883a 	mov	r6,zero
  804324:	000f883a 	mov	r7,zero
  804328:	0201ffc4 	movi	r8,2047
  80432c:	003fb406 	br	804200 <__pack_d+0x50>
  804330:	0005883a 	mov	r2,zero
  804334:	00c00234 	movhi	r3,8
  804338:	408cb03a 	or	r6,r8,r2
  80433c:	48ceb03a 	or	r7,r9,r3
  804340:	013fffc4 	movi	r4,-1
  804344:	01400434 	movhi	r5,16
  804348:	297fffc4 	addi	r5,r5,-1
  80434c:	3104703a 	and	r2,r6,r4
  804350:	3946703a 	and	r3,r7,r5
  804354:	100d883a 	mov	r6,r2
  804358:	180f883a 	mov	r7,r3
  80435c:	0201ffc4 	movi	r8,2047
  804360:	003fa706 	br	804200 <__pack_d+0x50>
  804364:	1109c83a 	sub	r4,r2,r4
  804368:	00800e04 	movi	r2,56
  80436c:	11004316 	blt	r2,r4,80447c <__pack_d+0x2cc>
  804370:	21fff804 	addi	r7,r4,-32
  804374:	38004516 	blt	r7,zero,80448c <__pack_d+0x2dc>
  804378:	49d8d83a 	srl	r12,r9,r7
  80437c:	001b883a 	mov	r13,zero
  804380:	0023883a 	mov	r17,zero
  804384:	01400044 	movi	r5,1
  804388:	0025883a 	mov	r18,zero
  80438c:	38004716 	blt	r7,zero,8044ac <__pack_d+0x2fc>
  804390:	29d6983a 	sll	r11,r5,r7
  804394:	0015883a 	mov	r10,zero
  804398:	00bfffc4 	movi	r2,-1
  80439c:	5089883a 	add	r4,r10,r2
  8043a0:	588b883a 	add	r5,r11,r2
  8043a4:	228d803a 	cmpltu	r6,r4,r10
  8043a8:	314b883a 	add	r5,r6,r5
  8043ac:	4104703a 	and	r2,r8,r4
  8043b0:	4946703a 	and	r3,r9,r5
  8043b4:	10c4b03a 	or	r2,r2,r3
  8043b8:	10000226 	beq	r2,zero,8043c4 <__pack_d+0x214>
  8043bc:	04400044 	movi	r17,1
  8043c0:	0025883a 	mov	r18,zero
  8043c4:	00803fc4 	movi	r2,255
  8043c8:	644eb03a 	or	r7,r12,r17
  8043cc:	3892703a 	and	r9,r7,r2
  8043d0:	00802004 	movi	r2,128
  8043d4:	6c90b03a 	or	r8,r13,r18
  8043d8:	0015883a 	mov	r10,zero
  8043dc:	48801626 	beq	r9,r2,804438 <__pack_d+0x288>
  8043e0:	01001fc4 	movi	r4,127
  8043e4:	3905883a 	add	r2,r7,r4
  8043e8:	11cd803a 	cmpltu	r6,r2,r7
  8043ec:	320d883a 	add	r6,r6,r8
  8043f0:	100f883a 	mov	r7,r2
  8043f4:	00840034 	movhi	r2,4096
  8043f8:	10bfffc4 	addi	r2,r2,-1
  8043fc:	3011883a 	mov	r8,r6
  804400:	0007883a 	mov	r3,zero
  804404:	11801b36 	bltu	r2,r6,804474 <__pack_d+0x2c4>
  804408:	4004963a 	slli	r2,r8,24
  80440c:	3808d23a 	srli	r4,r7,8
  804410:	400ad23a 	srli	r5,r8,8
  804414:	1813883a 	mov	r9,r3
  804418:	1108b03a 	or	r4,r2,r4
  80441c:	00bfffc4 	movi	r2,-1
  804420:	00c00434 	movhi	r3,16
  804424:	18ffffc4 	addi	r3,r3,-1
  804428:	208c703a 	and	r6,r4,r2
  80442c:	28ce703a 	and	r7,r5,r3
  804430:	4a01ffcc 	andi	r8,r9,2047
  804434:	003f7206 	br	804200 <__pack_d+0x50>
  804438:	503fe91e 	bne	r10,zero,8043e0 <__pack_d+0x230>
  80443c:	01004004 	movi	r4,256
  804440:	3904703a 	and	r2,r7,r4
  804444:	0007883a 	mov	r3,zero
  804448:	10c4b03a 	or	r2,r2,r3
  80444c:	10000626 	beq	r2,zero,804468 <__pack_d+0x2b8>
  804450:	3a45883a 	add	r2,r7,r9
  804454:	11cd803a 	cmpltu	r6,r2,r7
  804458:	320d883a 	add	r6,r6,r8
  80445c:	100f883a 	mov	r7,r2
  804460:	3011883a 	mov	r8,r6
  804464:	0007883a 	mov	r3,zero
  804468:	00840034 	movhi	r2,4096
  80446c:	10bfffc4 	addi	r2,r2,-1
  804470:	123fe52e 	bgeu	r2,r8,804408 <__pack_d+0x258>
  804474:	00c00044 	movi	r3,1
  804478:	003fe306 	br	804408 <__pack_d+0x258>
  80447c:	0009883a 	mov	r4,zero
  804480:	0013883a 	mov	r9,zero
  804484:	000b883a 	mov	r5,zero
  804488:	003fe406 	br	80441c <__pack_d+0x26c>
  80448c:	4a47883a 	add	r3,r9,r9
  804490:	008007c4 	movi	r2,31
  804494:	1105c83a 	sub	r2,r2,r4
  804498:	1886983a 	sll	r3,r3,r2
  80449c:	4118d83a 	srl	r12,r8,r4
  8044a0:	491ad83a 	srl	r13,r9,r4
  8044a4:	1b18b03a 	or	r12,r3,r12
  8044a8:	003fb506 	br	804380 <__pack_d+0x1d0>
  8044ac:	2806d07a 	srli	r3,r5,1
  8044b0:	008007c4 	movi	r2,31
  8044b4:	1105c83a 	sub	r2,r2,r4
  8044b8:	1896d83a 	srl	r11,r3,r2
  8044bc:	2914983a 	sll	r10,r5,r4
  8044c0:	003fb506 	br	804398 <__pack_d+0x1e8>

008044c4 <__unpack_d>:
  8044c4:	20c00117 	ldw	r3,4(r4)
  8044c8:	22400017 	ldw	r9,0(r4)
  8044cc:	00800434 	movhi	r2,16
  8044d0:	10bfffc4 	addi	r2,r2,-1
  8044d4:	1808d53a 	srli	r4,r3,20
  8044d8:	180cd7fa 	srli	r6,r3,31
  8044dc:	1894703a 	and	r10,r3,r2
  8044e0:	2201ffcc 	andi	r8,r4,2047
  8044e4:	281b883a 	mov	r13,r5
  8044e8:	4817883a 	mov	r11,r9
  8044ec:	29800115 	stw	r6,4(r5)
  8044f0:	5019883a 	mov	r12,r10
  8044f4:	40001e1e 	bne	r8,zero,804570 <__unpack_d+0xac>
  8044f8:	4a84b03a 	or	r2,r9,r10
  8044fc:	10001926 	beq	r2,zero,804564 <__unpack_d+0xa0>
  804500:	4804d63a 	srli	r2,r9,24
  804504:	500c923a 	slli	r6,r10,8
  804508:	013f0084 	movi	r4,-1022
  80450c:	00c40034 	movhi	r3,4096
  804510:	18ffffc4 	addi	r3,r3,-1
  804514:	118cb03a 	or	r6,r2,r6
  804518:	008000c4 	movi	r2,3
  80451c:	480a923a 	slli	r5,r9,8
  804520:	68800015 	stw	r2,0(r13)
  804524:	69000215 	stw	r4,8(r13)
  804528:	19800b36 	bltu	r3,r6,804558 <__unpack_d+0x94>
  80452c:	200f883a 	mov	r7,r4
  804530:	1811883a 	mov	r8,r3
  804534:	2945883a 	add	r2,r5,r5
  804538:	1149803a 	cmpltu	r4,r2,r5
  80453c:	3187883a 	add	r3,r6,r6
  804540:	20c9883a 	add	r4,r4,r3
  804544:	100b883a 	mov	r5,r2
  804548:	200d883a 	mov	r6,r4
  80454c:	39ffffc4 	addi	r7,r7,-1
  804550:	413ff82e 	bgeu	r8,r4,804534 <__unpack_d+0x70>
  804554:	69c00215 	stw	r7,8(r13)
  804558:	69800415 	stw	r6,16(r13)
  80455c:	69400315 	stw	r5,12(r13)
  804560:	f800283a 	ret
  804564:	00800084 	movi	r2,2
  804568:	28800015 	stw	r2,0(r5)
  80456c:	f800283a 	ret
  804570:	0081ffc4 	movi	r2,2047
  804574:	40800f26 	beq	r8,r2,8045b4 <__unpack_d+0xf0>
  804578:	480cd63a 	srli	r6,r9,24
  80457c:	5006923a 	slli	r3,r10,8
  804580:	4804923a 	slli	r2,r9,8
  804584:	0009883a 	mov	r4,zero
  804588:	30c6b03a 	or	r3,r6,r3
  80458c:	01440034 	movhi	r5,4096
  804590:	110cb03a 	or	r6,r2,r4
  804594:	423f0044 	addi	r8,r8,-1023
  804598:	194eb03a 	or	r7,r3,r5
  80459c:	008000c4 	movi	r2,3
  8045a0:	69c00415 	stw	r7,16(r13)
  8045a4:	6a000215 	stw	r8,8(r13)
  8045a8:	68800015 	stw	r2,0(r13)
  8045ac:	69800315 	stw	r6,12(r13)
  8045b0:	f800283a 	ret
  8045b4:	4a84b03a 	or	r2,r9,r10
  8045b8:	1000031e 	bne	r2,zero,8045c8 <__unpack_d+0x104>
  8045bc:	00800104 	movi	r2,4
  8045c0:	28800015 	stw	r2,0(r5)
  8045c4:	f800283a 	ret
  8045c8:	0009883a 	mov	r4,zero
  8045cc:	01400234 	movhi	r5,8
  8045d0:	4904703a 	and	r2,r9,r4
  8045d4:	5146703a 	and	r3,r10,r5
  8045d8:	10c4b03a 	or	r2,r2,r3
  8045dc:	10000526 	beq	r2,zero,8045f4 <__unpack_d+0x130>
  8045e0:	00800044 	movi	r2,1
  8045e4:	68800015 	stw	r2,0(r13)
  8045e8:	6b000415 	stw	r12,16(r13)
  8045ec:	6ac00315 	stw	r11,12(r13)
  8045f0:	f800283a 	ret
  8045f4:	68000015 	stw	zero,0(r13)
  8045f8:	003ffb06 	br	8045e8 <__unpack_d+0x124>

008045fc <__fpcmp_parts_d>:
  8045fc:	21800017 	ldw	r6,0(r4)
  804600:	00c00044 	movi	r3,1
  804604:	19800a2e 	bgeu	r3,r6,804630 <__fpcmp_parts_d+0x34>
  804608:	28800017 	ldw	r2,0(r5)
  80460c:	1880082e 	bgeu	r3,r2,804630 <__fpcmp_parts_d+0x34>
  804610:	00c00104 	movi	r3,4
  804614:	30c02626 	beq	r6,r3,8046b0 <__fpcmp_parts_d+0xb4>
  804618:	10c02226 	beq	r2,r3,8046a4 <__fpcmp_parts_d+0xa8>
  80461c:	00c00084 	movi	r3,2
  804620:	30c00526 	beq	r6,r3,804638 <__fpcmp_parts_d+0x3c>
  804624:	10c0071e 	bne	r2,r3,804644 <__fpcmp_parts_d+0x48>
  804628:	20800117 	ldw	r2,4(r4)
  80462c:	1000091e 	bne	r2,zero,804654 <__fpcmp_parts_d+0x58>
  804630:	00800044 	movi	r2,1
  804634:	f800283a 	ret
  804638:	10c01a1e 	bne	r2,r3,8046a4 <__fpcmp_parts_d+0xa8>
  80463c:	0005883a 	mov	r2,zero
  804640:	f800283a 	ret
  804644:	22000117 	ldw	r8,4(r4)
  804648:	28800117 	ldw	r2,4(r5)
  80464c:	40800326 	beq	r8,r2,80465c <__fpcmp_parts_d+0x60>
  804650:	403ff726 	beq	r8,zero,804630 <__fpcmp_parts_d+0x34>
  804654:	00bfffc4 	movi	r2,-1
  804658:	f800283a 	ret
  80465c:	20c00217 	ldw	r3,8(r4)
  804660:	28800217 	ldw	r2,8(r5)
  804664:	10fffa16 	blt	r2,r3,804650 <__fpcmp_parts_d+0x54>
  804668:	18800916 	blt	r3,r2,804690 <__fpcmp_parts_d+0x94>
  80466c:	21c00417 	ldw	r7,16(r4)
  804670:	28c00417 	ldw	r3,16(r5)
  804674:	21800317 	ldw	r6,12(r4)
  804678:	28800317 	ldw	r2,12(r5)
  80467c:	19fff436 	bltu	r3,r7,804650 <__fpcmp_parts_d+0x54>
  804680:	38c00526 	beq	r7,r3,804698 <__fpcmp_parts_d+0x9c>
  804684:	38c00236 	bltu	r7,r3,804690 <__fpcmp_parts_d+0x94>
  804688:	19ffec1e 	bne	r3,r7,80463c <__fpcmp_parts_d+0x40>
  80468c:	30bfeb2e 	bgeu	r6,r2,80463c <__fpcmp_parts_d+0x40>
  804690:	403fe71e 	bne	r8,zero,804630 <__fpcmp_parts_d+0x34>
  804694:	003fef06 	br	804654 <__fpcmp_parts_d+0x58>
  804698:	11bffa2e 	bgeu	r2,r6,804684 <__fpcmp_parts_d+0x88>
  80469c:	403fe426 	beq	r8,zero,804630 <__fpcmp_parts_d+0x34>
  8046a0:	003fec06 	br	804654 <__fpcmp_parts_d+0x58>
  8046a4:	28800117 	ldw	r2,4(r5)
  8046a8:	103fe11e 	bne	r2,zero,804630 <__fpcmp_parts_d+0x34>
  8046ac:	003fe906 	br	804654 <__fpcmp_parts_d+0x58>
  8046b0:	11bfdd1e 	bne	r2,r6,804628 <__fpcmp_parts_d+0x2c>
  8046b4:	28c00117 	ldw	r3,4(r5)
  8046b8:	20800117 	ldw	r2,4(r4)
  8046bc:	1885c83a 	sub	r2,r3,r2
  8046c0:	f800283a 	ret

008046c4 <__errno>:
  8046c4:	00c02074 	movhi	r3,129
  8046c8:	18d88d04 	addi	r3,r3,25140
  8046cc:	18800017 	ldw	r2,0(r3)
  8046d0:	f800283a 	ret

008046d4 <_puts_r>:
  8046d4:	defff604 	addi	sp,sp,-40
  8046d8:	dc400715 	stw	r17,28(sp)
  8046dc:	2023883a 	mov	r17,r4
  8046e0:	2809883a 	mov	r4,r5
  8046e4:	dfc00915 	stw	ra,36(sp)
  8046e8:	dcc00815 	stw	r19,32(sp)
  8046ec:	2827883a 	mov	r19,r5
  8046f0:	08047880 	call	804788 <strlen>
  8046f4:	89400217 	ldw	r5,8(r17)
  8046f8:	00c02074 	movhi	r3,129
  8046fc:	18d17904 	addi	r3,r3,17892
  804700:	01c00044 	movi	r7,1
  804704:	12000044 	addi	r8,r2,1
  804708:	d8c00515 	stw	r3,20(sp)
  80470c:	d9c00615 	stw	r7,24(sp)
  804710:	d8c00304 	addi	r3,sp,12
  804714:	01c00084 	movi	r7,2
  804718:	8809883a 	mov	r4,r17
  80471c:	d80d883a 	mov	r6,sp
  804720:	d8c00015 	stw	r3,0(sp)
  804724:	dcc00315 	stw	r19,12(sp)
  804728:	da000215 	stw	r8,8(sp)
  80472c:	d9c00115 	stw	r7,4(sp)
  804730:	d8800415 	stw	r2,16(sp)
  804734:	08047fc0 	call	8047fc <__sfvwrite_r>
  804738:	00ffffc4 	movi	r3,-1
  80473c:	10000626 	beq	r2,zero,804758 <_puts_r+0x84>
  804740:	1805883a 	mov	r2,r3
  804744:	dfc00917 	ldw	ra,36(sp)
  804748:	dcc00817 	ldw	r19,32(sp)
  80474c:	dc400717 	ldw	r17,28(sp)
  804750:	dec00a04 	addi	sp,sp,40
  804754:	f800283a 	ret
  804758:	00c00284 	movi	r3,10
  80475c:	1805883a 	mov	r2,r3
  804760:	dfc00917 	ldw	ra,36(sp)
  804764:	dcc00817 	ldw	r19,32(sp)
  804768:	dc400717 	ldw	r17,28(sp)
  80476c:	dec00a04 	addi	sp,sp,40
  804770:	f800283a 	ret

00804774 <puts>:
  804774:	00802074 	movhi	r2,129
  804778:	10988d04 	addi	r2,r2,25140
  80477c:	200b883a 	mov	r5,r4
  804780:	11000017 	ldw	r4,0(r2)
  804784:	08046d41 	jmpi	8046d4 <_puts_r>

00804788 <strlen>:
  804788:	208000cc 	andi	r2,r4,3
  80478c:	2011883a 	mov	r8,r4
  804790:	1000161e 	bne	r2,zero,8047ec <strlen+0x64>
  804794:	20c00017 	ldw	r3,0(r4)
  804798:	017fbff4 	movhi	r5,65279
  80479c:	297fbfc4 	addi	r5,r5,-257
  8047a0:	01e02074 	movhi	r7,32897
  8047a4:	39e02004 	addi	r7,r7,-32640
  8047a8:	1945883a 	add	r2,r3,r5
  8047ac:	11c4703a 	and	r2,r2,r7
  8047b0:	00c6303a 	nor	r3,zero,r3
  8047b4:	1886703a 	and	r3,r3,r2
  8047b8:	18000c1e 	bne	r3,zero,8047ec <strlen+0x64>
  8047bc:	280d883a 	mov	r6,r5
  8047c0:	380b883a 	mov	r5,r7
  8047c4:	21000104 	addi	r4,r4,4
  8047c8:	20800017 	ldw	r2,0(r4)
  8047cc:	1187883a 	add	r3,r2,r6
  8047d0:	1946703a 	and	r3,r3,r5
  8047d4:	0084303a 	nor	r2,zero,r2
  8047d8:	10c4703a 	and	r2,r2,r3
  8047dc:	103ff926 	beq	r2,zero,8047c4 <strlen+0x3c>
  8047e0:	20800007 	ldb	r2,0(r4)
  8047e4:	10000326 	beq	r2,zero,8047f4 <strlen+0x6c>
  8047e8:	21000044 	addi	r4,r4,1
  8047ec:	20800007 	ldb	r2,0(r4)
  8047f0:	103ffd1e 	bne	r2,zero,8047e8 <strlen+0x60>
  8047f4:	2205c83a 	sub	r2,r4,r8
  8047f8:	f800283a 	ret

008047fc <__sfvwrite_r>:
  8047fc:	30800217 	ldw	r2,8(r6)
  804800:	defff504 	addi	sp,sp,-44
  804804:	df000915 	stw	fp,36(sp)
  804808:	dd800715 	stw	r22,28(sp)
  80480c:	dc800315 	stw	r18,12(sp)
  804810:	dfc00a15 	stw	ra,40(sp)
  804814:	ddc00815 	stw	r23,32(sp)
  804818:	dd400615 	stw	r21,24(sp)
  80481c:	dd000515 	stw	r20,20(sp)
  804820:	dcc00415 	stw	r19,16(sp)
  804824:	dc400215 	stw	r17,8(sp)
  804828:	dc000115 	stw	r16,4(sp)
  80482c:	302d883a 	mov	r22,r6
  804830:	2039883a 	mov	fp,r4
  804834:	2825883a 	mov	r18,r5
  804838:	10001c26 	beq	r2,zero,8048ac <__sfvwrite_r+0xb0>
  80483c:	29c0030b 	ldhu	r7,12(r5)
  804840:	3880020c 	andi	r2,r7,8
  804844:	10002726 	beq	r2,zero,8048e4 <__sfvwrite_r+0xe8>
  804848:	28800417 	ldw	r2,16(r5)
  80484c:	10002526 	beq	r2,zero,8048e4 <__sfvwrite_r+0xe8>
  804850:	3880008c 	andi	r2,r7,2
  804854:	b5400017 	ldw	r21,0(r22)
  804858:	10002826 	beq	r2,zero,8048fc <__sfvwrite_r+0x100>
  80485c:	0021883a 	mov	r16,zero
  804860:	0023883a 	mov	r17,zero
  804864:	880d883a 	mov	r6,r17
  804868:	e009883a 	mov	r4,fp
  80486c:	00810004 	movi	r2,1024
  804870:	80006e26 	beq	r16,zero,804a2c <__sfvwrite_r+0x230>
  804874:	800f883a 	mov	r7,r16
  804878:	91400717 	ldw	r5,28(r18)
  80487c:	1400012e 	bgeu	r2,r16,804884 <__sfvwrite_r+0x88>
  804880:	100f883a 	mov	r7,r2
  804884:	90c00917 	ldw	r3,36(r18)
  804888:	183ee83a 	callr	r3
  80488c:	1007883a 	mov	r3,r2
  804890:	80a1c83a 	sub	r16,r16,r2
  804894:	88a3883a 	add	r17,r17,r2
  804898:	00806d0e 	bge	zero,r2,804a50 <__sfvwrite_r+0x254>
  80489c:	b0800217 	ldw	r2,8(r22)
  8048a0:	10c5c83a 	sub	r2,r2,r3
  8048a4:	b0800215 	stw	r2,8(r22)
  8048a8:	103fee1e 	bne	r2,zero,804864 <__sfvwrite_r+0x68>
  8048ac:	0009883a 	mov	r4,zero
  8048b0:	2005883a 	mov	r2,r4
  8048b4:	dfc00a17 	ldw	ra,40(sp)
  8048b8:	df000917 	ldw	fp,36(sp)
  8048bc:	ddc00817 	ldw	r23,32(sp)
  8048c0:	dd800717 	ldw	r22,28(sp)
  8048c4:	dd400617 	ldw	r21,24(sp)
  8048c8:	dd000517 	ldw	r20,20(sp)
  8048cc:	dcc00417 	ldw	r19,16(sp)
  8048d0:	dc800317 	ldw	r18,12(sp)
  8048d4:	dc400217 	ldw	r17,8(sp)
  8048d8:	dc000117 	ldw	r16,4(sp)
  8048dc:	dec00b04 	addi	sp,sp,44
  8048e0:	f800283a 	ret
  8048e4:	0805ca00 	call	805ca0 <__swsetup_r>
  8048e8:	1000e41e 	bne	r2,zero,804c7c <__sfvwrite_r+0x480>
  8048ec:	91c0030b 	ldhu	r7,12(r18)
  8048f0:	b5400017 	ldw	r21,0(r22)
  8048f4:	3880008c 	andi	r2,r7,2
  8048f8:	103fd81e 	bne	r2,zero,80485c <__sfvwrite_r+0x60>
  8048fc:	3880004c 	andi	r2,r7,1
  804900:	1005003a 	cmpeq	r2,r2,zero
  804904:	10005726 	beq	r2,zero,804a64 <__sfvwrite_r+0x268>
  804908:	0029883a 	mov	r20,zero
  80490c:	002f883a 	mov	r23,zero
  804910:	a0004226 	beq	r20,zero,804a1c <__sfvwrite_r+0x220>
  804914:	3880800c 	andi	r2,r7,512
  804918:	94000217 	ldw	r16,8(r18)
  80491c:	10008b26 	beq	r2,zero,804b4c <__sfvwrite_r+0x350>
  804920:	800d883a 	mov	r6,r16
  804924:	a400a536 	bltu	r20,r16,804bbc <__sfvwrite_r+0x3c0>
  804928:	3881200c 	andi	r2,r7,1152
  80492c:	10002726 	beq	r2,zero,8049cc <__sfvwrite_r+0x1d0>
  804930:	90800517 	ldw	r2,20(r18)
  804934:	92000417 	ldw	r8,16(r18)
  804938:	91400017 	ldw	r5,0(r18)
  80493c:	1087883a 	add	r3,r2,r2
  804940:	1887883a 	add	r3,r3,r2
  804944:	1808d7fa 	srli	r4,r3,31
  804948:	2a21c83a 	sub	r16,r5,r8
  80494c:	80800044 	addi	r2,r16,1
  804950:	20c9883a 	add	r4,r4,r3
  804954:	2027d07a 	srai	r19,r4,1
  804958:	a085883a 	add	r2,r20,r2
  80495c:	980d883a 	mov	r6,r19
  804960:	9880022e 	bgeu	r19,r2,80496c <__sfvwrite_r+0x170>
  804964:	1027883a 	mov	r19,r2
  804968:	100d883a 	mov	r6,r2
  80496c:	3881000c 	andi	r2,r7,1024
  804970:	1000b826 	beq	r2,zero,804c54 <__sfvwrite_r+0x458>
  804974:	300b883a 	mov	r5,r6
  804978:	e009883a 	mov	r4,fp
  80497c:	0804c980 	call	804c98 <_malloc_r>
  804980:	10003126 	beq	r2,zero,804a48 <__sfvwrite_r+0x24c>
  804984:	91400417 	ldw	r5,16(r18)
  804988:	1009883a 	mov	r4,r2
  80498c:	800d883a 	mov	r6,r16
  804990:	1023883a 	mov	r17,r2
  804994:	08054bc0 	call	8054bc <memcpy>
  804998:	90c0030b 	ldhu	r3,12(r18)
  80499c:	00beffc4 	movi	r2,-1025
  8049a0:	1886703a 	and	r3,r3,r2
  8049a4:	18c02014 	ori	r3,r3,128
  8049a8:	90c0030d 	sth	r3,12(r18)
  8049ac:	9c07c83a 	sub	r3,r19,r16
  8049b0:	8c05883a 	add	r2,r17,r16
  8049b4:	a00d883a 	mov	r6,r20
  8049b8:	a021883a 	mov	r16,r20
  8049bc:	90800015 	stw	r2,0(r18)
  8049c0:	90c00215 	stw	r3,8(r18)
  8049c4:	94400415 	stw	r17,16(r18)
  8049c8:	94c00515 	stw	r19,20(r18)
  8049cc:	91000017 	ldw	r4,0(r18)
  8049d0:	b80b883a 	mov	r5,r23
  8049d4:	a023883a 	mov	r17,r20
  8049d8:	080555c0 	call	80555c <memmove>
  8049dc:	90c00217 	ldw	r3,8(r18)
  8049e0:	90800017 	ldw	r2,0(r18)
  8049e4:	a027883a 	mov	r19,r20
  8049e8:	1c07c83a 	sub	r3,r3,r16
  8049ec:	1405883a 	add	r2,r2,r16
  8049f0:	90c00215 	stw	r3,8(r18)
  8049f4:	a021883a 	mov	r16,r20
  8049f8:	90800015 	stw	r2,0(r18)
  8049fc:	b0800217 	ldw	r2,8(r22)
  804a00:	1405c83a 	sub	r2,r2,r16
  804a04:	b0800215 	stw	r2,8(r22)
  804a08:	103fa826 	beq	r2,zero,8048ac <__sfvwrite_r+0xb0>
  804a0c:	a469c83a 	sub	r20,r20,r17
  804a10:	91c0030b 	ldhu	r7,12(r18)
  804a14:	bcef883a 	add	r23,r23,r19
  804a18:	a03fbe1e 	bne	r20,zero,804914 <__sfvwrite_r+0x118>
  804a1c:	adc00017 	ldw	r23,0(r21)
  804a20:	ad000117 	ldw	r20,4(r21)
  804a24:	ad400204 	addi	r21,r21,8
  804a28:	003fb906 	br	804910 <__sfvwrite_r+0x114>
  804a2c:	ac400017 	ldw	r17,0(r21)
  804a30:	ac000117 	ldw	r16,4(r21)
  804a34:	ad400204 	addi	r21,r21,8
  804a38:	003f8a06 	br	804864 <__sfvwrite_r+0x68>
  804a3c:	91400417 	ldw	r5,16(r18)
  804a40:	e009883a 	mov	r4,fp
  804a44:	08063f80 	call	8063f8 <_free_r>
  804a48:	00800304 	movi	r2,12
  804a4c:	e0800015 	stw	r2,0(fp)
  804a50:	9080030b 	ldhu	r2,12(r18)
  804a54:	013fffc4 	movi	r4,-1
  804a58:	10801014 	ori	r2,r2,64
  804a5c:	9080030d 	sth	r2,12(r18)
  804a60:	003f9306 	br	8048b0 <__sfvwrite_r+0xb4>
  804a64:	0027883a 	mov	r19,zero
  804a68:	002f883a 	mov	r23,zero
  804a6c:	d8000015 	stw	zero,0(sp)
  804a70:	0029883a 	mov	r20,zero
  804a74:	98001e26 	beq	r19,zero,804af0 <__sfvwrite_r+0x2f4>
  804a78:	d8c00017 	ldw	r3,0(sp)
  804a7c:	1804c03a 	cmpne	r2,r3,zero
  804a80:	10005e26 	beq	r2,zero,804bfc <__sfvwrite_r+0x400>
  804a84:	9821883a 	mov	r16,r19
  804a88:	a4c0012e 	bgeu	r20,r19,804a90 <__sfvwrite_r+0x294>
  804a8c:	a021883a 	mov	r16,r20
  804a90:	91000017 	ldw	r4,0(r18)
  804a94:	90800417 	ldw	r2,16(r18)
  804a98:	91800217 	ldw	r6,8(r18)
  804a9c:	91c00517 	ldw	r7,20(r18)
  804aa0:	1100022e 	bgeu	r2,r4,804aac <__sfvwrite_r+0x2b0>
  804aa4:	31e3883a 	add	r17,r6,r7
  804aa8:	8c001616 	blt	r17,r16,804b04 <__sfvwrite_r+0x308>
  804aac:	81c03816 	blt	r16,r7,804b90 <__sfvwrite_r+0x394>
  804ab0:	90c00917 	ldw	r3,36(r18)
  804ab4:	91400717 	ldw	r5,28(r18)
  804ab8:	e009883a 	mov	r4,fp
  804abc:	b80d883a 	mov	r6,r23
  804ac0:	183ee83a 	callr	r3
  804ac4:	1023883a 	mov	r17,r2
  804ac8:	00bfe10e 	bge	zero,r2,804a50 <__sfvwrite_r+0x254>
  804acc:	a469c83a 	sub	r20,r20,r17
  804ad0:	a0001826 	beq	r20,zero,804b34 <__sfvwrite_r+0x338>
  804ad4:	b0800217 	ldw	r2,8(r22)
  804ad8:	1445c83a 	sub	r2,r2,r17
  804adc:	b0800215 	stw	r2,8(r22)
  804ae0:	103f7226 	beq	r2,zero,8048ac <__sfvwrite_r+0xb0>
  804ae4:	9c67c83a 	sub	r19,r19,r17
  804ae8:	bc6f883a 	add	r23,r23,r17
  804aec:	983fe21e 	bne	r19,zero,804a78 <__sfvwrite_r+0x27c>
  804af0:	adc00017 	ldw	r23,0(r21)
  804af4:	acc00117 	ldw	r19,4(r21)
  804af8:	ad400204 	addi	r21,r21,8
  804afc:	d8000015 	stw	zero,0(sp)
  804b00:	003fdc06 	br	804a74 <__sfvwrite_r+0x278>
  804b04:	b80b883a 	mov	r5,r23
  804b08:	880d883a 	mov	r6,r17
  804b0c:	080555c0 	call	80555c <memmove>
  804b10:	90c00017 	ldw	r3,0(r18)
  804b14:	e009883a 	mov	r4,fp
  804b18:	900b883a 	mov	r5,r18
  804b1c:	1c47883a 	add	r3,r3,r17
  804b20:	90c00015 	stw	r3,0(r18)
  804b24:	0805ddc0 	call	805ddc <_fflush_r>
  804b28:	103fc91e 	bne	r2,zero,804a50 <__sfvwrite_r+0x254>
  804b2c:	a469c83a 	sub	r20,r20,r17
  804b30:	a03fe81e 	bne	r20,zero,804ad4 <__sfvwrite_r+0x2d8>
  804b34:	e009883a 	mov	r4,fp
  804b38:	900b883a 	mov	r5,r18
  804b3c:	0805ddc0 	call	805ddc <_fflush_r>
  804b40:	103fc31e 	bne	r2,zero,804a50 <__sfvwrite_r+0x254>
  804b44:	d8000015 	stw	zero,0(sp)
  804b48:	003fe206 	br	804ad4 <__sfvwrite_r+0x2d8>
  804b4c:	91000017 	ldw	r4,0(r18)
  804b50:	90800417 	ldw	r2,16(r18)
  804b54:	1100022e 	bgeu	r2,r4,804b60 <__sfvwrite_r+0x364>
  804b58:	8023883a 	mov	r17,r16
  804b5c:	85003136 	bltu	r16,r20,804c24 <__sfvwrite_r+0x428>
  804b60:	91c00517 	ldw	r7,20(r18)
  804b64:	a1c01836 	bltu	r20,r7,804bc8 <__sfvwrite_r+0x3cc>
  804b68:	90c00917 	ldw	r3,36(r18)
  804b6c:	91400717 	ldw	r5,28(r18)
  804b70:	e009883a 	mov	r4,fp
  804b74:	b80d883a 	mov	r6,r23
  804b78:	183ee83a 	callr	r3
  804b7c:	1021883a 	mov	r16,r2
  804b80:	00bfb30e 	bge	zero,r2,804a50 <__sfvwrite_r+0x254>
  804b84:	1023883a 	mov	r17,r2
  804b88:	1027883a 	mov	r19,r2
  804b8c:	003f9b06 	br	8049fc <__sfvwrite_r+0x200>
  804b90:	b80b883a 	mov	r5,r23
  804b94:	800d883a 	mov	r6,r16
  804b98:	080555c0 	call	80555c <memmove>
  804b9c:	90c00217 	ldw	r3,8(r18)
  804ba0:	90800017 	ldw	r2,0(r18)
  804ba4:	8023883a 	mov	r17,r16
  804ba8:	1c07c83a 	sub	r3,r3,r16
  804bac:	1405883a 	add	r2,r2,r16
  804bb0:	90c00215 	stw	r3,8(r18)
  804bb4:	90800015 	stw	r2,0(r18)
  804bb8:	003fc406 	br	804acc <__sfvwrite_r+0x2d0>
  804bbc:	a00d883a 	mov	r6,r20
  804bc0:	a021883a 	mov	r16,r20
  804bc4:	003f8106 	br	8049cc <__sfvwrite_r+0x1d0>
  804bc8:	b80b883a 	mov	r5,r23
  804bcc:	a00d883a 	mov	r6,r20
  804bd0:	080555c0 	call	80555c <memmove>
  804bd4:	90c00217 	ldw	r3,8(r18)
  804bd8:	90800017 	ldw	r2,0(r18)
  804bdc:	a021883a 	mov	r16,r20
  804be0:	1d07c83a 	sub	r3,r3,r20
  804be4:	1505883a 	add	r2,r2,r20
  804be8:	a023883a 	mov	r17,r20
  804bec:	a027883a 	mov	r19,r20
  804bf0:	90c00215 	stw	r3,8(r18)
  804bf4:	90800015 	stw	r2,0(r18)
  804bf8:	003f8006 	br	8049fc <__sfvwrite_r+0x200>
  804bfc:	b809883a 	mov	r4,r23
  804c00:	01400284 	movi	r5,10
  804c04:	980d883a 	mov	r6,r19
  804c08:	08053d80 	call	8053d8 <memchr>
  804c0c:	10001726 	beq	r2,zero,804c6c <__sfvwrite_r+0x470>
  804c10:	15c5c83a 	sub	r2,r2,r23
  804c14:	15000044 	addi	r20,r2,1
  804c18:	00800044 	movi	r2,1
  804c1c:	d8800015 	stw	r2,0(sp)
  804c20:	003f9806 	br	804a84 <__sfvwrite_r+0x288>
  804c24:	b80b883a 	mov	r5,r23
  804c28:	800d883a 	mov	r6,r16
  804c2c:	080555c0 	call	80555c <memmove>
  804c30:	90c00017 	ldw	r3,0(r18)
  804c34:	e009883a 	mov	r4,fp
  804c38:	900b883a 	mov	r5,r18
  804c3c:	1c07883a 	add	r3,r3,r16
  804c40:	90c00015 	stw	r3,0(r18)
  804c44:	8027883a 	mov	r19,r16
  804c48:	0805ddc0 	call	805ddc <_fflush_r>
  804c4c:	103f6b26 	beq	r2,zero,8049fc <__sfvwrite_r+0x200>
  804c50:	003f7f06 	br	804a50 <__sfvwrite_r+0x254>
  804c54:	400b883a 	mov	r5,r8
  804c58:	e009883a 	mov	r4,fp
  804c5c:	080563c0 	call	80563c <_realloc_r>
  804c60:	103f7626 	beq	r2,zero,804a3c <__sfvwrite_r+0x240>
  804c64:	1023883a 	mov	r17,r2
  804c68:	003f5006 	br	8049ac <__sfvwrite_r+0x1b0>
  804c6c:	00c00044 	movi	r3,1
  804c70:	9d000044 	addi	r20,r19,1
  804c74:	d8c00015 	stw	r3,0(sp)
  804c78:	003f8206 	br	804a84 <__sfvwrite_r+0x288>
  804c7c:	9080030b 	ldhu	r2,12(r18)
  804c80:	00c00244 	movi	r3,9
  804c84:	013fffc4 	movi	r4,-1
  804c88:	10801014 	ori	r2,r2,64
  804c8c:	9080030d 	sth	r2,12(r18)
  804c90:	e0c00015 	stw	r3,0(fp)
  804c94:	003f0606 	br	8048b0 <__sfvwrite_r+0xb4>

00804c98 <_malloc_r>:
  804c98:	defff604 	addi	sp,sp,-40
  804c9c:	28c002c4 	addi	r3,r5,11
  804ca0:	00800584 	movi	r2,22
  804ca4:	dc800215 	stw	r18,8(sp)
  804ca8:	dfc00915 	stw	ra,36(sp)
  804cac:	df000815 	stw	fp,32(sp)
  804cb0:	ddc00715 	stw	r23,28(sp)
  804cb4:	dd800615 	stw	r22,24(sp)
  804cb8:	dd400515 	stw	r21,20(sp)
  804cbc:	dd000415 	stw	r20,16(sp)
  804cc0:	dcc00315 	stw	r19,12(sp)
  804cc4:	dc400115 	stw	r17,4(sp)
  804cc8:	dc000015 	stw	r16,0(sp)
  804ccc:	2025883a 	mov	r18,r4
  804cd0:	10c01236 	bltu	r2,r3,804d1c <_malloc_r+0x84>
  804cd4:	04400404 	movi	r17,16
  804cd8:	8940142e 	bgeu	r17,r5,804d2c <_malloc_r+0x94>
  804cdc:	00800304 	movi	r2,12
  804ce0:	0007883a 	mov	r3,zero
  804ce4:	90800015 	stw	r2,0(r18)
  804ce8:	1805883a 	mov	r2,r3
  804cec:	dfc00917 	ldw	ra,36(sp)
  804cf0:	df000817 	ldw	fp,32(sp)
  804cf4:	ddc00717 	ldw	r23,28(sp)
  804cf8:	dd800617 	ldw	r22,24(sp)
  804cfc:	dd400517 	ldw	r21,20(sp)
  804d00:	dd000417 	ldw	r20,16(sp)
  804d04:	dcc00317 	ldw	r19,12(sp)
  804d08:	dc800217 	ldw	r18,8(sp)
  804d0c:	dc400117 	ldw	r17,4(sp)
  804d10:	dc000017 	ldw	r16,0(sp)
  804d14:	dec00a04 	addi	sp,sp,40
  804d18:	f800283a 	ret
  804d1c:	00bffe04 	movi	r2,-8
  804d20:	18a2703a 	and	r17,r3,r2
  804d24:	883fed16 	blt	r17,zero,804cdc <_malloc_r+0x44>
  804d28:	897fec36 	bltu	r17,r5,804cdc <_malloc_r+0x44>
  804d2c:	9009883a 	mov	r4,r18
  804d30:	0807eb40 	call	807eb4 <__malloc_lock>
  804d34:	00807dc4 	movi	r2,503
  804d38:	14402b2e 	bgeu	r2,r17,804de8 <_malloc_r+0x150>
  804d3c:	8806d27a 	srli	r3,r17,9
  804d40:	18003f1e 	bne	r3,zero,804e40 <_malloc_r+0x1a8>
  804d44:	880cd0fa 	srli	r6,r17,3
  804d48:	300490fa 	slli	r2,r6,3
  804d4c:	02c02074 	movhi	r11,129
  804d50:	5ad2e204 	addi	r11,r11,19336
  804d54:	12cb883a 	add	r5,r2,r11
  804d58:	2c000317 	ldw	r16,12(r5)
  804d5c:	580f883a 	mov	r7,r11
  804d60:	2c00041e 	bne	r5,r16,804d74 <_malloc_r+0xdc>
  804d64:	00000a06 	br	804d90 <_malloc_r+0xf8>
  804d68:	1800860e 	bge	r3,zero,804f84 <_malloc_r+0x2ec>
  804d6c:	84000317 	ldw	r16,12(r16)
  804d70:	2c000726 	beq	r5,r16,804d90 <_malloc_r+0xf8>
  804d74:	80800117 	ldw	r2,4(r16)
  804d78:	00ffff04 	movi	r3,-4
  804d7c:	10c8703a 	and	r4,r2,r3
  804d80:	2447c83a 	sub	r3,r4,r17
  804d84:	008003c4 	movi	r2,15
  804d88:	10fff70e 	bge	r2,r3,804d68 <_malloc_r+0xd0>
  804d8c:	31bfffc4 	addi	r6,r6,-1
  804d90:	32400044 	addi	r9,r6,1
  804d94:	02802074 	movhi	r10,129
  804d98:	5292e404 	addi	r10,r10,19344
  804d9c:	54000217 	ldw	r16,8(r10)
  804da0:	8280a026 	beq	r16,r10,805024 <_malloc_r+0x38c>
  804da4:	80800117 	ldw	r2,4(r16)
  804da8:	00ffff04 	movi	r3,-4
  804dac:	10ca703a 	and	r5,r2,r3
  804db0:	2c4dc83a 	sub	r6,r5,r17
  804db4:	008003c4 	movi	r2,15
  804db8:	11808316 	blt	r2,r6,804fc8 <_malloc_r+0x330>
  804dbc:	52800315 	stw	r10,12(r10)
  804dc0:	52800215 	stw	r10,8(r10)
  804dc4:	30002916 	blt	r6,zero,804e6c <_malloc_r+0x1d4>
  804dc8:	8147883a 	add	r3,r16,r5
  804dcc:	18800117 	ldw	r2,4(r3)
  804dd0:	9009883a 	mov	r4,r18
  804dd4:	10800054 	ori	r2,r2,1
  804dd8:	18800115 	stw	r2,4(r3)
  804ddc:	0807fbc0 	call	807fbc <__malloc_unlock>
  804de0:	80c00204 	addi	r3,r16,8
  804de4:	003fc006 	br	804ce8 <_malloc_r+0x50>
  804de8:	02c02074 	movhi	r11,129
  804dec:	5ad2e204 	addi	r11,r11,19336
  804df0:	8ac5883a 	add	r2,r17,r11
  804df4:	14000317 	ldw	r16,12(r2)
  804df8:	580f883a 	mov	r7,r11
  804dfc:	8806d0fa 	srli	r3,r17,3
  804e00:	14006c26 	beq	r2,r16,804fb4 <_malloc_r+0x31c>
  804e04:	80c00117 	ldw	r3,4(r16)
  804e08:	00bfff04 	movi	r2,-4
  804e0c:	81800317 	ldw	r6,12(r16)
  804e10:	1886703a 	and	r3,r3,r2
  804e14:	80c7883a 	add	r3,r16,r3
  804e18:	18800117 	ldw	r2,4(r3)
  804e1c:	81400217 	ldw	r5,8(r16)
  804e20:	9009883a 	mov	r4,r18
  804e24:	10800054 	ori	r2,r2,1
  804e28:	18800115 	stw	r2,4(r3)
  804e2c:	31400215 	stw	r5,8(r6)
  804e30:	29800315 	stw	r6,12(r5)
  804e34:	0807fbc0 	call	807fbc <__malloc_unlock>
  804e38:	80c00204 	addi	r3,r16,8
  804e3c:	003faa06 	br	804ce8 <_malloc_r+0x50>
  804e40:	00800104 	movi	r2,4
  804e44:	10c0052e 	bgeu	r2,r3,804e5c <_malloc_r+0x1c4>
  804e48:	00800504 	movi	r2,20
  804e4c:	10c07836 	bltu	r2,r3,805030 <_malloc_r+0x398>
  804e50:	198016c4 	addi	r6,r3,91
  804e54:	300490fa 	slli	r2,r6,3
  804e58:	003fbc06 	br	804d4c <_malloc_r+0xb4>
  804e5c:	8804d1ba 	srli	r2,r17,6
  804e60:	11800e04 	addi	r6,r2,56
  804e64:	300490fa 	slli	r2,r6,3
  804e68:	003fb806 	br	804d4c <_malloc_r+0xb4>
  804e6c:	00807fc4 	movi	r2,511
  804e70:	1140bb36 	bltu	r2,r5,805160 <_malloc_r+0x4c8>
  804e74:	2806d0fa 	srli	r3,r5,3
  804e78:	573ffe04 	addi	fp,r10,-8
  804e7c:	00800044 	movi	r2,1
  804e80:	180890fa 	slli	r4,r3,3
  804e84:	1807d0ba 	srai	r3,r3,2
  804e88:	e1c00117 	ldw	r7,4(fp)
  804e8c:	5909883a 	add	r4,r11,r4
  804e90:	21400217 	ldw	r5,8(r4)
  804e94:	10c4983a 	sll	r2,r2,r3
  804e98:	81000315 	stw	r4,12(r16)
  804e9c:	81400215 	stw	r5,8(r16)
  804ea0:	388eb03a 	or	r7,r7,r2
  804ea4:	2c000315 	stw	r16,12(r5)
  804ea8:	24000215 	stw	r16,8(r4)
  804eac:	e1c00115 	stw	r7,4(fp)
  804eb0:	4807883a 	mov	r3,r9
  804eb4:	4800cd16 	blt	r9,zero,8051ec <_malloc_r+0x554>
  804eb8:	1807d0ba 	srai	r3,r3,2
  804ebc:	00800044 	movi	r2,1
  804ec0:	10c8983a 	sll	r4,r2,r3
  804ec4:	39004436 	bltu	r7,r4,804fd8 <_malloc_r+0x340>
  804ec8:	21c4703a 	and	r2,r4,r7
  804ecc:	10000a1e 	bne	r2,zero,804ef8 <_malloc_r+0x260>
  804ed0:	2109883a 	add	r4,r4,r4
  804ed4:	00bfff04 	movi	r2,-4
  804ed8:	4884703a 	and	r2,r9,r2
  804edc:	3906703a 	and	r3,r7,r4
  804ee0:	12400104 	addi	r9,r2,4
  804ee4:	1800041e 	bne	r3,zero,804ef8 <_malloc_r+0x260>
  804ee8:	2109883a 	add	r4,r4,r4
  804eec:	3904703a 	and	r2,r7,r4
  804ef0:	4a400104 	addi	r9,r9,4
  804ef4:	103ffc26 	beq	r2,zero,804ee8 <_malloc_r+0x250>
  804ef8:	480490fa 	slli	r2,r9,3
  804efc:	4819883a 	mov	r12,r9
  804f00:	023fff04 	movi	r8,-4
  804f04:	589b883a 	add	r13,r11,r2
  804f08:	6807883a 	mov	r3,r13
  804f0c:	014003c4 	movi	r5,15
  804f10:	1c000317 	ldw	r16,12(r3)
  804f14:	1c00041e 	bne	r3,r16,804f28 <_malloc_r+0x290>
  804f18:	0000a706 	br	8051b8 <_malloc_r+0x520>
  804f1c:	3000ab0e 	bge	r6,zero,8051cc <_malloc_r+0x534>
  804f20:	84000317 	ldw	r16,12(r16)
  804f24:	1c00a426 	beq	r3,r16,8051b8 <_malloc_r+0x520>
  804f28:	80800117 	ldw	r2,4(r16)
  804f2c:	1204703a 	and	r2,r2,r8
  804f30:	144dc83a 	sub	r6,r2,r17
  804f34:	29bff90e 	bge	r5,r6,804f1c <_malloc_r+0x284>
  804f38:	81000317 	ldw	r4,12(r16)
  804f3c:	80c00217 	ldw	r3,8(r16)
  804f40:	89400054 	ori	r5,r17,1
  804f44:	8445883a 	add	r2,r16,r17
  804f48:	20c00215 	stw	r3,8(r4)
  804f4c:	19000315 	stw	r4,12(r3)
  804f50:	81400115 	stw	r5,4(r16)
  804f54:	1187883a 	add	r3,r2,r6
  804f58:	31000054 	ori	r4,r6,1
  804f5c:	50800315 	stw	r2,12(r10)
  804f60:	50800215 	stw	r2,8(r10)
  804f64:	19800015 	stw	r6,0(r3)
  804f68:	11000115 	stw	r4,4(r2)
  804f6c:	12800215 	stw	r10,8(r2)
  804f70:	12800315 	stw	r10,12(r2)
  804f74:	9009883a 	mov	r4,r18
  804f78:	0807fbc0 	call	807fbc <__malloc_unlock>
  804f7c:	80c00204 	addi	r3,r16,8
  804f80:	003f5906 	br	804ce8 <_malloc_r+0x50>
  804f84:	8109883a 	add	r4,r16,r4
  804f88:	20800117 	ldw	r2,4(r4)
  804f8c:	80c00217 	ldw	r3,8(r16)
  804f90:	81400317 	ldw	r5,12(r16)
  804f94:	10800054 	ori	r2,r2,1
  804f98:	20800115 	stw	r2,4(r4)
  804f9c:	28c00215 	stw	r3,8(r5)
  804fa0:	19400315 	stw	r5,12(r3)
  804fa4:	9009883a 	mov	r4,r18
  804fa8:	0807fbc0 	call	807fbc <__malloc_unlock>
  804fac:	80c00204 	addi	r3,r16,8
  804fb0:	003f4d06 	br	804ce8 <_malloc_r+0x50>
  804fb4:	80800204 	addi	r2,r16,8
  804fb8:	14000317 	ldw	r16,12(r2)
  804fbc:	143f911e 	bne	r2,r16,804e04 <_malloc_r+0x16c>
  804fc0:	1a400084 	addi	r9,r3,2
  804fc4:	003f7306 	br	804d94 <_malloc_r+0xfc>
  804fc8:	88c00054 	ori	r3,r17,1
  804fcc:	8445883a 	add	r2,r16,r17
  804fd0:	80c00115 	stw	r3,4(r16)
  804fd4:	003fdf06 	br	804f54 <_malloc_r+0x2bc>
  804fd8:	e4000217 	ldw	r16,8(fp)
  804fdc:	00bfff04 	movi	r2,-4
  804fe0:	80c00117 	ldw	r3,4(r16)
  804fe4:	802d883a 	mov	r22,r16
  804fe8:	18aa703a 	and	r21,r3,r2
  804fec:	ac401636 	bltu	r21,r17,805048 <_malloc_r+0x3b0>
  804ff0:	ac49c83a 	sub	r4,r21,r17
  804ff4:	008003c4 	movi	r2,15
  804ff8:	1100130e 	bge	r2,r4,805048 <_malloc_r+0x3b0>
  804ffc:	88800054 	ori	r2,r17,1
  805000:	8447883a 	add	r3,r16,r17
  805004:	80800115 	stw	r2,4(r16)
  805008:	20800054 	ori	r2,r4,1
  80500c:	18800115 	stw	r2,4(r3)
  805010:	e0c00215 	stw	r3,8(fp)
  805014:	9009883a 	mov	r4,r18
  805018:	0807fbc0 	call	807fbc <__malloc_unlock>
  80501c:	80c00204 	addi	r3,r16,8
  805020:	003f3106 	br	804ce8 <_malloc_r+0x50>
  805024:	39c00117 	ldw	r7,4(r7)
  805028:	573ffe04 	addi	fp,r10,-8
  80502c:	003fa006 	br	804eb0 <_malloc_r+0x218>
  805030:	00801504 	movi	r2,84
  805034:	10c06736 	bltu	r2,r3,8051d4 <_malloc_r+0x53c>
  805038:	8804d33a 	srli	r2,r17,12
  80503c:	11801b84 	addi	r6,r2,110
  805040:	300490fa 	slli	r2,r6,3
  805044:	003f4106 	br	804d4c <_malloc_r+0xb4>
  805048:	d0a70917 	ldw	r2,-25564(gp)
  80504c:	d0e00417 	ldw	r3,-32752(gp)
  805050:	053fffc4 	movi	r20,-1
  805054:	10800404 	addi	r2,r2,16
  805058:	88a7883a 	add	r19,r17,r2
  80505c:	1d000326 	beq	r3,r20,80506c <_malloc_r+0x3d4>
  805060:	98c3ffc4 	addi	r3,r19,4095
  805064:	00bc0004 	movi	r2,-4096
  805068:	18a6703a 	and	r19,r3,r2
  80506c:	9009883a 	mov	r4,r18
  805070:	980b883a 	mov	r5,r19
  805074:	0805c300 	call	805c30 <_sbrk_r>
  805078:	1009883a 	mov	r4,r2
  80507c:	15000426 	beq	r2,r20,805090 <_malloc_r+0x3f8>
  805080:	854b883a 	add	r5,r16,r21
  805084:	1029883a 	mov	r20,r2
  805088:	11405a2e 	bgeu	r2,r5,8051f4 <_malloc_r+0x55c>
  80508c:	87000c26 	beq	r16,fp,8050c0 <_malloc_r+0x428>
  805090:	e4000217 	ldw	r16,8(fp)
  805094:	80c00117 	ldw	r3,4(r16)
  805098:	00bfff04 	movi	r2,-4
  80509c:	1884703a 	and	r2,r3,r2
  8050a0:	14400336 	bltu	r2,r17,8050b0 <_malloc_r+0x418>
  8050a4:	1449c83a 	sub	r4,r2,r17
  8050a8:	008003c4 	movi	r2,15
  8050ac:	113fd316 	blt	r2,r4,804ffc <_malloc_r+0x364>
  8050b0:	9009883a 	mov	r4,r18
  8050b4:	0807fbc0 	call	807fbc <__malloc_unlock>
  8050b8:	0007883a 	mov	r3,zero
  8050bc:	003f0a06 	br	804ce8 <_malloc_r+0x50>
  8050c0:	05c02074 	movhi	r23,129
  8050c4:	bddfb804 	addi	r23,r23,32480
  8050c8:	b8800017 	ldw	r2,0(r23)
  8050cc:	988d883a 	add	r6,r19,r2
  8050d0:	b9800015 	stw	r6,0(r23)
  8050d4:	d0e00417 	ldw	r3,-32752(gp)
  8050d8:	00bfffc4 	movi	r2,-1
  8050dc:	18808e26 	beq	r3,r2,805318 <_malloc_r+0x680>
  8050e0:	2145c83a 	sub	r2,r4,r5
  8050e4:	3085883a 	add	r2,r6,r2
  8050e8:	b8800015 	stw	r2,0(r23)
  8050ec:	20c001cc 	andi	r3,r4,7
  8050f0:	18005f1e 	bne	r3,zero,805270 <_malloc_r+0x5d8>
  8050f4:	000b883a 	mov	r5,zero
  8050f8:	a4c5883a 	add	r2,r20,r19
  8050fc:	1083ffcc 	andi	r2,r2,4095
  805100:	00c40004 	movi	r3,4096
  805104:	1887c83a 	sub	r3,r3,r2
  805108:	28e7883a 	add	r19,r5,r3
  80510c:	9009883a 	mov	r4,r18
  805110:	980b883a 	mov	r5,r19
  805114:	0805c300 	call	805c30 <_sbrk_r>
  805118:	1007883a 	mov	r3,r2
  80511c:	00bfffc4 	movi	r2,-1
  805120:	18807a26 	beq	r3,r2,80530c <_malloc_r+0x674>
  805124:	1d05c83a 	sub	r2,r3,r20
  805128:	9885883a 	add	r2,r19,r2
  80512c:	10c00054 	ori	r3,r2,1
  805130:	b8800017 	ldw	r2,0(r23)
  805134:	a021883a 	mov	r16,r20
  805138:	a0c00115 	stw	r3,4(r20)
  80513c:	9885883a 	add	r2,r19,r2
  805140:	b8800015 	stw	r2,0(r23)
  805144:	e5000215 	stw	r20,8(fp)
  805148:	b7003626 	beq	r22,fp,805224 <_malloc_r+0x58c>
  80514c:	018003c4 	movi	r6,15
  805150:	35404b36 	bltu	r6,r21,805280 <_malloc_r+0x5e8>
  805154:	00800044 	movi	r2,1
  805158:	a0800115 	stw	r2,4(r20)
  80515c:	003fcd06 	br	805094 <_malloc_r+0x3fc>
  805160:	2808d27a 	srli	r4,r5,9
  805164:	2000371e 	bne	r4,zero,805244 <_malloc_r+0x5ac>
  805168:	2808d0fa 	srli	r4,r5,3
  80516c:	200690fa 	slli	r3,r4,3
  805170:	1ad1883a 	add	r8,r3,r11
  805174:	41800217 	ldw	r6,8(r8)
  805178:	41805b26 	beq	r8,r6,8052e8 <_malloc_r+0x650>
  80517c:	30800117 	ldw	r2,4(r6)
  805180:	00ffff04 	movi	r3,-4
  805184:	10c4703a 	and	r2,r2,r3
  805188:	2880022e 	bgeu	r5,r2,805194 <_malloc_r+0x4fc>
  80518c:	31800217 	ldw	r6,8(r6)
  805190:	41bffa1e 	bne	r8,r6,80517c <_malloc_r+0x4e4>
  805194:	32000317 	ldw	r8,12(r6)
  805198:	39c00117 	ldw	r7,4(r7)
  80519c:	82000315 	stw	r8,12(r16)
  8051a0:	81800215 	stw	r6,8(r16)
  8051a4:	07002074 	movhi	fp,129
  8051a8:	e712e204 	addi	fp,fp,19336
  8051ac:	34000315 	stw	r16,12(r6)
  8051b0:	44000215 	stw	r16,8(r8)
  8051b4:	003f3e06 	br	804eb0 <_malloc_r+0x218>
  8051b8:	63000044 	addi	r12,r12,1
  8051bc:	608000cc 	andi	r2,r12,3
  8051c0:	10005d26 	beq	r2,zero,805338 <_malloc_r+0x6a0>
  8051c4:	18c00204 	addi	r3,r3,8
  8051c8:	003f5106 	br	804f10 <_malloc_r+0x278>
  8051cc:	8089883a 	add	r4,r16,r2
  8051d0:	003f6d06 	br	804f88 <_malloc_r+0x2f0>
  8051d4:	00805504 	movi	r2,340
  8051d8:	10c02036 	bltu	r2,r3,80525c <_malloc_r+0x5c4>
  8051dc:	8804d3fa 	srli	r2,r17,15
  8051e0:	11801dc4 	addi	r6,r2,119
  8051e4:	300490fa 	slli	r2,r6,3
  8051e8:	003ed806 	br	804d4c <_malloc_r+0xb4>
  8051ec:	48c000c4 	addi	r3,r9,3
  8051f0:	003f3106 	br	804eb8 <_malloc_r+0x220>
  8051f4:	05c02074 	movhi	r23,129
  8051f8:	bddfb804 	addi	r23,r23,32480
  8051fc:	b8800017 	ldw	r2,0(r23)
  805200:	988d883a 	add	r6,r19,r2
  805204:	b9800015 	stw	r6,0(r23)
  805208:	293fb21e 	bne	r5,r4,8050d4 <_malloc_r+0x43c>
  80520c:	2083ffcc 	andi	r2,r4,4095
  805210:	103fb01e 	bne	r2,zero,8050d4 <_malloc_r+0x43c>
  805214:	e4000217 	ldw	r16,8(fp)
  805218:	9d45883a 	add	r2,r19,r21
  80521c:	10800054 	ori	r2,r2,1
  805220:	80800115 	stw	r2,4(r16)
  805224:	b8c00017 	ldw	r3,0(r23)
  805228:	d0a70a17 	ldw	r2,-25560(gp)
  80522c:	10c0012e 	bgeu	r2,r3,805234 <_malloc_r+0x59c>
  805230:	d0e70a15 	stw	r3,-25560(gp)
  805234:	d0a70b17 	ldw	r2,-25556(gp)
  805238:	10ff962e 	bgeu	r2,r3,805094 <_malloc_r+0x3fc>
  80523c:	d0e70b15 	stw	r3,-25556(gp)
  805240:	003f9406 	br	805094 <_malloc_r+0x3fc>
  805244:	00800104 	movi	r2,4
  805248:	11001e36 	bltu	r2,r4,8052c4 <_malloc_r+0x62c>
  80524c:	2804d1ba 	srli	r2,r5,6
  805250:	11000e04 	addi	r4,r2,56
  805254:	200690fa 	slli	r3,r4,3
  805258:	003fc506 	br	805170 <_malloc_r+0x4d8>
  80525c:	00815504 	movi	r2,1364
  805260:	10c01d2e 	bgeu	r2,r3,8052d8 <_malloc_r+0x640>
  805264:	01801f84 	movi	r6,126
  805268:	0080fc04 	movi	r2,1008
  80526c:	003eb706 	br	804d4c <_malloc_r+0xb4>
  805270:	00800204 	movi	r2,8
  805274:	10cbc83a 	sub	r5,r2,r3
  805278:	2169883a 	add	r20,r4,r5
  80527c:	003f9e06 	br	8050f8 <_malloc_r+0x460>
  805280:	00bffe04 	movi	r2,-8
  805284:	a93ffd04 	addi	r4,r21,-12
  805288:	2088703a 	and	r4,r4,r2
  80528c:	b10b883a 	add	r5,r22,r4
  805290:	00c00144 	movi	r3,5
  805294:	28c00215 	stw	r3,8(r5)
  805298:	28c00115 	stw	r3,4(r5)
  80529c:	b0800117 	ldw	r2,4(r22)
  8052a0:	1080004c 	andi	r2,r2,1
  8052a4:	2084b03a 	or	r2,r4,r2
  8052a8:	b0800115 	stw	r2,4(r22)
  8052ac:	313fdd2e 	bgeu	r6,r4,805224 <_malloc_r+0x58c>
  8052b0:	b1400204 	addi	r5,r22,8
  8052b4:	9009883a 	mov	r4,r18
  8052b8:	08063f80 	call	8063f8 <_free_r>
  8052bc:	e4000217 	ldw	r16,8(fp)
  8052c0:	003fd806 	br	805224 <_malloc_r+0x58c>
  8052c4:	00800504 	movi	r2,20
  8052c8:	11001536 	bltu	r2,r4,805320 <_malloc_r+0x688>
  8052cc:	210016c4 	addi	r4,r4,91
  8052d0:	200690fa 	slli	r3,r4,3
  8052d4:	003fa606 	br	805170 <_malloc_r+0x4d8>
  8052d8:	8804d4ba 	srli	r2,r17,18
  8052dc:	11801f04 	addi	r6,r2,124
  8052e0:	300490fa 	slli	r2,r6,3
  8052e4:	003e9906 	br	804d4c <_malloc_r+0xb4>
  8052e8:	2009d0ba 	srai	r4,r4,2
  8052ec:	01402074 	movhi	r5,129
  8052f0:	2952e204 	addi	r5,r5,19336
  8052f4:	00c00044 	movi	r3,1
  8052f8:	28800117 	ldw	r2,4(r5)
  8052fc:	1906983a 	sll	r3,r3,r4
  805300:	10c4b03a 	or	r2,r2,r3
  805304:	28800115 	stw	r2,4(r5)
  805308:	003fa306 	br	805198 <_malloc_r+0x500>
  80530c:	0027883a 	mov	r19,zero
  805310:	00c00044 	movi	r3,1
  805314:	003f8606 	br	805130 <_malloc_r+0x498>
  805318:	d1200415 	stw	r4,-32752(gp)
  80531c:	003f7306 	br	8050ec <_malloc_r+0x454>
  805320:	00801504 	movi	r2,84
  805324:	11001936 	bltu	r2,r4,80538c <_malloc_r+0x6f4>
  805328:	2804d33a 	srli	r2,r5,12
  80532c:	11001b84 	addi	r4,r2,110
  805330:	200690fa 	slli	r3,r4,3
  805334:	003f8e06 	br	805170 <_malloc_r+0x4d8>
  805338:	480b883a 	mov	r5,r9
  80533c:	6807883a 	mov	r3,r13
  805340:	288000cc 	andi	r2,r5,3
  805344:	18fffe04 	addi	r3,r3,-8
  805348:	297fffc4 	addi	r5,r5,-1
  80534c:	10001526 	beq	r2,zero,8053a4 <_malloc_r+0x70c>
  805350:	18800217 	ldw	r2,8(r3)
  805354:	10fffa26 	beq	r2,r3,805340 <_malloc_r+0x6a8>
  805358:	2109883a 	add	r4,r4,r4
  80535c:	393f1e36 	bltu	r7,r4,804fd8 <_malloc_r+0x340>
  805360:	203f1d26 	beq	r4,zero,804fd8 <_malloc_r+0x340>
  805364:	21c4703a 	and	r2,r4,r7
  805368:	10000226 	beq	r2,zero,805374 <_malloc_r+0x6dc>
  80536c:	6013883a 	mov	r9,r12
  805370:	003ee106 	br	804ef8 <_malloc_r+0x260>
  805374:	2109883a 	add	r4,r4,r4
  805378:	3904703a 	and	r2,r7,r4
  80537c:	63000104 	addi	r12,r12,4
  805380:	103ffc26 	beq	r2,zero,805374 <_malloc_r+0x6dc>
  805384:	6013883a 	mov	r9,r12
  805388:	003edb06 	br	804ef8 <_malloc_r+0x260>
  80538c:	00805504 	movi	r2,340
  805390:	11000836 	bltu	r2,r4,8053b4 <_malloc_r+0x71c>
  805394:	2804d3fa 	srli	r2,r5,15
  805398:	11001dc4 	addi	r4,r2,119
  80539c:	200690fa 	slli	r3,r4,3
  8053a0:	003f7306 	br	805170 <_malloc_r+0x4d8>
  8053a4:	0104303a 	nor	r2,zero,r4
  8053a8:	388e703a 	and	r7,r7,r2
  8053ac:	e1c00115 	stw	r7,4(fp)
  8053b0:	003fe906 	br	805358 <_malloc_r+0x6c0>
  8053b4:	00815504 	movi	r2,1364
  8053b8:	1100032e 	bgeu	r2,r4,8053c8 <_malloc_r+0x730>
  8053bc:	01001f84 	movi	r4,126
  8053c0:	00c0fc04 	movi	r3,1008
  8053c4:	003f6a06 	br	805170 <_malloc_r+0x4d8>
  8053c8:	2804d4ba 	srli	r2,r5,18
  8053cc:	11001f04 	addi	r4,r2,124
  8053d0:	200690fa 	slli	r3,r4,3
  8053d4:	003f6606 	br	805170 <_malloc_r+0x4d8>

008053d8 <memchr>:
  8053d8:	008000c4 	movi	r2,3
  8053dc:	29403fcc 	andi	r5,r5,255
  8053e0:	2007883a 	mov	r3,r4
  8053e4:	1180022e 	bgeu	r2,r6,8053f0 <memchr+0x18>
  8053e8:	2084703a 	and	r2,r4,r2
  8053ec:	10000b26 	beq	r2,zero,80541c <memchr+0x44>
  8053f0:	313fffc4 	addi	r4,r6,-1
  8053f4:	3000051e 	bne	r6,zero,80540c <memchr+0x34>
  8053f8:	00002c06 	br	8054ac <memchr+0xd4>
  8053fc:	213fffc4 	addi	r4,r4,-1
  805400:	00bfffc4 	movi	r2,-1
  805404:	18c00044 	addi	r3,r3,1
  805408:	20802826 	beq	r4,r2,8054ac <memchr+0xd4>
  80540c:	18800003 	ldbu	r2,0(r3)
  805410:	28bffa1e 	bne	r5,r2,8053fc <memchr+0x24>
  805414:	1805883a 	mov	r2,r3
  805418:	f800283a 	ret
  80541c:	0011883a 	mov	r8,zero
  805420:	0007883a 	mov	r3,zero
  805424:	01c00104 	movi	r7,4
  805428:	4004923a 	slli	r2,r8,8
  80542c:	18c00044 	addi	r3,r3,1
  805430:	1151883a 	add	r8,r2,r5
  805434:	19fffc1e 	bne	r3,r7,805428 <memchr+0x50>
  805438:	02bfbff4 	movhi	r10,65279
  80543c:	52bfbfc4 	addi	r10,r10,-257
  805440:	02602074 	movhi	r9,32897
  805444:	4a602004 	addi	r9,r9,-32640
  805448:	02c000c4 	movi	r11,3
  80544c:	20800017 	ldw	r2,0(r4)
  805450:	31bfff04 	addi	r6,r6,-4
  805454:	200f883a 	mov	r7,r4
  805458:	1204f03a 	xor	r2,r2,r8
  80545c:	1287883a 	add	r3,r2,r10
  805460:	1a46703a 	and	r3,r3,r9
  805464:	0084303a 	nor	r2,zero,r2
  805468:	10c4703a 	and	r2,r2,r3
  80546c:	10000b26 	beq	r2,zero,80549c <memchr+0xc4>
  805470:	20800003 	ldbu	r2,0(r4)
  805474:	28800f26 	beq	r5,r2,8054b4 <memchr+0xdc>
  805478:	20800043 	ldbu	r2,1(r4)
  80547c:	21c00044 	addi	r7,r4,1
  805480:	28800c26 	beq	r5,r2,8054b4 <memchr+0xdc>
  805484:	20800083 	ldbu	r2,2(r4)
  805488:	21c00084 	addi	r7,r4,2
  80548c:	28800926 	beq	r5,r2,8054b4 <memchr+0xdc>
  805490:	208000c3 	ldbu	r2,3(r4)
  805494:	21c000c4 	addi	r7,r4,3
  805498:	28800626 	beq	r5,r2,8054b4 <memchr+0xdc>
  80549c:	21000104 	addi	r4,r4,4
  8054a0:	59bfea36 	bltu	r11,r6,80544c <memchr+0x74>
  8054a4:	2007883a 	mov	r3,r4
  8054a8:	003fd106 	br	8053f0 <memchr+0x18>
  8054ac:	0005883a 	mov	r2,zero
  8054b0:	f800283a 	ret
  8054b4:	3805883a 	mov	r2,r7
  8054b8:	f800283a 	ret

008054bc <memcpy>:
  8054bc:	01c003c4 	movi	r7,15
  8054c0:	2007883a 	mov	r3,r4
  8054c4:	3980032e 	bgeu	r7,r6,8054d4 <memcpy+0x18>
  8054c8:	2904b03a 	or	r2,r5,r4
  8054cc:	108000cc 	andi	r2,r2,3
  8054d0:	10000926 	beq	r2,zero,8054f8 <memcpy+0x3c>
  8054d4:	30000626 	beq	r6,zero,8054f0 <memcpy+0x34>
  8054d8:	30cd883a 	add	r6,r6,r3
  8054dc:	28800003 	ldbu	r2,0(r5)
  8054e0:	29400044 	addi	r5,r5,1
  8054e4:	18800005 	stb	r2,0(r3)
  8054e8:	18c00044 	addi	r3,r3,1
  8054ec:	30fffb1e 	bne	r6,r3,8054dc <memcpy+0x20>
  8054f0:	2005883a 	mov	r2,r4
  8054f4:	f800283a 	ret
  8054f8:	3811883a 	mov	r8,r7
  8054fc:	200f883a 	mov	r7,r4
  805500:	28c00017 	ldw	r3,0(r5)
  805504:	31bffc04 	addi	r6,r6,-16
  805508:	38c00015 	stw	r3,0(r7)
  80550c:	28800117 	ldw	r2,4(r5)
  805510:	38800115 	stw	r2,4(r7)
  805514:	28c00217 	ldw	r3,8(r5)
  805518:	38c00215 	stw	r3,8(r7)
  80551c:	28800317 	ldw	r2,12(r5)
  805520:	29400404 	addi	r5,r5,16
  805524:	38800315 	stw	r2,12(r7)
  805528:	39c00404 	addi	r7,r7,16
  80552c:	41bff436 	bltu	r8,r6,805500 <memcpy+0x44>
  805530:	008000c4 	movi	r2,3
  805534:	1180072e 	bgeu	r2,r6,805554 <memcpy+0x98>
  805538:	1007883a 	mov	r3,r2
  80553c:	28800017 	ldw	r2,0(r5)
  805540:	31bfff04 	addi	r6,r6,-4
  805544:	29400104 	addi	r5,r5,4
  805548:	38800015 	stw	r2,0(r7)
  80554c:	39c00104 	addi	r7,r7,4
  805550:	19bffa36 	bltu	r3,r6,80553c <memcpy+0x80>
  805554:	3807883a 	mov	r3,r7
  805558:	003fde06 	br	8054d4 <memcpy+0x18>

0080555c <memmove>:
  80555c:	2807883a 	mov	r3,r5
  805560:	2011883a 	mov	r8,r4
  805564:	29000c2e 	bgeu	r5,r4,805598 <memmove+0x3c>
  805568:	298f883a 	add	r7,r5,r6
  80556c:	21c00a2e 	bgeu	r4,r7,805598 <memmove+0x3c>
  805570:	30000726 	beq	r6,zero,805590 <memmove+0x34>
  805574:	2187883a 	add	r3,r4,r6
  805578:	198dc83a 	sub	r6,r3,r6
  80557c:	39ffffc4 	addi	r7,r7,-1
  805580:	38800003 	ldbu	r2,0(r7)
  805584:	18ffffc4 	addi	r3,r3,-1
  805588:	18800005 	stb	r2,0(r3)
  80558c:	19bffb1e 	bne	r3,r6,80557c <memmove+0x20>
  805590:	2005883a 	mov	r2,r4
  805594:	f800283a 	ret
  805598:	01c003c4 	movi	r7,15
  80559c:	39800a36 	bltu	r7,r6,8055c8 <memmove+0x6c>
  8055a0:	303ffb26 	beq	r6,zero,805590 <memmove+0x34>
  8055a4:	400f883a 	mov	r7,r8
  8055a8:	320d883a 	add	r6,r6,r8
  8055ac:	28800003 	ldbu	r2,0(r5)
  8055b0:	29400044 	addi	r5,r5,1
  8055b4:	38800005 	stb	r2,0(r7)
  8055b8:	39c00044 	addi	r7,r7,1
  8055bc:	39bffb1e 	bne	r7,r6,8055ac <memmove+0x50>
  8055c0:	2005883a 	mov	r2,r4
  8055c4:	f800283a 	ret
  8055c8:	1904b03a 	or	r2,r3,r4
  8055cc:	108000cc 	andi	r2,r2,3
  8055d0:	103ff31e 	bne	r2,zero,8055a0 <memmove+0x44>
  8055d4:	3811883a 	mov	r8,r7
  8055d8:	180b883a 	mov	r5,r3
  8055dc:	200f883a 	mov	r7,r4
  8055e0:	28c00017 	ldw	r3,0(r5)
  8055e4:	31bffc04 	addi	r6,r6,-16
  8055e8:	38c00015 	stw	r3,0(r7)
  8055ec:	28800117 	ldw	r2,4(r5)
  8055f0:	38800115 	stw	r2,4(r7)
  8055f4:	28c00217 	ldw	r3,8(r5)
  8055f8:	38c00215 	stw	r3,8(r7)
  8055fc:	28800317 	ldw	r2,12(r5)
  805600:	29400404 	addi	r5,r5,16
  805604:	38800315 	stw	r2,12(r7)
  805608:	39c00404 	addi	r7,r7,16
  80560c:	41bff436 	bltu	r8,r6,8055e0 <memmove+0x84>
  805610:	008000c4 	movi	r2,3
  805614:	1180072e 	bgeu	r2,r6,805634 <memmove+0xd8>
  805618:	1007883a 	mov	r3,r2
  80561c:	28800017 	ldw	r2,0(r5)
  805620:	31bfff04 	addi	r6,r6,-4
  805624:	29400104 	addi	r5,r5,4
  805628:	38800015 	stw	r2,0(r7)
  80562c:	39c00104 	addi	r7,r7,4
  805630:	19bffa36 	bltu	r3,r6,80561c <memmove+0xc0>
  805634:	3811883a 	mov	r8,r7
  805638:	003fd906 	br	8055a0 <memmove+0x44>

0080563c <_realloc_r>:
  80563c:	defff404 	addi	sp,sp,-48
  805640:	dd800815 	stw	r22,32(sp)
  805644:	dc800415 	stw	r18,16(sp)
  805648:	dc400315 	stw	r17,12(sp)
  80564c:	dfc00b15 	stw	ra,44(sp)
  805650:	df000a15 	stw	fp,40(sp)
  805654:	ddc00915 	stw	r23,36(sp)
  805658:	dd400715 	stw	r21,28(sp)
  80565c:	dd000615 	stw	r20,24(sp)
  805660:	dcc00515 	stw	r19,20(sp)
  805664:	dc000215 	stw	r16,8(sp)
  805668:	2825883a 	mov	r18,r5
  80566c:	3023883a 	mov	r17,r6
  805670:	202d883a 	mov	r22,r4
  805674:	2800c926 	beq	r5,zero,80599c <_realloc_r+0x360>
  805678:	0807eb40 	call	807eb4 <__malloc_lock>
  80567c:	943ffe04 	addi	r16,r18,-8
  805680:	88c002c4 	addi	r3,r17,11
  805684:	00800584 	movi	r2,22
  805688:	82000117 	ldw	r8,4(r16)
  80568c:	10c01b2e 	bgeu	r2,r3,8056fc <_realloc_r+0xc0>
  805690:	00bffe04 	movi	r2,-8
  805694:	188e703a 	and	r7,r3,r2
  805698:	3839883a 	mov	fp,r7
  80569c:	38001a16 	blt	r7,zero,805708 <_realloc_r+0xcc>
  8056a0:	e4401936 	bltu	fp,r17,805708 <_realloc_r+0xcc>
  8056a4:	013fff04 	movi	r4,-4
  8056a8:	4126703a 	and	r19,r8,r4
  8056ac:	99c02616 	blt	r19,r7,805748 <_realloc_r+0x10c>
  8056b0:	802b883a 	mov	r21,r16
  8056b4:	9829883a 	mov	r20,r19
  8056b8:	84000204 	addi	r16,r16,8
  8056bc:	a80f883a 	mov	r7,r21
  8056c0:	a70dc83a 	sub	r6,r20,fp
  8056c4:	008003c4 	movi	r2,15
  8056c8:	1180c136 	bltu	r2,r6,8059d0 <_realloc_r+0x394>
  8056cc:	38800117 	ldw	r2,4(r7)
  8056d0:	a549883a 	add	r4,r20,r21
  8056d4:	1080004c 	andi	r2,r2,1
  8056d8:	a084b03a 	or	r2,r20,r2
  8056dc:	38800115 	stw	r2,4(r7)
  8056e0:	20c00117 	ldw	r3,4(r4)
  8056e4:	18c00054 	ori	r3,r3,1
  8056e8:	20c00115 	stw	r3,4(r4)
  8056ec:	b009883a 	mov	r4,r22
  8056f0:	0807fbc0 	call	807fbc <__malloc_unlock>
  8056f4:	8023883a 	mov	r17,r16
  8056f8:	00000606 	br	805714 <_realloc_r+0xd8>
  8056fc:	01c00404 	movi	r7,16
  805700:	3839883a 	mov	fp,r7
  805704:	e47fe72e 	bgeu	fp,r17,8056a4 <_realloc_r+0x68>
  805708:	00800304 	movi	r2,12
  80570c:	0023883a 	mov	r17,zero
  805710:	b0800015 	stw	r2,0(r22)
  805714:	8805883a 	mov	r2,r17
  805718:	dfc00b17 	ldw	ra,44(sp)
  80571c:	df000a17 	ldw	fp,40(sp)
  805720:	ddc00917 	ldw	r23,36(sp)
  805724:	dd800817 	ldw	r22,32(sp)
  805728:	dd400717 	ldw	r21,28(sp)
  80572c:	dd000617 	ldw	r20,24(sp)
  805730:	dcc00517 	ldw	r19,20(sp)
  805734:	dc800417 	ldw	r18,16(sp)
  805738:	dc400317 	ldw	r17,12(sp)
  80573c:	dc000217 	ldw	r16,8(sp)
  805740:	dec00c04 	addi	sp,sp,48
  805744:	f800283a 	ret
  805748:	00802074 	movhi	r2,129
  80574c:	1092e204 	addi	r2,r2,19336
  805750:	12400217 	ldw	r9,8(r2)
  805754:	84cd883a 	add	r6,r16,r19
  805758:	802b883a 	mov	r21,r16
  80575c:	3240b926 	beq	r6,r9,805a44 <_realloc_r+0x408>
  805760:	31400117 	ldw	r5,4(r6)
  805764:	00bfff84 	movi	r2,-2
  805768:	2884703a 	and	r2,r5,r2
  80576c:	1185883a 	add	r2,r2,r6
  805770:	10c00117 	ldw	r3,4(r2)
  805774:	18c0004c 	andi	r3,r3,1
  805778:	1807003a 	cmpeq	r3,r3,zero
  80577c:	1800a326 	beq	r3,zero,805a0c <_realloc_r+0x3d0>
  805780:	2908703a 	and	r4,r5,r4
  805784:	9929883a 	add	r20,r19,r4
  805788:	a1c0a30e 	bge	r20,r7,805a18 <_realloc_r+0x3dc>
  80578c:	4080004c 	andi	r2,r8,1
  805790:	1000551e 	bne	r2,zero,8058e8 <_realloc_r+0x2ac>
  805794:	80800017 	ldw	r2,0(r16)
  805798:	80afc83a 	sub	r23,r16,r2
  80579c:	b8c00117 	ldw	r3,4(r23)
  8057a0:	00bfff04 	movi	r2,-4
  8057a4:	1884703a 	and	r2,r3,r2
  8057a8:	30002e26 	beq	r6,zero,805864 <_realloc_r+0x228>
  8057ac:	3240b926 	beq	r6,r9,805a94 <_realloc_r+0x458>
  8057b0:	98a9883a 	add	r20,r19,r2
  8057b4:	2509883a 	add	r4,r4,r20
  8057b8:	d9000015 	stw	r4,0(sp)
  8057bc:	21c02a16 	blt	r4,r7,805868 <_realloc_r+0x22c>
  8057c0:	30800317 	ldw	r2,12(r6)
  8057c4:	30c00217 	ldw	r3,8(r6)
  8057c8:	01400904 	movi	r5,36
  8057cc:	99bfff04 	addi	r6,r19,-4
  8057d0:	18800315 	stw	r2,12(r3)
  8057d4:	10c00215 	stw	r3,8(r2)
  8057d8:	b9000317 	ldw	r4,12(r23)
  8057dc:	b8800217 	ldw	r2,8(r23)
  8057e0:	b82b883a 	mov	r21,r23
  8057e4:	bc000204 	addi	r16,r23,8
  8057e8:	20800215 	stw	r2,8(r4)
  8057ec:	11000315 	stw	r4,12(r2)
  8057f0:	2980e436 	bltu	r5,r6,805b84 <_realloc_r+0x548>
  8057f4:	008004c4 	movi	r2,19
  8057f8:	9009883a 	mov	r4,r18
  8057fc:	8011883a 	mov	r8,r16
  805800:	11800f2e 	bgeu	r2,r6,805840 <_realloc_r+0x204>
  805804:	90800017 	ldw	r2,0(r18)
  805808:	ba000404 	addi	r8,r23,16
  80580c:	91000204 	addi	r4,r18,8
  805810:	b8800215 	stw	r2,8(r23)
  805814:	90c00117 	ldw	r3,4(r18)
  805818:	008006c4 	movi	r2,27
  80581c:	b8c00315 	stw	r3,12(r23)
  805820:	1180072e 	bgeu	r2,r6,805840 <_realloc_r+0x204>
  805824:	90c00217 	ldw	r3,8(r18)
  805828:	ba000604 	addi	r8,r23,24
  80582c:	91000404 	addi	r4,r18,16
  805830:	b8c00415 	stw	r3,16(r23)
  805834:	90800317 	ldw	r2,12(r18)
  805838:	b8800515 	stw	r2,20(r23)
  80583c:	3140e726 	beq	r6,r5,805bdc <_realloc_r+0x5a0>
  805840:	20800017 	ldw	r2,0(r4)
  805844:	dd000017 	ldw	r20,0(sp)
  805848:	b80f883a 	mov	r7,r23
  80584c:	40800015 	stw	r2,0(r8)
  805850:	20c00117 	ldw	r3,4(r4)
  805854:	40c00115 	stw	r3,4(r8)
  805858:	20800217 	ldw	r2,8(r4)
  80585c:	40800215 	stw	r2,8(r8)
  805860:	003f9706 	br	8056c0 <_realloc_r+0x84>
  805864:	98a9883a 	add	r20,r19,r2
  805868:	a1c01f16 	blt	r20,r7,8058e8 <_realloc_r+0x2ac>
  80586c:	b8c00317 	ldw	r3,12(r23)
  805870:	b8800217 	ldw	r2,8(r23)
  805874:	99bfff04 	addi	r6,r19,-4
  805878:	01400904 	movi	r5,36
  80587c:	b82b883a 	mov	r21,r23
  805880:	18800215 	stw	r2,8(r3)
  805884:	10c00315 	stw	r3,12(r2)
  805888:	bc000204 	addi	r16,r23,8
  80588c:	2980c336 	bltu	r5,r6,805b9c <_realloc_r+0x560>
  805890:	008004c4 	movi	r2,19
  805894:	9009883a 	mov	r4,r18
  805898:	8011883a 	mov	r8,r16
  80589c:	11800f2e 	bgeu	r2,r6,8058dc <_realloc_r+0x2a0>
  8058a0:	90800017 	ldw	r2,0(r18)
  8058a4:	ba000404 	addi	r8,r23,16
  8058a8:	91000204 	addi	r4,r18,8
  8058ac:	b8800215 	stw	r2,8(r23)
  8058b0:	90c00117 	ldw	r3,4(r18)
  8058b4:	008006c4 	movi	r2,27
  8058b8:	b8c00315 	stw	r3,12(r23)
  8058bc:	1180072e 	bgeu	r2,r6,8058dc <_realloc_r+0x2a0>
  8058c0:	90c00217 	ldw	r3,8(r18)
  8058c4:	ba000604 	addi	r8,r23,24
  8058c8:	91000404 	addi	r4,r18,16
  8058cc:	b8c00415 	stw	r3,16(r23)
  8058d0:	90800317 	ldw	r2,12(r18)
  8058d4:	b8800515 	stw	r2,20(r23)
  8058d8:	3140c726 	beq	r6,r5,805bf8 <_realloc_r+0x5bc>
  8058dc:	20800017 	ldw	r2,0(r4)
  8058e0:	b80f883a 	mov	r7,r23
  8058e4:	003fd906 	br	80584c <_realloc_r+0x210>
  8058e8:	880b883a 	mov	r5,r17
  8058ec:	b009883a 	mov	r4,r22
  8058f0:	0804c980 	call	804c98 <_malloc_r>
  8058f4:	1023883a 	mov	r17,r2
  8058f8:	10002526 	beq	r2,zero,805990 <_realloc_r+0x354>
  8058fc:	80800117 	ldw	r2,4(r16)
  805900:	00ffff84 	movi	r3,-2
  805904:	893ffe04 	addi	r4,r17,-8
  805908:	10c4703a 	and	r2,r2,r3
  80590c:	8085883a 	add	r2,r16,r2
  805910:	20809526 	beq	r4,r2,805b68 <_realloc_r+0x52c>
  805914:	99bfff04 	addi	r6,r19,-4
  805918:	01c00904 	movi	r7,36
  80591c:	39804536 	bltu	r7,r6,805a34 <_realloc_r+0x3f8>
  805920:	008004c4 	movi	r2,19
  805924:	9009883a 	mov	r4,r18
  805928:	880b883a 	mov	r5,r17
  80592c:	11800f2e 	bgeu	r2,r6,80596c <_realloc_r+0x330>
  805930:	90800017 	ldw	r2,0(r18)
  805934:	89400204 	addi	r5,r17,8
  805938:	91000204 	addi	r4,r18,8
  80593c:	88800015 	stw	r2,0(r17)
  805940:	90c00117 	ldw	r3,4(r18)
  805944:	008006c4 	movi	r2,27
  805948:	88c00115 	stw	r3,4(r17)
  80594c:	1180072e 	bgeu	r2,r6,80596c <_realloc_r+0x330>
  805950:	90c00217 	ldw	r3,8(r18)
  805954:	89400404 	addi	r5,r17,16
  805958:	91000404 	addi	r4,r18,16
  80595c:	88c00215 	stw	r3,8(r17)
  805960:	90800317 	ldw	r2,12(r18)
  805964:	88800315 	stw	r2,12(r17)
  805968:	31c09126 	beq	r6,r7,805bb0 <_realloc_r+0x574>
  80596c:	20800017 	ldw	r2,0(r4)
  805970:	28800015 	stw	r2,0(r5)
  805974:	20c00117 	ldw	r3,4(r4)
  805978:	28c00115 	stw	r3,4(r5)
  80597c:	20800217 	ldw	r2,8(r4)
  805980:	28800215 	stw	r2,8(r5)
  805984:	900b883a 	mov	r5,r18
  805988:	b009883a 	mov	r4,r22
  80598c:	08063f80 	call	8063f8 <_free_r>
  805990:	b009883a 	mov	r4,r22
  805994:	0807fbc0 	call	807fbc <__malloc_unlock>
  805998:	003f5e06 	br	805714 <_realloc_r+0xd8>
  80599c:	300b883a 	mov	r5,r6
  8059a0:	dfc00b17 	ldw	ra,44(sp)
  8059a4:	df000a17 	ldw	fp,40(sp)
  8059a8:	ddc00917 	ldw	r23,36(sp)
  8059ac:	dd800817 	ldw	r22,32(sp)
  8059b0:	dd400717 	ldw	r21,28(sp)
  8059b4:	dd000617 	ldw	r20,24(sp)
  8059b8:	dcc00517 	ldw	r19,20(sp)
  8059bc:	dc800417 	ldw	r18,16(sp)
  8059c0:	dc400317 	ldw	r17,12(sp)
  8059c4:	dc000217 	ldw	r16,8(sp)
  8059c8:	dec00c04 	addi	sp,sp,48
  8059cc:	0804c981 	jmpi	804c98 <_malloc_r>
  8059d0:	38800117 	ldw	r2,4(r7)
  8059d4:	e54b883a 	add	r5,fp,r21
  8059d8:	31000054 	ori	r4,r6,1
  8059dc:	1080004c 	andi	r2,r2,1
  8059e0:	1704b03a 	or	r2,r2,fp
  8059e4:	38800115 	stw	r2,4(r7)
  8059e8:	29000115 	stw	r4,4(r5)
  8059ec:	2987883a 	add	r3,r5,r6
  8059f0:	18800117 	ldw	r2,4(r3)
  8059f4:	29400204 	addi	r5,r5,8
  8059f8:	b009883a 	mov	r4,r22
  8059fc:	10800054 	ori	r2,r2,1
  805a00:	18800115 	stw	r2,4(r3)
  805a04:	08063f80 	call	8063f8 <_free_r>
  805a08:	003f3806 	br	8056ec <_realloc_r+0xb0>
  805a0c:	000d883a 	mov	r6,zero
  805a10:	0009883a 	mov	r4,zero
  805a14:	003f5d06 	br	80578c <_realloc_r+0x150>
  805a18:	30c00217 	ldw	r3,8(r6)
  805a1c:	30800317 	ldw	r2,12(r6)
  805a20:	800f883a 	mov	r7,r16
  805a24:	84000204 	addi	r16,r16,8
  805a28:	10c00215 	stw	r3,8(r2)
  805a2c:	18800315 	stw	r2,12(r3)
  805a30:	003f2306 	br	8056c0 <_realloc_r+0x84>
  805a34:	8809883a 	mov	r4,r17
  805a38:	900b883a 	mov	r5,r18
  805a3c:	080555c0 	call	80555c <memmove>
  805a40:	003fd006 	br	805984 <_realloc_r+0x348>
  805a44:	30800117 	ldw	r2,4(r6)
  805a48:	e0c00404 	addi	r3,fp,16
  805a4c:	1108703a 	and	r4,r2,r4
  805a50:	9905883a 	add	r2,r19,r4
  805a54:	10ff4d16 	blt	r2,r3,80578c <_realloc_r+0x150>
  805a58:	1705c83a 	sub	r2,r2,fp
  805a5c:	870b883a 	add	r5,r16,fp
  805a60:	10800054 	ori	r2,r2,1
  805a64:	28800115 	stw	r2,4(r5)
  805a68:	80c00117 	ldw	r3,4(r16)
  805a6c:	00802074 	movhi	r2,129
  805a70:	1092e204 	addi	r2,r2,19336
  805a74:	b009883a 	mov	r4,r22
  805a78:	18c0004c 	andi	r3,r3,1
  805a7c:	e0c6b03a 	or	r3,fp,r3
  805a80:	11400215 	stw	r5,8(r2)
  805a84:	80c00115 	stw	r3,4(r16)
  805a88:	0807fbc0 	call	807fbc <__malloc_unlock>
  805a8c:	84400204 	addi	r17,r16,8
  805a90:	003f2006 	br	805714 <_realloc_r+0xd8>
  805a94:	98a9883a 	add	r20,r19,r2
  805a98:	2509883a 	add	r4,r4,r20
  805a9c:	e0800404 	addi	r2,fp,16
  805aa0:	d9000115 	stw	r4,4(sp)
  805aa4:	20bf7016 	blt	r4,r2,805868 <_realloc_r+0x22c>
  805aa8:	b8c00317 	ldw	r3,12(r23)
  805aac:	b8800217 	ldw	r2,8(r23)
  805ab0:	99bfff04 	addi	r6,r19,-4
  805ab4:	01400904 	movi	r5,36
  805ab8:	18800215 	stw	r2,8(r3)
  805abc:	10c00315 	stw	r3,12(r2)
  805ac0:	bc400204 	addi	r17,r23,8
  805ac4:	29804136 	bltu	r5,r6,805bcc <_realloc_r+0x590>
  805ac8:	008004c4 	movi	r2,19
  805acc:	9009883a 	mov	r4,r18
  805ad0:	880f883a 	mov	r7,r17
  805ad4:	11800f2e 	bgeu	r2,r6,805b14 <_realloc_r+0x4d8>
  805ad8:	90800017 	ldw	r2,0(r18)
  805adc:	b9c00404 	addi	r7,r23,16
  805ae0:	91000204 	addi	r4,r18,8
  805ae4:	b8800215 	stw	r2,8(r23)
  805ae8:	90c00117 	ldw	r3,4(r18)
  805aec:	008006c4 	movi	r2,27
  805af0:	b8c00315 	stw	r3,12(r23)
  805af4:	1180072e 	bgeu	r2,r6,805b14 <_realloc_r+0x4d8>
  805af8:	90c00217 	ldw	r3,8(r18)
  805afc:	b9c00604 	addi	r7,r23,24
  805b00:	91000404 	addi	r4,r18,16
  805b04:	b8c00415 	stw	r3,16(r23)
  805b08:	90800317 	ldw	r2,12(r18)
  805b0c:	b8800515 	stw	r2,20(r23)
  805b10:	31404026 	beq	r6,r5,805c14 <_realloc_r+0x5d8>
  805b14:	20800017 	ldw	r2,0(r4)
  805b18:	38800015 	stw	r2,0(r7)
  805b1c:	20c00117 	ldw	r3,4(r4)
  805b20:	38c00115 	stw	r3,4(r7)
  805b24:	20800217 	ldw	r2,8(r4)
  805b28:	38800215 	stw	r2,8(r7)
  805b2c:	d8c00117 	ldw	r3,4(sp)
  805b30:	bf0b883a 	add	r5,r23,fp
  805b34:	b009883a 	mov	r4,r22
  805b38:	1f05c83a 	sub	r2,r3,fp
  805b3c:	10800054 	ori	r2,r2,1
  805b40:	28800115 	stw	r2,4(r5)
  805b44:	b8c00117 	ldw	r3,4(r23)
  805b48:	00802074 	movhi	r2,129
  805b4c:	1092e204 	addi	r2,r2,19336
  805b50:	11400215 	stw	r5,8(r2)
  805b54:	18c0004c 	andi	r3,r3,1
  805b58:	e0c6b03a 	or	r3,fp,r3
  805b5c:	b8c00115 	stw	r3,4(r23)
  805b60:	0807fbc0 	call	807fbc <__malloc_unlock>
  805b64:	003eeb06 	br	805714 <_realloc_r+0xd8>
  805b68:	20800117 	ldw	r2,4(r4)
  805b6c:	00ffff04 	movi	r3,-4
  805b70:	800f883a 	mov	r7,r16
  805b74:	10c4703a 	and	r2,r2,r3
  805b78:	98a9883a 	add	r20,r19,r2
  805b7c:	84000204 	addi	r16,r16,8
  805b80:	003ecf06 	br	8056c0 <_realloc_r+0x84>
  805b84:	900b883a 	mov	r5,r18
  805b88:	8009883a 	mov	r4,r16
  805b8c:	080555c0 	call	80555c <memmove>
  805b90:	dd000017 	ldw	r20,0(sp)
  805b94:	b80f883a 	mov	r7,r23
  805b98:	003ec906 	br	8056c0 <_realloc_r+0x84>
  805b9c:	900b883a 	mov	r5,r18
  805ba0:	8009883a 	mov	r4,r16
  805ba4:	080555c0 	call	80555c <memmove>
  805ba8:	b80f883a 	mov	r7,r23
  805bac:	003ec406 	br	8056c0 <_realloc_r+0x84>
  805bb0:	90c00417 	ldw	r3,16(r18)
  805bb4:	89400604 	addi	r5,r17,24
  805bb8:	91000604 	addi	r4,r18,24
  805bbc:	88c00415 	stw	r3,16(r17)
  805bc0:	90800517 	ldw	r2,20(r18)
  805bc4:	88800515 	stw	r2,20(r17)
  805bc8:	003f6806 	br	80596c <_realloc_r+0x330>
  805bcc:	900b883a 	mov	r5,r18
  805bd0:	8809883a 	mov	r4,r17
  805bd4:	080555c0 	call	80555c <memmove>
  805bd8:	003fd406 	br	805b2c <_realloc_r+0x4f0>
  805bdc:	90c00417 	ldw	r3,16(r18)
  805be0:	91000604 	addi	r4,r18,24
  805be4:	ba000804 	addi	r8,r23,32
  805be8:	b8c00615 	stw	r3,24(r23)
  805bec:	90800517 	ldw	r2,20(r18)
  805bf0:	b8800715 	stw	r2,28(r23)
  805bf4:	003f1206 	br	805840 <_realloc_r+0x204>
  805bf8:	90c00417 	ldw	r3,16(r18)
  805bfc:	91000604 	addi	r4,r18,24
  805c00:	ba000804 	addi	r8,r23,32
  805c04:	b8c00615 	stw	r3,24(r23)
  805c08:	90800517 	ldw	r2,20(r18)
  805c0c:	b8800715 	stw	r2,28(r23)
  805c10:	003f3206 	br	8058dc <_realloc_r+0x2a0>
  805c14:	90c00417 	ldw	r3,16(r18)
  805c18:	91000604 	addi	r4,r18,24
  805c1c:	b9c00804 	addi	r7,r23,32
  805c20:	b8c00615 	stw	r3,24(r23)
  805c24:	90800517 	ldw	r2,20(r18)
  805c28:	b8800715 	stw	r2,28(r23)
  805c2c:	003fb906 	br	805b14 <_realloc_r+0x4d8>

00805c30 <_sbrk_r>:
  805c30:	defffd04 	addi	sp,sp,-12
  805c34:	dc000015 	stw	r16,0(sp)
  805c38:	04002074 	movhi	r16,129
  805c3c:	841f9804 	addi	r16,r16,32352
  805c40:	dc400115 	stw	r17,4(sp)
  805c44:	80000015 	stw	zero,0(r16)
  805c48:	2023883a 	mov	r17,r4
  805c4c:	2809883a 	mov	r4,r5
  805c50:	dfc00215 	stw	ra,8(sp)
  805c54:	0807b700 	call	807b70 <sbrk>
  805c58:	1007883a 	mov	r3,r2
  805c5c:	00bfffc4 	movi	r2,-1
  805c60:	18800626 	beq	r3,r2,805c7c <_sbrk_r+0x4c>
  805c64:	1805883a 	mov	r2,r3
  805c68:	dfc00217 	ldw	ra,8(sp)
  805c6c:	dc400117 	ldw	r17,4(sp)
  805c70:	dc000017 	ldw	r16,0(sp)
  805c74:	dec00304 	addi	sp,sp,12
  805c78:	f800283a 	ret
  805c7c:	80800017 	ldw	r2,0(r16)
  805c80:	103ff826 	beq	r2,zero,805c64 <_sbrk_r+0x34>
  805c84:	88800015 	stw	r2,0(r17)
  805c88:	1805883a 	mov	r2,r3
  805c8c:	dfc00217 	ldw	ra,8(sp)
  805c90:	dc400117 	ldw	r17,4(sp)
  805c94:	dc000017 	ldw	r16,0(sp)
  805c98:	dec00304 	addi	sp,sp,12
  805c9c:	f800283a 	ret

00805ca0 <__swsetup_r>:
  805ca0:	00802074 	movhi	r2,129
  805ca4:	10988d04 	addi	r2,r2,25140
  805ca8:	10c00017 	ldw	r3,0(r2)
  805cac:	defffd04 	addi	sp,sp,-12
  805cb0:	dc400115 	stw	r17,4(sp)
  805cb4:	dc000015 	stw	r16,0(sp)
  805cb8:	dfc00215 	stw	ra,8(sp)
  805cbc:	2023883a 	mov	r17,r4
  805cc0:	2821883a 	mov	r16,r5
  805cc4:	18000226 	beq	r3,zero,805cd0 <__swsetup_r+0x30>
  805cc8:	18800e17 	ldw	r2,56(r3)
  805ccc:	10001f26 	beq	r2,zero,805d4c <__swsetup_r+0xac>
  805cd0:	8100030b 	ldhu	r4,12(r16)
  805cd4:	2080020c 	andi	r2,r4,8
  805cd8:	10002826 	beq	r2,zero,805d7c <__swsetup_r+0xdc>
  805cdc:	81400417 	ldw	r5,16(r16)
  805ce0:	28001d26 	beq	r5,zero,805d58 <__swsetup_r+0xb8>
  805ce4:	2080004c 	andi	r2,r4,1
  805ce8:	1005003a 	cmpeq	r2,r2,zero
  805cec:	10000b26 	beq	r2,zero,805d1c <__swsetup_r+0x7c>
  805cf0:	2080008c 	andi	r2,r4,2
  805cf4:	10001226 	beq	r2,zero,805d40 <__swsetup_r+0xa0>
  805cf8:	0005883a 	mov	r2,zero
  805cfc:	80800215 	stw	r2,8(r16)
  805d00:	28000b26 	beq	r5,zero,805d30 <__swsetup_r+0x90>
  805d04:	0005883a 	mov	r2,zero
  805d08:	dfc00217 	ldw	ra,8(sp)
  805d0c:	dc400117 	ldw	r17,4(sp)
  805d10:	dc000017 	ldw	r16,0(sp)
  805d14:	dec00304 	addi	sp,sp,12
  805d18:	f800283a 	ret
  805d1c:	80800517 	ldw	r2,20(r16)
  805d20:	80000215 	stw	zero,8(r16)
  805d24:	0085c83a 	sub	r2,zero,r2
  805d28:	80800615 	stw	r2,24(r16)
  805d2c:	283ff51e 	bne	r5,zero,805d04 <__swsetup_r+0x64>
  805d30:	2080200c 	andi	r2,r4,128
  805d34:	103ff326 	beq	r2,zero,805d04 <__swsetup_r+0x64>
  805d38:	00bfffc4 	movi	r2,-1
  805d3c:	003ff206 	br	805d08 <__swsetup_r+0x68>
  805d40:	80800517 	ldw	r2,20(r16)
  805d44:	80800215 	stw	r2,8(r16)
  805d48:	003fed06 	br	805d00 <__swsetup_r+0x60>
  805d4c:	1809883a 	mov	r4,r3
  805d50:	08060740 	call	806074 <__sinit>
  805d54:	003fde06 	br	805cd0 <__swsetup_r+0x30>
  805d58:	20c0a00c 	andi	r3,r4,640
  805d5c:	00808004 	movi	r2,512
  805d60:	18bfe026 	beq	r3,r2,805ce4 <__swsetup_r+0x44>
  805d64:	8809883a 	mov	r4,r17
  805d68:	800b883a 	mov	r5,r16
  805d6c:	080688c0 	call	80688c <__smakebuf_r>
  805d70:	8100030b 	ldhu	r4,12(r16)
  805d74:	81400417 	ldw	r5,16(r16)
  805d78:	003fda06 	br	805ce4 <__swsetup_r+0x44>
  805d7c:	2080040c 	andi	r2,r4,16
  805d80:	103fed26 	beq	r2,zero,805d38 <__swsetup_r+0x98>
  805d84:	2080010c 	andi	r2,r4,4
  805d88:	10001226 	beq	r2,zero,805dd4 <__swsetup_r+0x134>
  805d8c:	81400c17 	ldw	r5,48(r16)
  805d90:	28000526 	beq	r5,zero,805da8 <__swsetup_r+0x108>
  805d94:	80801004 	addi	r2,r16,64
  805d98:	28800226 	beq	r5,r2,805da4 <__swsetup_r+0x104>
  805d9c:	8809883a 	mov	r4,r17
  805da0:	08063f80 	call	8063f8 <_free_r>
  805da4:	80000c15 	stw	zero,48(r16)
  805da8:	8080030b 	ldhu	r2,12(r16)
  805dac:	81400417 	ldw	r5,16(r16)
  805db0:	80000115 	stw	zero,4(r16)
  805db4:	10bff6cc 	andi	r2,r2,65499
  805db8:	8080030d 	sth	r2,12(r16)
  805dbc:	81400015 	stw	r5,0(r16)
  805dc0:	8080030b 	ldhu	r2,12(r16)
  805dc4:	10800214 	ori	r2,r2,8
  805dc8:	113fffcc 	andi	r4,r2,65535
  805dcc:	8080030d 	sth	r2,12(r16)
  805dd0:	003fc306 	br	805ce0 <__swsetup_r+0x40>
  805dd4:	81400417 	ldw	r5,16(r16)
  805dd8:	003ff906 	br	805dc0 <__swsetup_r+0x120>

00805ddc <_fflush_r>:
  805ddc:	defffb04 	addi	sp,sp,-20
  805de0:	dcc00315 	stw	r19,12(sp)
  805de4:	dc800215 	stw	r18,8(sp)
  805de8:	dfc00415 	stw	ra,16(sp)
  805dec:	dc400115 	stw	r17,4(sp)
  805df0:	dc000015 	stw	r16,0(sp)
  805df4:	2027883a 	mov	r19,r4
  805df8:	2825883a 	mov	r18,r5
  805dfc:	20000226 	beq	r4,zero,805e08 <_fflush_r+0x2c>
  805e00:	20800e17 	ldw	r2,56(r4)
  805e04:	10005626 	beq	r2,zero,805f60 <_fflush_r+0x184>
  805e08:	9100030b 	ldhu	r4,12(r18)
  805e0c:	20ffffcc 	andi	r3,r4,65535
  805e10:	18e0001c 	xori	r3,r3,32768
  805e14:	18e00004 	addi	r3,r3,-32768
  805e18:	1880020c 	andi	r2,r3,8
  805e1c:	1000261e 	bne	r2,zero,805eb8 <_fflush_r+0xdc>
  805e20:	90c00117 	ldw	r3,4(r18)
  805e24:	20820014 	ori	r2,r4,2048
  805e28:	9080030d 	sth	r2,12(r18)
  805e2c:	1009883a 	mov	r4,r2
  805e30:	00c0400e 	bge	zero,r3,805f34 <_fflush_r+0x158>
  805e34:	92000a17 	ldw	r8,40(r18)
  805e38:	40004026 	beq	r8,zero,805f3c <_fflush_r+0x160>
  805e3c:	2084000c 	andi	r2,r4,4096
  805e40:	10005326 	beq	r2,zero,805f90 <_fflush_r+0x1b4>
  805e44:	94001417 	ldw	r16,80(r18)
  805e48:	9080030b 	ldhu	r2,12(r18)
  805e4c:	1080010c 	andi	r2,r2,4
  805e50:	1000481e 	bne	r2,zero,805f74 <_fflush_r+0x198>
  805e54:	91400717 	ldw	r5,28(r18)
  805e58:	9809883a 	mov	r4,r19
  805e5c:	800d883a 	mov	r6,r16
  805e60:	000f883a 	mov	r7,zero
  805e64:	403ee83a 	callr	r8
  805e68:	8080261e 	bne	r16,r2,805f04 <_fflush_r+0x128>
  805e6c:	9080030b 	ldhu	r2,12(r18)
  805e70:	91000417 	ldw	r4,16(r18)
  805e74:	90000115 	stw	zero,4(r18)
  805e78:	10bdffcc 	andi	r2,r2,63487
  805e7c:	10ffffcc 	andi	r3,r2,65535
  805e80:	18c4000c 	andi	r3,r3,4096
  805e84:	9080030d 	sth	r2,12(r18)
  805e88:	91000015 	stw	r4,0(r18)
  805e8c:	18002b26 	beq	r3,zero,805f3c <_fflush_r+0x160>
  805e90:	0007883a 	mov	r3,zero
  805e94:	1805883a 	mov	r2,r3
  805e98:	94001415 	stw	r16,80(r18)
  805e9c:	dfc00417 	ldw	ra,16(sp)
  805ea0:	dcc00317 	ldw	r19,12(sp)
  805ea4:	dc800217 	ldw	r18,8(sp)
  805ea8:	dc400117 	ldw	r17,4(sp)
  805eac:	dc000017 	ldw	r16,0(sp)
  805eb0:	dec00504 	addi	sp,sp,20
  805eb4:	f800283a 	ret
  805eb8:	94400417 	ldw	r17,16(r18)
  805ebc:	88001f26 	beq	r17,zero,805f3c <_fflush_r+0x160>
  805ec0:	90800017 	ldw	r2,0(r18)
  805ec4:	18c000cc 	andi	r3,r3,3
  805ec8:	94400015 	stw	r17,0(r18)
  805ecc:	1461c83a 	sub	r16,r2,r17
  805ed0:	18002526 	beq	r3,zero,805f68 <_fflush_r+0x18c>
  805ed4:	0005883a 	mov	r2,zero
  805ed8:	90800215 	stw	r2,8(r18)
  805edc:	0400170e 	bge	zero,r16,805f3c <_fflush_r+0x160>
  805ee0:	90c00917 	ldw	r3,36(r18)
  805ee4:	91400717 	ldw	r5,28(r18)
  805ee8:	880d883a 	mov	r6,r17
  805eec:	800f883a 	mov	r7,r16
  805ef0:	9809883a 	mov	r4,r19
  805ef4:	183ee83a 	callr	r3
  805ef8:	88a3883a 	add	r17,r17,r2
  805efc:	80a1c83a 	sub	r16,r16,r2
  805f00:	00bff616 	blt	zero,r2,805edc <_fflush_r+0x100>
  805f04:	9080030b 	ldhu	r2,12(r18)
  805f08:	00ffffc4 	movi	r3,-1
  805f0c:	10801014 	ori	r2,r2,64
  805f10:	9080030d 	sth	r2,12(r18)
  805f14:	1805883a 	mov	r2,r3
  805f18:	dfc00417 	ldw	ra,16(sp)
  805f1c:	dcc00317 	ldw	r19,12(sp)
  805f20:	dc800217 	ldw	r18,8(sp)
  805f24:	dc400117 	ldw	r17,4(sp)
  805f28:	dc000017 	ldw	r16,0(sp)
  805f2c:	dec00504 	addi	sp,sp,20
  805f30:	f800283a 	ret
  805f34:	90800f17 	ldw	r2,60(r18)
  805f38:	00bfbe16 	blt	zero,r2,805e34 <_fflush_r+0x58>
  805f3c:	0007883a 	mov	r3,zero
  805f40:	1805883a 	mov	r2,r3
  805f44:	dfc00417 	ldw	ra,16(sp)
  805f48:	dcc00317 	ldw	r19,12(sp)
  805f4c:	dc800217 	ldw	r18,8(sp)
  805f50:	dc400117 	ldw	r17,4(sp)
  805f54:	dc000017 	ldw	r16,0(sp)
  805f58:	dec00504 	addi	sp,sp,20
  805f5c:	f800283a 	ret
  805f60:	08060740 	call	806074 <__sinit>
  805f64:	003fa806 	br	805e08 <_fflush_r+0x2c>
  805f68:	90800517 	ldw	r2,20(r18)
  805f6c:	90800215 	stw	r2,8(r18)
  805f70:	003fda06 	br	805edc <_fflush_r+0x100>
  805f74:	90800117 	ldw	r2,4(r18)
  805f78:	90c00c17 	ldw	r3,48(r18)
  805f7c:	80a1c83a 	sub	r16,r16,r2
  805f80:	183fb426 	beq	r3,zero,805e54 <_fflush_r+0x78>
  805f84:	90800f17 	ldw	r2,60(r18)
  805f88:	80a1c83a 	sub	r16,r16,r2
  805f8c:	003fb106 	br	805e54 <_fflush_r+0x78>
  805f90:	91400717 	ldw	r5,28(r18)
  805f94:	9809883a 	mov	r4,r19
  805f98:	000d883a 	mov	r6,zero
  805f9c:	01c00044 	movi	r7,1
  805fa0:	403ee83a 	callr	r8
  805fa4:	1021883a 	mov	r16,r2
  805fa8:	00bfffc4 	movi	r2,-1
  805fac:	80800226 	beq	r16,r2,805fb8 <_fflush_r+0x1dc>
  805fb0:	92000a17 	ldw	r8,40(r18)
  805fb4:	003fa406 	br	805e48 <_fflush_r+0x6c>
  805fb8:	98c00017 	ldw	r3,0(r19)
  805fbc:	00800744 	movi	r2,29
  805fc0:	18bfde26 	beq	r3,r2,805f3c <_fflush_r+0x160>
  805fc4:	9080030b 	ldhu	r2,12(r18)
  805fc8:	8007883a 	mov	r3,r16
  805fcc:	10801014 	ori	r2,r2,64
  805fd0:	9080030d 	sth	r2,12(r18)
  805fd4:	003fcf06 	br	805f14 <_fflush_r+0x138>

00805fd8 <fflush>:
  805fd8:	01402034 	movhi	r5,128
  805fdc:	29577704 	addi	r5,r5,24028
  805fe0:	2007883a 	mov	r3,r4
  805fe4:	20000526 	beq	r4,zero,805ffc <fflush+0x24>
  805fe8:	00802074 	movhi	r2,129
  805fec:	10988d04 	addi	r2,r2,25140
  805ff0:	11000017 	ldw	r4,0(r2)
  805ff4:	180b883a 	mov	r5,r3
  805ff8:	0805ddc1 	jmpi	805ddc <_fflush_r>
  805ffc:	00802074 	movhi	r2,129
  806000:	10988e04 	addi	r2,r2,25144
  806004:	11000017 	ldw	r4,0(r2)
  806008:	080670c1 	jmpi	80670c <_fwalk_reent>

0080600c <std>:
  80600c:	00802034 	movhi	r2,128
  806010:	109aae04 	addi	r2,r2,27320
  806014:	20800b15 	stw	r2,44(r4)
  806018:	00802034 	movhi	r2,128
  80601c:	109ae904 	addi	r2,r2,27556
  806020:	20800815 	stw	r2,32(r4)
  806024:	00c02034 	movhi	r3,128
  806028:	18daca04 	addi	r3,r3,27432
  80602c:	00802034 	movhi	r2,128
  806030:	109ab004 	addi	r2,r2,27328
  806034:	2140030d 	sth	r5,12(r4)
  806038:	2180038d 	sth	r6,14(r4)
  80603c:	20c00915 	stw	r3,36(r4)
  806040:	20800a15 	stw	r2,40(r4)
  806044:	20000015 	stw	zero,0(r4)
  806048:	20000115 	stw	zero,4(r4)
  80604c:	20000215 	stw	zero,8(r4)
  806050:	20000415 	stw	zero,16(r4)
  806054:	20000515 	stw	zero,20(r4)
  806058:	20000615 	stw	zero,24(r4)
  80605c:	21000715 	stw	r4,28(r4)
  806060:	f800283a 	ret

00806064 <__sfp_lock_acquire>:
  806064:	f800283a 	ret

00806068 <__sfp_lock_release>:
  806068:	f800283a 	ret

0080606c <__sinit_lock_acquire>:
  80606c:	f800283a 	ret

00806070 <__sinit_lock_release>:
  806070:	f800283a 	ret

00806074 <__sinit>:
  806074:	20800e17 	ldw	r2,56(r4)
  806078:	defffd04 	addi	sp,sp,-12
  80607c:	dc400115 	stw	r17,4(sp)
  806080:	dc000015 	stw	r16,0(sp)
  806084:	dfc00215 	stw	ra,8(sp)
  806088:	04400044 	movi	r17,1
  80608c:	01400104 	movi	r5,4
  806090:	000d883a 	mov	r6,zero
  806094:	2021883a 	mov	r16,r4
  806098:	2200bb04 	addi	r8,r4,748
  80609c:	200f883a 	mov	r7,r4
  8060a0:	10000526 	beq	r2,zero,8060b8 <__sinit+0x44>
  8060a4:	dfc00217 	ldw	ra,8(sp)
  8060a8:	dc400117 	ldw	r17,4(sp)
  8060ac:	dc000017 	ldw	r16,0(sp)
  8060b0:	dec00304 	addi	sp,sp,12
  8060b4:	f800283a 	ret
  8060b8:	21000117 	ldw	r4,4(r4)
  8060bc:	00802034 	movhi	r2,128
  8060c0:	10985604 	addi	r2,r2,24920
  8060c4:	00c000c4 	movi	r3,3
  8060c8:	80800f15 	stw	r2,60(r16)
  8060cc:	80c0b915 	stw	r3,740(r16)
  8060d0:	8200ba15 	stw	r8,744(r16)
  8060d4:	84400e15 	stw	r17,56(r16)
  8060d8:	8000b815 	stw	zero,736(r16)
  8060dc:	080600c0 	call	80600c <std>
  8060e0:	81000217 	ldw	r4,8(r16)
  8060e4:	880d883a 	mov	r6,r17
  8060e8:	800f883a 	mov	r7,r16
  8060ec:	01400284 	movi	r5,10
  8060f0:	080600c0 	call	80600c <std>
  8060f4:	81000317 	ldw	r4,12(r16)
  8060f8:	800f883a 	mov	r7,r16
  8060fc:	01400484 	movi	r5,18
  806100:	01800084 	movi	r6,2
  806104:	dfc00217 	ldw	ra,8(sp)
  806108:	dc400117 	ldw	r17,4(sp)
  80610c:	dc000017 	ldw	r16,0(sp)
  806110:	dec00304 	addi	sp,sp,12
  806114:	080600c1 	jmpi	80600c <std>

00806118 <__fp_lock>:
  806118:	0005883a 	mov	r2,zero
  80611c:	f800283a 	ret

00806120 <__fp_unlock>:
  806120:	0005883a 	mov	r2,zero
  806124:	f800283a 	ret

00806128 <__fp_unlock_all>:
  806128:	00802074 	movhi	r2,129
  80612c:	10988d04 	addi	r2,r2,25140
  806130:	11000017 	ldw	r4,0(r2)
  806134:	01402034 	movhi	r5,128
  806138:	29584804 	addi	r5,r5,24864
  80613c:	08067d41 	jmpi	8067d4 <_fwalk>

00806140 <__fp_lock_all>:
  806140:	00802074 	movhi	r2,129
  806144:	10988d04 	addi	r2,r2,25140
  806148:	11000017 	ldw	r4,0(r2)
  80614c:	01402034 	movhi	r5,128
  806150:	29584604 	addi	r5,r5,24856
  806154:	08067d41 	jmpi	8067d4 <_fwalk>

00806158 <_cleanup_r>:
  806158:	01402034 	movhi	r5,128
  80615c:	295b7f04 	addi	r5,r5,28156
  806160:	08067d41 	jmpi	8067d4 <_fwalk>

00806164 <_cleanup>:
  806164:	00802074 	movhi	r2,129
  806168:	10988e04 	addi	r2,r2,25144
  80616c:	11000017 	ldw	r4,0(r2)
  806170:	08061581 	jmpi	806158 <_cleanup_r>

00806174 <__sfmoreglue>:
  806174:	defffc04 	addi	sp,sp,-16
  806178:	dc400115 	stw	r17,4(sp)
  80617c:	2c401724 	muli	r17,r5,92
  806180:	dc800215 	stw	r18,8(sp)
  806184:	2825883a 	mov	r18,r5
  806188:	89400304 	addi	r5,r17,12
  80618c:	dc000015 	stw	r16,0(sp)
  806190:	dfc00315 	stw	ra,12(sp)
  806194:	0804c980 	call	804c98 <_malloc_r>
  806198:	0021883a 	mov	r16,zero
  80619c:	880d883a 	mov	r6,r17
  8061a0:	000b883a 	mov	r5,zero
  8061a4:	10000626 	beq	r2,zero,8061c0 <__sfmoreglue+0x4c>
  8061a8:	11000304 	addi	r4,r2,12
  8061ac:	14800115 	stw	r18,4(r2)
  8061b0:	10000015 	stw	zero,0(r2)
  8061b4:	11000215 	stw	r4,8(r2)
  8061b8:	1021883a 	mov	r16,r2
  8061bc:	0806a200 	call	806a20 <memset>
  8061c0:	8005883a 	mov	r2,r16
  8061c4:	dfc00317 	ldw	ra,12(sp)
  8061c8:	dc800217 	ldw	r18,8(sp)
  8061cc:	dc400117 	ldw	r17,4(sp)
  8061d0:	dc000017 	ldw	r16,0(sp)
  8061d4:	dec00404 	addi	sp,sp,16
  8061d8:	f800283a 	ret

008061dc <__sfp>:
  8061dc:	defffd04 	addi	sp,sp,-12
  8061e0:	00802074 	movhi	r2,129
  8061e4:	10988e04 	addi	r2,r2,25144
  8061e8:	dc000015 	stw	r16,0(sp)
  8061ec:	14000017 	ldw	r16,0(r2)
  8061f0:	dc400115 	stw	r17,4(sp)
  8061f4:	dfc00215 	stw	ra,8(sp)
  8061f8:	80800e17 	ldw	r2,56(r16)
  8061fc:	2023883a 	mov	r17,r4
  806200:	10002626 	beq	r2,zero,80629c <__sfp+0xc0>
  806204:	8400b804 	addi	r16,r16,736
  806208:	80800117 	ldw	r2,4(r16)
  80620c:	81000217 	ldw	r4,8(r16)
  806210:	10ffffc4 	addi	r3,r2,-1
  806214:	18000916 	blt	r3,zero,80623c <__sfp+0x60>
  806218:	2080030f 	ldh	r2,12(r4)
  80621c:	10000b26 	beq	r2,zero,80624c <__sfp+0x70>
  806220:	017fffc4 	movi	r5,-1
  806224:	00000206 	br	806230 <__sfp+0x54>
  806228:	2080030f 	ldh	r2,12(r4)
  80622c:	10000726 	beq	r2,zero,80624c <__sfp+0x70>
  806230:	18ffffc4 	addi	r3,r3,-1
  806234:	21001704 	addi	r4,r4,92
  806238:	197ffb1e 	bne	r3,r5,806228 <__sfp+0x4c>
  80623c:	80800017 	ldw	r2,0(r16)
  806240:	10001926 	beq	r2,zero,8062a8 <__sfp+0xcc>
  806244:	1021883a 	mov	r16,r2
  806248:	003fef06 	br	806208 <__sfp+0x2c>
  80624c:	00bfffc4 	movi	r2,-1
  806250:	00c00044 	movi	r3,1
  806254:	2080038d 	sth	r2,14(r4)
  806258:	20c0030d 	sth	r3,12(r4)
  80625c:	20000015 	stw	zero,0(r4)
  806260:	20000215 	stw	zero,8(r4)
  806264:	20000115 	stw	zero,4(r4)
  806268:	20000415 	stw	zero,16(r4)
  80626c:	20000515 	stw	zero,20(r4)
  806270:	20000615 	stw	zero,24(r4)
  806274:	20000c15 	stw	zero,48(r4)
  806278:	20000d15 	stw	zero,52(r4)
  80627c:	20001115 	stw	zero,68(r4)
  806280:	20001215 	stw	zero,72(r4)
  806284:	2005883a 	mov	r2,r4
  806288:	dfc00217 	ldw	ra,8(sp)
  80628c:	dc400117 	ldw	r17,4(sp)
  806290:	dc000017 	ldw	r16,0(sp)
  806294:	dec00304 	addi	sp,sp,12
  806298:	f800283a 	ret
  80629c:	8009883a 	mov	r4,r16
  8062a0:	08060740 	call	806074 <__sinit>
  8062a4:	003fd706 	br	806204 <__sfp+0x28>
  8062a8:	8809883a 	mov	r4,r17
  8062ac:	01400104 	movi	r5,4
  8062b0:	08061740 	call	806174 <__sfmoreglue>
  8062b4:	80800015 	stw	r2,0(r16)
  8062b8:	103fe21e 	bne	r2,zero,806244 <__sfp+0x68>
  8062bc:	00800304 	movi	r2,12
  8062c0:	0009883a 	mov	r4,zero
  8062c4:	88800015 	stw	r2,0(r17)
  8062c8:	003fee06 	br	806284 <__sfp+0xa8>

008062cc <_malloc_trim_r>:
  8062cc:	defffb04 	addi	sp,sp,-20
  8062d0:	dcc00315 	stw	r19,12(sp)
  8062d4:	04c02074 	movhi	r19,129
  8062d8:	9cd2e204 	addi	r19,r19,19336
  8062dc:	dc800215 	stw	r18,8(sp)
  8062e0:	dc400115 	stw	r17,4(sp)
  8062e4:	dc000015 	stw	r16,0(sp)
  8062e8:	2823883a 	mov	r17,r5
  8062ec:	2025883a 	mov	r18,r4
  8062f0:	dfc00415 	stw	ra,16(sp)
  8062f4:	0807eb40 	call	807eb4 <__malloc_lock>
  8062f8:	98800217 	ldw	r2,8(r19)
  8062fc:	9009883a 	mov	r4,r18
  806300:	000b883a 	mov	r5,zero
  806304:	10c00117 	ldw	r3,4(r2)
  806308:	00bfff04 	movi	r2,-4
  80630c:	18a0703a 	and	r16,r3,r2
  806310:	8463c83a 	sub	r17,r16,r17
  806314:	8c43fbc4 	addi	r17,r17,4079
  806318:	8822d33a 	srli	r17,r17,12
  80631c:	0083ffc4 	movi	r2,4095
  806320:	8c7fffc4 	addi	r17,r17,-1
  806324:	8822933a 	slli	r17,r17,12
  806328:	1440060e 	bge	r2,r17,806344 <_malloc_trim_r+0x78>
  80632c:	0805c300 	call	805c30 <_sbrk_r>
  806330:	98c00217 	ldw	r3,8(r19)
  806334:	9009883a 	mov	r4,r18
  806338:	044bc83a 	sub	r5,zero,r17
  80633c:	80c7883a 	add	r3,r16,r3
  806340:	10c00926 	beq	r2,r3,806368 <_malloc_trim_r+0x9c>
  806344:	0807fbc0 	call	807fbc <__malloc_unlock>
  806348:	0005883a 	mov	r2,zero
  80634c:	dfc00417 	ldw	ra,16(sp)
  806350:	dcc00317 	ldw	r19,12(sp)
  806354:	dc800217 	ldw	r18,8(sp)
  806358:	dc400117 	ldw	r17,4(sp)
  80635c:	dc000017 	ldw	r16,0(sp)
  806360:	dec00504 	addi	sp,sp,20
  806364:	f800283a 	ret
  806368:	9009883a 	mov	r4,r18
  80636c:	0805c300 	call	805c30 <_sbrk_r>
  806370:	844dc83a 	sub	r6,r16,r17
  806374:	00ffffc4 	movi	r3,-1
  806378:	9009883a 	mov	r4,r18
  80637c:	000b883a 	mov	r5,zero
  806380:	01c02074 	movhi	r7,129
  806384:	39dfb804 	addi	r7,r7,32480
  806388:	31800054 	ori	r6,r6,1
  80638c:	10c00926 	beq	r2,r3,8063b4 <_malloc_trim_r+0xe8>
  806390:	38800017 	ldw	r2,0(r7)
  806394:	98c00217 	ldw	r3,8(r19)
  806398:	9009883a 	mov	r4,r18
  80639c:	1445c83a 	sub	r2,r2,r17
  8063a0:	38800015 	stw	r2,0(r7)
  8063a4:	19800115 	stw	r6,4(r3)
  8063a8:	0807fbc0 	call	807fbc <__malloc_unlock>
  8063ac:	00800044 	movi	r2,1
  8063b0:	003fe606 	br	80634c <_malloc_trim_r+0x80>
  8063b4:	0805c300 	call	805c30 <_sbrk_r>
  8063b8:	99800217 	ldw	r6,8(r19)
  8063bc:	100f883a 	mov	r7,r2
  8063c0:	9009883a 	mov	r4,r18
  8063c4:	1187c83a 	sub	r3,r2,r6
  8063c8:	008003c4 	movi	r2,15
  8063cc:	19400054 	ori	r5,r3,1
  8063d0:	10ffdc0e 	bge	r2,r3,806344 <_malloc_trim_r+0x78>
  8063d4:	00802074 	movhi	r2,129
  8063d8:	10989004 	addi	r2,r2,25152
  8063dc:	10c00017 	ldw	r3,0(r2)
  8063e0:	00802074 	movhi	r2,129
  8063e4:	109fb804 	addi	r2,r2,32480
  8063e8:	31400115 	stw	r5,4(r6)
  8063ec:	38c7c83a 	sub	r3,r7,r3
  8063f0:	10c00015 	stw	r3,0(r2)
  8063f4:	003fd306 	br	806344 <_malloc_trim_r+0x78>

008063f8 <_free_r>:
  8063f8:	defffd04 	addi	sp,sp,-12
  8063fc:	dc400115 	stw	r17,4(sp)
  806400:	dc000015 	stw	r16,0(sp)
  806404:	dfc00215 	stw	ra,8(sp)
  806408:	2821883a 	mov	r16,r5
  80640c:	2023883a 	mov	r17,r4
  806410:	28005a26 	beq	r5,zero,80657c <_free_r+0x184>
  806414:	0807eb40 	call	807eb4 <__malloc_lock>
  806418:	823ffe04 	addi	r8,r16,-8
  80641c:	41400117 	ldw	r5,4(r8)
  806420:	00bfff84 	movi	r2,-2
  806424:	02802074 	movhi	r10,129
  806428:	5292e204 	addi	r10,r10,19336
  80642c:	288e703a 	and	r7,r5,r2
  806430:	41cd883a 	add	r6,r8,r7
  806434:	30c00117 	ldw	r3,4(r6)
  806438:	51000217 	ldw	r4,8(r10)
  80643c:	00bfff04 	movi	r2,-4
  806440:	1892703a 	and	r9,r3,r2
  806444:	5017883a 	mov	r11,r10
  806448:	31006726 	beq	r6,r4,8065e8 <_free_r+0x1f0>
  80644c:	2880004c 	andi	r2,r5,1
  806450:	1005003a 	cmpeq	r2,r2,zero
  806454:	32400115 	stw	r9,4(r6)
  806458:	10001a1e 	bne	r2,zero,8064c4 <_free_r+0xcc>
  80645c:	000b883a 	mov	r5,zero
  806460:	3247883a 	add	r3,r6,r9
  806464:	18800117 	ldw	r2,4(r3)
  806468:	1080004c 	andi	r2,r2,1
  80646c:	1000231e 	bne	r2,zero,8064fc <_free_r+0x104>
  806470:	280ac03a 	cmpne	r5,r5,zero
  806474:	3a4f883a 	add	r7,r7,r9
  806478:	2800451e 	bne	r5,zero,806590 <_free_r+0x198>
  80647c:	31000217 	ldw	r4,8(r6)
  806480:	00802074 	movhi	r2,129
  806484:	1092e404 	addi	r2,r2,19344
  806488:	20807b26 	beq	r4,r2,806678 <_free_r+0x280>
  80648c:	30800317 	ldw	r2,12(r6)
  806490:	3a07883a 	add	r3,r7,r8
  806494:	19c00015 	stw	r7,0(r3)
  806498:	11000215 	stw	r4,8(r2)
  80649c:	20800315 	stw	r2,12(r4)
  8064a0:	38800054 	ori	r2,r7,1
  8064a4:	40800115 	stw	r2,4(r8)
  8064a8:	28001a26 	beq	r5,zero,806514 <_free_r+0x11c>
  8064ac:	8809883a 	mov	r4,r17
  8064b0:	dfc00217 	ldw	ra,8(sp)
  8064b4:	dc400117 	ldw	r17,4(sp)
  8064b8:	dc000017 	ldw	r16,0(sp)
  8064bc:	dec00304 	addi	sp,sp,12
  8064c0:	0807fbc1 	jmpi	807fbc <__malloc_unlock>
  8064c4:	80bffe17 	ldw	r2,-8(r16)
  8064c8:	50c00204 	addi	r3,r10,8
  8064cc:	4091c83a 	sub	r8,r8,r2
  8064d0:	41000217 	ldw	r4,8(r8)
  8064d4:	388f883a 	add	r7,r7,r2
  8064d8:	20c06126 	beq	r4,r3,806660 <_free_r+0x268>
  8064dc:	40800317 	ldw	r2,12(r8)
  8064e0:	3247883a 	add	r3,r6,r9
  8064e4:	000b883a 	mov	r5,zero
  8064e8:	11000215 	stw	r4,8(r2)
  8064ec:	20800315 	stw	r2,12(r4)
  8064f0:	18800117 	ldw	r2,4(r3)
  8064f4:	1080004c 	andi	r2,r2,1
  8064f8:	103fdd26 	beq	r2,zero,806470 <_free_r+0x78>
  8064fc:	38800054 	ori	r2,r7,1
  806500:	3a07883a 	add	r3,r7,r8
  806504:	280ac03a 	cmpne	r5,r5,zero
  806508:	40800115 	stw	r2,4(r8)
  80650c:	19c00015 	stw	r7,0(r3)
  806510:	283fe61e 	bne	r5,zero,8064ac <_free_r+0xb4>
  806514:	00807fc4 	movi	r2,511
  806518:	11c01f2e 	bgeu	r2,r7,806598 <_free_r+0x1a0>
  80651c:	3806d27a 	srli	r3,r7,9
  806520:	1800481e 	bne	r3,zero,806644 <_free_r+0x24c>
  806524:	3804d0fa 	srli	r2,r7,3
  806528:	100690fa 	slli	r3,r2,3
  80652c:	1acd883a 	add	r6,r3,r11
  806530:	31400217 	ldw	r5,8(r6)
  806534:	31405926 	beq	r6,r5,80669c <_free_r+0x2a4>
  806538:	28800117 	ldw	r2,4(r5)
  80653c:	00ffff04 	movi	r3,-4
  806540:	10c4703a 	and	r2,r2,r3
  806544:	3880022e 	bgeu	r7,r2,806550 <_free_r+0x158>
  806548:	29400217 	ldw	r5,8(r5)
  80654c:	317ffa1e 	bne	r6,r5,806538 <_free_r+0x140>
  806550:	29800317 	ldw	r6,12(r5)
  806554:	41800315 	stw	r6,12(r8)
  806558:	41400215 	stw	r5,8(r8)
  80655c:	8809883a 	mov	r4,r17
  806560:	2a000315 	stw	r8,12(r5)
  806564:	32000215 	stw	r8,8(r6)
  806568:	dfc00217 	ldw	ra,8(sp)
  80656c:	dc400117 	ldw	r17,4(sp)
  806570:	dc000017 	ldw	r16,0(sp)
  806574:	dec00304 	addi	sp,sp,12
  806578:	0807fbc1 	jmpi	807fbc <__malloc_unlock>
  80657c:	dfc00217 	ldw	ra,8(sp)
  806580:	dc400117 	ldw	r17,4(sp)
  806584:	dc000017 	ldw	r16,0(sp)
  806588:	dec00304 	addi	sp,sp,12
  80658c:	f800283a 	ret
  806590:	31000217 	ldw	r4,8(r6)
  806594:	003fbd06 	br	80648c <_free_r+0x94>
  806598:	3806d0fa 	srli	r3,r7,3
  80659c:	00800044 	movi	r2,1
  8065a0:	51400117 	ldw	r5,4(r10)
  8065a4:	180890fa 	slli	r4,r3,3
  8065a8:	1807d0ba 	srai	r3,r3,2
  8065ac:	22c9883a 	add	r4,r4,r11
  8065b0:	21800217 	ldw	r6,8(r4)
  8065b4:	10c4983a 	sll	r2,r2,r3
  8065b8:	41000315 	stw	r4,12(r8)
  8065bc:	41800215 	stw	r6,8(r8)
  8065c0:	288ab03a 	or	r5,r5,r2
  8065c4:	22000215 	stw	r8,8(r4)
  8065c8:	8809883a 	mov	r4,r17
  8065cc:	51400115 	stw	r5,4(r10)
  8065d0:	32000315 	stw	r8,12(r6)
  8065d4:	dfc00217 	ldw	ra,8(sp)
  8065d8:	dc400117 	ldw	r17,4(sp)
  8065dc:	dc000017 	ldw	r16,0(sp)
  8065e0:	dec00304 	addi	sp,sp,12
  8065e4:	0807fbc1 	jmpi	807fbc <__malloc_unlock>
  8065e8:	2880004c 	andi	r2,r5,1
  8065ec:	3a4d883a 	add	r6,r7,r9
  8065f0:	1000071e 	bne	r2,zero,806610 <_free_r+0x218>
  8065f4:	80bffe17 	ldw	r2,-8(r16)
  8065f8:	4091c83a 	sub	r8,r8,r2
  8065fc:	41000317 	ldw	r4,12(r8)
  806600:	40c00217 	ldw	r3,8(r8)
  806604:	308d883a 	add	r6,r6,r2
  806608:	20c00215 	stw	r3,8(r4)
  80660c:	19000315 	stw	r4,12(r3)
  806610:	00802074 	movhi	r2,129
  806614:	10988f04 	addi	r2,r2,25148
  806618:	11000017 	ldw	r4,0(r2)
  80661c:	30c00054 	ori	r3,r6,1
  806620:	52000215 	stw	r8,8(r10)
  806624:	40c00115 	stw	r3,4(r8)
  806628:	313fa036 	bltu	r6,r4,8064ac <_free_r+0xb4>
  80662c:	00802074 	movhi	r2,129
  806630:	109f9504 	addi	r2,r2,32340
  806634:	11400017 	ldw	r5,0(r2)
  806638:	8809883a 	mov	r4,r17
  80663c:	08062cc0 	call	8062cc <_malloc_trim_r>
  806640:	003f9a06 	br	8064ac <_free_r+0xb4>
  806644:	00800104 	movi	r2,4
  806648:	10c0072e 	bgeu	r2,r3,806668 <_free_r+0x270>
  80664c:	00800504 	movi	r2,20
  806650:	10c01936 	bltu	r2,r3,8066b8 <_free_r+0x2c0>
  806654:	188016c4 	addi	r2,r3,91
  806658:	100690fa 	slli	r3,r2,3
  80665c:	003fb306 	br	80652c <_free_r+0x134>
  806660:	01400044 	movi	r5,1
  806664:	003f7e06 	br	806460 <_free_r+0x68>
  806668:	3804d1ba 	srli	r2,r7,6
  80666c:	10800e04 	addi	r2,r2,56
  806670:	100690fa 	slli	r3,r2,3
  806674:	003fad06 	br	80652c <_free_r+0x134>
  806678:	22000315 	stw	r8,12(r4)
  80667c:	22000215 	stw	r8,8(r4)
  806680:	3a05883a 	add	r2,r7,r8
  806684:	38c00054 	ori	r3,r7,1
  806688:	11c00015 	stw	r7,0(r2)
  80668c:	41000215 	stw	r4,8(r8)
  806690:	40c00115 	stw	r3,4(r8)
  806694:	41000315 	stw	r4,12(r8)
  806698:	003f8406 	br	8064ac <_free_r+0xb4>
  80669c:	1005d0ba 	srai	r2,r2,2
  8066a0:	00c00044 	movi	r3,1
  8066a4:	51000117 	ldw	r4,4(r10)
  8066a8:	1886983a 	sll	r3,r3,r2
  8066ac:	20c8b03a 	or	r4,r4,r3
  8066b0:	51000115 	stw	r4,4(r10)
  8066b4:	003fa706 	br	806554 <_free_r+0x15c>
  8066b8:	00801504 	movi	r2,84
  8066bc:	10c00436 	bltu	r2,r3,8066d0 <_free_r+0x2d8>
  8066c0:	3804d33a 	srli	r2,r7,12
  8066c4:	10801b84 	addi	r2,r2,110
  8066c8:	100690fa 	slli	r3,r2,3
  8066cc:	003f9706 	br	80652c <_free_r+0x134>
  8066d0:	00805504 	movi	r2,340
  8066d4:	10c00436 	bltu	r2,r3,8066e8 <_free_r+0x2f0>
  8066d8:	3804d3fa 	srli	r2,r7,15
  8066dc:	10801dc4 	addi	r2,r2,119
  8066e0:	100690fa 	slli	r3,r2,3
  8066e4:	003f9106 	br	80652c <_free_r+0x134>
  8066e8:	00815504 	movi	r2,1364
  8066ec:	10c0032e 	bgeu	r2,r3,8066fc <_free_r+0x304>
  8066f0:	00801f84 	movi	r2,126
  8066f4:	00c0fc04 	movi	r3,1008
  8066f8:	003f8c06 	br	80652c <_free_r+0x134>
  8066fc:	3804d4ba 	srli	r2,r7,18
  806700:	10801f04 	addi	r2,r2,124
  806704:	100690fa 	slli	r3,r2,3
  806708:	003f8806 	br	80652c <_free_r+0x134>

0080670c <_fwalk_reent>:
  80670c:	defff704 	addi	sp,sp,-36
  806710:	dcc00315 	stw	r19,12(sp)
  806714:	24c0b804 	addi	r19,r4,736
  806718:	dd800615 	stw	r22,24(sp)
  80671c:	dd400515 	stw	r21,20(sp)
  806720:	dfc00815 	stw	ra,32(sp)
  806724:	ddc00715 	stw	r23,28(sp)
  806728:	dd000415 	stw	r20,16(sp)
  80672c:	dc800215 	stw	r18,8(sp)
  806730:	dc400115 	stw	r17,4(sp)
  806734:	dc000015 	stw	r16,0(sp)
  806738:	202b883a 	mov	r21,r4
  80673c:	282d883a 	mov	r22,r5
  806740:	08060640 	call	806064 <__sfp_lock_acquire>
  806744:	98002126 	beq	r19,zero,8067cc <_fwalk_reent+0xc0>
  806748:	002f883a 	mov	r23,zero
  80674c:	9c800117 	ldw	r18,4(r19)
  806750:	9c000217 	ldw	r16,8(r19)
  806754:	90bfffc4 	addi	r2,r18,-1
  806758:	10000d16 	blt	r2,zero,806790 <_fwalk_reent+0x84>
  80675c:	0023883a 	mov	r17,zero
  806760:	053fffc4 	movi	r20,-1
  806764:	8080030f 	ldh	r2,12(r16)
  806768:	8c400044 	addi	r17,r17,1
  80676c:	10000626 	beq	r2,zero,806788 <_fwalk_reent+0x7c>
  806770:	8080038f 	ldh	r2,14(r16)
  806774:	800b883a 	mov	r5,r16
  806778:	a809883a 	mov	r4,r21
  80677c:	15000226 	beq	r2,r20,806788 <_fwalk_reent+0x7c>
  806780:	b03ee83a 	callr	r22
  806784:	b8aeb03a 	or	r23,r23,r2
  806788:	84001704 	addi	r16,r16,92
  80678c:	947ff51e 	bne	r18,r17,806764 <_fwalk_reent+0x58>
  806790:	9cc00017 	ldw	r19,0(r19)
  806794:	983fed1e 	bne	r19,zero,80674c <_fwalk_reent+0x40>
  806798:	08060680 	call	806068 <__sfp_lock_release>
  80679c:	b805883a 	mov	r2,r23
  8067a0:	dfc00817 	ldw	ra,32(sp)
  8067a4:	ddc00717 	ldw	r23,28(sp)
  8067a8:	dd800617 	ldw	r22,24(sp)
  8067ac:	dd400517 	ldw	r21,20(sp)
  8067b0:	dd000417 	ldw	r20,16(sp)
  8067b4:	dcc00317 	ldw	r19,12(sp)
  8067b8:	dc800217 	ldw	r18,8(sp)
  8067bc:	dc400117 	ldw	r17,4(sp)
  8067c0:	dc000017 	ldw	r16,0(sp)
  8067c4:	dec00904 	addi	sp,sp,36
  8067c8:	f800283a 	ret
  8067cc:	002f883a 	mov	r23,zero
  8067d0:	003ff106 	br	806798 <_fwalk_reent+0x8c>

008067d4 <_fwalk>:
  8067d4:	defff804 	addi	sp,sp,-32
  8067d8:	dcc00315 	stw	r19,12(sp)
  8067dc:	24c0b804 	addi	r19,r4,736
  8067e0:	dd400515 	stw	r21,20(sp)
  8067e4:	dfc00715 	stw	ra,28(sp)
  8067e8:	dd800615 	stw	r22,24(sp)
  8067ec:	dd000415 	stw	r20,16(sp)
  8067f0:	dc800215 	stw	r18,8(sp)
  8067f4:	dc400115 	stw	r17,4(sp)
  8067f8:	dc000015 	stw	r16,0(sp)
  8067fc:	282b883a 	mov	r21,r5
  806800:	08060640 	call	806064 <__sfp_lock_acquire>
  806804:	98001f26 	beq	r19,zero,806884 <_fwalk+0xb0>
  806808:	002d883a 	mov	r22,zero
  80680c:	9c800117 	ldw	r18,4(r19)
  806810:	9c000217 	ldw	r16,8(r19)
  806814:	90bfffc4 	addi	r2,r18,-1
  806818:	10000c16 	blt	r2,zero,80684c <_fwalk+0x78>
  80681c:	0023883a 	mov	r17,zero
  806820:	053fffc4 	movi	r20,-1
  806824:	8080030f 	ldh	r2,12(r16)
  806828:	8c400044 	addi	r17,r17,1
  80682c:	10000526 	beq	r2,zero,806844 <_fwalk+0x70>
  806830:	8080038f 	ldh	r2,14(r16)
  806834:	8009883a 	mov	r4,r16
  806838:	15000226 	beq	r2,r20,806844 <_fwalk+0x70>
  80683c:	a83ee83a 	callr	r21
  806840:	b0acb03a 	or	r22,r22,r2
  806844:	84001704 	addi	r16,r16,92
  806848:	947ff61e 	bne	r18,r17,806824 <_fwalk+0x50>
  80684c:	9cc00017 	ldw	r19,0(r19)
  806850:	983fee1e 	bne	r19,zero,80680c <_fwalk+0x38>
  806854:	08060680 	call	806068 <__sfp_lock_release>
  806858:	b005883a 	mov	r2,r22
  80685c:	dfc00717 	ldw	ra,28(sp)
  806860:	dd800617 	ldw	r22,24(sp)
  806864:	dd400517 	ldw	r21,20(sp)
  806868:	dd000417 	ldw	r20,16(sp)
  80686c:	dcc00317 	ldw	r19,12(sp)
  806870:	dc800217 	ldw	r18,8(sp)
  806874:	dc400117 	ldw	r17,4(sp)
  806878:	dc000017 	ldw	r16,0(sp)
  80687c:	dec00804 	addi	sp,sp,32
  806880:	f800283a 	ret
  806884:	002d883a 	mov	r22,zero
  806888:	003ff206 	br	806854 <_fwalk+0x80>

0080688c <__smakebuf_r>:
  80688c:	2880030b 	ldhu	r2,12(r5)
  806890:	deffed04 	addi	sp,sp,-76
  806894:	dc401015 	stw	r17,64(sp)
  806898:	1080008c 	andi	r2,r2,2
  80689c:	dc000f15 	stw	r16,60(sp)
  8068a0:	dfc01215 	stw	ra,72(sp)
  8068a4:	dc801115 	stw	r18,68(sp)
  8068a8:	2821883a 	mov	r16,r5
  8068ac:	2023883a 	mov	r17,r4
  8068b0:	10000b26 	beq	r2,zero,8068e0 <__smakebuf_r+0x54>
  8068b4:	28c010c4 	addi	r3,r5,67
  8068b8:	00800044 	movi	r2,1
  8068bc:	28800515 	stw	r2,20(r5)
  8068c0:	28c00415 	stw	r3,16(r5)
  8068c4:	28c00015 	stw	r3,0(r5)
  8068c8:	dfc01217 	ldw	ra,72(sp)
  8068cc:	dc801117 	ldw	r18,68(sp)
  8068d0:	dc401017 	ldw	r17,64(sp)
  8068d4:	dc000f17 	ldw	r16,60(sp)
  8068d8:	dec01304 	addi	sp,sp,76
  8068dc:	f800283a 	ret
  8068e0:	2940038f 	ldh	r5,14(r5)
  8068e4:	28002116 	blt	r5,zero,80696c <__smakebuf_r+0xe0>
  8068e8:	d80d883a 	mov	r6,sp
  8068ec:	0806e100 	call	806e10 <_fstat_r>
  8068f0:	10001e16 	blt	r2,zero,80696c <__smakebuf_r+0xe0>
  8068f4:	d8800117 	ldw	r2,4(sp)
  8068f8:	00e00014 	movui	r3,32768
  8068fc:	113c000c 	andi	r4,r2,61440
  806900:	20c03126 	beq	r4,r3,8069c8 <__smakebuf_r+0x13c>
  806904:	8080030b 	ldhu	r2,12(r16)
  806908:	00c80004 	movi	r3,8192
  80690c:	10820014 	ori	r2,r2,2048
  806910:	8080030d 	sth	r2,12(r16)
  806914:	20c01e26 	beq	r4,r3,806990 <__smakebuf_r+0x104>
  806918:	04810004 	movi	r18,1024
  80691c:	8809883a 	mov	r4,r17
  806920:	900b883a 	mov	r5,r18
  806924:	0804c980 	call	804c98 <_malloc_r>
  806928:	1009883a 	mov	r4,r2
  80692c:	10003126 	beq	r2,zero,8069f4 <__smakebuf_r+0x168>
  806930:	80c0030b 	ldhu	r3,12(r16)
  806934:	00802034 	movhi	r2,128
  806938:	10985604 	addi	r2,r2,24920
  80693c:	88800f15 	stw	r2,60(r17)
  806940:	18c02014 	ori	r3,r3,128
  806944:	84800515 	stw	r18,20(r16)
  806948:	80c0030d 	sth	r3,12(r16)
  80694c:	81000415 	stw	r4,16(r16)
  806950:	81000015 	stw	r4,0(r16)
  806954:	dfc01217 	ldw	ra,72(sp)
  806958:	dc801117 	ldw	r18,68(sp)
  80695c:	dc401017 	ldw	r17,64(sp)
  806960:	dc000f17 	ldw	r16,60(sp)
  806964:	dec01304 	addi	sp,sp,76
  806968:	f800283a 	ret
  80696c:	80c0030b 	ldhu	r3,12(r16)
  806970:	1880200c 	andi	r2,r3,128
  806974:	10000426 	beq	r2,zero,806988 <__smakebuf_r+0xfc>
  806978:	04801004 	movi	r18,64
  80697c:	18820014 	ori	r2,r3,2048
  806980:	8080030d 	sth	r2,12(r16)
  806984:	003fe506 	br	80691c <__smakebuf_r+0x90>
  806988:	04810004 	movi	r18,1024
  80698c:	003ffb06 	br	80697c <__smakebuf_r+0xf0>
  806990:	8140038f 	ldh	r5,14(r16)
  806994:	8809883a 	mov	r4,r17
  806998:	0806e840 	call	806e84 <_isatty_r>
  80699c:	103fde26 	beq	r2,zero,806918 <__smakebuf_r+0x8c>
  8069a0:	8080030b 	ldhu	r2,12(r16)
  8069a4:	80c010c4 	addi	r3,r16,67
  8069a8:	04810004 	movi	r18,1024
  8069ac:	10800054 	ori	r2,r2,1
  8069b0:	8080030d 	sth	r2,12(r16)
  8069b4:	00800044 	movi	r2,1
  8069b8:	80c00415 	stw	r3,16(r16)
  8069bc:	80800515 	stw	r2,20(r16)
  8069c0:	80c00015 	stw	r3,0(r16)
  8069c4:	003fd506 	br	80691c <__smakebuf_r+0x90>
  8069c8:	80c00a17 	ldw	r3,40(r16)
  8069cc:	00802034 	movhi	r2,128
  8069d0:	109ab004 	addi	r2,r2,27328
  8069d4:	18bfcb1e 	bne	r3,r2,806904 <__smakebuf_r+0x78>
  8069d8:	8080030b 	ldhu	r2,12(r16)
  8069dc:	00c10004 	movi	r3,1024
  8069e0:	1825883a 	mov	r18,r3
  8069e4:	10c4b03a 	or	r2,r2,r3
  8069e8:	8080030d 	sth	r2,12(r16)
  8069ec:	80c01315 	stw	r3,76(r16)
  8069f0:	003fca06 	br	80691c <__smakebuf_r+0x90>
  8069f4:	8100030b 	ldhu	r4,12(r16)
  8069f8:	2080800c 	andi	r2,r4,512
  8069fc:	103fb21e 	bne	r2,zero,8068c8 <__smakebuf_r+0x3c>
  806a00:	80c010c4 	addi	r3,r16,67
  806a04:	21000094 	ori	r4,r4,2
  806a08:	00800044 	movi	r2,1
  806a0c:	80800515 	stw	r2,20(r16)
  806a10:	8100030d 	sth	r4,12(r16)
  806a14:	80c00415 	stw	r3,16(r16)
  806a18:	80c00015 	stw	r3,0(r16)
  806a1c:	003faa06 	br	8068c8 <__smakebuf_r+0x3c>

00806a20 <memset>:
  806a20:	008000c4 	movi	r2,3
  806a24:	29403fcc 	andi	r5,r5,255
  806a28:	2007883a 	mov	r3,r4
  806a2c:	1180022e 	bgeu	r2,r6,806a38 <memset+0x18>
  806a30:	2084703a 	and	r2,r4,r2
  806a34:	10000826 	beq	r2,zero,806a58 <memset+0x38>
  806a38:	30000526 	beq	r6,zero,806a50 <memset+0x30>
  806a3c:	2805883a 	mov	r2,r5
  806a40:	30cd883a 	add	r6,r6,r3
  806a44:	18800005 	stb	r2,0(r3)
  806a48:	18c00044 	addi	r3,r3,1
  806a4c:	19bffd1e 	bne	r3,r6,806a44 <memset+0x24>
  806a50:	2005883a 	mov	r2,r4
  806a54:	f800283a 	ret
  806a58:	2804923a 	slli	r2,r5,8
  806a5c:	020003c4 	movi	r8,15
  806a60:	200f883a 	mov	r7,r4
  806a64:	2884b03a 	or	r2,r5,r2
  806a68:	1006943a 	slli	r3,r2,16
  806a6c:	10c6b03a 	or	r3,r2,r3
  806a70:	41800a2e 	bgeu	r8,r6,806a9c <memset+0x7c>
  806a74:	4005883a 	mov	r2,r8
  806a78:	31bffc04 	addi	r6,r6,-16
  806a7c:	38c00015 	stw	r3,0(r7)
  806a80:	38c00115 	stw	r3,4(r7)
  806a84:	38c00215 	stw	r3,8(r7)
  806a88:	38c00315 	stw	r3,12(r7)
  806a8c:	39c00404 	addi	r7,r7,16
  806a90:	11bff936 	bltu	r2,r6,806a78 <memset+0x58>
  806a94:	008000c4 	movi	r2,3
  806a98:	1180052e 	bgeu	r2,r6,806ab0 <memset+0x90>
  806a9c:	31bfff04 	addi	r6,r6,-4
  806aa0:	008000c4 	movi	r2,3
  806aa4:	38c00015 	stw	r3,0(r7)
  806aa8:	39c00104 	addi	r7,r7,4
  806aac:	11bffb36 	bltu	r2,r6,806a9c <memset+0x7c>
  806ab0:	3807883a 	mov	r3,r7
  806ab4:	003fe006 	br	806a38 <memset+0x18>

00806ab8 <__sclose>:
  806ab8:	2940038f 	ldh	r5,14(r5)
  806abc:	0806c7c1 	jmpi	806c7c <_close_r>

00806ac0 <__sseek>:
  806ac0:	defffe04 	addi	sp,sp,-8
  806ac4:	dc000015 	stw	r16,0(sp)
  806ac8:	2821883a 	mov	r16,r5
  806acc:	2940038f 	ldh	r5,14(r5)
  806ad0:	dfc00115 	stw	ra,4(sp)
  806ad4:	0806ef40 	call	806ef4 <_lseek_r>
  806ad8:	1007883a 	mov	r3,r2
  806adc:	00bfffc4 	movi	r2,-1
  806ae0:	18800926 	beq	r3,r2,806b08 <__sseek+0x48>
  806ae4:	8080030b 	ldhu	r2,12(r16)
  806ae8:	80c01415 	stw	r3,80(r16)
  806aec:	10840014 	ori	r2,r2,4096
  806af0:	8080030d 	sth	r2,12(r16)
  806af4:	1805883a 	mov	r2,r3
  806af8:	dfc00117 	ldw	ra,4(sp)
  806afc:	dc000017 	ldw	r16,0(sp)
  806b00:	dec00204 	addi	sp,sp,8
  806b04:	f800283a 	ret
  806b08:	8080030b 	ldhu	r2,12(r16)
  806b0c:	10bbffcc 	andi	r2,r2,61439
  806b10:	8080030d 	sth	r2,12(r16)
  806b14:	1805883a 	mov	r2,r3
  806b18:	dfc00117 	ldw	ra,4(sp)
  806b1c:	dc000017 	ldw	r16,0(sp)
  806b20:	dec00204 	addi	sp,sp,8
  806b24:	f800283a 	ret

00806b28 <__swrite>:
  806b28:	2880030b 	ldhu	r2,12(r5)
  806b2c:	defffb04 	addi	sp,sp,-20
  806b30:	dcc00315 	stw	r19,12(sp)
  806b34:	1080400c 	andi	r2,r2,256
  806b38:	dc800215 	stw	r18,8(sp)
  806b3c:	dc400115 	stw	r17,4(sp)
  806b40:	dc000015 	stw	r16,0(sp)
  806b44:	3027883a 	mov	r19,r6
  806b48:	3825883a 	mov	r18,r7
  806b4c:	dfc00415 	stw	ra,16(sp)
  806b50:	2821883a 	mov	r16,r5
  806b54:	000d883a 	mov	r6,zero
  806b58:	01c00084 	movi	r7,2
  806b5c:	2023883a 	mov	r17,r4
  806b60:	10000226 	beq	r2,zero,806b6c <__swrite+0x44>
  806b64:	2940038f 	ldh	r5,14(r5)
  806b68:	0806ef40 	call	806ef4 <_lseek_r>
  806b6c:	8080030b 	ldhu	r2,12(r16)
  806b70:	8140038f 	ldh	r5,14(r16)
  806b74:	8809883a 	mov	r4,r17
  806b78:	10bbffcc 	andi	r2,r2,61439
  806b7c:	980d883a 	mov	r6,r19
  806b80:	900f883a 	mov	r7,r18
  806b84:	8080030d 	sth	r2,12(r16)
  806b88:	dfc00417 	ldw	ra,16(sp)
  806b8c:	dcc00317 	ldw	r19,12(sp)
  806b90:	dc800217 	ldw	r18,8(sp)
  806b94:	dc400117 	ldw	r17,4(sp)
  806b98:	dc000017 	ldw	r16,0(sp)
  806b9c:	dec00504 	addi	sp,sp,20
  806ba0:	0806c041 	jmpi	806c04 <_write_r>

00806ba4 <__sread>:
  806ba4:	defffe04 	addi	sp,sp,-8
  806ba8:	dc000015 	stw	r16,0(sp)
  806bac:	2821883a 	mov	r16,r5
  806bb0:	2940038f 	ldh	r5,14(r5)
  806bb4:	dfc00115 	stw	ra,4(sp)
  806bb8:	0806f6c0 	call	806f6c <_read_r>
  806bbc:	1007883a 	mov	r3,r2
  806bc0:	10000816 	blt	r2,zero,806be4 <__sread+0x40>
  806bc4:	80801417 	ldw	r2,80(r16)
  806bc8:	10c5883a 	add	r2,r2,r3
  806bcc:	80801415 	stw	r2,80(r16)
  806bd0:	1805883a 	mov	r2,r3
  806bd4:	dfc00117 	ldw	ra,4(sp)
  806bd8:	dc000017 	ldw	r16,0(sp)
  806bdc:	dec00204 	addi	sp,sp,8
  806be0:	f800283a 	ret
  806be4:	8080030b 	ldhu	r2,12(r16)
  806be8:	10bbffcc 	andi	r2,r2,61439
  806bec:	8080030d 	sth	r2,12(r16)
  806bf0:	1805883a 	mov	r2,r3
  806bf4:	dfc00117 	ldw	ra,4(sp)
  806bf8:	dc000017 	ldw	r16,0(sp)
  806bfc:	dec00204 	addi	sp,sp,8
  806c00:	f800283a 	ret

00806c04 <_write_r>:
  806c04:	defffd04 	addi	sp,sp,-12
  806c08:	dc000015 	stw	r16,0(sp)
  806c0c:	04002074 	movhi	r16,129
  806c10:	841f9804 	addi	r16,r16,32352
  806c14:	dc400115 	stw	r17,4(sp)
  806c18:	80000015 	stw	zero,0(r16)
  806c1c:	2023883a 	mov	r17,r4
  806c20:	2809883a 	mov	r4,r5
  806c24:	300b883a 	mov	r5,r6
  806c28:	380d883a 	mov	r6,r7
  806c2c:	dfc00215 	stw	ra,8(sp)
  806c30:	0807c2c0 	call	807c2c <write>
  806c34:	1007883a 	mov	r3,r2
  806c38:	00bfffc4 	movi	r2,-1
  806c3c:	18800626 	beq	r3,r2,806c58 <_write_r+0x54>
  806c40:	1805883a 	mov	r2,r3
  806c44:	dfc00217 	ldw	ra,8(sp)
  806c48:	dc400117 	ldw	r17,4(sp)
  806c4c:	dc000017 	ldw	r16,0(sp)
  806c50:	dec00304 	addi	sp,sp,12
  806c54:	f800283a 	ret
  806c58:	80800017 	ldw	r2,0(r16)
  806c5c:	103ff826 	beq	r2,zero,806c40 <_write_r+0x3c>
  806c60:	88800015 	stw	r2,0(r17)
  806c64:	1805883a 	mov	r2,r3
  806c68:	dfc00217 	ldw	ra,8(sp)
  806c6c:	dc400117 	ldw	r17,4(sp)
  806c70:	dc000017 	ldw	r16,0(sp)
  806c74:	dec00304 	addi	sp,sp,12
  806c78:	f800283a 	ret

00806c7c <_close_r>:
  806c7c:	defffd04 	addi	sp,sp,-12
  806c80:	dc000015 	stw	r16,0(sp)
  806c84:	04002074 	movhi	r16,129
  806c88:	841f9804 	addi	r16,r16,32352
  806c8c:	dc400115 	stw	r17,4(sp)
  806c90:	80000015 	stw	zero,0(r16)
  806c94:	2023883a 	mov	r17,r4
  806c98:	2809883a 	mov	r4,r5
  806c9c:	dfc00215 	stw	ra,8(sp)
  806ca0:	0806fe40 	call	806fe4 <close>
  806ca4:	1007883a 	mov	r3,r2
  806ca8:	00bfffc4 	movi	r2,-1
  806cac:	18800626 	beq	r3,r2,806cc8 <_close_r+0x4c>
  806cb0:	1805883a 	mov	r2,r3
  806cb4:	dfc00217 	ldw	ra,8(sp)
  806cb8:	dc400117 	ldw	r17,4(sp)
  806cbc:	dc000017 	ldw	r16,0(sp)
  806cc0:	dec00304 	addi	sp,sp,12
  806cc4:	f800283a 	ret
  806cc8:	80800017 	ldw	r2,0(r16)
  806ccc:	103ff826 	beq	r2,zero,806cb0 <_close_r+0x34>
  806cd0:	88800015 	stw	r2,0(r17)
  806cd4:	1805883a 	mov	r2,r3
  806cd8:	dfc00217 	ldw	ra,8(sp)
  806cdc:	dc400117 	ldw	r17,4(sp)
  806ce0:	dc000017 	ldw	r16,0(sp)
  806ce4:	dec00304 	addi	sp,sp,12
  806ce8:	f800283a 	ret

00806cec <_fclose_r>:
  806cec:	defffc04 	addi	sp,sp,-16
  806cf0:	dc400115 	stw	r17,4(sp)
  806cf4:	dc000015 	stw	r16,0(sp)
  806cf8:	dfc00315 	stw	ra,12(sp)
  806cfc:	dc800215 	stw	r18,8(sp)
  806d00:	2821883a 	mov	r16,r5
  806d04:	2023883a 	mov	r17,r4
  806d08:	28002926 	beq	r5,zero,806db0 <_fclose_r+0xc4>
  806d0c:	08060640 	call	806064 <__sfp_lock_acquire>
  806d10:	88000226 	beq	r17,zero,806d1c <_fclose_r+0x30>
  806d14:	88800e17 	ldw	r2,56(r17)
  806d18:	10002d26 	beq	r2,zero,806dd0 <_fclose_r+0xe4>
  806d1c:	8080030f 	ldh	r2,12(r16)
  806d20:	10002226 	beq	r2,zero,806dac <_fclose_r+0xc0>
  806d24:	8809883a 	mov	r4,r17
  806d28:	800b883a 	mov	r5,r16
  806d2c:	0805ddc0 	call	805ddc <_fflush_r>
  806d30:	1025883a 	mov	r18,r2
  806d34:	80800b17 	ldw	r2,44(r16)
  806d38:	10000426 	beq	r2,zero,806d4c <_fclose_r+0x60>
  806d3c:	81400717 	ldw	r5,28(r16)
  806d40:	8809883a 	mov	r4,r17
  806d44:	103ee83a 	callr	r2
  806d48:	10002a16 	blt	r2,zero,806df4 <_fclose_r+0x108>
  806d4c:	8080030b 	ldhu	r2,12(r16)
  806d50:	1080200c 	andi	r2,r2,128
  806d54:	1000231e 	bne	r2,zero,806de4 <_fclose_r+0xf8>
  806d58:	81400c17 	ldw	r5,48(r16)
  806d5c:	28000526 	beq	r5,zero,806d74 <_fclose_r+0x88>
  806d60:	80801004 	addi	r2,r16,64
  806d64:	28800226 	beq	r5,r2,806d70 <_fclose_r+0x84>
  806d68:	8809883a 	mov	r4,r17
  806d6c:	08063f80 	call	8063f8 <_free_r>
  806d70:	80000c15 	stw	zero,48(r16)
  806d74:	81401117 	ldw	r5,68(r16)
  806d78:	28000326 	beq	r5,zero,806d88 <_fclose_r+0x9c>
  806d7c:	8809883a 	mov	r4,r17
  806d80:	08063f80 	call	8063f8 <_free_r>
  806d84:	80001115 	stw	zero,68(r16)
  806d88:	8000030d 	sth	zero,12(r16)
  806d8c:	08060680 	call	806068 <__sfp_lock_release>
  806d90:	9005883a 	mov	r2,r18
  806d94:	dfc00317 	ldw	ra,12(sp)
  806d98:	dc800217 	ldw	r18,8(sp)
  806d9c:	dc400117 	ldw	r17,4(sp)
  806da0:	dc000017 	ldw	r16,0(sp)
  806da4:	dec00404 	addi	sp,sp,16
  806da8:	f800283a 	ret
  806dac:	08060680 	call	806068 <__sfp_lock_release>
  806db0:	0025883a 	mov	r18,zero
  806db4:	9005883a 	mov	r2,r18
  806db8:	dfc00317 	ldw	ra,12(sp)
  806dbc:	dc800217 	ldw	r18,8(sp)
  806dc0:	dc400117 	ldw	r17,4(sp)
  806dc4:	dc000017 	ldw	r16,0(sp)
  806dc8:	dec00404 	addi	sp,sp,16
  806dcc:	f800283a 	ret
  806dd0:	8809883a 	mov	r4,r17
  806dd4:	08060740 	call	806074 <__sinit>
  806dd8:	8080030f 	ldh	r2,12(r16)
  806ddc:	103fd11e 	bne	r2,zero,806d24 <_fclose_r+0x38>
  806de0:	003ff206 	br	806dac <_fclose_r+0xc0>
  806de4:	81400417 	ldw	r5,16(r16)
  806de8:	8809883a 	mov	r4,r17
  806dec:	08063f80 	call	8063f8 <_free_r>
  806df0:	003fd906 	br	806d58 <_fclose_r+0x6c>
  806df4:	04bfffc4 	movi	r18,-1
  806df8:	003fd406 	br	806d4c <_fclose_r+0x60>

00806dfc <fclose>:
  806dfc:	00802074 	movhi	r2,129
  806e00:	10988d04 	addi	r2,r2,25140
  806e04:	200b883a 	mov	r5,r4
  806e08:	11000017 	ldw	r4,0(r2)
  806e0c:	0806cec1 	jmpi	806cec <_fclose_r>

00806e10 <_fstat_r>:
  806e10:	defffd04 	addi	sp,sp,-12
  806e14:	dc000015 	stw	r16,0(sp)
  806e18:	04002074 	movhi	r16,129
  806e1c:	841f9804 	addi	r16,r16,32352
  806e20:	dc400115 	stw	r17,4(sp)
  806e24:	80000015 	stw	zero,0(r16)
  806e28:	2023883a 	mov	r17,r4
  806e2c:	2809883a 	mov	r4,r5
  806e30:	300b883a 	mov	r5,r6
  806e34:	dfc00215 	stw	ra,8(sp)
  806e38:	080716c0 	call	80716c <fstat>
  806e3c:	1007883a 	mov	r3,r2
  806e40:	00bfffc4 	movi	r2,-1
  806e44:	18800626 	beq	r3,r2,806e60 <_fstat_r+0x50>
  806e48:	1805883a 	mov	r2,r3
  806e4c:	dfc00217 	ldw	ra,8(sp)
  806e50:	dc400117 	ldw	r17,4(sp)
  806e54:	dc000017 	ldw	r16,0(sp)
  806e58:	dec00304 	addi	sp,sp,12
  806e5c:	f800283a 	ret
  806e60:	80800017 	ldw	r2,0(r16)
  806e64:	103ff826 	beq	r2,zero,806e48 <_fstat_r+0x38>
  806e68:	88800015 	stw	r2,0(r17)
  806e6c:	1805883a 	mov	r2,r3
  806e70:	dfc00217 	ldw	ra,8(sp)
  806e74:	dc400117 	ldw	r17,4(sp)
  806e78:	dc000017 	ldw	r16,0(sp)
  806e7c:	dec00304 	addi	sp,sp,12
  806e80:	f800283a 	ret

00806e84 <_isatty_r>:
  806e84:	defffd04 	addi	sp,sp,-12
  806e88:	dc000015 	stw	r16,0(sp)
  806e8c:	04002074 	movhi	r16,129
  806e90:	841f9804 	addi	r16,r16,32352
  806e94:	dc400115 	stw	r17,4(sp)
  806e98:	80000015 	stw	zero,0(r16)
  806e9c:	2023883a 	mov	r17,r4
  806ea0:	2809883a 	mov	r4,r5
  806ea4:	dfc00215 	stw	ra,8(sp)
  806ea8:	080756c0 	call	80756c <isatty>
  806eac:	1007883a 	mov	r3,r2
  806eb0:	00bfffc4 	movi	r2,-1
  806eb4:	18800626 	beq	r3,r2,806ed0 <_isatty_r+0x4c>
  806eb8:	1805883a 	mov	r2,r3
  806ebc:	dfc00217 	ldw	ra,8(sp)
  806ec0:	dc400117 	ldw	r17,4(sp)
  806ec4:	dc000017 	ldw	r16,0(sp)
  806ec8:	dec00304 	addi	sp,sp,12
  806ecc:	f800283a 	ret
  806ed0:	80800017 	ldw	r2,0(r16)
  806ed4:	103ff826 	beq	r2,zero,806eb8 <_isatty_r+0x34>
  806ed8:	88800015 	stw	r2,0(r17)
  806edc:	1805883a 	mov	r2,r3
  806ee0:	dfc00217 	ldw	ra,8(sp)
  806ee4:	dc400117 	ldw	r17,4(sp)
  806ee8:	dc000017 	ldw	r16,0(sp)
  806eec:	dec00304 	addi	sp,sp,12
  806ef0:	f800283a 	ret

00806ef4 <_lseek_r>:
  806ef4:	defffd04 	addi	sp,sp,-12
  806ef8:	dc000015 	stw	r16,0(sp)
  806efc:	04002074 	movhi	r16,129
  806f00:	841f9804 	addi	r16,r16,32352
  806f04:	dc400115 	stw	r17,4(sp)
  806f08:	80000015 	stw	zero,0(r16)
  806f0c:	2023883a 	mov	r17,r4
  806f10:	2809883a 	mov	r4,r5
  806f14:	300b883a 	mov	r5,r6
  806f18:	380d883a 	mov	r6,r7
  806f1c:	dfc00215 	stw	ra,8(sp)
  806f20:	08077780 	call	807778 <lseek>
  806f24:	1007883a 	mov	r3,r2
  806f28:	00bfffc4 	movi	r2,-1
  806f2c:	18800626 	beq	r3,r2,806f48 <_lseek_r+0x54>
  806f30:	1805883a 	mov	r2,r3
  806f34:	dfc00217 	ldw	ra,8(sp)
  806f38:	dc400117 	ldw	r17,4(sp)
  806f3c:	dc000017 	ldw	r16,0(sp)
  806f40:	dec00304 	addi	sp,sp,12
  806f44:	f800283a 	ret
  806f48:	80800017 	ldw	r2,0(r16)
  806f4c:	103ff826 	beq	r2,zero,806f30 <_lseek_r+0x3c>
  806f50:	88800015 	stw	r2,0(r17)
  806f54:	1805883a 	mov	r2,r3
  806f58:	dfc00217 	ldw	ra,8(sp)
  806f5c:	dc400117 	ldw	r17,4(sp)
  806f60:	dc000017 	ldw	r16,0(sp)
  806f64:	dec00304 	addi	sp,sp,12
  806f68:	f800283a 	ret

00806f6c <_read_r>:
  806f6c:	defffd04 	addi	sp,sp,-12
  806f70:	dc000015 	stw	r16,0(sp)
  806f74:	04002074 	movhi	r16,129
  806f78:	841f9804 	addi	r16,r16,32352
  806f7c:	dc400115 	stw	r17,4(sp)
  806f80:	80000015 	stw	zero,0(r16)
  806f84:	2023883a 	mov	r17,r4
  806f88:	2809883a 	mov	r4,r5
  806f8c:	300b883a 	mov	r5,r6
  806f90:	380d883a 	mov	r6,r7
  806f94:	dfc00215 	stw	ra,8(sp)
  806f98:	08079900 	call	807990 <read>
  806f9c:	1007883a 	mov	r3,r2
  806fa0:	00bfffc4 	movi	r2,-1
  806fa4:	18800626 	beq	r3,r2,806fc0 <_read_r+0x54>
  806fa8:	1805883a 	mov	r2,r3
  806fac:	dfc00217 	ldw	ra,8(sp)
  806fb0:	dc400117 	ldw	r17,4(sp)
  806fb4:	dc000017 	ldw	r16,0(sp)
  806fb8:	dec00304 	addi	sp,sp,12
  806fbc:	f800283a 	ret
  806fc0:	80800017 	ldw	r2,0(r16)
  806fc4:	103ff826 	beq	r2,zero,806fa8 <_read_r+0x3c>
  806fc8:	88800015 	stw	r2,0(r17)
  806fcc:	1805883a 	mov	r2,r3
  806fd0:	dfc00217 	ldw	ra,8(sp)
  806fd4:	dc400117 	ldw	r17,4(sp)
  806fd8:	dc000017 	ldw	r16,0(sp)
  806fdc:	dec00304 	addi	sp,sp,12
  806fe0:	f800283a 	ret

00806fe4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  806fe4:	defff804 	addi	sp,sp,-32
  806fe8:	dfc00715 	stw	ra,28(sp)
  806fec:	df000615 	stw	fp,24(sp)
  806ff0:	df000604 	addi	fp,sp,24
  806ff4:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  806ff8:	e0bffc17 	ldw	r2,-16(fp)
  806ffc:	1004803a 	cmplt	r2,r2,zero
  807000:	1000081e 	bne	r2,zero,807024 <close+0x40>
  807004:	e0bffc17 	ldw	r2,-16(fp)
  807008:	10800324 	muli	r2,r2,12
  80700c:	1007883a 	mov	r3,r2
  807010:	00802074 	movhi	r2,129
  807014:	1093ee04 	addi	r2,r2,20408
  807018:	1887883a 	add	r3,r3,r2
  80701c:	e0ffff15 	stw	r3,-4(fp)
  807020:	00000106 	br	807028 <close+0x44>
  807024:	e03fff15 	stw	zero,-4(fp)
  807028:	e0bfff17 	ldw	r2,-4(fp)
  80702c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  807030:	e0bffb17 	ldw	r2,-20(fp)
  807034:	1005003a 	cmpeq	r2,r2,zero
  807038:	10001d1e 	bne	r2,zero,8070b0 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80703c:	e0bffb17 	ldw	r2,-20(fp)
  807040:	10800017 	ldw	r2,0(r2)
  807044:	10800417 	ldw	r2,16(r2)
  807048:	1005003a 	cmpeq	r2,r2,zero
  80704c:	1000071e 	bne	r2,zero,80706c <close+0x88>
  807050:	e0bffb17 	ldw	r2,-20(fp)
  807054:	10800017 	ldw	r2,0(r2)
  807058:	10800417 	ldw	r2,16(r2)
  80705c:	e13ffb17 	ldw	r4,-20(fp)
  807060:	103ee83a 	callr	r2
  807064:	e0bffe15 	stw	r2,-8(fp)
  807068:	00000106 	br	807070 <close+0x8c>
  80706c:	e03ffe15 	stw	zero,-8(fp)
  807070:	e0bffe17 	ldw	r2,-8(fp)
  807074:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  807078:	e13ffc17 	ldw	r4,-16(fp)
  80707c:	0807b100 	call	807b10 <alt_release_fd>
    if (rval < 0)
  807080:	e0bffa17 	ldw	r2,-24(fp)
  807084:	1004403a 	cmpge	r2,r2,zero
  807088:	1000071e 	bne	r2,zero,8070a8 <close+0xc4>
    {
      ALT_ERRNO = -rval;
  80708c:	08070e00 	call	8070e0 <alt_get_errno>
  807090:	e0fffa17 	ldw	r3,-24(fp)
  807094:	00c7c83a 	sub	r3,zero,r3
  807098:	10c00015 	stw	r3,0(r2)
      return -1;
  80709c:	00bfffc4 	movi	r2,-1
  8070a0:	e0bffd15 	stw	r2,-12(fp)
  8070a4:	00000806 	br	8070c8 <close+0xe4>
    }
    return 0;
  8070a8:	e03ffd15 	stw	zero,-12(fp)
  8070ac:	00000606 	br	8070c8 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8070b0:	08070e00 	call	8070e0 <alt_get_errno>
  8070b4:	1007883a 	mov	r3,r2
  8070b8:	00801444 	movi	r2,81
  8070bc:	18800015 	stw	r2,0(r3)
    return -1;
  8070c0:	00bfffc4 	movi	r2,-1
  8070c4:	e0bffd15 	stw	r2,-12(fp)
  8070c8:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  8070cc:	e037883a 	mov	sp,fp
  8070d0:	dfc00117 	ldw	ra,4(sp)
  8070d4:	df000017 	ldw	fp,0(sp)
  8070d8:	dec00204 	addi	sp,sp,8
  8070dc:	f800283a 	ret

008070e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8070e0:	defffd04 	addi	sp,sp,-12
  8070e4:	dfc00215 	stw	ra,8(sp)
  8070e8:	df000115 	stw	fp,4(sp)
  8070ec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8070f0:	00802074 	movhi	r2,129
  8070f4:	10989604 	addi	r2,r2,25176
  8070f8:	10800017 	ldw	r2,0(r2)
  8070fc:	1005003a 	cmpeq	r2,r2,zero
  807100:	1000061e 	bne	r2,zero,80711c <alt_get_errno+0x3c>
  807104:	00802074 	movhi	r2,129
  807108:	10989604 	addi	r2,r2,25176
  80710c:	10800017 	ldw	r2,0(r2)
  807110:	103ee83a 	callr	r2
  807114:	e0bfff15 	stw	r2,-4(fp)
  807118:	00000306 	br	807128 <alt_get_errno+0x48>
  80711c:	00802074 	movhi	r2,129
  807120:	109f9804 	addi	r2,r2,32352
  807124:	e0bfff15 	stw	r2,-4(fp)
  807128:	e0bfff17 	ldw	r2,-4(fp)
}
  80712c:	e037883a 	mov	sp,fp
  807130:	dfc00117 	ldw	ra,4(sp)
  807134:	df000017 	ldw	fp,0(sp)
  807138:	dec00204 	addi	sp,sp,8
  80713c:	f800283a 	ret

00807140 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  807140:	defffc04 	addi	sp,sp,-16
  807144:	df000315 	stw	fp,12(sp)
  807148:	df000304 	addi	fp,sp,12
  80714c:	e13ffd15 	stw	r4,-12(fp)
  807150:	e17ffe15 	stw	r5,-8(fp)
  807154:	e1bfff15 	stw	r6,-4(fp)
  return len;
  807158:	e0bfff17 	ldw	r2,-4(fp)
}
  80715c:	e037883a 	mov	sp,fp
  807160:	df000017 	ldw	fp,0(sp)
  807164:	dec00104 	addi	sp,sp,4
  807168:	f800283a 	ret

0080716c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80716c:	defff904 	addi	sp,sp,-28
  807170:	dfc00615 	stw	ra,24(sp)
  807174:	df000515 	stw	fp,20(sp)
  807178:	df000504 	addi	fp,sp,20
  80717c:	e13ffc15 	stw	r4,-16(fp)
  807180:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  807184:	e0bffc17 	ldw	r2,-16(fp)
  807188:	1004803a 	cmplt	r2,r2,zero
  80718c:	1000081e 	bne	r2,zero,8071b0 <fstat+0x44>
  807190:	e0bffc17 	ldw	r2,-16(fp)
  807194:	10800324 	muli	r2,r2,12
  807198:	1007883a 	mov	r3,r2
  80719c:	00802074 	movhi	r2,129
  8071a0:	1093ee04 	addi	r2,r2,20408
  8071a4:	1887883a 	add	r3,r3,r2
  8071a8:	e0ffff15 	stw	r3,-4(fp)
  8071ac:	00000106 	br	8071b4 <fstat+0x48>
  8071b0:	e03fff15 	stw	zero,-4(fp)
  8071b4:	e0bfff17 	ldw	r2,-4(fp)
  8071b8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  8071bc:	e0bffb17 	ldw	r2,-20(fp)
  8071c0:	1005003a 	cmpeq	r2,r2,zero
  8071c4:	1000121e 	bne	r2,zero,807210 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  8071c8:	e0bffb17 	ldw	r2,-20(fp)
  8071cc:	10800017 	ldw	r2,0(r2)
  8071d0:	10800817 	ldw	r2,32(r2)
  8071d4:	1005003a 	cmpeq	r2,r2,zero
  8071d8:	1000081e 	bne	r2,zero,8071fc <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  8071dc:	e0bffb17 	ldw	r2,-20(fp)
  8071e0:	10800017 	ldw	r2,0(r2)
  8071e4:	10800817 	ldw	r2,32(r2)
  8071e8:	e13ffb17 	ldw	r4,-20(fp)
  8071ec:	e17ffd17 	ldw	r5,-12(fp)
  8071f0:	103ee83a 	callr	r2
  8071f4:	e0bffe15 	stw	r2,-8(fp)
  8071f8:	00000b06 	br	807228 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  8071fc:	e0fffd17 	ldw	r3,-12(fp)
  807200:	00880004 	movi	r2,8192
  807204:	18800115 	stw	r2,4(r3)
      return 0;
  807208:	e03ffe15 	stw	zero,-8(fp)
  80720c:	00000606 	br	807228 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  807210:	08072400 	call	807240 <alt_get_errno>
  807214:	1007883a 	mov	r3,r2
  807218:	00801444 	movi	r2,81
  80721c:	18800015 	stw	r2,0(r3)
    return -1;
  807220:	00bfffc4 	movi	r2,-1
  807224:	e0bffe15 	stw	r2,-8(fp)
  807228:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80722c:	e037883a 	mov	sp,fp
  807230:	dfc00117 	ldw	ra,4(sp)
  807234:	df000017 	ldw	fp,0(sp)
  807238:	dec00204 	addi	sp,sp,8
  80723c:	f800283a 	ret

00807240 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  807240:	defffd04 	addi	sp,sp,-12
  807244:	dfc00215 	stw	ra,8(sp)
  807248:	df000115 	stw	fp,4(sp)
  80724c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  807250:	00802074 	movhi	r2,129
  807254:	10989604 	addi	r2,r2,25176
  807258:	10800017 	ldw	r2,0(r2)
  80725c:	1005003a 	cmpeq	r2,r2,zero
  807260:	1000061e 	bne	r2,zero,80727c <alt_get_errno+0x3c>
  807264:	00802074 	movhi	r2,129
  807268:	10989604 	addi	r2,r2,25176
  80726c:	10800017 	ldw	r2,0(r2)
  807270:	103ee83a 	callr	r2
  807274:	e0bfff15 	stw	r2,-4(fp)
  807278:	00000306 	br	807288 <alt_get_errno+0x48>
  80727c:	00802074 	movhi	r2,129
  807280:	109f9804 	addi	r2,r2,32352
  807284:	e0bfff15 	stw	r2,-4(fp)
  807288:	e0bfff17 	ldw	r2,-4(fp)
}
  80728c:	e037883a 	mov	sp,fp
  807290:	dfc00117 	ldw	ra,4(sp)
  807294:	df000017 	ldw	fp,0(sp)
  807298:	dec00204 	addi	sp,sp,8
  80729c:	f800283a 	ret

008072a0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8072a0:	defff904 	addi	sp,sp,-28
  8072a4:	dfc00615 	stw	ra,24(sp)
  8072a8:	df000515 	stw	fp,20(sp)
  8072ac:	df000504 	addi	fp,sp,20
  8072b0:	e13ffc15 	stw	r4,-16(fp)
  8072b4:	e17ffd15 	stw	r5,-12(fp)
  8072b8:	e1bffe15 	stw	r6,-8(fp)
  8072bc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  8072c0:	e0800217 	ldw	r2,8(fp)
  8072c4:	d8800015 	stw	r2,0(sp)
  8072c8:	e13ffc17 	ldw	r4,-16(fp)
  8072cc:	e17ffd17 	ldw	r5,-12(fp)
  8072d0:	e1bffe17 	ldw	r6,-8(fp)
  8072d4:	e1ffff17 	ldw	r7,-4(fp)
  8072d8:	08074740 	call	807474 <alt_iic_isr_register>
}  
  8072dc:	e037883a 	mov	sp,fp
  8072e0:	dfc00117 	ldw	ra,4(sp)
  8072e4:	df000017 	ldw	fp,0(sp)
  8072e8:	dec00204 	addi	sp,sp,8
  8072ec:	f800283a 	ret

008072f0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  8072f0:	defff904 	addi	sp,sp,-28
  8072f4:	df000615 	stw	fp,24(sp)
  8072f8:	df000604 	addi	fp,sp,24
  8072fc:	e13ffe15 	stw	r4,-8(fp)
  807300:	e17fff15 	stw	r5,-4(fp)
  807304:	e0bfff17 	ldw	r2,-4(fp)
  807308:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80730c:	0005303a 	rdctl	r2,status
  807310:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807314:	e0fffb17 	ldw	r3,-20(fp)
  807318:	00bfff84 	movi	r2,-2
  80731c:	1884703a 	and	r2,r3,r2
  807320:	1001703a 	wrctl	status,r2
  
  return context;
  807324:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  807328:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  80732c:	e0fffc17 	ldw	r3,-16(fp)
  807330:	00800044 	movi	r2,1
  807334:	10c4983a 	sll	r2,r2,r3
  807338:	1007883a 	mov	r3,r2
  80733c:	00802074 	movhi	r2,129
  807340:	109f9a04 	addi	r2,r2,32360
  807344:	10800017 	ldw	r2,0(r2)
  807348:	1886b03a 	or	r3,r3,r2
  80734c:	00802074 	movhi	r2,129
  807350:	109f9a04 	addi	r2,r2,32360
  807354:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  807358:	00802074 	movhi	r2,129
  80735c:	109f9a04 	addi	r2,r2,32360
  807360:	10800017 	ldw	r2,0(r2)
  807364:	100170fa 	wrctl	ienable,r2
  807368:	e0bffd17 	ldw	r2,-12(fp)
  80736c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807370:	e0bffa17 	ldw	r2,-24(fp)
  807374:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  807378:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  80737c:	e037883a 	mov	sp,fp
  807380:	df000017 	ldw	fp,0(sp)
  807384:	dec00104 	addi	sp,sp,4
  807388:	f800283a 	ret

0080738c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  80738c:	defff904 	addi	sp,sp,-28
  807390:	df000615 	stw	fp,24(sp)
  807394:	df000604 	addi	fp,sp,24
  807398:	e13ffe15 	stw	r4,-8(fp)
  80739c:	e17fff15 	stw	r5,-4(fp)
  8073a0:	e0bfff17 	ldw	r2,-4(fp)
  8073a4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8073a8:	0005303a 	rdctl	r2,status
  8073ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8073b0:	e0fffb17 	ldw	r3,-20(fp)
  8073b4:	00bfff84 	movi	r2,-2
  8073b8:	1884703a 	and	r2,r3,r2
  8073bc:	1001703a 	wrctl	status,r2
  
  return context;
  8073c0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8073c4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  8073c8:	e0fffc17 	ldw	r3,-16(fp)
  8073cc:	00800044 	movi	r2,1
  8073d0:	10c4983a 	sll	r2,r2,r3
  8073d4:	0084303a 	nor	r2,zero,r2
  8073d8:	1007883a 	mov	r3,r2
  8073dc:	00802074 	movhi	r2,129
  8073e0:	109f9a04 	addi	r2,r2,32360
  8073e4:	10800017 	ldw	r2,0(r2)
  8073e8:	1886703a 	and	r3,r3,r2
  8073ec:	00802074 	movhi	r2,129
  8073f0:	109f9a04 	addi	r2,r2,32360
  8073f4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8073f8:	00802074 	movhi	r2,129
  8073fc:	109f9a04 	addi	r2,r2,32360
  807400:	10800017 	ldw	r2,0(r2)
  807404:	100170fa 	wrctl	ienable,r2
  807408:	e0bffd17 	ldw	r2,-12(fp)
  80740c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807410:	e0bffa17 	ldw	r2,-24(fp)
  807414:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  807418:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  80741c:	e037883a 	mov	sp,fp
  807420:	df000017 	ldw	fp,0(sp)
  807424:	dec00104 	addi	sp,sp,4
  807428:	f800283a 	ret

0080742c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  80742c:	defffc04 	addi	sp,sp,-16
  807430:	df000315 	stw	fp,12(sp)
  807434:	df000304 	addi	fp,sp,12
  807438:	e13ffe15 	stw	r4,-8(fp)
  80743c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  807440:	000530fa 	rdctl	r2,ienable
  807444:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  807448:	e0ffff17 	ldw	r3,-4(fp)
  80744c:	00800044 	movi	r2,1
  807450:	10c4983a 	sll	r2,r2,r3
  807454:	1007883a 	mov	r3,r2
  807458:	e0bffd17 	ldw	r2,-12(fp)
  80745c:	1884703a 	and	r2,r3,r2
  807460:	1004c03a 	cmpne	r2,r2,zero
}
  807464:	e037883a 	mov	sp,fp
  807468:	df000017 	ldw	fp,0(sp)
  80746c:	dec00104 	addi	sp,sp,4
  807470:	f800283a 	ret

00807474 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  807474:	defff404 	addi	sp,sp,-48
  807478:	dfc00b15 	stw	ra,44(sp)
  80747c:	df000a15 	stw	fp,40(sp)
  807480:	df000a04 	addi	fp,sp,40
  807484:	e13ffb15 	stw	r4,-20(fp)
  807488:	e17ffc15 	stw	r5,-16(fp)
  80748c:	e1bffd15 	stw	r6,-12(fp)
  807490:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  807494:	00bffa84 	movi	r2,-22
  807498:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  80749c:	e0bffc17 	ldw	r2,-16(fp)
  8074a0:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  8074a4:	e0bff917 	ldw	r2,-28(fp)
  8074a8:	10800808 	cmpgei	r2,r2,32
  8074ac:	1000291e 	bne	r2,zero,807554 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8074b0:	0005303a 	rdctl	r2,status
  8074b4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8074b8:	e0fff717 	ldw	r3,-36(fp)
  8074bc:	00bfff84 	movi	r2,-2
  8074c0:	1884703a 	and	r2,r3,r2
  8074c4:	1001703a 	wrctl	status,r2
  
  return context;
  8074c8:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  8074cc:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  8074d0:	e0bff917 	ldw	r2,-28(fp)
  8074d4:	00c020b4 	movhi	r3,130
  8074d8:	18efc204 	addi	r3,r3,-16632
  8074dc:	100490fa 	slli	r2,r2,3
  8074e0:	10c7883a 	add	r3,r2,r3
  8074e4:	e0bffd17 	ldw	r2,-12(fp)
  8074e8:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  8074ec:	e0bff917 	ldw	r2,-28(fp)
  8074f0:	00c020b4 	movhi	r3,130
  8074f4:	18efc204 	addi	r3,r3,-16632
  8074f8:	100490fa 	slli	r2,r2,3
  8074fc:	10c5883a 	add	r2,r2,r3
  807500:	10c00104 	addi	r3,r2,4
  807504:	e0bffe17 	ldw	r2,-8(fp)
  807508:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80750c:	e0bffd17 	ldw	r2,-12(fp)
  807510:	1005003a 	cmpeq	r2,r2,zero
  807514:	1000051e 	bne	r2,zero,80752c <alt_iic_isr_register+0xb8>
  807518:	e17ff917 	ldw	r5,-28(fp)
  80751c:	e13ffb17 	ldw	r4,-20(fp)
  807520:	08072f00 	call	8072f0 <alt_ic_irq_enable>
  807524:	e0bfff15 	stw	r2,-4(fp)
  807528:	00000406 	br	80753c <alt_iic_isr_register+0xc8>
  80752c:	e17ff917 	ldw	r5,-28(fp)
  807530:	e13ffb17 	ldw	r4,-20(fp)
  807534:	080738c0 	call	80738c <alt_ic_irq_disable>
  807538:	e0bfff15 	stw	r2,-4(fp)
  80753c:	e0bfff17 	ldw	r2,-4(fp)
  807540:	e0bffa15 	stw	r2,-24(fp)
  807544:	e0bff817 	ldw	r2,-32(fp)
  807548:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80754c:	e0bff617 	ldw	r2,-40(fp)
  807550:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  807554:	e0bffa17 	ldw	r2,-24(fp)
}
  807558:	e037883a 	mov	sp,fp
  80755c:	dfc00117 	ldw	ra,4(sp)
  807560:	df000017 	ldw	fp,0(sp)
  807564:	dec00204 	addi	sp,sp,8
  807568:	f800283a 	ret

0080756c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80756c:	deffeb04 	addi	sp,sp,-84
  807570:	dfc01415 	stw	ra,80(sp)
  807574:	df001315 	stw	fp,76(sp)
  807578:	df001304 	addi	fp,sp,76
  80757c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  807580:	e0bffd17 	ldw	r2,-12(fp)
  807584:	1004803a 	cmplt	r2,r2,zero
  807588:	1000081e 	bne	r2,zero,8075ac <isatty+0x40>
  80758c:	e0bffd17 	ldw	r2,-12(fp)
  807590:	10800324 	muli	r2,r2,12
  807594:	1007883a 	mov	r3,r2
  807598:	00802074 	movhi	r2,129
  80759c:	1093ee04 	addi	r2,r2,20408
  8075a0:	1887883a 	add	r3,r3,r2
  8075a4:	e0ffff15 	stw	r3,-4(fp)
  8075a8:	00000106 	br	8075b0 <isatty+0x44>
  8075ac:	e03fff15 	stw	zero,-4(fp)
  8075b0:	e0bfff17 	ldw	r2,-4(fp)
  8075b4:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  8075b8:	e0bfed17 	ldw	r2,-76(fp)
  8075bc:	1005003a 	cmpeq	r2,r2,zero
  8075c0:	10000f1e 	bne	r2,zero,807600 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  8075c4:	e0bfed17 	ldw	r2,-76(fp)
  8075c8:	10800017 	ldw	r2,0(r2)
  8075cc:	10800817 	ldw	r2,32(r2)
  8075d0:	1004c03a 	cmpne	r2,r2,zero
  8075d4:	1000031e 	bne	r2,zero,8075e4 <isatty+0x78>
    {
      return 1;
  8075d8:	00800044 	movi	r2,1
  8075dc:	e0bffe15 	stw	r2,-8(fp)
  8075e0:	00000c06 	br	807614 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  8075e4:	e17fee04 	addi	r5,fp,-72
  8075e8:	e13ffd17 	ldw	r4,-12(fp)
  8075ec:	080716c0 	call	80716c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  8075f0:	e0bfef17 	ldw	r2,-68(fp)
  8075f4:	10880020 	cmpeqi	r2,r2,8192
  8075f8:	e0bffe15 	stw	r2,-8(fp)
  8075fc:	00000506 	br	807614 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  807600:	080762c0 	call	80762c <alt_get_errno>
  807604:	1007883a 	mov	r3,r2
  807608:	00801444 	movi	r2,81
  80760c:	18800015 	stw	r2,0(r3)
    return 0;
  807610:	e03ffe15 	stw	zero,-8(fp)
  807614:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  807618:	e037883a 	mov	sp,fp
  80761c:	dfc00117 	ldw	ra,4(sp)
  807620:	df000017 	ldw	fp,0(sp)
  807624:	dec00204 	addi	sp,sp,8
  807628:	f800283a 	ret

0080762c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80762c:	defffd04 	addi	sp,sp,-12
  807630:	dfc00215 	stw	ra,8(sp)
  807634:	df000115 	stw	fp,4(sp)
  807638:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80763c:	00802074 	movhi	r2,129
  807640:	10989604 	addi	r2,r2,25176
  807644:	10800017 	ldw	r2,0(r2)
  807648:	1005003a 	cmpeq	r2,r2,zero
  80764c:	1000061e 	bne	r2,zero,807668 <alt_get_errno+0x3c>
  807650:	00802074 	movhi	r2,129
  807654:	10989604 	addi	r2,r2,25176
  807658:	10800017 	ldw	r2,0(r2)
  80765c:	103ee83a 	callr	r2
  807660:	e0bfff15 	stw	r2,-4(fp)
  807664:	00000306 	br	807674 <alt_get_errno+0x48>
  807668:	00802074 	movhi	r2,129
  80766c:	109f9804 	addi	r2,r2,32352
  807670:	e0bfff15 	stw	r2,-4(fp)
  807674:	e0bfff17 	ldw	r2,-4(fp)
}
  807678:	e037883a 	mov	sp,fp
  80767c:	dfc00117 	ldw	ra,4(sp)
  807680:	df000017 	ldw	fp,0(sp)
  807684:	dec00204 	addi	sp,sp,8
  807688:	f800283a 	ret

0080768c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80768c:	defffe04 	addi	sp,sp,-8
  807690:	dfc00115 	stw	ra,4(sp)
  807694:	df000015 	stw	fp,0(sp)
  807698:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80769c:	01002074 	movhi	r4,129
  8076a0:	2118ba04 	addi	r4,r4,25320
  8076a4:	01402074 	movhi	r5,129
  8076a8:	2951e204 	addi	r5,r5,18312
  8076ac:	01802074 	movhi	r6,129
  8076b0:	3198ba04 	addi	r6,r6,25320
  8076b4:	080770c0 	call	80770c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  8076b8:	01002034 	movhi	r4,128
  8076bc:	21000004 	addi	r4,r4,0
  8076c0:	01404434 	movhi	r5,272
  8076c4:	29500804 	addi	r5,r5,16416
  8076c8:	01804434 	movhi	r6,272
  8076cc:	31906f04 	addi	r6,r6,16828
  8076d0:	080770c0 	call	80770c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  8076d4:	01002074 	movhi	r4,129
  8076d8:	2110f004 	addi	r4,r4,17344
  8076dc:	01402074 	movhi	r5,129
  8076e0:	2950f004 	addi	r5,r5,17344
  8076e4:	01802074 	movhi	r6,129
  8076e8:	3191e204 	addi	r6,r6,18312
  8076ec:	080770c0 	call	80770c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  8076f0:	0812e240 	call	812e24 <alt_dcache_flush_all>
  alt_icache_flush_all();
  8076f4:	08130d80 	call	8130d8 <alt_icache_flush_all>
}
  8076f8:	e037883a 	mov	sp,fp
  8076fc:	dfc00117 	ldw	ra,4(sp)
  807700:	df000017 	ldw	fp,0(sp)
  807704:	dec00204 	addi	sp,sp,8
  807708:	f800283a 	ret

0080770c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80770c:	defffc04 	addi	sp,sp,-16
  807710:	df000315 	stw	fp,12(sp)
  807714:	df000304 	addi	fp,sp,12
  807718:	e13ffd15 	stw	r4,-12(fp)
  80771c:	e17ffe15 	stw	r5,-8(fp)
  807720:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  807724:	e0fffe17 	ldw	r3,-8(fp)
  807728:	e0bffd17 	ldw	r2,-12(fp)
  80772c:	18800e26 	beq	r3,r2,807768 <alt_load_section+0x5c>
  {
    while( to != end )
  807730:	00000a06 	br	80775c <alt_load_section+0x50>
    {
      *to++ = *from++;
  807734:	e0bffd17 	ldw	r2,-12(fp)
  807738:	10c00017 	ldw	r3,0(r2)
  80773c:	e0bffe17 	ldw	r2,-8(fp)
  807740:	10c00015 	stw	r3,0(r2)
  807744:	e0bffe17 	ldw	r2,-8(fp)
  807748:	10800104 	addi	r2,r2,4
  80774c:	e0bffe15 	stw	r2,-8(fp)
  807750:	e0bffd17 	ldw	r2,-12(fp)
  807754:	10800104 	addi	r2,r2,4
  807758:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80775c:	e0fffe17 	ldw	r3,-8(fp)
  807760:	e0bfff17 	ldw	r2,-4(fp)
  807764:	18bff31e 	bne	r3,r2,807734 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  807768:	e037883a 	mov	sp,fp
  80776c:	df000017 	ldw	fp,0(sp)
  807770:	dec00104 	addi	sp,sp,4
  807774:	f800283a 	ret

00807778 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  807778:	defff804 	addi	sp,sp,-32
  80777c:	dfc00715 	stw	ra,28(sp)
  807780:	df000615 	stw	fp,24(sp)
  807784:	df000604 	addi	fp,sp,24
  807788:	e13ffc15 	stw	r4,-16(fp)
  80778c:	e17ffd15 	stw	r5,-12(fp)
  807790:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  807794:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  807798:	e0bffc17 	ldw	r2,-16(fp)
  80779c:	1004803a 	cmplt	r2,r2,zero
  8077a0:	1000081e 	bne	r2,zero,8077c4 <lseek+0x4c>
  8077a4:	e0bffc17 	ldw	r2,-16(fp)
  8077a8:	10800324 	muli	r2,r2,12
  8077ac:	1007883a 	mov	r3,r2
  8077b0:	00802074 	movhi	r2,129
  8077b4:	1093ee04 	addi	r2,r2,20408
  8077b8:	1887883a 	add	r3,r3,r2
  8077bc:	e0ffff15 	stw	r3,-4(fp)
  8077c0:	00000106 	br	8077c8 <lseek+0x50>
  8077c4:	e03fff15 	stw	zero,-4(fp)
  8077c8:	e0bfff17 	ldw	r2,-4(fp)
  8077cc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  8077d0:	e0bffb17 	ldw	r2,-20(fp)
  8077d4:	1005003a 	cmpeq	r2,r2,zero
  8077d8:	1000111e 	bne	r2,zero,807820 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  8077dc:	e0bffb17 	ldw	r2,-20(fp)
  8077e0:	10800017 	ldw	r2,0(r2)
  8077e4:	10800717 	ldw	r2,28(r2)
  8077e8:	1005003a 	cmpeq	r2,r2,zero
  8077ec:	1000091e 	bne	r2,zero,807814 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  8077f0:	e0bffb17 	ldw	r2,-20(fp)
  8077f4:	10800017 	ldw	r2,0(r2)
  8077f8:	10800717 	ldw	r2,28(r2)
  8077fc:	e13ffb17 	ldw	r4,-20(fp)
  807800:	e17ffd17 	ldw	r5,-12(fp)
  807804:	e1bffe17 	ldw	r6,-8(fp)
  807808:	103ee83a 	callr	r2
  80780c:	e0bffa15 	stw	r2,-24(fp)
  807810:	00000506 	br	807828 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  807814:	00bfde84 	movi	r2,-134
  807818:	e0bffa15 	stw	r2,-24(fp)
  80781c:	00000206 	br	807828 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  807820:	00bfebc4 	movi	r2,-81
  807824:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  807828:	e0bffa17 	ldw	r2,-24(fp)
  80782c:	1004403a 	cmpge	r2,r2,zero
  807830:	1000071e 	bne	r2,zero,807850 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  807834:	08078680 	call	807868 <alt_get_errno>
  807838:	1007883a 	mov	r3,r2
  80783c:	e0bffa17 	ldw	r2,-24(fp)
  807840:	0085c83a 	sub	r2,zero,r2
  807844:	18800015 	stw	r2,0(r3)
    rc = -1;
  807848:	00bfffc4 	movi	r2,-1
  80784c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  807850:	e0bffa17 	ldw	r2,-24(fp)
}
  807854:	e037883a 	mov	sp,fp
  807858:	dfc00117 	ldw	ra,4(sp)
  80785c:	df000017 	ldw	fp,0(sp)
  807860:	dec00204 	addi	sp,sp,8
  807864:	f800283a 	ret

00807868 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  807868:	defffd04 	addi	sp,sp,-12
  80786c:	dfc00215 	stw	ra,8(sp)
  807870:	df000115 	stw	fp,4(sp)
  807874:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  807878:	00802074 	movhi	r2,129
  80787c:	10989604 	addi	r2,r2,25176
  807880:	10800017 	ldw	r2,0(r2)
  807884:	1005003a 	cmpeq	r2,r2,zero
  807888:	1000061e 	bne	r2,zero,8078a4 <alt_get_errno+0x3c>
  80788c:	00802074 	movhi	r2,129
  807890:	10989604 	addi	r2,r2,25176
  807894:	10800017 	ldw	r2,0(r2)
  807898:	103ee83a 	callr	r2
  80789c:	e0bfff15 	stw	r2,-4(fp)
  8078a0:	00000306 	br	8078b0 <alt_get_errno+0x48>
  8078a4:	00802074 	movhi	r2,129
  8078a8:	109f9804 	addi	r2,r2,32352
  8078ac:	e0bfff15 	stw	r2,-4(fp)
  8078b0:	e0bfff17 	ldw	r2,-4(fp)
}
  8078b4:	e037883a 	mov	sp,fp
  8078b8:	dfc00117 	ldw	ra,4(sp)
  8078bc:	df000017 	ldw	fp,0(sp)
  8078c0:	dec00204 	addi	sp,sp,8
  8078c4:	f800283a 	ret

008078c8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  8078c8:	defffb04 	addi	sp,sp,-20
  8078cc:	dfc00415 	stw	ra,16(sp)
  8078d0:	df000315 	stw	fp,12(sp)
  8078d4:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  8078d8:	0009883a 	mov	r4,zero
  8078dc:	08103580 	call	810358 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  8078e0:	08089b40 	call	8089b4 <OSInit>
  8078e4:	01000044 	movi	r4,1
  8078e8:	080d8780 	call	80d878 <OSSemCreate>
  8078ec:	1007883a 	mov	r3,r2
  8078f0:	00802074 	movhi	r2,129
  8078f4:	109f9f04 	addi	r2,r2,32380
  8078f8:	10c00015 	stw	r3,0(r2)
  8078fc:	01000044 	movi	r4,1
  807900:	080d8780 	call	80d878 <OSSemCreate>
  807904:	1007883a 	mov	r3,r2
  807908:	00802074 	movhi	r2,129
  80790c:	109fa104 	addi	r2,r2,32388
  807910:	10c00015 	stw	r3,0(r2)
  807914:	00802074 	movhi	r2,129
  807918:	109f9904 	addi	r2,r2,32356
  80791c:	e0bffd15 	stw	r2,-12(fp)
  807920:	00800044 	movi	r2,1
  807924:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  807928:	e13ffe0b 	ldhu	r4,-8(fp)
  80792c:	080d8780 	call	80d878 <OSSemCreate>
  807930:	1007883a 	mov	r3,r2
  807934:	e0bffd17 	ldw	r2,-12(fp)
  807938:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80793c:	081038c0 	call	81038c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  807940:	01002074 	movhi	r4,129
  807944:	21117d04 	addi	r4,r4,17908
  807948:	01402074 	movhi	r5,129
  80794c:	29517d04 	addi	r5,r5,17908
  807950:	01802074 	movhi	r6,129
  807954:	31917d04 	addi	r6,r6,17908
  807958:	08131cc0 	call	8131cc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80795c:	0812f7c0 	call	812f7c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  807960:	01002074 	movhi	r4,129
  807964:	210bf804 	addi	r4,r4,12256
  807968:	0813e5c0 	call	813e5c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80796c:	d1270f17 	ldw	r4,-25540(gp)
  807970:	d1671017 	ldw	r5,-25536(gp)
  807974:	d1a71117 	ldw	r6,-25532(gp)
  807978:	08008100 	call	800810 <main>
  80797c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  807980:	01000044 	movi	r4,1
  807984:	0806fe40 	call	806fe4 <close>
  exit (result);
  807988:	e13fff17 	ldw	r4,-4(fp)
  80798c:	0813e700 	call	813e70 <exit>

00807990 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  807990:	defff704 	addi	sp,sp,-36
  807994:	dfc00815 	stw	ra,32(sp)
  807998:	df000715 	stw	fp,28(sp)
  80799c:	df000704 	addi	fp,sp,28
  8079a0:	e13ffb15 	stw	r4,-20(fp)
  8079a4:	e17ffc15 	stw	r5,-16(fp)
  8079a8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8079ac:	e0bffb17 	ldw	r2,-20(fp)
  8079b0:	1004803a 	cmplt	r2,r2,zero
  8079b4:	1000081e 	bne	r2,zero,8079d8 <read+0x48>
  8079b8:	e0bffb17 	ldw	r2,-20(fp)
  8079bc:	10800324 	muli	r2,r2,12
  8079c0:	1007883a 	mov	r3,r2
  8079c4:	00802074 	movhi	r2,129
  8079c8:	1093ee04 	addi	r2,r2,20408
  8079cc:	1887883a 	add	r3,r3,r2
  8079d0:	e0ffff15 	stw	r3,-4(fp)
  8079d4:	00000106 	br	8079dc <read+0x4c>
  8079d8:	e03fff15 	stw	zero,-4(fp)
  8079dc:	e0bfff17 	ldw	r2,-4(fp)
  8079e0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  8079e4:	e0bffa17 	ldw	r2,-24(fp)
  8079e8:	1005003a 	cmpeq	r2,r2,zero
  8079ec:	1000241e 	bne	r2,zero,807a80 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  8079f0:	e0bffa17 	ldw	r2,-24(fp)
  8079f4:	10800217 	ldw	r2,8(r2)
  8079f8:	108000cc 	andi	r2,r2,3
  8079fc:	10800060 	cmpeqi	r2,r2,1
  807a00:	10001a1e 	bne	r2,zero,807a6c <read+0xdc>
  807a04:	e0bffa17 	ldw	r2,-24(fp)
  807a08:	10800017 	ldw	r2,0(r2)
  807a0c:	10800517 	ldw	r2,20(r2)
  807a10:	1005003a 	cmpeq	r2,r2,zero
  807a14:	1000151e 	bne	r2,zero,807a6c <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  807a18:	e0bffa17 	ldw	r2,-24(fp)
  807a1c:	10800017 	ldw	r2,0(r2)
  807a20:	10800517 	ldw	r2,20(r2)
  807a24:	e17ffc17 	ldw	r5,-16(fp)
  807a28:	e1bffd17 	ldw	r6,-12(fp)
  807a2c:	e13ffa17 	ldw	r4,-24(fp)
  807a30:	103ee83a 	callr	r2
  807a34:	e0bff915 	stw	r2,-28(fp)
  807a38:	e0bff917 	ldw	r2,-28(fp)
  807a3c:	1004403a 	cmpge	r2,r2,zero
  807a40:	1000071e 	bne	r2,zero,807a60 <read+0xd0>
        {
          ALT_ERRNO = -rval;
  807a44:	0807ab00 	call	807ab0 <alt_get_errno>
  807a48:	e0fff917 	ldw	r3,-28(fp)
  807a4c:	00c7c83a 	sub	r3,zero,r3
  807a50:	10c00015 	stw	r3,0(r2)
          return -1;
  807a54:	00bfffc4 	movi	r2,-1
  807a58:	e0bffe15 	stw	r2,-8(fp)
  807a5c:	00000e06 	br	807a98 <read+0x108>
        }
        return rval;
  807a60:	e0bff917 	ldw	r2,-28(fp)
  807a64:	e0bffe15 	stw	r2,-8(fp)
  807a68:	00000b06 	br	807a98 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  807a6c:	0807ab00 	call	807ab0 <alt_get_errno>
  807a70:	1007883a 	mov	r3,r2
  807a74:	00800344 	movi	r2,13
  807a78:	18800015 	stw	r2,0(r3)
  807a7c:	00000406 	br	807a90 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  807a80:	0807ab00 	call	807ab0 <alt_get_errno>
  807a84:	1007883a 	mov	r3,r2
  807a88:	00801444 	movi	r2,81
  807a8c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  807a90:	00bfffc4 	movi	r2,-1
  807a94:	e0bffe15 	stw	r2,-8(fp)
  807a98:	e0bffe17 	ldw	r2,-8(fp)
}
  807a9c:	e037883a 	mov	sp,fp
  807aa0:	dfc00117 	ldw	ra,4(sp)
  807aa4:	df000017 	ldw	fp,0(sp)
  807aa8:	dec00204 	addi	sp,sp,8
  807aac:	f800283a 	ret

00807ab0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  807ab0:	defffd04 	addi	sp,sp,-12
  807ab4:	dfc00215 	stw	ra,8(sp)
  807ab8:	df000115 	stw	fp,4(sp)
  807abc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  807ac0:	00802074 	movhi	r2,129
  807ac4:	10989604 	addi	r2,r2,25176
  807ac8:	10800017 	ldw	r2,0(r2)
  807acc:	1005003a 	cmpeq	r2,r2,zero
  807ad0:	1000061e 	bne	r2,zero,807aec <alt_get_errno+0x3c>
  807ad4:	00802074 	movhi	r2,129
  807ad8:	10989604 	addi	r2,r2,25176
  807adc:	10800017 	ldw	r2,0(r2)
  807ae0:	103ee83a 	callr	r2
  807ae4:	e0bfff15 	stw	r2,-4(fp)
  807ae8:	00000306 	br	807af8 <alt_get_errno+0x48>
  807aec:	00802074 	movhi	r2,129
  807af0:	109f9804 	addi	r2,r2,32352
  807af4:	e0bfff15 	stw	r2,-4(fp)
  807af8:	e0bfff17 	ldw	r2,-4(fp)
}
  807afc:	e037883a 	mov	sp,fp
  807b00:	dfc00117 	ldw	ra,4(sp)
  807b04:	df000017 	ldw	fp,0(sp)
  807b08:	dec00204 	addi	sp,sp,8
  807b0c:	f800283a 	ret

00807b10 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  807b10:	defffe04 	addi	sp,sp,-8
  807b14:	df000115 	stw	fp,4(sp)
  807b18:	df000104 	addi	fp,sp,4
  807b1c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  807b20:	e0bfff17 	ldw	r2,-4(fp)
  807b24:	108000d0 	cmplti	r2,r2,3
  807b28:	10000d1e 	bne	r2,zero,807b60 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  807b2c:	e0bfff17 	ldw	r2,-4(fp)
  807b30:	00c02074 	movhi	r3,129
  807b34:	18d3ee04 	addi	r3,r3,20408
  807b38:	10800324 	muli	r2,r2,12
  807b3c:	10c5883a 	add	r2,r2,r3
  807b40:	10800204 	addi	r2,r2,8
  807b44:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  807b48:	e0bfff17 	ldw	r2,-4(fp)
  807b4c:	00c02074 	movhi	r3,129
  807b50:	18d3ee04 	addi	r3,r3,20408
  807b54:	10800324 	muli	r2,r2,12
  807b58:	10c5883a 	add	r2,r2,r3
  807b5c:	10000015 	stw	zero,0(r2)
  }
}
  807b60:	e037883a 	mov	sp,fp
  807b64:	df000017 	ldw	fp,0(sp)
  807b68:	dec00104 	addi	sp,sp,4
  807b6c:	f800283a 	ret

00807b70 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  807b70:	defff804 	addi	sp,sp,-32
  807b74:	df000715 	stw	fp,28(sp)
  807b78:	df000704 	addi	fp,sp,28
  807b7c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807b80:	0005303a 	rdctl	r2,status
  807b84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807b88:	e0fffb17 	ldw	r3,-20(fp)
  807b8c:	00bfff84 	movi	r2,-2
  807b90:	1884703a 	and	r2,r3,r2
  807b94:	1001703a 	wrctl	status,r2
  
  return context;
  807b98:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  807b9c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  807ba0:	d0a00c17 	ldw	r2,-32720(gp)
  807ba4:	10c000c4 	addi	r3,r2,3
  807ba8:	00bfff04 	movi	r2,-4
  807bac:	1884703a 	and	r2,r3,r2
  807bb0:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  807bb4:	d0e00c17 	ldw	r3,-32720(gp)
  807bb8:	e0bffe17 	ldw	r2,-8(fp)
  807bbc:	1887883a 	add	r3,r3,r2
  807bc0:	00804034 	movhi	r2,256
  807bc4:	10800004 	addi	r2,r2,0
  807bc8:	10c0072e 	bgeu	r2,r3,807be8 <sbrk+0x78>
  807bcc:	e0bffd17 	ldw	r2,-12(fp)
  807bd0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807bd4:	e0bffa17 	ldw	r2,-24(fp)
  807bd8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  807bdc:	00bfffc4 	movi	r2,-1
  807be0:	e0bfff15 	stw	r2,-4(fp)
  807be4:	00000c06 	br	807c18 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  807be8:	d0a00c17 	ldw	r2,-32720(gp)
  807bec:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  807bf0:	d0e00c17 	ldw	r3,-32720(gp)
  807bf4:	e0bffe17 	ldw	r2,-8(fp)
  807bf8:	1885883a 	add	r2,r3,r2
  807bfc:	d0a00c15 	stw	r2,-32720(gp)
  807c00:	e0bffd17 	ldw	r2,-12(fp)
  807c04:	e0bff915 	stw	r2,-28(fp)
  807c08:	e0bff917 	ldw	r2,-28(fp)
  807c0c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  807c10:	e0bffc17 	ldw	r2,-16(fp)
  807c14:	e0bfff15 	stw	r2,-4(fp)
  807c18:	e0bfff17 	ldw	r2,-4(fp)
} 
  807c1c:	e037883a 	mov	sp,fp
  807c20:	df000017 	ldw	fp,0(sp)
  807c24:	dec00104 	addi	sp,sp,4
  807c28:	f800283a 	ret

00807c2c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  807c2c:	defff704 	addi	sp,sp,-36
  807c30:	dfc00815 	stw	ra,32(sp)
  807c34:	df000715 	stw	fp,28(sp)
  807c38:	df000704 	addi	fp,sp,28
  807c3c:	e13ffb15 	stw	r4,-20(fp)
  807c40:	e17ffc15 	stw	r5,-16(fp)
  807c44:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  807c48:	e0bffb17 	ldw	r2,-20(fp)
  807c4c:	1004803a 	cmplt	r2,r2,zero
  807c50:	1000081e 	bne	r2,zero,807c74 <write+0x48>
  807c54:	e0bffb17 	ldw	r2,-20(fp)
  807c58:	10800324 	muli	r2,r2,12
  807c5c:	1007883a 	mov	r3,r2
  807c60:	00802074 	movhi	r2,129
  807c64:	1093ee04 	addi	r2,r2,20408
  807c68:	1887883a 	add	r3,r3,r2
  807c6c:	e0ffff15 	stw	r3,-4(fp)
  807c70:	00000106 	br	807c78 <write+0x4c>
  807c74:	e03fff15 	stw	zero,-4(fp)
  807c78:	e0bfff17 	ldw	r2,-4(fp)
  807c7c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  807c80:	e0bffa17 	ldw	r2,-24(fp)
  807c84:	1005003a 	cmpeq	r2,r2,zero
  807c88:	1000241e 	bne	r2,zero,807d1c <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  807c8c:	e0bffa17 	ldw	r2,-24(fp)
  807c90:	10800217 	ldw	r2,8(r2)
  807c94:	108000cc 	andi	r2,r2,3
  807c98:	1005003a 	cmpeq	r2,r2,zero
  807c9c:	10001a1e 	bne	r2,zero,807d08 <write+0xdc>
  807ca0:	e0bffa17 	ldw	r2,-24(fp)
  807ca4:	10800017 	ldw	r2,0(r2)
  807ca8:	10800617 	ldw	r2,24(r2)
  807cac:	1005003a 	cmpeq	r2,r2,zero
  807cb0:	1000151e 	bne	r2,zero,807d08 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  807cb4:	e0bffa17 	ldw	r2,-24(fp)
  807cb8:	10800017 	ldw	r2,0(r2)
  807cbc:	10800617 	ldw	r2,24(r2)
  807cc0:	e17ffc17 	ldw	r5,-16(fp)
  807cc4:	e1bffd17 	ldw	r6,-12(fp)
  807cc8:	e13ffa17 	ldw	r4,-24(fp)
  807ccc:	103ee83a 	callr	r2
  807cd0:	e0bff915 	stw	r2,-28(fp)
  807cd4:	e0bff917 	ldw	r2,-28(fp)
  807cd8:	1004403a 	cmpge	r2,r2,zero
  807cdc:	1000071e 	bne	r2,zero,807cfc <write+0xd0>
      {
        ALT_ERRNO = -rval;
  807ce0:	0807d4c0 	call	807d4c <alt_get_errno>
  807ce4:	e0fff917 	ldw	r3,-28(fp)
  807ce8:	00c7c83a 	sub	r3,zero,r3
  807cec:	10c00015 	stw	r3,0(r2)
        return -1;
  807cf0:	00bfffc4 	movi	r2,-1
  807cf4:	e0bffe15 	stw	r2,-8(fp)
  807cf8:	00000e06 	br	807d34 <write+0x108>
      }
      return rval;
  807cfc:	e0bff917 	ldw	r2,-28(fp)
  807d00:	e0bffe15 	stw	r2,-8(fp)
  807d04:	00000b06 	br	807d34 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  807d08:	0807d4c0 	call	807d4c <alt_get_errno>
  807d0c:	1007883a 	mov	r3,r2
  807d10:	00800344 	movi	r2,13
  807d14:	18800015 	stw	r2,0(r3)
  807d18:	00000406 	br	807d2c <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  807d1c:	0807d4c0 	call	807d4c <alt_get_errno>
  807d20:	1007883a 	mov	r3,r2
  807d24:	00801444 	movi	r2,81
  807d28:	18800015 	stw	r2,0(r3)
  }
  return -1;
  807d2c:	00bfffc4 	movi	r2,-1
  807d30:	e0bffe15 	stw	r2,-8(fp)
  807d34:	e0bffe17 	ldw	r2,-8(fp)
}
  807d38:	e037883a 	mov	sp,fp
  807d3c:	dfc00117 	ldw	ra,4(sp)
  807d40:	df000017 	ldw	fp,0(sp)
  807d44:	dec00204 	addi	sp,sp,8
  807d48:	f800283a 	ret

00807d4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  807d4c:	defffd04 	addi	sp,sp,-12
  807d50:	dfc00215 	stw	ra,8(sp)
  807d54:	df000115 	stw	fp,4(sp)
  807d58:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  807d5c:	00802074 	movhi	r2,129
  807d60:	10989604 	addi	r2,r2,25176
  807d64:	10800017 	ldw	r2,0(r2)
  807d68:	1005003a 	cmpeq	r2,r2,zero
  807d6c:	1000061e 	bne	r2,zero,807d88 <alt_get_errno+0x3c>
  807d70:	00802074 	movhi	r2,129
  807d74:	10989604 	addi	r2,r2,25176
  807d78:	10800017 	ldw	r2,0(r2)
  807d7c:	103ee83a 	callr	r2
  807d80:	e0bfff15 	stw	r2,-4(fp)
  807d84:	00000306 	br	807d94 <alt_get_errno+0x48>
  807d88:	00802074 	movhi	r2,129
  807d8c:	109f9804 	addi	r2,r2,32352
  807d90:	e0bfff15 	stw	r2,-4(fp)
  807d94:	e0bfff17 	ldw	r2,-4(fp)
}
  807d98:	e037883a 	mov	sp,fp
  807d9c:	dfc00117 	ldw	ra,4(sp)
  807da0:	df000017 	ldw	fp,0(sp)
  807da4:	dec00204 	addi	sp,sp,8
  807da8:	f800283a 	ret

00807dac <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
  807dac:	deffdf04 	addi	sp,sp,-132
  807db0:	dfc02015 	stw	ra,128(sp)
  807db4:	df001f15 	stw	fp,124(sp)
  807db8:	df001f04 	addi	fp,sp,124
  807dbc:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  807dc0:	e17fe204 	addi	r5,fp,-120
  807dc4:	01003fc4 	movi	r4,255
  807dc8:	080fc000 	call	80fc00 <OSTaskQuery>
  807dcc:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  807dd0:	e0bffe83 	ldbu	r2,-6(fp)
  807dd4:	10803fcc 	andi	r2,r2,255
  807dd8:	1004c03a 	cmpne	r2,r2,zero
  807ddc:	1000191e 	bne	r2,zero,807e44 <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
  807de0:	e0bfee83 	ldbu	r2,-70(fp)
  807de4:	10803fcc 	andi	r2,r2,255
  807de8:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  807dec:	d1271317 	ldw	r4,-25524(gp)
  807df0:	e17ffd04 	addi	r5,fp,-12
  807df4:	080e14c0 	call	80e14c <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
  807df8:	e0bffe43 	ldbu	r2,-7(fp)
  807dfc:	10803fcc 	andi	r2,r2,255
  807e00:	1005003a 	cmpeq	r2,r2,zero
  807e04:	1000071e 	bne	r2,zero,807e24 <__env_lock+0x78>
  807e08:	d0e00d17 	ldw	r3,-32716(gp)
  807e0c:	e0bfe117 	ldw	r2,-124(fp)
  807e10:	10c0041e 	bne	r2,r3,807e24 <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
  807e14:	d0a71217 	ldw	r2,-25528(gp)
  807e18:	10800044 	addi	r2,r2,1
  807e1c:	d0a71215 	stw	r2,-25528(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
  807e20:	00000806 	br	807e44 <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
  807e24:	d1271317 	ldw	r4,-25524(gp)
  807e28:	e1bffe84 	addi	r6,fp,-6
  807e2c:	000b883a 	mov	r5,zero
  807e30:	080dc2c0 	call	80dc2c <OSSemPend>
    locks  = 1;
  807e34:	00800044 	movi	r2,1
  807e38:	d0a71215 	stw	r2,-25528(gp)
    lockid = id;
  807e3c:	e0bfe117 	ldw	r2,-124(fp)
  807e40:	d0a00d15 	stw	r2,-32716(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  807e44:	e037883a 	mov	sp,fp
  807e48:	dfc00117 	ldw	ra,4(sp)
  807e4c:	df000017 	ldw	fp,0(sp)
  807e50:	dec00204 	addi	sp,sp,8
  807e54:	f800283a 	ret

00807e58 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
  807e58:	defffd04 	addi	sp,sp,-12
  807e5c:	dfc00215 	stw	ra,8(sp)
  807e60:	df000115 	stw	fp,4(sp)
  807e64:	df000104 	addi	fp,sp,4
  807e68:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
  807e6c:	d0a71217 	ldw	r2,-25528(gp)
  807e70:	1005003a 	cmpeq	r2,r2,zero
  807e74:	10000a1e 	bne	r2,zero,807ea0 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
  807e78:	d0a71217 	ldw	r2,-25528(gp)
  807e7c:	10bfffc4 	addi	r2,r2,-1
  807e80:	d0a71215 	stw	r2,-25528(gp)
  807e84:	d0a71217 	ldw	r2,-25528(gp)
  807e88:	1004c03a 	cmpne	r2,r2,zero
  807e8c:	1000041e 	bne	r2,zero,807ea0 <__env_unlock+0x48>
  {
    lockid = -1;
  807e90:	00bfffc4 	movi	r2,-1
  807e94:	d0a00d15 	stw	r2,-32716(gp)
    OSSemPost( alt_envsem );
  807e98:	d1271317 	ldw	r4,-25524(gp)
  807e9c:	080e0240 	call	80e024 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  807ea0:	e037883a 	mov	sp,fp
  807ea4:	dfc00117 	ldw	ra,4(sp)
  807ea8:	df000017 	ldw	fp,0(sp)
  807eac:	dec00204 	addi	sp,sp,8
  807eb0:	f800283a 	ret

00807eb4 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
  807eb4:	deffdb04 	addi	sp,sp,-148
  807eb8:	dfc02415 	stw	ra,144(sp)
  807ebc:	df002315 	stw	fp,140(sp)
  807ec0:	df002304 	addi	fp,sp,140
  807ec4:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  807ec8:	e03fe015 	stw	zero,-128(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
  807ecc:	00802074 	movhi	r2,129
  807ed0:	109fa244 	addi	r2,r2,32393
  807ed4:	10800003 	ldbu	r2,0(r2)
  807ed8:	10803fcc 	andi	r2,r2,255
  807edc:	10800058 	cmpnei	r2,r2,1
  807ee0:	1000311e 	bne	r2,zero,807fa8 <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  807ee4:	e17fe204 	addi	r5,fp,-120
  807ee8:	01003fc4 	movi	r4,255
  807eec:	080fc000 	call	80fc00 <OSTaskQuery>
  807ef0:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  807ef4:	e0bffe83 	ldbu	r2,-6(fp)
  807ef8:	10803fcc 	andi	r2,r2,255
  807efc:	1004c03a 	cmpne	r2,r2,zero
  807f00:	1000291e 	bne	r2,zero,807fa8 <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
  807f04:	e0bfee83 	ldbu	r2,-70(fp)
  807f08:	10803fcc 	andi	r2,r2,255
  807f0c:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
  807f10:	d1271517 	ldw	r4,-25516(gp)
  807f14:	e17ffd04 	addi	r5,fp,-12
  807f18:	080e14c0 	call	80e14c <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807f1c:	0005303a 	rdctl	r2,status
  807f20:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807f24:	e0ffdf17 	ldw	r3,-132(fp)
  807f28:	00bfff84 	movi	r2,-2
  807f2c:	1884703a 	and	r2,r3,r2
  807f30:	1001703a 	wrctl	status,r2
  
  return context;
  807f34:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
  807f38:	e0bfe015 	stw	r2,-128(fp)

  if( !semdata.OSCnt && id == lockid ) 
  807f3c:	e0bffd0b 	ldhu	r2,-12(fp)
  807f40:	10bfffcc 	andi	r2,r2,65535
  807f44:	1004c03a 	cmpne	r2,r2,zero
  807f48:	10000b1e 	bne	r2,zero,807f78 <__malloc_lock+0xc4>
  807f4c:	d0e00e17 	ldw	r3,-32712(gp)
  807f50:	e0bfe117 	ldw	r2,-124(fp)
  807f54:	10c0081e 	bne	r2,r3,807f78 <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
  807f58:	d0a71417 	ldw	r2,-25520(gp)
  807f5c:	10800044 	addi	r2,r2,1
  807f60:	d0a71415 	stw	r2,-25520(gp)
  807f64:	e0bfe017 	ldw	r2,-128(fp)
  807f68:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807f6c:	e0bfde17 	ldw	r2,-136(fp)
  807f70:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
  807f74:	00000c06 	br	807fa8 <__malloc_lock+0xf4>
  807f78:	e0bfe017 	ldw	r2,-128(fp)
  807f7c:	e0bfdd15 	stw	r2,-140(fp)
  807f80:	e0bfdd17 	ldw	r2,-140(fp)
  807f84:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
  807f88:	d1271517 	ldw	r4,-25516(gp)
  807f8c:	e1bffe84 	addi	r6,fp,-6
  807f90:	000b883a 	mov	r5,zero
  807f94:	080dc2c0 	call	80dc2c <OSSemPend>
    locks  = 1;
  807f98:	00800044 	movi	r2,1
  807f9c:	d0a71415 	stw	r2,-25520(gp)
    lockid = id;
  807fa0:	e0bfe117 	ldw	r2,-124(fp)
  807fa4:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  807fa8:	e037883a 	mov	sp,fp
  807fac:	dfc00117 	ldw	ra,4(sp)
  807fb0:	df000017 	ldw	fp,0(sp)
  807fb4:	dec00204 	addi	sp,sp,8
  807fb8:	f800283a 	ret

00807fbc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  807fbc:	defff804 	addi	sp,sp,-32
  807fc0:	dfc00715 	stw	ra,28(sp)
  807fc4:	df000615 	stw	fp,24(sp)
  807fc8:	df000604 	addi	fp,sp,24
  807fcc:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  807fd0:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
  807fd4:	00802074 	movhi	r2,129
  807fd8:	109fa244 	addi	r2,r2,32393
  807fdc:	10800003 	ldbu	r2,0(r2)
  807fe0:	10803fcc 	andi	r2,r2,255
  807fe4:	10800058 	cmpnei	r2,r2,1
  807fe8:	1000231e 	bne	r2,zero,808078 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807fec:	0005303a 	rdctl	r2,status
  807ff0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807ff4:	e0fffd17 	ldw	r3,-12(fp)
  807ff8:	00bfff84 	movi	r2,-2
  807ffc:	1884703a 	and	r2,r3,r2
  808000:	1001703a 	wrctl	status,r2
  
  return context;
  808004:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
  808008:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
  80800c:	d0a71417 	ldw	r2,-25520(gp)
  808010:	1004c03a 	cmpne	r2,r2,zero
  808014:	1000051e 	bne	r2,zero,80802c <__malloc_unlock+0x70>
  808018:	e0bffe17 	ldw	r2,-8(fp)
  80801c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808020:	e0bffc17 	ldw	r2,-16(fp)
  808024:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
  808028:	00001306 	br	808078 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
  80802c:	d0a71417 	ldw	r2,-25520(gp)
  808030:	10bfffc4 	addi	r2,r2,-1
  808034:	d0a71415 	stw	r2,-25520(gp)
  808038:	d0a71417 	ldw	r2,-25520(gp)
  80803c:	1004c03a 	cmpne	r2,r2,zero
  808040:	1000091e 	bne	r2,zero,808068 <__malloc_unlock+0xac>
  {
    lockid = -1;
  808044:	00bfffc4 	movi	r2,-1
  808048:	d0a00e15 	stw	r2,-32712(gp)
  80804c:	e0bffe17 	ldw	r2,-8(fp)
  808050:	e0bffb15 	stw	r2,-20(fp)
  808054:	e0bffb17 	ldw	r2,-20(fp)
  808058:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
  80805c:	d1271517 	ldw	r4,-25516(gp)
  808060:	080e0240 	call	80e024 <OSSemPost>
  808064:	00000406 	br	808078 <__malloc_unlock+0xbc>
  808068:	e0bffe17 	ldw	r2,-8(fp)
  80806c:	e0bffa15 	stw	r2,-24(fp)
  808070:	e0bffa17 	ldw	r2,-24(fp)
  808074:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  808078:	e037883a 	mov	sp,fp
  80807c:	dfc00117 	ldw	ra,4(sp)
  808080:	df000017 	ldw	fp,0(sp)
  808084:	dec00204 	addi	sp,sp,8
  808088:	f800283a 	ret

0080808c <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  80808c:	defff604 	addi	sp,sp,-40
  808090:	dfc00915 	stw	ra,36(sp)
  808094:	df000815 	stw	fp,32(sp)
  808098:	df000804 	addi	fp,sp,32
  80809c:	e13ffc15 	stw	r4,-16(fp)
  8080a0:	e17ffd15 	stw	r5,-12(fp)
  8080a4:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8080a8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  8080ac:	e0bffe17 	ldw	r2,-8(fp)
  8080b0:	1004c03a 	cmpne	r2,r2,zero
  8080b4:	1000021e 	bne	r2,zero,8080c0 <OSEventNameGet+0x34>
        return (0);
  8080b8:	e03fff15 	stw	zero,-4(fp)
  8080bc:	00003906 	br	8081a4 <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  8080c0:	e0bffc17 	ldw	r2,-16(fp)
  8080c4:	1004c03a 	cmpne	r2,r2,zero
  8080c8:	1000051e 	bne	r2,zero,8080e0 <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  8080cc:	e0fffe17 	ldw	r3,-8(fp)
  8080d0:	00800104 	movi	r2,4
  8080d4:	18800005 	stb	r2,0(r3)
        return (0);
  8080d8:	e03fff15 	stw	zero,-4(fp)
  8080dc:	00003106 	br	8081a4 <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  8080e0:	e0bffd17 	ldw	r2,-12(fp)
  8080e4:	1004c03a 	cmpne	r2,r2,zero
  8080e8:	1000051e 	bne	r2,zero,808100 <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  8080ec:	e0fffe17 	ldw	r3,-8(fp)
  8080f0:	00800304 	movi	r2,12
  8080f4:	18800005 	stb	r2,0(r3)
        return (0);
  8080f8:	e03fff15 	stw	zero,-4(fp)
  8080fc:	00002906 	br	8081a4 <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  808100:	d0a72403 	ldbu	r2,-25456(gp)
  808104:	10803fcc 	andi	r2,r2,255
  808108:	1005003a 	cmpeq	r2,r2,zero
  80810c:	1000051e 	bne	r2,zero,808124 <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
  808110:	e0fffe17 	ldw	r3,-8(fp)
  808114:	00800444 	movi	r2,17
  808118:	18800005 	stb	r2,0(r3)
        return (0);
  80811c:	e03fff15 	stw	zero,-4(fp)
  808120:	00002006 	br	8081a4 <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
  808124:	e0bffc17 	ldw	r2,-16(fp)
  808128:	10800003 	ldbu	r2,0(r2)
  80812c:	10803fcc 	andi	r2,r2,255
  808130:	10bfffc4 	addi	r2,r2,-1
  808134:	10800128 	cmpgeui	r2,r2,4
  808138:	1000161e 	bne	r2,zero,808194 <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80813c:	0005303a 	rdctl	r2,status
  808140:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808144:	e0fff917 	ldw	r3,-28(fp)
  808148:	00bfff84 	movi	r2,-2
  80814c:	1884703a 	and	r2,r3,r2
  808150:	1001703a 	wrctl	status,r2
  
  return context;
  808154:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
  808158:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
  80815c:	e0bffc17 	ldw	r2,-16(fp)
  808160:	11400384 	addi	r5,r2,14
  808164:	e13ffd17 	ldw	r4,-12(fp)
  808168:	0809c100 	call	809c10 <OS_StrCopy>
  80816c:	e0bffb05 	stb	r2,-20(fp)
  808170:	e0bffa17 	ldw	r2,-24(fp)
  808174:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808178:	e0bff817 	ldw	r2,-32(fp)
  80817c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  808180:	e0bffe17 	ldw	r2,-8(fp)
  808184:	10000005 	stb	zero,0(r2)
    return (len);
  808188:	e0bffb03 	ldbu	r2,-20(fp)
  80818c:	e0bfff15 	stw	r2,-4(fp)
  808190:	00000406 	br	8081a4 <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  808194:	e0fffe17 	ldw	r3,-8(fp)
  808198:	00800044 	movi	r2,1
  80819c:	18800005 	stb	r2,0(r3)
             return (0);
  8081a0:	e03fff15 	stw	zero,-4(fp)
  8081a4:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
  8081a8:	e037883a 	mov	sp,fp
  8081ac:	dfc00117 	ldw	ra,4(sp)
  8081b0:	df000017 	ldw	fp,0(sp)
  8081b4:	dec00204 	addi	sp,sp,8
  8081b8:	f800283a 	ret

008081bc <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  8081bc:	defff604 	addi	sp,sp,-40
  8081c0:	dfc00915 	stw	ra,36(sp)
  8081c4:	df000815 	stw	fp,32(sp)
  8081c8:	df000804 	addi	fp,sp,32
  8081cc:	e13ffd15 	stw	r4,-12(fp)
  8081d0:	e17ffe15 	stw	r5,-8(fp)
  8081d4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8081d8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  8081dc:	e0bfff17 	ldw	r2,-4(fp)
  8081e0:	1005003a 	cmpeq	r2,r2,zero
  8081e4:	1000411e 	bne	r2,zero,8082ec <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  8081e8:	e0bffd17 	ldw	r2,-12(fp)
  8081ec:	1004c03a 	cmpne	r2,r2,zero
  8081f0:	1000041e 	bne	r2,zero,808204 <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
  8081f4:	e0ffff17 	ldw	r3,-4(fp)
  8081f8:	00800104 	movi	r2,4
  8081fc:	18800005 	stb	r2,0(r3)
        return;
  808200:	00003a06 	br	8082ec <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  808204:	e0bffe17 	ldw	r2,-8(fp)
  808208:	1004c03a 	cmpne	r2,r2,zero
  80820c:	1000041e 	bne	r2,zero,808220 <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  808210:	e0ffff17 	ldw	r3,-4(fp)
  808214:	00800304 	movi	r2,12
  808218:	18800005 	stb	r2,0(r3)
        return;
  80821c:	00003306 	br	8082ec <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  808220:	d0a72403 	ldbu	r2,-25456(gp)
  808224:	10803fcc 	andi	r2,r2,255
  808228:	1005003a 	cmpeq	r2,r2,zero
  80822c:	1000041e 	bne	r2,zero,808240 <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
  808230:	e0ffff17 	ldw	r3,-4(fp)
  808234:	00800484 	movi	r2,18
  808238:	18800005 	stb	r2,0(r3)
        return;
  80823c:	00002b06 	br	8082ec <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
  808240:	e0bffd17 	ldw	r2,-12(fp)
  808244:	10800003 	ldbu	r2,0(r2)
  808248:	10803fcc 	andi	r2,r2,255
  80824c:	10bfffc4 	addi	r2,r2,-1
  808250:	10800128 	cmpgeui	r2,r2,4
  808254:	10000f1e 	bne	r2,zero,808294 <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808258:	0005303a 	rdctl	r2,status
  80825c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808260:	e0fffa17 	ldw	r3,-24(fp)
  808264:	00bfff84 	movi	r2,-2
  808268:	1884703a 	and	r2,r3,r2
  80826c:	1001703a 	wrctl	status,r2
  
  return context;
  808270:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
  808274:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
  808278:	e13ffe17 	ldw	r4,-8(fp)
  80827c:	0809c900 	call	809c90 <OS_StrLen>
  808280:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
  808284:	e0bffc03 	ldbu	r2,-16(fp)
  808288:	10800828 	cmpgeui	r2,r2,32
  80828c:	1000051e 	bne	r2,zero,8082a4 <OSEventNameSet+0xe8>
  808290:	00000c06 	br	8082c4 <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  808294:	e0ffff17 	ldw	r3,-4(fp)
  808298:	00800044 	movi	r2,1
  80829c:	18800005 	stb	r2,0(r3)
             return;
  8082a0:	00001206 	br	8082ec <OSEventNameSet+0x130>
  8082a4:	e0bffb17 	ldw	r2,-20(fp)
  8082a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8082ac:	e0bff917 	ldw	r2,-28(fp)
  8082b0:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
  8082b4:	e0ffff17 	ldw	r3,-4(fp)
  8082b8:	008002c4 	movi	r2,11
  8082bc:	18800005 	stb	r2,0(r3)
        return;
  8082c0:	00000a06 	br	8082ec <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
  8082c4:	e0bffd17 	ldw	r2,-12(fp)
  8082c8:	11000384 	addi	r4,r2,14
  8082cc:	e17ffe17 	ldw	r5,-8(fp)
  8082d0:	0809c100 	call	809c10 <OS_StrCopy>
  8082d4:	e0bffb17 	ldw	r2,-20(fp)
  8082d8:	e0bff815 	stw	r2,-32(fp)
  8082dc:	e0bff817 	ldw	r2,-32(fp)
  8082e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8082e4:	e0bfff17 	ldw	r2,-4(fp)
  8082e8:	10000005 	stb	zero,0(r2)
}
  8082ec:	e037883a 	mov	sp,fp
  8082f0:	dfc00117 	ldw	ra,4(sp)
  8082f4:	df000017 	ldw	fp,0(sp)
  8082f8:	dec00204 	addi	sp,sp,8
  8082fc:	f800283a 	ret

00808300 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
  808300:	deffe704 	addi	sp,sp,-100
  808304:	dfc01815 	stw	ra,96(sp)
  808308:	df001715 	stw	fp,92(sp)
  80830c:	df001704 	addi	fp,sp,92
  808310:	e13ff615 	stw	r4,-40(fp)
  808314:	e17ff715 	stw	r5,-36(fp)
  808318:	e1bff815 	stw	r6,-32(fp)
  80831c:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
  808320:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
  808324:	e0800217 	ldw	r2,8(fp)
  808328:	1004c03a 	cmpne	r2,r2,zero
  80832c:	1000021e 	bne	r2,zero,808338 <OSEventPendMulti+0x38>
        return (0);
  808330:	e03fff15 	stw	zero,-4(fp)
  808334:	00019906 	br	80899c <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
  808338:	e0bff617 	ldw	r2,-40(fp)
  80833c:	1004c03a 	cmpne	r2,r2,zero
  808340:	1000051e 	bne	r2,zero,808358 <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
  808344:	e0c00217 	ldw	r3,8(fp)
  808348:	00800104 	movi	r2,4
  80834c:	18800005 	stb	r2,0(r3)
        return (0);
  808350:	e03fff15 	stw	zero,-4(fp)
  808354:	00019106 	br	80899c <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
  808358:	e0bff717 	ldw	r2,-36(fp)
  80835c:	1004c03a 	cmpne	r2,r2,zero
  808360:	1000051e 	bne	r2,zero,808378 <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
  808364:	e0c00217 	ldw	r3,8(fp)
  808368:	00800104 	movi	r2,4
  80836c:	18800005 	stb	r2,0(r3)
        return (0);
  808370:	e03fff15 	stw	zero,-4(fp)
  808374:	00018906 	br	80899c <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
  808378:	e0bff817 	ldw	r2,-32(fp)
  80837c:	1004c03a 	cmpne	r2,r2,zero
  808380:	1000051e 	bne	r2,zero,808398 <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
  808384:	e0c00217 	ldw	r3,8(fp)
  808388:	00800104 	movi	r2,4
  80838c:	18800005 	stb	r2,0(r3)
        return (0);
  808390:	e03fff15 	stw	zero,-4(fp)
  808394:	00018106 	br	80899c <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
  808398:	e0bff717 	ldw	r2,-36(fp)
  80839c:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
  8083a0:	e0bff617 	ldw	r2,-40(fp)
  8083a4:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
  8083a8:	e0bff517 	ldw	r2,-44(fp)
  8083ac:	10800017 	ldw	r2,0(r2)
  8083b0:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
  8083b4:	00001806 	br	808418 <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
  8083b8:	e0bff417 	ldw	r2,-48(fp)
  8083bc:	10800003 	ldbu	r2,0(r2)
  8083c0:	10803fcc 	andi	r2,r2,255
  8083c4:	e0bffe15 	stw	r2,-8(fp)
  8083c8:	e0fffe17 	ldw	r3,-8(fp)
  8083cc:	188000a0 	cmpeqi	r2,r3,2
  8083d0:	10000b1e 	bne	r2,zero,808400 <OSEventPendMulti+0x100>
  8083d4:	e0fffe17 	ldw	r3,-8(fp)
  8083d8:	188000e0 	cmpeqi	r2,r3,3
  8083dc:	1000081e 	bne	r2,zero,808400 <OSEventPendMulti+0x100>
  8083e0:	e0fffe17 	ldw	r3,-8(fp)
  8083e4:	18800060 	cmpeqi	r2,r3,1
  8083e8:	1000051e 	bne	r2,zero,808400 <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
  8083ec:	e0c00217 	ldw	r3,8(fp)
  8083f0:	00800044 	movi	r2,1
  8083f4:	18800005 	stb	r2,0(r3)
                 return (0);
  8083f8:	e03fff15 	stw	zero,-4(fp)
  8083fc:	00016706 	br	80899c <OSEventPendMulti+0x69c>
        }
        pevents++;
  808400:	e0bff517 	ldw	r2,-44(fp)
  808404:	10800104 	addi	r2,r2,4
  808408:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
  80840c:	e0bff517 	ldw	r2,-44(fp)
  808410:	10800017 	ldw	r2,0(r2)
  808414:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
  808418:	e0bff417 	ldw	r2,-48(fp)
  80841c:	1004c03a 	cmpne	r2,r2,zero
  808420:	103fe51e 	bne	r2,zero,8083b8 <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
  808424:	d0a72403 	ldbu	r2,-25456(gp)
  808428:	10803fcc 	andi	r2,r2,255
  80842c:	1005003a 	cmpeq	r2,r2,zero
  808430:	1000051e 	bne	r2,zero,808448 <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
  808434:	e0c00217 	ldw	r3,8(fp)
  808438:	00800084 	movi	r2,2
  80843c:	18800005 	stb	r2,0(r3)
        return (0);
  808440:	e03fff15 	stw	zero,-4(fp)
  808444:	00015506 	br	80899c <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
  808448:	d0a71603 	ldbu	r2,-25512(gp)
  80844c:	10803fcc 	andi	r2,r2,255
  808450:	1005003a 	cmpeq	r2,r2,zero
  808454:	1000051e 	bne	r2,zero,80846c <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
  808458:	e0c00217 	ldw	r3,8(fp)
  80845c:	00800344 	movi	r2,13
  808460:	18800005 	stb	r2,0(r3)
        return (0);
  808464:	e03fff15 	stw	zero,-4(fp)
  808468:	00014c06 	br	80899c <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80846c:	0005303a 	rdctl	r2,status
  808470:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808474:	e0ffef17 	ldw	r3,-68(fp)
  808478:	00bfff84 	movi	r2,-2
  80847c:	1884703a 	and	r2,r3,r2
  808480:	1001703a 	wrctl	status,r2
  
  return context;
  808484:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
  808488:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
  80848c:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
  808490:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
  808494:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
  808498:	e0bff617 	ldw	r2,-40(fp)
  80849c:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
  8084a0:	e0bff517 	ldw	r2,-44(fp)
  8084a4:	10800017 	ldw	r2,0(r2)
  8084a8:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  8084ac:	00008f06 	br	8086ec <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
  8084b0:	e0bff417 	ldw	r2,-48(fp)
  8084b4:	10800003 	ldbu	r2,0(r2)
  8084b8:	10803fcc 	andi	r2,r2,255
  8084bc:	e0bffd15 	stw	r2,-12(fp)
  8084c0:	e0fffd17 	ldw	r3,-12(fp)
  8084c4:	188000a0 	cmpeqi	r2,r3,2
  8084c8:	1000441e 	bne	r2,zero,8085dc <OSEventPendMulti+0x2dc>
  8084cc:	e0fffd17 	ldw	r3,-12(fp)
  8084d0:	188000e0 	cmpeqi	r2,r3,3
  8084d4:	1000041e 	bne	r2,zero,8084e8 <OSEventPendMulti+0x1e8>
  8084d8:	e0fffd17 	ldw	r3,-12(fp)
  8084dc:	18800060 	cmpeqi	r2,r3,1
  8084e0:	1000211e 	bne	r2,zero,808568 <OSEventPendMulti+0x268>
  8084e4:	00006f06 	br	8086a4 <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
  8084e8:	e0bff417 	ldw	r2,-48(fp)
  8084ec:	1080020b 	ldhu	r2,8(r2)
  8084f0:	10bfffcc 	andi	r2,r2,65535
  8084f4:	1005003a 	cmpeq	r2,r2,zero
  8084f8:	1000171e 	bne	r2,zero,808558 <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
  8084fc:	e0bff417 	ldw	r2,-48(fp)
  808500:	1080020b 	ldhu	r2,8(r2)
  808504:	10bfffc4 	addi	r2,r2,-1
  808508:	1007883a 	mov	r3,r2
  80850c:	e0bff417 	ldw	r2,-48(fp)
  808510:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
  808514:	e0fff717 	ldw	r3,-36(fp)
  808518:	e0bff417 	ldw	r2,-48(fp)
  80851c:	18800015 	stw	r2,0(r3)
  808520:	e0bff717 	ldw	r2,-36(fp)
  808524:	10800104 	addi	r2,r2,4
  808528:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
  80852c:	00800044 	movi	r2,1
  808530:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
  808534:	e0bff817 	ldw	r2,-32(fp)
  808538:	10000015 	stw	zero,0(r2)
  80853c:	e0bff817 	ldw	r2,-32(fp)
  808540:	10800104 	addi	r2,r2,4
  808544:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
  808548:	e0bff18b 	ldhu	r2,-58(fp)
  80854c:	10800044 	addi	r2,r2,1
  808550:	e0bff18d 	sth	r2,-58(fp)
  808554:	00005f06 	br	8086d4 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
  808558:	e0bff103 	ldbu	r2,-60(fp)
  80855c:	10800054 	ori	r2,r2,1
  808560:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  808564:	00005b06 	br	8086d4 <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
  808568:	e0bff417 	ldw	r2,-48(fp)
  80856c:	10800117 	ldw	r2,4(r2)
  808570:	1005003a 	cmpeq	r2,r2,zero
  808574:	1000151e 	bne	r2,zero,8085cc <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
  808578:	e0bff417 	ldw	r2,-48(fp)
  80857c:	10c00117 	ldw	r3,4(r2)
  808580:	e0bff817 	ldw	r2,-32(fp)
  808584:	10c00015 	stw	r3,0(r2)
  808588:	e0bff817 	ldw	r2,-32(fp)
  80858c:	10800104 	addi	r2,r2,4
  808590:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
  808594:	e0bff417 	ldw	r2,-48(fp)
  808598:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
  80859c:	e0fff717 	ldw	r3,-36(fp)
  8085a0:	e0bff417 	ldw	r2,-48(fp)
  8085a4:	18800015 	stw	r2,0(r3)
  8085a8:	e0bff717 	ldw	r2,-36(fp)
  8085ac:	10800104 	addi	r2,r2,4
  8085b0:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
  8085b4:	00800044 	movi	r2,1
  8085b8:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
  8085bc:	e0bff18b 	ldhu	r2,-58(fp)
  8085c0:	10800044 	addi	r2,r2,1
  8085c4:	e0bff18d 	sth	r2,-58(fp)
  8085c8:	00004206 	br	8086d4 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
  8085cc:	e0bff103 	ldbu	r2,-60(fp)
  8085d0:	10800094 	ori	r2,r2,2
  8085d4:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  8085d8:	00003e06 	br	8086d4 <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
  8085dc:	e0bff417 	ldw	r2,-48(fp)
  8085e0:	10800117 	ldw	r2,4(r2)
  8085e4:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
  8085e8:	e0bff317 	ldw	r2,-52(fp)
  8085ec:	1080058b 	ldhu	r2,22(r2)
  8085f0:	10bfffcc 	andi	r2,r2,65535
  8085f4:	1005003a 	cmpeq	r2,r2,zero
  8085f8:	1000261e 	bne	r2,zero,808694 <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
  8085fc:	e0bff317 	ldw	r2,-52(fp)
  808600:	11000417 	ldw	r4,16(r2)
  808604:	20c00017 	ldw	r3,0(r4)
  808608:	e0bff817 	ldw	r2,-32(fp)
  80860c:	10c00015 	stw	r3,0(r2)
  808610:	e0bff817 	ldw	r2,-32(fp)
  808614:	10800104 	addi	r2,r2,4
  808618:	e0bff815 	stw	r2,-32(fp)
  80861c:	20c00104 	addi	r3,r4,4
  808620:	e0bff317 	ldw	r2,-52(fp)
  808624:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
  808628:	e0bff317 	ldw	r2,-52(fp)
  80862c:	10c00417 	ldw	r3,16(r2)
  808630:	e0bff317 	ldw	r2,-52(fp)
  808634:	10800217 	ldw	r2,8(r2)
  808638:	1880041e 	bne	r3,r2,80864c <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
  80863c:	e0bff317 	ldw	r2,-52(fp)
  808640:	10c00117 	ldw	r3,4(r2)
  808644:	e0bff317 	ldw	r2,-52(fp)
  808648:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
  80864c:	e0bff317 	ldw	r2,-52(fp)
  808650:	1080058b 	ldhu	r2,22(r2)
  808654:	10bfffc4 	addi	r2,r2,-1
  808658:	1007883a 	mov	r3,r2
  80865c:	e0bff317 	ldw	r2,-52(fp)
  808660:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
  808664:	e0fff717 	ldw	r3,-36(fp)
  808668:	e0bff417 	ldw	r2,-48(fp)
  80866c:	18800015 	stw	r2,0(r3)
  808670:	e0bff717 	ldw	r2,-36(fp)
  808674:	10800104 	addi	r2,r2,4
  808678:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
  80867c:	00800044 	movi	r2,1
  808680:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
  808684:	e0bff18b 	ldhu	r2,-58(fp)
  808688:	10800044 	addi	r2,r2,1
  80868c:	e0bff18d 	sth	r2,-58(fp)
  808690:	00001006 	br	8086d4 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
  808694:	e0bff103 	ldbu	r2,-60(fp)
  808698:	10800114 	ori	r2,r2,4
  80869c:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  8086a0:	00000c06 	br	8086d4 <OSEventPendMulti+0x3d4>
  8086a4:	e0bff017 	ldw	r2,-64(fp)
  8086a8:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8086ac:	e0bfee17 	ldw	r2,-72(fp)
  8086b0:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
  8086b4:	e0bff717 	ldw	r2,-36(fp)
  8086b8:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
  8086bc:	e0c00217 	ldw	r3,8(fp)
  8086c0:	00800044 	movi	r2,1
  8086c4:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
  8086c8:	e0bff18b 	ldhu	r2,-58(fp)
  8086cc:	e0bfff15 	stw	r2,-4(fp)
  8086d0:	0000b206 	br	80899c <OSEventPendMulti+0x69c>
        }
        pevents++;
  8086d4:	e0bff517 	ldw	r2,-44(fp)
  8086d8:	10800104 	addi	r2,r2,4
  8086dc:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
  8086e0:	e0bff517 	ldw	r2,-44(fp)
  8086e4:	10800017 	ldw	r2,0(r2)
  8086e8:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  8086ec:	e0bff417 	ldw	r2,-48(fp)
  8086f0:	1004c03a 	cmpne	r2,r2,zero
  8086f4:	103f6e1e 	bne	r2,zero,8084b0 <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
  8086f8:	e0bff203 	ldbu	r2,-56(fp)
  8086fc:	10800058 	cmpnei	r2,r2,1
  808700:	10000b1e 	bne	r2,zero,808730 <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
  808704:	e0bff717 	ldw	r2,-36(fp)
  808708:	10000015 	stw	zero,0(r2)
  80870c:	e0bff017 	ldw	r2,-64(fp)
  808710:	e0bfed15 	stw	r2,-76(fp)
  808714:	e0bfed17 	ldw	r2,-76(fp)
  808718:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
  80871c:	e0800217 	ldw	r2,8(fp)
  808720:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
  808724:	e0fff18b 	ldhu	r3,-58(fp)
  808728:	e0ffff15 	stw	r3,-4(fp)
  80872c:	00009b06 	br	80899c <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
  808730:	d1272517 	ldw	r4,-25452(gp)
  808734:	d0a72517 	ldw	r2,-25452(gp)
  808738:	10c00c03 	ldbu	r3,48(r2)
  80873c:	e0bff103 	ldbu	r2,-60(fp)
  808740:	1884b03a 	or	r2,r3,r2
  808744:	1007883a 	mov	r3,r2
  808748:	00bfe004 	movi	r2,-128
  80874c:	1884b03a 	or	r2,r3,r2
  808750:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  808754:	d0a72517 	ldw	r2,-25452(gp)
  808758:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
  80875c:	d0e72517 	ldw	r3,-25452(gp)
  808760:	e0bff90b 	ldhu	r2,-28(fp)
  808764:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
  808768:	e13ff617 	ldw	r4,-40(fp)
  80876c:	08093300 	call	809330 <OS_EventTaskWaitMulti>
  808770:	e0bff017 	ldw	r2,-64(fp)
  808774:	e0bfec15 	stw	r2,-80(fp)
  808778:	e0bfec17 	ldw	r2,-80(fp)
  80877c:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
  808780:	0809acc0 	call	809acc <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808784:	0005303a 	rdctl	r2,status
  808788:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80878c:	e0ffeb17 	ldw	r3,-84(fp)
  808790:	00bfff84 	movi	r2,-2
  808794:	1884703a 	and	r2,r3,r2
  808798:	1001703a 	wrctl	status,r2
  
  return context;
  80879c:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
  8087a0:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
  8087a4:	d0a72517 	ldw	r2,-25452(gp)
  8087a8:	10800c43 	ldbu	r2,49(r2)
  8087ac:	10803fcc 	andi	r2,r2,255
  8087b0:	e0bffc15 	stw	r2,-16(fp)
  8087b4:	e0fffc17 	ldw	r3,-16(fp)
  8087b8:	1805003a 	cmpeq	r2,r3,zero
  8087bc:	1000041e 	bne	r2,zero,8087d0 <OSEventPendMulti+0x4d0>
  8087c0:	e0fffc17 	ldw	r3,-16(fp)
  8087c4:	188000a0 	cmpeqi	r2,r3,2
  8087c8:	1000011e 	bne	r2,zero,8087d0 <OSEventPendMulti+0x4d0>
  8087cc:	00001906 	br	808834 <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
  8087d0:	d0a72517 	ldw	r2,-25452(gp)
  8087d4:	10800717 	ldw	r2,28(r2)
  8087d8:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
  8087dc:	e0bff417 	ldw	r2,-48(fp)
  8087e0:	1005003a 	cmpeq	r2,r2,zero
  8087e4:	10000c1e 	bne	r2,zero,808818 <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
  8087e8:	e0fff717 	ldw	r3,-36(fp)
  8087ec:	e0bff417 	ldw	r2,-48(fp)
  8087f0:	18800015 	stw	r2,0(r3)
  8087f4:	e0bff717 	ldw	r2,-36(fp)
  8087f8:	10800104 	addi	r2,r2,4
  8087fc:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
  808800:	e0bff717 	ldw	r2,-36(fp)
  808804:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
  808808:	e0bff18b 	ldhu	r2,-58(fp)
  80880c:	10800044 	addi	r2,r2,1
  808810:	e0bff18d 	sth	r2,-58(fp)
  808814:	00000a06 	br	808840 <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
  808818:	d0a72517 	ldw	r2,-25452(gp)
  80881c:	00c00044 	movi	r3,1
  808820:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  808824:	d1272517 	ldw	r4,-25452(gp)
  808828:	e17ff617 	ldw	r5,-40(fp)
  80882c:	080953c0 	call	80953c <OS_EventTaskRemoveMulti>
             }
			 break;
  808830:	00000306 	br	808840 <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  808834:	d1272517 	ldw	r4,-25452(gp)
  808838:	e17ff617 	ldw	r5,-40(fp)
  80883c:	080953c0 	call	80953c <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
  808840:	d0a72517 	ldw	r2,-25452(gp)
  808844:	10800c43 	ldbu	r2,49(r2)
  808848:	10803fcc 	andi	r2,r2,255
  80884c:	e0bffb15 	stw	r2,-20(fp)
  808850:	e0fffb17 	ldw	r3,-20(fp)
  808854:	1805003a 	cmpeq	r2,r3,zero
  808858:	1000041e 	bne	r2,zero,80886c <OSEventPendMulti+0x56c>
  80885c:	e0fffb17 	ldw	r3,-20(fp)
  808860:	188000a0 	cmpeqi	r2,r3,2
  808864:	10002c1e 	bne	r2,zero,808918 <OSEventPendMulti+0x618>
  808868:	00003406 	br	80893c <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
  80886c:	e0bff417 	ldw	r2,-48(fp)
  808870:	10800003 	ldbu	r2,0(r2)
  808874:	10803fcc 	andi	r2,r2,255
  808878:	e0bffa15 	stw	r2,-24(fp)
  80887c:	e0fffa17 	ldw	r3,-24(fp)
  808880:	18800050 	cmplti	r2,r3,1
  808884:	1000151e 	bne	r2,zero,8088dc <OSEventPendMulti+0x5dc>
  808888:	e0fffa17 	ldw	r3,-24(fp)
  80888c:	188000d0 	cmplti	r2,r3,3
  808890:	10000a1e 	bne	r2,zero,8088bc <OSEventPendMulti+0x5bc>
  808894:	e0fffa17 	ldw	r3,-24(fp)
  808898:	188000e0 	cmpeqi	r2,r3,3
  80889c:	1000011e 	bne	r2,zero,8088a4 <OSEventPendMulti+0x5a4>
  8088a0:	00000e06 	br	8088dc <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
  8088a4:	e0bff817 	ldw	r2,-32(fp)
  8088a8:	10000015 	stw	zero,0(r2)
  8088ac:	e0bff817 	ldw	r2,-32(fp)
  8088b0:	10800104 	addi	r2,r2,4
  8088b4:	e0bff815 	stw	r2,-32(fp)
                      break;
  8088b8:	00001406 	br	80890c <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
  8088bc:	d0a72517 	ldw	r2,-25452(gp)
  8088c0:	10c00917 	ldw	r3,36(r2)
  8088c4:	e0bff817 	ldw	r2,-32(fp)
  8088c8:	10c00015 	stw	r3,0(r2)
  8088cc:	e0bff817 	ldw	r2,-32(fp)
  8088d0:	10800104 	addi	r2,r2,4
  8088d4:	e0bff815 	stw	r2,-32(fp)
                      break;
  8088d8:	00000c06 	br	80890c <OSEventPendMulti+0x60c>
  8088dc:	e0bff017 	ldw	r2,-64(fp)
  8088e0:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8088e4:	e0bfea17 	ldw	r2,-88(fp)
  8088e8:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
  8088ec:	e0bff717 	ldw	r2,-36(fp)
  8088f0:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
  8088f4:	e0c00217 	ldw	r3,8(fp)
  8088f8:	00800044 	movi	r2,1
  8088fc:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
  808900:	e0bff18b 	ldhu	r2,-58(fp)
  808904:	e0bfff15 	stw	r2,-4(fp)
  808908:	00002406 	br	80899c <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
  80890c:	e0800217 	ldw	r2,8(fp)
  808910:	10000005 	stb	zero,0(r2)
             break;
  808914:	00001106 	br	80895c <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
  808918:	e0bff817 	ldw	r2,-32(fp)
  80891c:	10000015 	stw	zero,0(r2)
  808920:	e0bff817 	ldw	r2,-32(fp)
  808924:	10800104 	addi	r2,r2,4
  808928:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
  80892c:	e0c00217 	ldw	r3,8(fp)
  808930:	00800384 	movi	r2,14
  808934:	18800005 	stb	r2,0(r3)
             break;
  808938:	00000806 	br	80895c <OSEventPendMulti+0x65c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
  80893c:	e0bff817 	ldw	r2,-32(fp)
  808940:	10000015 	stw	zero,0(r2)
  808944:	e0bff817 	ldw	r2,-32(fp)
  808948:	10800104 	addi	r2,r2,4
  80894c:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
  808950:	e0c00217 	ldw	r3,8(fp)
  808954:	00800284 	movi	r2,10
  808958:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
  80895c:	d0a72517 	ldw	r2,-25452(gp)
  808960:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
  808964:	d0a72517 	ldw	r2,-25452(gp)
  808968:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
  80896c:	d0a72517 	ldw	r2,-25452(gp)
  808970:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  808974:	d0a72517 	ldw	r2,-25452(gp)
  808978:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
  80897c:	d0a72517 	ldw	r2,-25452(gp)
  808980:	10000915 	stw	zero,36(r2)
  808984:	e0bff017 	ldw	r2,-64(fp)
  808988:	e0bfe915 	stw	r2,-92(fp)
  80898c:	e0bfe917 	ldw	r2,-92(fp)
  808990:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
  808994:	e0fff18b 	ldhu	r3,-58(fp)
  808998:	e0ffff15 	stw	r3,-4(fp)
  80899c:	e0bfff17 	ldw	r2,-4(fp)
}
  8089a0:	e037883a 	mov	sp,fp
  8089a4:	dfc00117 	ldw	ra,4(sp)
  8089a8:	df000017 	ldw	fp,0(sp)
  8089ac:	dec00204 	addi	sp,sp,8
  8089b0:	f800283a 	ret

008089b4 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
  8089b4:	defffe04 	addi	sp,sp,-8
  8089b8:	dfc00115 	stw	ra,4(sp)
  8089bc:	df000015 	stw	fp,0(sp)
  8089c0:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
  8089c4:	0813b440 	call	813b44 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
  8089c8:	08097840 	call	809784 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
  8089cc:	08097c80 	call	8097c8 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
  8089d0:	080992c0 	call	80992c <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
  8089d4:	08096a80 	call	8096a8 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
  8089d8:	080b9dc0 	call	80b9dc <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
  8089dc:	080c3b40 	call	80c3b4 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
  8089e0:	080d70c0 	call	80d70c <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
  8089e4:	08098340 	call	809834 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
  8089e8:	08098b00 	call	8098b0 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
  8089ec:	0813b600 	call	813b60 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
  8089f0:	080a1b40 	call	80a1b4 <OSDebugInit>
#endif
}
  8089f4:	e037883a 	mov	sp,fp
  8089f8:	dfc00117 	ldw	ra,4(sp)
  8089fc:	df000017 	ldw	fp,0(sp)
  808a00:	dec00204 	addi	sp,sp,8
  808a04:	f800283a 	ret

00808a08 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
  808a08:	defffc04 	addi	sp,sp,-16
  808a0c:	df000315 	stw	fp,12(sp)
  808a10:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  808a14:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
  808a18:	d0a71643 	ldbu	r2,-25511(gp)
  808a1c:	10803fcc 	andi	r2,r2,255
  808a20:	10800058 	cmpnei	r2,r2,1
  808a24:	1000131e 	bne	r2,zero,808a74 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808a28:	0005303a 	rdctl	r2,status
  808a2c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808a30:	e0fffe17 	ldw	r3,-8(fp)
  808a34:	00bfff84 	movi	r2,-2
  808a38:	1884703a 	and	r2,r3,r2
  808a3c:	1001703a 	wrctl	status,r2
  
  return context;
  808a40:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  808a44:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
  808a48:	d0a72403 	ldbu	r2,-25456(gp)
  808a4c:	10803fcc 	andi	r2,r2,255
  808a50:	10803fe0 	cmpeqi	r2,r2,255
  808a54:	1000031e 	bne	r2,zero,808a64 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
  808a58:	d0a72403 	ldbu	r2,-25456(gp)
  808a5c:	10800044 	addi	r2,r2,1
  808a60:	d0a72405 	stb	r2,-25456(gp)
  808a64:	e0bfff17 	ldw	r2,-4(fp)
  808a68:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808a6c:	e0bffd17 	ldw	r2,-12(fp)
  808a70:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
  808a74:	e037883a 	mov	sp,fp
  808a78:	df000017 	ldw	fp,0(sp)
  808a7c:	dec00104 	addi	sp,sp,4
  808a80:	f800283a 	ret

00808a84 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
  808a84:	defffb04 	addi	sp,sp,-20
  808a88:	dfc00415 	stw	ra,16(sp)
  808a8c:	df000315 	stw	fp,12(sp)
  808a90:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  808a94:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
  808a98:	d0a71643 	ldbu	r2,-25511(gp)
  808a9c:	10803fcc 	andi	r2,r2,255
  808aa0:	10800058 	cmpnei	r2,r2,1
  808aa4:	1000321e 	bne	r2,zero,808b70 <OSIntExit+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808aa8:	0005303a 	rdctl	r2,status
  808aac:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808ab0:	e0fffe17 	ldw	r3,-8(fp)
  808ab4:	00bfff84 	movi	r2,-2
  808ab8:	1884703a 	and	r2,r3,r2
  808abc:	1001703a 	wrctl	status,r2
  
  return context;
  808ac0:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  808ac4:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
  808ac8:	d0a72403 	ldbu	r2,-25456(gp)
  808acc:	10803fcc 	andi	r2,r2,255
  808ad0:	1005003a 	cmpeq	r2,r2,zero
  808ad4:	1000031e 	bne	r2,zero,808ae4 <OSIntExit+0x60>
            OSIntNesting--;
  808ad8:	d0a72403 	ldbu	r2,-25456(gp)
  808adc:	10bfffc4 	addi	r2,r2,-1
  808ae0:	d0a72405 	stb	r2,-25456(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
  808ae4:	d0a72403 	ldbu	r2,-25456(gp)
  808ae8:	10803fcc 	andi	r2,r2,255
  808aec:	1004c03a 	cmpne	r2,r2,zero
  808af0:	10001b1e 	bne	r2,zero,808b60 <OSIntExit+0xdc>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
  808af4:	d0a71603 	ldbu	r2,-25512(gp)
  808af8:	10803fcc 	andi	r2,r2,255
  808afc:	1004c03a 	cmpne	r2,r2,zero
  808b00:	1000171e 	bne	r2,zero,808b60 <OSIntExit+0xdc>
                OS_SchedNew();
  808b04:	0809ba00 	call	809ba0 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
  808b08:	d0a71803 	ldbu	r2,-25504(gp)
  808b0c:	d0e71843 	ldbu	r3,-25503(gp)
  808b10:	11003fcc 	andi	r4,r2,255
  808b14:	18803fcc 	andi	r2,r3,255
  808b18:	20801126 	beq	r4,r2,808b60 <OSIntExit+0xdc>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
  808b1c:	d0a71803 	ldbu	r2,-25504(gp)
  808b20:	10803fcc 	andi	r2,r2,255
  808b24:	00c020b4 	movhi	r3,130
  808b28:	18fc7604 	addi	r3,r3,-3624
  808b2c:	1085883a 	add	r2,r2,r2
  808b30:	1085883a 	add	r2,r2,r2
  808b34:	10c5883a 	add	r2,r2,r3
  808b38:	10800017 	ldw	r2,0(r2)
  808b3c:	d0a72015 	stw	r2,-25472(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
  808b40:	d0e72017 	ldw	r3,-25472(gp)
  808b44:	18800e17 	ldw	r2,56(r3)
  808b48:	10800044 	addi	r2,r2,1
  808b4c:	18800e15 	stw	r2,56(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
  808b50:	d0a71b17 	ldw	r2,-25492(gp)
  808b54:	10800044 	addi	r2,r2,1
  808b58:	d0a71b15 	stw	r2,-25492(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
  808b5c:	08136d00 	call	8136d0 <OSCtxSw>
  808b60:	e0bfff17 	ldw	r2,-4(fp)
  808b64:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808b68:	e0bffd17 	ldw	r2,-12(fp)
  808b6c:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  808b70:	e037883a 	mov	sp,fp
  808b74:	dfc00117 	ldw	ra,4(sp)
  808b78:	df000017 	ldw	fp,0(sp)
  808b7c:	dec00204 	addi	sp,sp,8
  808b80:	f800283a 	ret

00808b84 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
  808b84:	defffc04 	addi	sp,sp,-16
  808b88:	df000315 	stw	fp,12(sp)
  808b8c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  808b90:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
  808b94:	d0a71643 	ldbu	r2,-25511(gp)
  808b98:	10803fcc 	andi	r2,r2,255
  808b9c:	10800058 	cmpnei	r2,r2,1
  808ba0:	1000171e 	bne	r2,zero,808c00 <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808ba4:	0005303a 	rdctl	r2,status
  808ba8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808bac:	e0fffe17 	ldw	r3,-8(fp)
  808bb0:	00bfff84 	movi	r2,-2
  808bb4:	1884703a 	and	r2,r3,r2
  808bb8:	1001703a 	wrctl	status,r2
  
  return context;
  808bbc:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  808bc0:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
  808bc4:	d0a72403 	ldbu	r2,-25456(gp)
  808bc8:	10803fcc 	andi	r2,r2,255
  808bcc:	1004c03a 	cmpne	r2,r2,zero
  808bd0:	1000071e 	bne	r2,zero,808bf0 <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
  808bd4:	d0a71603 	ldbu	r2,-25512(gp)
  808bd8:	10803fcc 	andi	r2,r2,255
  808bdc:	10803fe0 	cmpeqi	r2,r2,255
  808be0:	1000031e 	bne	r2,zero,808bf0 <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
  808be4:	d0a71603 	ldbu	r2,-25512(gp)
  808be8:	10800044 	addi	r2,r2,1
  808bec:	d0a71605 	stb	r2,-25512(gp)
  808bf0:	e0bfff17 	ldw	r2,-4(fp)
  808bf4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808bf8:	e0bffd17 	ldw	r2,-12(fp)
  808bfc:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  808c00:	e037883a 	mov	sp,fp
  808c04:	df000017 	ldw	fp,0(sp)
  808c08:	dec00104 	addi	sp,sp,4
  808c0c:	f800283a 	ret

00808c10 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
  808c10:	defff804 	addi	sp,sp,-32
  808c14:	dfc00715 	stw	ra,28(sp)
  808c18:	df000615 	stw	fp,24(sp)
  808c1c:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  808c20:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
  808c24:	d0a71643 	ldbu	r2,-25511(gp)
  808c28:	10803fcc 	andi	r2,r2,255
  808c2c:	10800058 	cmpnei	r2,r2,1
  808c30:	10002b1e 	bne	r2,zero,808ce0 <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808c34:	0005303a 	rdctl	r2,status
  808c38:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808c3c:	e0fffe17 	ldw	r3,-8(fp)
  808c40:	00bfff84 	movi	r2,-2
  808c44:	1884703a 	and	r2,r3,r2
  808c48:	1001703a 	wrctl	status,r2
  
  return context;
  808c4c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  808c50:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
  808c54:	d0a71603 	ldbu	r2,-25512(gp)
  808c58:	10803fcc 	andi	r2,r2,255
  808c5c:	1005003a 	cmpeq	r2,r2,zero
  808c60:	10001b1e 	bne	r2,zero,808cd0 <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
  808c64:	d0a71603 	ldbu	r2,-25512(gp)
  808c68:	10bfffc4 	addi	r2,r2,-1
  808c6c:	d0a71605 	stb	r2,-25512(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
  808c70:	d0a71603 	ldbu	r2,-25512(gp)
  808c74:	10803fcc 	andi	r2,r2,255
  808c78:	1004c03a 	cmpne	r2,r2,zero
  808c7c:	10000f1e 	bne	r2,zero,808cbc <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
  808c80:	d0a72403 	ldbu	r2,-25456(gp)
  808c84:	10803fcc 	andi	r2,r2,255
  808c88:	1004c03a 	cmpne	r2,r2,zero
  808c8c:	1000061e 	bne	r2,zero,808ca8 <OSSchedUnlock+0x98>
  808c90:	e0bfff17 	ldw	r2,-4(fp)
  808c94:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808c98:	e0bffd17 	ldw	r2,-12(fp)
  808c9c:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
  808ca0:	0809acc0 	call	809acc <OS_Sched>
  808ca4:	00000e06 	br	808ce0 <OSSchedUnlock+0xd0>
  808ca8:	e0bfff17 	ldw	r2,-4(fp)
  808cac:	e0bffc15 	stw	r2,-16(fp)
  808cb0:	e0bffc17 	ldw	r2,-16(fp)
  808cb4:	1001703a 	wrctl	status,r2
  808cb8:	00000906 	br	808ce0 <OSSchedUnlock+0xd0>
  808cbc:	e0bfff17 	ldw	r2,-4(fp)
  808cc0:	e0bffb15 	stw	r2,-20(fp)
  808cc4:	e0bffb17 	ldw	r2,-20(fp)
  808cc8:	1001703a 	wrctl	status,r2
  808ccc:	00000406 	br	808ce0 <OSSchedUnlock+0xd0>
  808cd0:	e0bfff17 	ldw	r2,-4(fp)
  808cd4:	e0bffa15 	stw	r2,-24(fp)
  808cd8:	e0bffa17 	ldw	r2,-24(fp)
  808cdc:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
  808ce0:	e037883a 	mov	sp,fp
  808ce4:	dfc00117 	ldw	ra,4(sp)
  808ce8:	df000017 	ldw	fp,0(sp)
  808cec:	dec00204 	addi	sp,sp,8
  808cf0:	f800283a 	ret

00808cf4 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
  808cf4:	defffe04 	addi	sp,sp,-8
  808cf8:	dfc00115 	stw	ra,4(sp)
  808cfc:	df000015 	stw	fp,0(sp)
  808d00:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
  808d04:	d0a71643 	ldbu	r2,-25511(gp)
  808d08:	10803fcc 	andi	r2,r2,255
  808d0c:	1004c03a 	cmpne	r2,r2,zero
  808d10:	10000f1e 	bne	r2,zero,808d50 <OSStart+0x5c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
  808d14:	0809ba00 	call	809ba0 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
  808d18:	d0a71803 	ldbu	r2,-25504(gp)
  808d1c:	d0a71845 	stb	r2,-25503(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
  808d20:	d0a71803 	ldbu	r2,-25504(gp)
  808d24:	10803fcc 	andi	r2,r2,255
  808d28:	00c020b4 	movhi	r3,130
  808d2c:	18fc7604 	addi	r3,r3,-3624
  808d30:	1085883a 	add	r2,r2,r2
  808d34:	1085883a 	add	r2,r2,r2
  808d38:	10c5883a 	add	r2,r2,r3
  808d3c:	10800017 	ldw	r2,0(r2)
  808d40:	d0a72015 	stw	r2,-25472(gp)
        OSTCBCur      = OSTCBHighRdy;
  808d44:	d0a72017 	ldw	r2,-25472(gp)
  808d48:	d0a72515 	stw	r2,-25452(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
  808d4c:	081375c0 	call	81375c <OSStartHighRdy>
    }
}
  808d50:	e037883a 	mov	sp,fp
  808d54:	dfc00117 	ldw	ra,4(sp)
  808d58:	df000017 	ldw	fp,0(sp)
  808d5c:	dec00204 	addi	sp,sp,8
  808d60:	f800283a 	ret

00808d64 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
  808d64:	defff904 	addi	sp,sp,-28
  808d68:	dfc00615 	stw	ra,24(sp)
  808d6c:	df000515 	stw	fp,20(sp)
  808d70:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  808d74:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
  808d78:	01000084 	movi	r4,2
  808d7c:	080fdc00 	call	80fdc0 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808d80:	0005303a 	rdctl	r2,status
  808d84:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808d88:	e0fffe17 	ldw	r3,-8(fp)
  808d8c:	00bfff84 	movi	r2,-2
  808d90:	1884703a 	and	r2,r3,r2
  808d94:	1001703a 	wrctl	status,r2
  
  return context;
  808d98:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
  808d9c:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
  808da0:	d0271715 	stw	zero,-25508(gp)
  808da4:	e0bfff17 	ldw	r2,-4(fp)
  808da8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808dac:	e0bffd17 	ldw	r2,-12(fp)
  808db0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
  808db4:	01001904 	movi	r4,100
  808db8:	080fdc00 	call	80fdc0 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808dbc:	0005303a 	rdctl	r2,status
  808dc0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808dc4:	e0fffc17 	ldw	r3,-16(fp)
  808dc8:	00bfff84 	movi	r2,-2
  808dcc:	1884703a 	and	r2,r3,r2
  808dd0:	1001703a 	wrctl	status,r2
  
  return context;
  808dd4:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
  808dd8:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
  808ddc:	d0a71717 	ldw	r2,-25508(gp)
  808de0:	d0a71c15 	stw	r2,-25488(gp)
    OSStatRdy    = OS_TRUE;
  808de4:	00800044 	movi	r2,1
  808de8:	d0a72805 	stb	r2,-25440(gp)
  808dec:	e0bfff17 	ldw	r2,-4(fp)
  808df0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808df4:	e0bffb17 	ldw	r2,-20(fp)
  808df8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  808dfc:	e037883a 	mov	sp,fp
  808e00:	dfc00117 	ldw	ra,4(sp)
  808e04:	df000017 	ldw	fp,0(sp)
  808e08:	dec00204 	addi	sp,sp,8
  808e0c:	f800283a 	ret

00808e10 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
  808e10:	defff604 	addi	sp,sp,-40
  808e14:	dfc00915 	stw	ra,36(sp)
  808e18:	df000815 	stw	fp,32(sp)
  808e1c:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  808e20:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
  808e24:	0813b280 	call	813b28 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808e28:	0005303a 	rdctl	r2,status
  808e2c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808e30:	e0fffb17 	ldw	r3,-20(fp)
  808e34:	00bfff84 	movi	r2,-2
  808e38:	1884703a 	and	r2,r3,r2
  808e3c:	1001703a 	wrctl	status,r2
  
  return context;
  808e40:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
  808e44:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
  808e48:	d0a72617 	ldw	r2,-25448(gp)
  808e4c:	10800044 	addi	r2,r2,1
  808e50:	d0a72615 	stw	r2,-25448(gp)
  808e54:	e0bffc17 	ldw	r2,-16(fp)
  808e58:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808e5c:	e0bffa17 	ldw	r2,-24(fp)
  808e60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
  808e64:	d0a71643 	ldbu	r2,-25511(gp)
  808e68:	10803fcc 	andi	r2,r2,255
  808e6c:	10800058 	cmpnei	r2,r2,1
  808e70:	1000721e 	bne	r2,zero,80903c <OSTimeTick+0x22c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
  808e74:	d0a71a03 	ldbu	r2,-25496(gp)
  808e78:	10803fcc 	andi	r2,r2,255
  808e7c:	e0bfff15 	stw	r2,-4(fp)
  808e80:	e0ffff17 	ldw	r3,-4(fp)
  808e84:	18800060 	cmpeqi	r2,r3,1
  808e88:	10000a1e 	bne	r2,zero,808eb4 <OSTimeTick+0xa4>
  808e8c:	e0ffff17 	ldw	r3,-4(fp)
  808e90:	188000a0 	cmpeqi	r2,r3,2
  808e94:	1000091e 	bne	r2,zero,808ebc <OSTimeTick+0xac>
  808e98:	e0ffff17 	ldw	r3,-4(fp)
  808e9c:	1805003a 	cmpeq	r2,r3,zero
  808ea0:	1000011e 	bne	r2,zero,808ea8 <OSTimeTick+0x98>
  808ea4:	00000a06 	br	808ed0 <OSTimeTick+0xc0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
  808ea8:	00800044 	movi	r2,1
  808eac:	e0bffd05 	stb	r2,-12(fp)
                 break;
  808eb0:	00000a06 	br	808edc <OSTimeTick+0xcc>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
  808eb4:	e03ffd05 	stb	zero,-12(fp)
                 break;
  808eb8:	00000806 	br	808edc <OSTimeTick+0xcc>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
  808ebc:	00800044 	movi	r2,1
  808ec0:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
  808ec4:	00800044 	movi	r2,1
  808ec8:	d0a71a05 	stb	r2,-25496(gp)
                 break;
  808ecc:	00000306 	br	808edc <OSTimeTick+0xcc>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
  808ed0:	00800044 	movi	r2,1
  808ed4:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
  808ed8:	d0271a05 	stb	zero,-25496(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
  808edc:	e0bffd03 	ldbu	r2,-12(fp)
  808ee0:	1005003a 	cmpeq	r2,r2,zero
  808ee4:	1000551e 	bne	r2,zero,80903c <OSTimeTick+0x22c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
  808ee8:	d0a71917 	ldw	r2,-25500(gp)
  808eec:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  808ef0:	00004d06 	br	809028 <OSTimeTick+0x218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808ef4:	0005303a 	rdctl	r2,status
  808ef8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808efc:	e0fff917 	ldw	r3,-28(fp)
  808f00:	00bfff84 	movi	r2,-2
  808f04:	1884703a 	and	r2,r3,r2
  808f08:	1001703a 	wrctl	status,r2
  
  return context;
  808f0c:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
  808f10:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
  808f14:	e0bffe17 	ldw	r2,-8(fp)
  808f18:	10800b8b 	ldhu	r2,46(r2)
  808f1c:	10bfffcc 	andi	r2,r2,65535
  808f20:	1005003a 	cmpeq	r2,r2,zero
  808f24:	1000391e 	bne	r2,zero,80900c <OSTimeTick+0x1fc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
  808f28:	e0bffe17 	ldw	r2,-8(fp)
  808f2c:	10800b8b 	ldhu	r2,46(r2)
  808f30:	10bfffc4 	addi	r2,r2,-1
  808f34:	1007883a 	mov	r3,r2
  808f38:	e0bffe17 	ldw	r2,-8(fp)
  808f3c:	10c00b8d 	sth	r3,46(r2)
  808f40:	e0bffe17 	ldw	r2,-8(fp)
  808f44:	10800b8b 	ldhu	r2,46(r2)
  808f48:	10bfffcc 	andi	r2,r2,65535
  808f4c:	1004c03a 	cmpne	r2,r2,zero
  808f50:	10002e1e 	bne	r2,zero,80900c <OSTimeTick+0x1fc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  808f54:	e0bffe17 	ldw	r2,-8(fp)
  808f58:	10800c03 	ldbu	r2,48(r2)
  808f5c:	10803fcc 	andi	r2,r2,255
  808f60:	10800dcc 	andi	r2,r2,55
  808f64:	1005003a 	cmpeq	r2,r2,zero
  808f68:	10000b1e 	bne	r2,zero,808f98 <OSTimeTick+0x188>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
  808f6c:	e0bffe17 	ldw	r2,-8(fp)
  808f70:	10c00c03 	ldbu	r3,48(r2)
  808f74:	00bff204 	movi	r2,-56
  808f78:	1884703a 	and	r2,r3,r2
  808f7c:	1007883a 	mov	r3,r2
  808f80:	e0bffe17 	ldw	r2,-8(fp)
  808f84:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
  808f88:	e0fffe17 	ldw	r3,-8(fp)
  808f8c:	00800044 	movi	r2,1
  808f90:	18800c45 	stb	r2,49(r3)
  808f94:	00000206 	br	808fa0 <OSTimeTick+0x190>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  808f98:	e0bffe17 	ldw	r2,-8(fp)
  808f9c:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
  808fa0:	e0bffe17 	ldw	r2,-8(fp)
  808fa4:	10800c03 	ldbu	r2,48(r2)
  808fa8:	10803fcc 	andi	r2,r2,255
  808fac:	1080020c 	andi	r2,r2,8
  808fb0:	1004c03a 	cmpne	r2,r2,zero
  808fb4:	1000151e 	bne	r2,zero,80900c <OSTimeTick+0x1fc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
  808fb8:	e0bffe17 	ldw	r2,-8(fp)
  808fbc:	10c00d83 	ldbu	r3,54(r2)
  808fc0:	d0a72203 	ldbu	r2,-25464(gp)
  808fc4:	1884b03a 	or	r2,r3,r2
  808fc8:	d0a72205 	stb	r2,-25464(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  808fcc:	e0bffe17 	ldw	r2,-8(fp)
  808fd0:	10800d03 	ldbu	r2,52(r2)
  808fd4:	11003fcc 	andi	r4,r2,255
  808fd8:	e0bffe17 	ldw	r2,-8(fp)
  808fdc:	10800d03 	ldbu	r2,52(r2)
  808fe0:	10c03fcc 	andi	r3,r2,255
  808fe4:	d0a72244 	addi	r2,gp,-25463
  808fe8:	1885883a 	add	r2,r3,r2
  808fec:	10c00003 	ldbu	r3,0(r2)
  808ff0:	e0bffe17 	ldw	r2,-8(fp)
  808ff4:	10800d43 	ldbu	r2,53(r2)
  808ff8:	1884b03a 	or	r2,r3,r2
  808ffc:	1007883a 	mov	r3,r2
  809000:	d0a72244 	addi	r2,gp,-25463
  809004:	2085883a 	add	r2,r4,r2
  809008:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
  80900c:	e0bffe17 	ldw	r2,-8(fp)
  809010:	10800517 	ldw	r2,20(r2)
  809014:	e0bffe15 	stw	r2,-8(fp)
  809018:	e0bffc17 	ldw	r2,-16(fp)
  80901c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809020:	e0bff817 	ldw	r2,-32(fp)
  809024:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  809028:	e0bffe17 	ldw	r2,-8(fp)
  80902c:	10800c83 	ldbu	r2,50(r2)
  809030:	10803fcc 	andi	r2,r2,255
  809034:	10800518 	cmpnei	r2,r2,20
  809038:	103fae1e 	bne	r2,zero,808ef4 <OSTimeTick+0xe4>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
  80903c:	e037883a 	mov	sp,fp
  809040:	dfc00117 	ldw	ra,4(sp)
  809044:	df000017 	ldw	fp,0(sp)
  809048:	dec00204 	addi	sp,sp,8
  80904c:	f800283a 	ret

00809050 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
  809050:	deffff04 	addi	sp,sp,-4
  809054:	df000015 	stw	fp,0(sp)
  809058:	d839883a 	mov	fp,sp
    return (OS_VERSION);
  80905c:	00804784 	movi	r2,286
}
  809060:	e037883a 	mov	sp,fp
  809064:	df000017 	ldw	fp,0(sp)
  809068:	dec00104 	addi	sp,sp,4
  80906c:	f800283a 	ret

00809070 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
  809070:	deffff04 	addi	sp,sp,-4
  809074:	df000015 	stw	fp,0(sp)
  809078:	d839883a 	mov	fp,sp
}
  80907c:	e037883a 	mov	sp,fp
  809080:	df000017 	ldw	fp,0(sp)
  809084:	dec00104 	addi	sp,sp,4
  809088:	f800283a 	ret

0080908c <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
  80908c:	defff804 	addi	sp,sp,-32
  809090:	dfc00715 	stw	ra,28(sp)
  809094:	df000615 	stw	fp,24(sp)
  809098:	df000604 	addi	fp,sp,24
  80909c:	e13ffc15 	stw	r4,-16(fp)
  8090a0:	e17ffd15 	stw	r5,-12(fp)
  8090a4:	e1bffe05 	stb	r6,-8(fp)
  8090a8:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
  8090ac:	e0bffc17 	ldw	r2,-16(fp)
  8090b0:	10800283 	ldbu	r2,10(r2)
  8090b4:	10c03fcc 	andi	r3,r2,255
  8090b8:	00802074 	movhi	r2,129
  8090bc:	10918204 	addi	r2,r2,17928
  8090c0:	10c5883a 	add	r2,r2,r3
  8090c4:	10800003 	ldbu	r2,0(r2)
  8090c8:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
  8090cc:	e0fffa83 	ldbu	r3,-22(fp)
  8090d0:	e0bffc17 	ldw	r2,-16(fp)
  8090d4:	1885883a 	add	r2,r3,r2
  8090d8:	10800204 	addi	r2,r2,8
  8090dc:	108000c3 	ldbu	r2,3(r2)
  8090e0:	10c03fcc 	andi	r3,r2,255
  8090e4:	00802074 	movhi	r2,129
  8090e8:	10918204 	addi	r2,r2,17928
  8090ec:	10c5883a 	add	r2,r2,r3
  8090f0:	10800003 	ldbu	r2,0(r2)
  8090f4:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
  8090f8:	e0bffa83 	ldbu	r2,-22(fp)
  8090fc:	100490fa 	slli	r2,r2,3
  809100:	1007883a 	mov	r3,r2
  809104:	e0bffa43 	ldbu	r2,-23(fp)
  809108:	1885883a 	add	r2,r3,r2
  80910c:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
  809110:	e0bffa03 	ldbu	r2,-24(fp)
  809114:	00c020b4 	movhi	r3,130
  809118:	18fc7604 	addi	r3,r3,-3624
  80911c:	1085883a 	add	r2,r2,r2
  809120:	1085883a 	add	r2,r2,r2
  809124:	10c5883a 	add	r2,r2,r3
  809128:	10800017 	ldw	r2,0(r2)
  80912c:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
  809130:	e0bffb17 	ldw	r2,-20(fp)
  809134:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
  809138:	e0fffb17 	ldw	r3,-20(fp)
  80913c:	e0bffd17 	ldw	r2,-12(fp)
  809140:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
  809144:	e0bffb17 	ldw	r2,-20(fp)
  809148:	10800c03 	ldbu	r2,48(r2)
  80914c:	1007883a 	mov	r3,r2
  809150:	e0bffe03 	ldbu	r2,-8(fp)
  809154:	0084303a 	nor	r2,zero,r2
  809158:	1884703a 	and	r2,r3,r2
  80915c:	1007883a 	mov	r3,r2
  809160:	e0bffb17 	ldw	r2,-20(fp)
  809164:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
  809168:	e0fffb17 	ldw	r3,-20(fp)
  80916c:	e0bfff03 	ldbu	r2,-4(fp)
  809170:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
  809174:	e0bffb17 	ldw	r2,-20(fp)
  809178:	10800c03 	ldbu	r2,48(r2)
  80917c:	10803fcc 	andi	r2,r2,255
  809180:	1080020c 	andi	r2,r2,8
  809184:	1004c03a 	cmpne	r2,r2,zero
  809188:	1000111e 	bne	r2,zero,8091d0 <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
  80918c:	e0bffb17 	ldw	r2,-20(fp)
  809190:	10c00d83 	ldbu	r3,54(r2)
  809194:	d0a72203 	ldbu	r2,-25464(gp)
  809198:	1884b03a 	or	r2,r3,r2
  80919c:	d0a72205 	stb	r2,-25464(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
  8091a0:	e13ffa83 	ldbu	r4,-22(fp)
  8091a4:	e0fffa83 	ldbu	r3,-22(fp)
  8091a8:	d0a72244 	addi	r2,gp,-25463
  8091ac:	1885883a 	add	r2,r3,r2
  8091b0:	10c00003 	ldbu	r3,0(r2)
  8091b4:	e0bffb17 	ldw	r2,-20(fp)
  8091b8:	10800d43 	ldbu	r2,53(r2)
  8091bc:	1884b03a 	or	r2,r3,r2
  8091c0:	1007883a 	mov	r3,r2
  8091c4:	d0a72244 	addi	r2,gp,-25463
  8091c8:	2085883a 	add	r2,r4,r2
  8091cc:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
  8091d0:	e13ffb17 	ldw	r4,-20(fp)
  8091d4:	e17ffc17 	ldw	r5,-16(fp)
  8091d8:	08094840 	call	809484 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
  8091dc:	e0bffb17 	ldw	r2,-20(fp)
  8091e0:	10800817 	ldw	r2,32(r2)
  8091e4:	1005003a 	cmpeq	r2,r2,zero
  8091e8:	1000071e 	bne	r2,zero,809208 <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  8091ec:	e0bffb17 	ldw	r2,-20(fp)
  8091f0:	11400817 	ldw	r5,32(r2)
  8091f4:	e13ffb17 	ldw	r4,-20(fp)
  8091f8:	080953c0 	call	80953c <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
  8091fc:	e0fffb17 	ldw	r3,-20(fp)
  809200:	e0bffc17 	ldw	r2,-16(fp)
  809204:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
  809208:	e0bffa03 	ldbu	r2,-24(fp)
}
  80920c:	e037883a 	mov	sp,fp
  809210:	dfc00117 	ldw	ra,4(sp)
  809214:	df000017 	ldw	fp,0(sp)
  809218:	dec00204 	addi	sp,sp,8
  80921c:	f800283a 	ret

00809220 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
  809220:	defffd04 	addi	sp,sp,-12
  809224:	df000215 	stw	fp,8(sp)
  809228:	df000204 	addi	fp,sp,8
  80922c:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
  809230:	d0e72517 	ldw	r3,-25452(gp)
  809234:	e0bfff17 	ldw	r2,-4(fp)
  809238:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
  80923c:	d0a72517 	ldw	r2,-25452(gp)
  809240:	10800d03 	ldbu	r2,52(r2)
  809244:	11003fcc 	andi	r4,r2,255
  809248:	d0a72517 	ldw	r2,-25452(gp)
  80924c:	10800d03 	ldbu	r2,52(r2)
  809250:	10c03fcc 	andi	r3,r2,255
  809254:	e0bfff17 	ldw	r2,-4(fp)
  809258:	1885883a 	add	r2,r3,r2
  80925c:	10800204 	addi	r2,r2,8
  809260:	10c000c3 	ldbu	r3,3(r2)
  809264:	d0a72517 	ldw	r2,-25452(gp)
  809268:	10800d43 	ldbu	r2,53(r2)
  80926c:	1884b03a 	or	r2,r3,r2
  809270:	1007883a 	mov	r3,r2
  809274:	e0bfff17 	ldw	r2,-4(fp)
  809278:	2085883a 	add	r2,r4,r2
  80927c:	10800204 	addi	r2,r2,8
  809280:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  809284:	e0bfff17 	ldw	r2,-4(fp)
  809288:	10c00283 	ldbu	r3,10(r2)
  80928c:	d0a72517 	ldw	r2,-25452(gp)
  809290:	10800d83 	ldbu	r2,54(r2)
  809294:	1884b03a 	or	r2,r3,r2
  809298:	1007883a 	mov	r3,r2
  80929c:	e0bfff17 	ldw	r2,-4(fp)
  8092a0:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  8092a4:	d0a72517 	ldw	r2,-25452(gp)
  8092a8:	10800d03 	ldbu	r2,52(r2)
  8092ac:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  8092b0:	e13ffe03 	ldbu	r4,-8(fp)
  8092b4:	e0fffe03 	ldbu	r3,-8(fp)
  8092b8:	d0a72244 	addi	r2,gp,-25463
  8092bc:	1885883a 	add	r2,r3,r2
  8092c0:	10800003 	ldbu	r2,0(r2)
  8092c4:	1007883a 	mov	r3,r2
  8092c8:	d0a72517 	ldw	r2,-25452(gp)
  8092cc:	10800d43 	ldbu	r2,53(r2)
  8092d0:	0084303a 	nor	r2,zero,r2
  8092d4:	1884703a 	and	r2,r3,r2
  8092d8:	1007883a 	mov	r3,r2
  8092dc:	d0a72244 	addi	r2,gp,-25463
  8092e0:	2085883a 	add	r2,r4,r2
  8092e4:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  8092e8:	e0fffe03 	ldbu	r3,-8(fp)
  8092ec:	d0a72244 	addi	r2,gp,-25463
  8092f0:	1885883a 	add	r2,r3,r2
  8092f4:	10800003 	ldbu	r2,0(r2)
  8092f8:	10803fcc 	andi	r2,r2,255
  8092fc:	1004c03a 	cmpne	r2,r2,zero
  809300:	1000071e 	bne	r2,zero,809320 <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  809304:	d0a72517 	ldw	r2,-25452(gp)
  809308:	10800d83 	ldbu	r2,54(r2)
  80930c:	0084303a 	nor	r2,zero,r2
  809310:	1007883a 	mov	r3,r2
  809314:	d0a72203 	ldbu	r2,-25464(gp)
  809318:	1884703a 	and	r2,r3,r2
  80931c:	d0a72205 	stb	r2,-25464(gp)
    }
}
  809320:	e037883a 	mov	sp,fp
  809324:	df000017 	ldw	fp,0(sp)
  809328:	dec00104 	addi	sp,sp,4
  80932c:	f800283a 	ret

00809330 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
  809330:	defffb04 	addi	sp,sp,-20
  809334:	df000415 	stw	fp,16(sp)
  809338:	df000404 	addi	fp,sp,16
  80933c:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
  809340:	d0a72517 	ldw	r2,-25452(gp)
  809344:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
  809348:	d0e72517 	ldw	r3,-25452(gp)
  80934c:	e0bfff17 	ldw	r2,-4(fp)
  809350:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
  809354:	e0bfff17 	ldw	r2,-4(fp)
  809358:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
  80935c:	e0bffe17 	ldw	r2,-8(fp)
  809360:	10800017 	ldw	r2,0(r2)
  809364:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  809368:	00002006 	br	8093ec <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
  80936c:	d0a72517 	ldw	r2,-25452(gp)
  809370:	10800d03 	ldbu	r2,52(r2)
  809374:	11003fcc 	andi	r4,r2,255
  809378:	d0a72517 	ldw	r2,-25452(gp)
  80937c:	10800d03 	ldbu	r2,52(r2)
  809380:	10c03fcc 	andi	r3,r2,255
  809384:	e0bffd17 	ldw	r2,-12(fp)
  809388:	1885883a 	add	r2,r3,r2
  80938c:	10800204 	addi	r2,r2,8
  809390:	10c000c3 	ldbu	r3,3(r2)
  809394:	d0a72517 	ldw	r2,-25452(gp)
  809398:	10800d43 	ldbu	r2,53(r2)
  80939c:	1884b03a 	or	r2,r3,r2
  8093a0:	1007883a 	mov	r3,r2
  8093a4:	e0bffd17 	ldw	r2,-12(fp)
  8093a8:	2085883a 	add	r2,r4,r2
  8093ac:	10800204 	addi	r2,r2,8
  8093b0:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  8093b4:	e0bffd17 	ldw	r2,-12(fp)
  8093b8:	10c00283 	ldbu	r3,10(r2)
  8093bc:	d0a72517 	ldw	r2,-25452(gp)
  8093c0:	10800d83 	ldbu	r2,54(r2)
  8093c4:	1884b03a 	or	r2,r3,r2
  8093c8:	1007883a 	mov	r3,r2
  8093cc:	e0bffd17 	ldw	r2,-12(fp)
  8093d0:	10c00285 	stb	r3,10(r2)
        pevents++;
  8093d4:	e0bffe17 	ldw	r2,-8(fp)
  8093d8:	10800104 	addi	r2,r2,4
  8093dc:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
  8093e0:	e0bffe17 	ldw	r2,-8(fp)
  8093e4:	10800017 	ldw	r2,0(r2)
  8093e8:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  8093ec:	e0bffd17 	ldw	r2,-12(fp)
  8093f0:	1004c03a 	cmpne	r2,r2,zero
  8093f4:	103fdd1e 	bne	r2,zero,80936c <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  8093f8:	d0a72517 	ldw	r2,-25452(gp)
  8093fc:	10800d03 	ldbu	r2,52(r2)
  809400:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  809404:	e13ffc03 	ldbu	r4,-16(fp)
  809408:	e0fffc03 	ldbu	r3,-16(fp)
  80940c:	d0a72244 	addi	r2,gp,-25463
  809410:	1885883a 	add	r2,r3,r2
  809414:	10800003 	ldbu	r2,0(r2)
  809418:	1007883a 	mov	r3,r2
  80941c:	d0a72517 	ldw	r2,-25452(gp)
  809420:	10800d43 	ldbu	r2,53(r2)
  809424:	0084303a 	nor	r2,zero,r2
  809428:	1884703a 	and	r2,r3,r2
  80942c:	1007883a 	mov	r3,r2
  809430:	d0a72244 	addi	r2,gp,-25463
  809434:	2085883a 	add	r2,r4,r2
  809438:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  80943c:	e0fffc03 	ldbu	r3,-16(fp)
  809440:	d0a72244 	addi	r2,gp,-25463
  809444:	1885883a 	add	r2,r3,r2
  809448:	10800003 	ldbu	r2,0(r2)
  80944c:	10803fcc 	andi	r2,r2,255
  809450:	1004c03a 	cmpne	r2,r2,zero
  809454:	1000071e 	bne	r2,zero,809474 <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  809458:	d0a72517 	ldw	r2,-25452(gp)
  80945c:	10800d83 	ldbu	r2,54(r2)
  809460:	0084303a 	nor	r2,zero,r2
  809464:	1007883a 	mov	r3,r2
  809468:	d0a72203 	ldbu	r2,-25464(gp)
  80946c:	1884703a 	and	r2,r3,r2
  809470:	d0a72205 	stb	r2,-25464(gp)
    }
}
  809474:	e037883a 	mov	sp,fp
  809478:	df000017 	ldw	fp,0(sp)
  80947c:	dec00104 	addi	sp,sp,4
  809480:	f800283a 	ret

00809484 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
  809484:	defffc04 	addi	sp,sp,-16
  809488:	df000315 	stw	fp,12(sp)
  80948c:	df000304 	addi	fp,sp,12
  809490:	e13ffe15 	stw	r4,-8(fp)
  809494:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
  809498:	e0bffe17 	ldw	r2,-8(fp)
  80949c:	10800d03 	ldbu	r2,52(r2)
  8094a0:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
  8094a4:	e13ffd03 	ldbu	r4,-12(fp)
  8094a8:	e0fffd03 	ldbu	r3,-12(fp)
  8094ac:	e0bfff17 	ldw	r2,-4(fp)
  8094b0:	1885883a 	add	r2,r3,r2
  8094b4:	10800204 	addi	r2,r2,8
  8094b8:	108000c3 	ldbu	r2,3(r2)
  8094bc:	1007883a 	mov	r3,r2
  8094c0:	e0bffe17 	ldw	r2,-8(fp)
  8094c4:	10800d43 	ldbu	r2,53(r2)
  8094c8:	0084303a 	nor	r2,zero,r2
  8094cc:	1884703a 	and	r2,r3,r2
  8094d0:	1007883a 	mov	r3,r2
  8094d4:	e0bfff17 	ldw	r2,-4(fp)
  8094d8:	2085883a 	add	r2,r4,r2
  8094dc:	10800204 	addi	r2,r2,8
  8094e0:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
  8094e4:	e0fffd03 	ldbu	r3,-12(fp)
  8094e8:	e0bfff17 	ldw	r2,-4(fp)
  8094ec:	1885883a 	add	r2,r3,r2
  8094f0:	10800204 	addi	r2,r2,8
  8094f4:	108000c3 	ldbu	r2,3(r2)
  8094f8:	10803fcc 	andi	r2,r2,255
  8094fc:	1004c03a 	cmpne	r2,r2,zero
  809500:	10000a1e 	bne	r2,zero,80952c <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
  809504:	e0bfff17 	ldw	r2,-4(fp)
  809508:	10800283 	ldbu	r2,10(r2)
  80950c:	1007883a 	mov	r3,r2
  809510:	e0bffe17 	ldw	r2,-8(fp)
  809514:	10800d83 	ldbu	r2,54(r2)
  809518:	0084303a 	nor	r2,zero,r2
  80951c:	1884703a 	and	r2,r3,r2
  809520:	1007883a 	mov	r3,r2
  809524:	e0bfff17 	ldw	r2,-4(fp)
  809528:	10c00285 	stb	r3,10(r2)
    }
}
  80952c:	e037883a 	mov	sp,fp
  809530:	df000017 	ldw	fp,0(sp)
  809534:	dec00104 	addi	sp,sp,4
  809538:	f800283a 	ret

0080953c <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
  80953c:	defffa04 	addi	sp,sp,-24
  809540:	df000515 	stw	fp,20(sp)
  809544:	df000504 	addi	fp,sp,20
  809548:	e13ffe15 	stw	r4,-8(fp)
  80954c:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
  809550:	e0bffe17 	ldw	r2,-8(fp)
  809554:	10800d03 	ldbu	r2,52(r2)
  809558:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
  80955c:	e0bffe17 	ldw	r2,-8(fp)
  809560:	10800d83 	ldbu	r2,54(r2)
  809564:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
  809568:	e0bffe17 	ldw	r2,-8(fp)
  80956c:	10800d43 	ldbu	r2,53(r2)
  809570:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
  809574:	e0bfff17 	ldw	r2,-4(fp)
  809578:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
  80957c:	e0bffd17 	ldw	r2,-12(fp)
  809580:	10800017 	ldw	r2,0(r2)
  809584:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  809588:	00002606 	br	809624 <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
  80958c:	e13ffb83 	ldbu	r4,-18(fp)
  809590:	e0fffb83 	ldbu	r3,-18(fp)
  809594:	e0bffc17 	ldw	r2,-16(fp)
  809598:	1885883a 	add	r2,r3,r2
  80959c:	10800204 	addi	r2,r2,8
  8095a0:	108000c3 	ldbu	r2,3(r2)
  8095a4:	1007883a 	mov	r3,r2
  8095a8:	e0bffb03 	ldbu	r2,-20(fp)
  8095ac:	0084303a 	nor	r2,zero,r2
  8095b0:	1884703a 	and	r2,r3,r2
  8095b4:	1007883a 	mov	r3,r2
  8095b8:	e0bffc17 	ldw	r2,-16(fp)
  8095bc:	2085883a 	add	r2,r4,r2
  8095c0:	10800204 	addi	r2,r2,8
  8095c4:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
  8095c8:	e0fffb83 	ldbu	r3,-18(fp)
  8095cc:	e0bffc17 	ldw	r2,-16(fp)
  8095d0:	1885883a 	add	r2,r3,r2
  8095d4:	10800204 	addi	r2,r2,8
  8095d8:	108000c3 	ldbu	r2,3(r2)
  8095dc:	10803fcc 	andi	r2,r2,255
  8095e0:	1004c03a 	cmpne	r2,r2,zero
  8095e4:	1000091e 	bne	r2,zero,80960c <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
  8095e8:	e0bffc17 	ldw	r2,-16(fp)
  8095ec:	10800283 	ldbu	r2,10(r2)
  8095f0:	1007883a 	mov	r3,r2
  8095f4:	e0bffb43 	ldbu	r2,-19(fp)
  8095f8:	0084303a 	nor	r2,zero,r2
  8095fc:	1884703a 	and	r2,r3,r2
  809600:	1007883a 	mov	r3,r2
  809604:	e0bffc17 	ldw	r2,-16(fp)
  809608:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
  80960c:	e0bffd17 	ldw	r2,-12(fp)
  809610:	10800104 	addi	r2,r2,4
  809614:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
  809618:	e0bffd17 	ldw	r2,-12(fp)
  80961c:	10800017 	ldw	r2,0(r2)
  809620:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  809624:	e0bffc17 	ldw	r2,-16(fp)
  809628:	1004c03a 	cmpne	r2,r2,zero
  80962c:	103fd71e 	bne	r2,zero,80958c <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
  809630:	e037883a 	mov	sp,fp
  809634:	df000017 	ldw	fp,0(sp)
  809638:	dec00104 	addi	sp,sp,4
  80963c:	f800283a 	ret

00809640 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
  809640:	defffc04 	addi	sp,sp,-16
  809644:	df000315 	stw	fp,12(sp)
  809648:	df000304 	addi	fp,sp,12
  80964c:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
  809650:	e0bfff17 	ldw	r2,-4(fp)
  809654:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
  809658:	e0bfff17 	ldw	r2,-4(fp)
  80965c:	108002c4 	addi	r2,r2,11
  809660:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  809664:	e03ffd05 	stb	zero,-12(fp)
  809668:	00000806 	br	80968c <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
  80966c:	e0bffe17 	ldw	r2,-8(fp)
  809670:	10000005 	stb	zero,0(r2)
  809674:	e0bffe17 	ldw	r2,-8(fp)
  809678:	10800044 	addi	r2,r2,1
  80967c:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  809680:	e0bffd03 	ldbu	r2,-12(fp)
  809684:	10800044 	addi	r2,r2,1
  809688:	e0bffd05 	stb	r2,-12(fp)
  80968c:	e0bffd03 	ldbu	r2,-12(fp)
  809690:	108000f0 	cmpltui	r2,r2,3
  809694:	103ff51e 	bne	r2,zero,80966c <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
  809698:	e037883a 	mov	sp,fp
  80969c:	df000017 	ldw	fp,0(sp)
  8096a0:	dec00104 	addi	sp,sp,4
  8096a4:	f800283a 	ret

008096a8 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
  8096a8:	defffb04 	addi	sp,sp,-20
  8096ac:	dfc00415 	stw	ra,16(sp)
  8096b0:	df000315 	stw	fp,12(sp)
  8096b4:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
  8096b8:	010020b4 	movhi	r4,130
  8096bc:	21386204 	addi	r4,r4,-7800
  8096c0:	0142d004 	movi	r5,2880
  8096c4:	0809a0c0 	call	809a0c <OS_MemClr>
    pevent1 = &OSEventTbl[0];
  8096c8:	008020b4 	movhi	r2,130
  8096cc:	10b86204 	addi	r2,r2,-7800
  8096d0:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
  8096d4:	008020b4 	movhi	r2,130
  8096d8:	10b86e04 	addi	r2,r2,-7752
  8096dc:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  8096e0:	e03fff0d 	sth	zero,-4(fp)
  8096e4:	00001306 	br	809734 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
  8096e8:	e0bffe17 	ldw	r2,-8(fp)
  8096ec:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
  8096f0:	e0fffe17 	ldw	r3,-8(fp)
  8096f4:	e0bffd17 	ldw	r2,-12(fp)
  8096f8:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
  8096fc:	e0fffe17 	ldw	r3,-8(fp)
  809700:	00800fc4 	movi	r2,63
  809704:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
  809708:	e0bffe17 	ldw	r2,-8(fp)
  80970c:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
  809710:	e0bffe17 	ldw	r2,-8(fp)
  809714:	10800c04 	addi	r2,r2,48
  809718:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
  80971c:	e0bffd17 	ldw	r2,-12(fp)
  809720:	10800c04 	addi	r2,r2,48
  809724:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  809728:	e0bfff0b 	ldhu	r2,-4(fp)
  80972c:	10800044 	addi	r2,r2,1
  809730:	e0bfff0d 	sth	r2,-4(fp)
  809734:	e0bfff0b 	ldhu	r2,-4(fp)
  809738:	10800ef0 	cmpltui	r2,r2,59
  80973c:	103fea1e 	bne	r2,zero,8096e8 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
  809740:	e0bffe17 	ldw	r2,-8(fp)
  809744:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
  809748:	e0bffe17 	ldw	r2,-8(fp)
  80974c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
  809750:	e0fffe17 	ldw	r3,-8(fp)
  809754:	00800fc4 	movi	r2,63
  809758:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
  80975c:	e0bffe17 	ldw	r2,-8(fp)
  809760:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
  809764:	008020b4 	movhi	r2,130
  809768:	10b86204 	addi	r2,r2,-7800
  80976c:	d0a72315 	stw	r2,-25460(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
  809770:	e037883a 	mov	sp,fp
  809774:	dfc00117 	ldw	ra,4(sp)
  809778:	df000017 	ldw	fp,0(sp)
  80977c:	dec00204 	addi	sp,sp,8
  809780:	f800283a 	ret

00809784 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
  809784:	deffff04 	addi	sp,sp,-4
  809788:	df000015 	stw	fp,0(sp)
  80978c:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
  809790:	d0272615 	stw	zero,-25448(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
  809794:	d0272405 	stb	zero,-25456(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
  809798:	d0271605 	stb	zero,-25512(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
  80979c:	d0271e45 	stb	zero,-25479(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
  8097a0:	d0271645 	stb	zero,-25511(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
  8097a4:	d0271b15 	stw	zero,-25492(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
  8097a8:	d0271715 	stw	zero,-25508(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
  8097ac:	d0272915 	stw	zero,-25436(gp)
    OSIdleCtrMax  = 0L;
  8097b0:	d0271c15 	stw	zero,-25488(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
  8097b4:	d0272805 	stb	zero,-25440(gp)
#endif
}
  8097b8:	e037883a 	mov	sp,fp
  8097bc:	df000017 	ldw	fp,0(sp)
  8097c0:	dec00104 	addi	sp,sp,4
  8097c4:	f800283a 	ret

008097c8 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
  8097c8:	defffd04 	addi	sp,sp,-12
  8097cc:	df000215 	stw	fp,8(sp)
  8097d0:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
  8097d4:	d0272205 	stb	zero,-25464(gp)
    prdytbl       = &OSRdyTbl[0];
  8097d8:	d0a72244 	addi	r2,gp,-25463
  8097dc:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  8097e0:	e03fff05 	stb	zero,-4(fp)
  8097e4:	00000806 	br	809808 <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
  8097e8:	e0bffe17 	ldw	r2,-8(fp)
  8097ec:	10000005 	stb	zero,0(r2)
  8097f0:	e0bffe17 	ldw	r2,-8(fp)
  8097f4:	10800044 	addi	r2,r2,1
  8097f8:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  8097fc:	e0bfff03 	ldbu	r2,-4(fp)
  809800:	10800044 	addi	r2,r2,1
  809804:	e0bfff05 	stb	r2,-4(fp)
  809808:	e0bfff03 	ldbu	r2,-4(fp)
  80980c:	108000f0 	cmpltui	r2,r2,3
  809810:	103ff51e 	bne	r2,zero,8097e8 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
  809814:	d0271845 	stb	zero,-25503(gp)
    OSPrioHighRdy = 0;
  809818:	d0271805 	stb	zero,-25504(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
  80981c:	d0272015 	stw	zero,-25472(gp)
    OSTCBCur      = (OS_TCB *)0;
  809820:	d0272515 	stw	zero,-25452(gp)
}
  809824:	e037883a 	mov	sp,fp
  809828:	df000017 	ldw	fp,0(sp)
  80982c:	dec00104 	addi	sp,sp,4
  809830:	f800283a 	ret

00809834 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
  809834:	defff804 	addi	sp,sp,-32
  809838:	dfc00715 	stw	ra,28(sp)
  80983c:	df000615 	stw	fp,24(sp)
  809840:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
  809844:	018020b4 	movhi	r6,130
  809848:	31b86104 	addi	r6,r6,-7804
  80984c:	00bfffd4 	movui	r2,65535
  809850:	d8800015 	stw	r2,0(sp)
  809854:	008020b4 	movhi	r2,130
  809858:	10b66204 	addi	r2,r2,-9848
  80985c:	d8800115 	stw	r2,4(sp)
  809860:	00808004 	movi	r2,512
  809864:	d8800215 	stw	r2,8(sp)
  809868:	d8000315 	stw	zero,12(sp)
  80986c:	008000c4 	movi	r2,3
  809870:	d8800415 	stw	r2,16(sp)
  809874:	01002074 	movhi	r4,129
  809878:	21273a04 	addi	r4,r4,-25368
  80987c:	000b883a 	mov	r5,zero
  809880:	01c00504 	movi	r7,20
  809884:	080eac80 	call	80eac8 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
  809888:	01402074 	movhi	r5,129
  80988c:	2951c204 	addi	r5,r5,18184
  809890:	01000504 	movi	r4,20
  809894:	e1bfff04 	addi	r6,fp,-4
  809898:	080f3fc0 	call	80f3fc <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
  80989c:	e037883a 	mov	sp,fp
  8098a0:	dfc00117 	ldw	ra,4(sp)
  8098a4:	df000017 	ldw	fp,0(sp)
  8098a8:	dec00204 	addi	sp,sp,8
  8098ac:	f800283a 	ret

008098b0 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
  8098b0:	defff804 	addi	sp,sp,-32
  8098b4:	dfc00715 	stw	ra,28(sp)
  8098b8:	df000615 	stw	fp,24(sp)
  8098bc:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
  8098c0:	018020b4 	movhi	r6,130
  8098c4:	31b5e904 	addi	r6,r6,-10332
  8098c8:	00bfff94 	movui	r2,65534
  8098cc:	d8800015 	stw	r2,0(sp)
  8098d0:	008020b4 	movhi	r2,130
  8098d4:	10b3ea04 	addi	r2,r2,-12376
  8098d8:	d8800115 	stw	r2,4(sp)
  8098dc:	00808004 	movi	r2,512
  8098e0:	d8800215 	stw	r2,8(sp)
  8098e4:	d8000315 	stw	zero,12(sp)
  8098e8:	008000c4 	movi	r2,3
  8098ec:	d8800415 	stw	r2,16(sp)
  8098f0:	01002074 	movhi	r4,129
  8098f4:	21275104 	addi	r4,r4,-25276
  8098f8:	000b883a 	mov	r5,zero
  8098fc:	01c004c4 	movi	r7,19
  809900:	080eac80 	call	80eac8 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
  809904:	01402074 	movhi	r5,129
  809908:	2951c604 	addi	r5,r5,18200
  80990c:	010004c4 	movi	r4,19
  809910:	e1bfff04 	addi	r6,fp,-4
  809914:	080f3fc0 	call	80f3fc <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
  809918:	e037883a 	mov	sp,fp
  80991c:	dfc00117 	ldw	ra,4(sp)
  809920:	df000017 	ldw	fp,0(sp)
  809924:	dec00204 	addi	sp,sp,8
  809928:	f800283a 	ret

0080992c <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
  80992c:	defffb04 	addi	sp,sp,-20
  809930:	dfc00415 	stw	ra,16(sp)
  809934:	df000315 	stw	fp,12(sp)
  809938:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
  80993c:	010020b4 	movhi	r4,130
  809940:	213b3204 	addi	r4,r4,-4920
  809944:	01414404 	movi	r5,1296
  809948:	0809a0c0 	call	809a0c <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
  80994c:	010020b4 	movhi	r4,130
  809950:	213c7604 	addi	r4,r4,-3624
  809954:	01401504 	movi	r5,84
  809958:	0809a0c0 	call	809a0c <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
  80995c:	008020b4 	movhi	r2,130
  809960:	10bb3204 	addi	r2,r2,-4920
  809964:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
  809968:	008020b4 	movhi	r2,130
  80996c:	10bb4d04 	addi	r2,r2,-4812
  809970:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  809974:	e03fff05 	stb	zero,-4(fp)
  809978:	00001106 	br	8099c0 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
  80997c:	e0fffe17 	ldw	r3,-8(fp)
  809980:	e0bffd17 	ldw	r2,-12(fp)
  809984:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
  809988:	e0fffe17 	ldw	r3,-8(fp)
  80998c:	00800fc4 	movi	r2,63
  809990:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  809994:	e0bffe17 	ldw	r2,-8(fp)
  809998:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
  80999c:	e0bffe17 	ldw	r2,-8(fp)
  8099a0:	10801b04 	addi	r2,r2,108
  8099a4:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
  8099a8:	e0bffd17 	ldw	r2,-12(fp)
  8099ac:	10801b04 	addi	r2,r2,108
  8099b0:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  8099b4:	e0bfff03 	ldbu	r2,-4(fp)
  8099b8:	10800044 	addi	r2,r2,1
  8099bc:	e0bfff05 	stb	r2,-4(fp)
  8099c0:	e0bfff03 	ldbu	r2,-4(fp)
  8099c4:	108002f0 	cmpltui	r2,r2,11
  8099c8:	103fec1e 	bne	r2,zero,80997c <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
  8099cc:	e0bffe17 	ldw	r2,-8(fp)
  8099d0:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
  8099d4:	e0fffe17 	ldw	r3,-8(fp)
  8099d8:	00800fc4 	movi	r2,63
  8099dc:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  8099e0:	e0bffe17 	ldw	r2,-8(fp)
  8099e4:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
  8099e8:	d0271915 	stw	zero,-25500(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
  8099ec:	008020b4 	movhi	r2,130
  8099f0:	10bb3204 	addi	r2,r2,-4920
  8099f4:	d0a71d15 	stw	r2,-25484(gp)
}
  8099f8:	e037883a 	mov	sp,fp
  8099fc:	dfc00117 	ldw	ra,4(sp)
  809a00:	df000017 	ldw	fp,0(sp)
  809a04:	dec00204 	addi	sp,sp,8
  809a08:	f800283a 	ret

00809a0c <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
  809a0c:	defffd04 	addi	sp,sp,-12
  809a10:	df000215 	stw	fp,8(sp)
  809a14:	df000204 	addi	fp,sp,8
  809a18:	e13ffe15 	stw	r4,-8(fp)
  809a1c:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
  809a20:	00000806 	br	809a44 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
  809a24:	e0bffe17 	ldw	r2,-8(fp)
  809a28:	10000005 	stb	zero,0(r2)
  809a2c:	e0bffe17 	ldw	r2,-8(fp)
  809a30:	10800044 	addi	r2,r2,1
  809a34:	e0bffe15 	stw	r2,-8(fp)
        size--;
  809a38:	e0bfff0b 	ldhu	r2,-4(fp)
  809a3c:	10bfffc4 	addi	r2,r2,-1
  809a40:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
  809a44:	e0bfff0b 	ldhu	r2,-4(fp)
  809a48:	1004c03a 	cmpne	r2,r2,zero
  809a4c:	103ff51e 	bne	r2,zero,809a24 <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
  809a50:	e037883a 	mov	sp,fp
  809a54:	df000017 	ldw	fp,0(sp)
  809a58:	dec00104 	addi	sp,sp,4
  809a5c:	f800283a 	ret

00809a60 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
  809a60:	defffc04 	addi	sp,sp,-16
  809a64:	df000315 	stw	fp,12(sp)
  809a68:	df000304 	addi	fp,sp,12
  809a6c:	e13ffd15 	stw	r4,-12(fp)
  809a70:	e17ffe15 	stw	r5,-8(fp)
  809a74:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
  809a78:	00000d06 	br	809ab0 <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
  809a7c:	e0bffe17 	ldw	r2,-8(fp)
  809a80:	10c00003 	ldbu	r3,0(r2)
  809a84:	e0bffd17 	ldw	r2,-12(fp)
  809a88:	10c00005 	stb	r3,0(r2)
  809a8c:	e0bffd17 	ldw	r2,-12(fp)
  809a90:	10800044 	addi	r2,r2,1
  809a94:	e0bffd15 	stw	r2,-12(fp)
  809a98:	e0bffe17 	ldw	r2,-8(fp)
  809a9c:	10800044 	addi	r2,r2,1
  809aa0:	e0bffe15 	stw	r2,-8(fp)
        size--;
  809aa4:	e0bfff0b 	ldhu	r2,-4(fp)
  809aa8:	10bfffc4 	addi	r2,r2,-1
  809aac:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
  809ab0:	e0bfff0b 	ldhu	r2,-4(fp)
  809ab4:	1004c03a 	cmpne	r2,r2,zero
  809ab8:	103ff01e 	bne	r2,zero,809a7c <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
  809abc:	e037883a 	mov	sp,fp
  809ac0:	df000017 	ldw	fp,0(sp)
  809ac4:	dec00104 	addi	sp,sp,4
  809ac8:	f800283a 	ret

00809acc <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
  809acc:	defffb04 	addi	sp,sp,-20
  809ad0:	dfc00415 	stw	ra,16(sp)
  809ad4:	df000315 	stw	fp,12(sp)
  809ad8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  809adc:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809ae0:	0005303a 	rdctl	r2,status
  809ae4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809ae8:	e0fffe17 	ldw	r3,-8(fp)
  809aec:	00bfff84 	movi	r2,-2
  809af0:	1884703a 	and	r2,r3,r2
  809af4:	1001703a 	wrctl	status,r2
  
  return context;
  809af8:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
  809afc:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
  809b00:	d0a72403 	ldbu	r2,-25456(gp)
  809b04:	10803fcc 	andi	r2,r2,255
  809b08:	1004c03a 	cmpne	r2,r2,zero
  809b0c:	10001b1e 	bne	r2,zero,809b7c <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
  809b10:	d0a71603 	ldbu	r2,-25512(gp)
  809b14:	10803fcc 	andi	r2,r2,255
  809b18:	1004c03a 	cmpne	r2,r2,zero
  809b1c:	1000171e 	bne	r2,zero,809b7c <OS_Sched+0xb0>
            OS_SchedNew();
  809b20:	0809ba00 	call	809ba0 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
  809b24:	d0a71803 	ldbu	r2,-25504(gp)
  809b28:	d0e71843 	ldbu	r3,-25503(gp)
  809b2c:	11003fcc 	andi	r4,r2,255
  809b30:	18803fcc 	andi	r2,r3,255
  809b34:	20801126 	beq	r4,r2,809b7c <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
  809b38:	d0a71803 	ldbu	r2,-25504(gp)
  809b3c:	10803fcc 	andi	r2,r2,255
  809b40:	00c020b4 	movhi	r3,130
  809b44:	18fc7604 	addi	r3,r3,-3624
  809b48:	1085883a 	add	r2,r2,r2
  809b4c:	1085883a 	add	r2,r2,r2
  809b50:	10c5883a 	add	r2,r2,r3
  809b54:	10800017 	ldw	r2,0(r2)
  809b58:	d0a72015 	stw	r2,-25472(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
  809b5c:	d0e72017 	ldw	r3,-25472(gp)
  809b60:	18800e17 	ldw	r2,56(r3)
  809b64:	10800044 	addi	r2,r2,1
  809b68:	18800e15 	stw	r2,56(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
  809b6c:	d0a71b17 	ldw	r2,-25492(gp)
  809b70:	10800044 	addi	r2,r2,1
  809b74:	d0a71b15 	stw	r2,-25492(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
  809b78:	08136d00 	call	8136d0 <OSCtxSw>
  809b7c:	e0bfff17 	ldw	r2,-4(fp)
  809b80:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809b84:	e0bffd17 	ldw	r2,-12(fp)
  809b88:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
  809b8c:	e037883a 	mov	sp,fp
  809b90:	dfc00117 	ldw	ra,4(sp)
  809b94:	df000017 	ldw	fp,0(sp)
  809b98:	dec00204 	addi	sp,sp,8
  809b9c:	f800283a 	ret

00809ba0 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
  809ba0:	defffe04 	addi	sp,sp,-8
  809ba4:	df000115 	stw	fp,4(sp)
  809ba8:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
  809bac:	d0a72203 	ldbu	r2,-25464(gp)
  809bb0:	10c03fcc 	andi	r3,r2,255
  809bb4:	00802074 	movhi	r2,129
  809bb8:	10918204 	addi	r2,r2,17928
  809bbc:	10c5883a 	add	r2,r2,r3
  809bc0:	10800003 	ldbu	r2,0(r2)
  809bc4:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  809bc8:	e0bfff03 	ldbu	r2,-4(fp)
  809bcc:	100490fa 	slli	r2,r2,3
  809bd0:	1009883a 	mov	r4,r2
  809bd4:	e0ffff03 	ldbu	r3,-4(fp)
  809bd8:	d0a72244 	addi	r2,gp,-25463
  809bdc:	1885883a 	add	r2,r3,r2
  809be0:	10800003 	ldbu	r2,0(r2)
  809be4:	10c03fcc 	andi	r3,r2,255
  809be8:	00802074 	movhi	r2,129
  809bec:	10918204 	addi	r2,r2,17928
  809bf0:	10c5883a 	add	r2,r2,r3
  809bf4:	10800003 	ldbu	r2,0(r2)
  809bf8:	2085883a 	add	r2,r4,r2
  809bfc:	d0a71805 	stb	r2,-25504(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
  809c00:	e037883a 	mov	sp,fp
  809c04:	df000017 	ldw	fp,0(sp)
  809c08:	dec00104 	addi	sp,sp,4
  809c0c:	f800283a 	ret

00809c10 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
  809c10:	defffc04 	addi	sp,sp,-16
  809c14:	df000315 	stw	fp,12(sp)
  809c18:	df000304 	addi	fp,sp,12
  809c1c:	e13ffe15 	stw	r4,-8(fp)
  809c20:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
  809c24:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
  809c28:	00000d06 	br	809c60 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
  809c2c:	e0bfff17 	ldw	r2,-4(fp)
  809c30:	10c00003 	ldbu	r3,0(r2)
  809c34:	e0bffe17 	ldw	r2,-8(fp)
  809c38:	10c00005 	stb	r3,0(r2)
  809c3c:	e0bffe17 	ldw	r2,-8(fp)
  809c40:	10800044 	addi	r2,r2,1
  809c44:	e0bffe15 	stw	r2,-8(fp)
  809c48:	e0bfff17 	ldw	r2,-4(fp)
  809c4c:	10800044 	addi	r2,r2,1
  809c50:	e0bfff15 	stw	r2,-4(fp)
        len++;
  809c54:	e0bffd03 	ldbu	r2,-12(fp)
  809c58:	10800044 	addi	r2,r2,1
  809c5c:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  809c60:	e0bfff17 	ldw	r2,-4(fp)
  809c64:	10800003 	ldbu	r2,0(r2)
  809c68:	10803fcc 	andi	r2,r2,255
  809c6c:	1004c03a 	cmpne	r2,r2,zero
  809c70:	103fee1e 	bne	r2,zero,809c2c <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
  809c74:	e0bffe17 	ldw	r2,-8(fp)
  809c78:	10000005 	stb	zero,0(r2)
    return (len);
  809c7c:	e0bffd03 	ldbu	r2,-12(fp)
}
  809c80:	e037883a 	mov	sp,fp
  809c84:	df000017 	ldw	fp,0(sp)
  809c88:	dec00104 	addi	sp,sp,4
  809c8c:	f800283a 	ret

00809c90 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
  809c90:	defffd04 	addi	sp,sp,-12
  809c94:	df000215 	stw	fp,8(sp)
  809c98:	df000204 	addi	fp,sp,8
  809c9c:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
  809ca0:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
  809ca4:	00000606 	br	809cc0 <OS_StrLen+0x30>
        psrc++;
  809ca8:	e0bfff17 	ldw	r2,-4(fp)
  809cac:	10800044 	addi	r2,r2,1
  809cb0:	e0bfff15 	stw	r2,-4(fp)
        len++;
  809cb4:	e0bffe03 	ldbu	r2,-8(fp)
  809cb8:	10800044 	addi	r2,r2,1
  809cbc:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  809cc0:	e0bfff17 	ldw	r2,-4(fp)
  809cc4:	10800003 	ldbu	r2,0(r2)
  809cc8:	10803fcc 	andi	r2,r2,255
  809ccc:	1004c03a 	cmpne	r2,r2,zero
  809cd0:	103ff51e 	bne	r2,zero,809ca8 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
  809cd4:	e0bffe03 	ldbu	r2,-8(fp)
}
  809cd8:	e037883a 	mov	sp,fp
  809cdc:	df000017 	ldw	fp,0(sp)
  809ce0:	dec00104 	addi	sp,sp,4
  809ce4:	f800283a 	ret

00809ce8 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
  809ce8:	defffa04 	addi	sp,sp,-24
  809cec:	dfc00515 	stw	ra,20(sp)
  809cf0:	df000415 	stw	fp,16(sp)
  809cf4:	df000404 	addi	fp,sp,16
  809cf8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  809cfc:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809d00:	0005303a 	rdctl	r2,status
  809d04:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809d08:	e0fffd17 	ldw	r3,-12(fp)
  809d0c:	00bfff84 	movi	r2,-2
  809d10:	1884703a 	and	r2,r3,r2
  809d14:	1001703a 	wrctl	status,r2
  
  return context;
  809d18:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
  809d1c:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
  809d20:	d0a71717 	ldw	r2,-25508(gp)
  809d24:	10800044 	addi	r2,r2,1
  809d28:	d0a71715 	stw	r2,-25508(gp)
  809d2c:	e0bffe17 	ldw	r2,-8(fp)
  809d30:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809d34:	e0bffc17 	ldw	r2,-16(fp)
  809d38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
  809d3c:	0813b7c0 	call	813b7c <OSTaskIdleHook>
    }
  809d40:	003fef06 	br	809d00 <OS_TaskIdle+0x18>

00809d44 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
  809d44:	defffa04 	addi	sp,sp,-24
  809d48:	dfc00515 	stw	ra,20(sp)
  809d4c:	df000415 	stw	fp,16(sp)
  809d50:	df000404 	addi	fp,sp,16
  809d54:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  809d58:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  809d5c:	00000206 	br	809d68 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
  809d60:	01003204 	movi	r4,200
  809d64:	080fdc00 	call	80fdc0 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  809d68:	d0a72803 	ldbu	r2,-25440(gp)
  809d6c:	10803fcc 	andi	r2,r2,255
  809d70:	1005003a 	cmpeq	r2,r2,zero
  809d74:	103ffa1e 	bne	r2,zero,809d60 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
  809d78:	d1271c17 	ldw	r4,-25488(gp)
  809d7c:	01401904 	movi	r5,100
  809d80:	08143400 	call	814340 <__udivsi3>
  809d84:	d0a71c15 	stw	r2,-25488(gp)
    if (OSIdleCtrMax == 0L) {
  809d88:	d0a71c17 	ldw	r2,-25488(gp)
  809d8c:	1004c03a 	cmpne	r2,r2,zero
  809d90:	1000031e 	bne	r2,zero,809da0 <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
  809d94:	d0271e05 	stb	zero,-25480(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
  809d98:	01003fc4 	movi	r4,255
  809d9c:	080f9d40 	call	80f9d4 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809da0:	0005303a 	rdctl	r2,status
  809da4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809da8:	e0fffd17 	ldw	r3,-12(fp)
  809dac:	00bfff84 	movi	r2,-2
  809db0:	1884703a 	and	r2,r3,r2
  809db4:	1001703a 	wrctl	status,r2
  
  return context;
  809db8:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
  809dbc:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
  809dc0:	d0a71717 	ldw	r2,-25508(gp)
  809dc4:	d0a72915 	stw	r2,-25436(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
  809dc8:	d0271715 	stw	zero,-25508(gp)
  809dcc:	e0bffe17 	ldw	r2,-8(fp)
  809dd0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809dd4:	e0bffc17 	ldw	r2,-16(fp)
  809dd8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
  809ddc:	d1272917 	ldw	r4,-25436(gp)
  809de0:	d1671c17 	ldw	r5,-25488(gp)
  809de4:	08143400 	call	814340 <__udivsi3>
  809de8:	1007883a 	mov	r3,r2
  809dec:	00801904 	movi	r2,100
  809df0:	10c5c83a 	sub	r2,r2,r3
  809df4:	d0a71e05 	stb	r2,-25480(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
  809df8:	0813b0c0 	call	813b0c <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
  809dfc:	0809e0c0 	call	809e0c <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
  809e00:	01001904 	movi	r4,100
  809e04:	080fdc00 	call	80fdc0 <OSTimeDly>
    }
  809e08:	003fe506 	br	809da0 <OS_TaskStat+0x5c>

00809e0c <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
  809e0c:	defffa04 	addi	sp,sp,-24
  809e10:	dfc00515 	stw	ra,20(sp)
  809e14:	df000415 	stw	fp,16(sp)
  809e18:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  809e1c:	e03ffc05 	stb	zero,-16(fp)
  809e20:	00002406 	br	809eb4 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
  809e24:	e13ffc03 	ldbu	r4,-16(fp)
  809e28:	e17ffe04 	addi	r5,fp,-8
  809e2c:	080f7d80 	call	80f7d8 <OSTaskStkChk>
  809e30:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
  809e34:	e0bffc43 	ldbu	r2,-15(fp)
  809e38:	1004c03a 	cmpne	r2,r2,zero
  809e3c:	10001a1e 	bne	r2,zero,809ea8 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
  809e40:	e0bffc03 	ldbu	r2,-16(fp)
  809e44:	00c020b4 	movhi	r3,130
  809e48:	18fc7604 	addi	r3,r3,-3624
  809e4c:	1085883a 	add	r2,r2,r2
  809e50:	1085883a 	add	r2,r2,r2
  809e54:	10c5883a 	add	r2,r2,r3
  809e58:	10800017 	ldw	r2,0(r2)
  809e5c:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
  809e60:	e0bffd17 	ldw	r2,-12(fp)
  809e64:	1005003a 	cmpeq	r2,r2,zero
  809e68:	10000f1e 	bne	r2,zero,809ea8 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
  809e6c:	e0bffd17 	ldw	r2,-12(fp)
  809e70:	10800060 	cmpeqi	r2,r2,1
  809e74:	10000c1e 	bne	r2,zero,809ea8 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
  809e78:	e0bffd17 	ldw	r2,-12(fp)
  809e7c:	10c00217 	ldw	r3,8(r2)
  809e80:	e0bffd17 	ldw	r2,-12(fp)
  809e84:	10800317 	ldw	r2,12(r2)
  809e88:	1085883a 	add	r2,r2,r2
  809e8c:	1085883a 	add	r2,r2,r2
  809e90:	1887883a 	add	r3,r3,r2
  809e94:	e0bffd17 	ldw	r2,-12(fp)
  809e98:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
  809e9c:	e0ffff17 	ldw	r3,-4(fp)
  809ea0:	e0bffd17 	ldw	r2,-12(fp)
  809ea4:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  809ea8:	e0bffc03 	ldbu	r2,-16(fp)
  809eac:	10800044 	addi	r2,r2,1
  809eb0:	e0bffc05 	stb	r2,-16(fp)
  809eb4:	e0bffc03 	ldbu	r2,-16(fp)
  809eb8:	10800570 	cmpltui	r2,r2,21
  809ebc:	103fd91e 	bne	r2,zero,809e24 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
  809ec0:	e037883a 	mov	sp,fp
  809ec4:	dfc00117 	ldw	ra,4(sp)
  809ec8:	df000017 	ldw	fp,0(sp)
  809ecc:	dec00204 	addi	sp,sp,8
  809ed0:	f800283a 	ret

00809ed4 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
  809ed4:	defff104 	addi	sp,sp,-60
  809ed8:	dfc00e15 	stw	ra,56(sp)
  809edc:	df000d15 	stw	fp,52(sp)
  809ee0:	df000d04 	addi	fp,sp,52
  809ee4:	e17ffb15 	stw	r5,-20(fp)
  809ee8:	e1bffc15 	stw	r6,-16(fp)
  809eec:	e0800417 	ldw	r2,16(fp)
  809ef0:	e13ffa05 	stb	r4,-24(fp)
  809ef4:	e1fffd0d 	sth	r7,-12(fp)
  809ef8:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  809efc:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809f00:	0005303a 	rdctl	r2,status
  809f04:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809f08:	e0fff717 	ldw	r3,-36(fp)
  809f0c:	00bfff84 	movi	r2,-2
  809f10:	1884703a 	and	r2,r3,r2
  809f14:	1001703a 	wrctl	status,r2
  
  return context;
  809f18:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
  809f1c:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
  809f20:	d0a71d17 	ldw	r2,-25484(gp)
  809f24:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
  809f28:	e0bff917 	ldw	r2,-28(fp)
  809f2c:	1005003a 	cmpeq	r2,r2,zero
  809f30:	1000941e 	bne	r2,zero,80a184 <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
  809f34:	e0bff917 	ldw	r2,-28(fp)
  809f38:	10800517 	ldw	r2,20(r2)
  809f3c:	d0a71d15 	stw	r2,-25484(gp)
  809f40:	e0bff817 	ldw	r2,-32(fp)
  809f44:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809f48:	e0bff617 	ldw	r2,-40(fp)
  809f4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
  809f50:	e0fff917 	ldw	r3,-28(fp)
  809f54:	e0bffb17 	ldw	r2,-20(fp)
  809f58:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
  809f5c:	e0fff917 	ldw	r3,-28(fp)
  809f60:	e0bffa03 	ldbu	r2,-24(fp)
  809f64:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
  809f68:	e0bff917 	ldw	r2,-28(fp)
  809f6c:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
  809f70:	e0bff917 	ldw	r2,-28(fp)
  809f74:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
  809f78:	e0bff917 	ldw	r2,-28(fp)
  809f7c:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
  809f80:	e0fff917 	ldw	r3,-28(fp)
  809f84:	e0800317 	ldw	r2,12(fp)
  809f88:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
  809f8c:	e0fff917 	ldw	r3,-28(fp)
  809f90:	e0800217 	ldw	r2,8(fp)
  809f94:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
  809f98:	e0fff917 	ldw	r3,-28(fp)
  809f9c:	e0bffc17 	ldw	r2,-16(fp)
  809fa0:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
  809fa4:	e0fff917 	ldw	r3,-28(fp)
  809fa8:	e0bffe0b 	ldhu	r2,-8(fp)
  809fac:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
  809fb0:	e0fff917 	ldw	r3,-28(fp)
  809fb4:	e0bffd0b 	ldhu	r2,-12(fp)
  809fb8:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
  809fbc:	e0bff917 	ldw	r2,-28(fp)
  809fc0:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
  809fc4:	e0bffa03 	ldbu	r2,-24(fp)
  809fc8:	1004d0fa 	srli	r2,r2,3
  809fcc:	1007883a 	mov	r3,r2
  809fd0:	e0bff917 	ldw	r2,-28(fp)
  809fd4:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
  809fd8:	e0bffa03 	ldbu	r2,-24(fp)
  809fdc:	108001cc 	andi	r2,r2,7
  809fe0:	1007883a 	mov	r3,r2
  809fe4:	e0bff917 	ldw	r2,-28(fp)
  809fe8:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
  809fec:	e0bff917 	ldw	r2,-28(fp)
  809ff0:	10800d03 	ldbu	r2,52(r2)
  809ff4:	10c03fcc 	andi	r3,r2,255
  809ff8:	00800044 	movi	r2,1
  809ffc:	10c4983a 	sll	r2,r2,r3
  80a000:	1007883a 	mov	r3,r2
  80a004:	e0bff917 	ldw	r2,-28(fp)
  80a008:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
  80a00c:	e0bff917 	ldw	r2,-28(fp)
  80a010:	10800cc3 	ldbu	r2,51(r2)
  80a014:	10c03fcc 	andi	r3,r2,255
  80a018:	00800044 	movi	r2,1
  80a01c:	10c4983a 	sll	r2,r2,r3
  80a020:	1007883a 	mov	r3,r2
  80a024:	e0bff917 	ldw	r2,-28(fp)
  80a028:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
  80a02c:	e0bff917 	ldw	r2,-28(fp)
  80a030:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
  80a034:	e0bff917 	ldw	r2,-28(fp)
  80a038:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
  80a03c:	e0bff917 	ldw	r2,-28(fp)
  80a040:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
  80a044:	e0bff917 	ldw	r2,-28(fp)
  80a048:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
  80a04c:	e0bff917 	ldw	r2,-28(fp)
  80a050:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
  80a054:	e0bff917 	ldw	r2,-28(fp)
  80a058:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
  80a05c:	e0bff917 	ldw	r2,-28(fp)
  80a060:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
  80a064:	e0bff917 	ldw	r2,-28(fp)
  80a068:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
  80a06c:	e0bff917 	ldw	r2,-28(fp)
  80a070:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
  80a074:	e0fff917 	ldw	r3,-28(fp)
  80a078:	00800fc4 	movi	r2,63
  80a07c:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  80a080:	e0bff917 	ldw	r2,-28(fp)
  80a084:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
  80a088:	e13ff917 	ldw	r4,-28(fp)
  80a08c:	0813b980 	call	813b98 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
  80a090:	e13ff917 	ldw	r4,-28(fp)
  80a094:	0813ab00 	call	813ab0 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a098:	0005303a 	rdctl	r2,status
  80a09c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a0a0:	e0fff517 	ldw	r3,-44(fp)
  80a0a4:	00bfff84 	movi	r2,-2
  80a0a8:	1884703a 	and	r2,r3,r2
  80a0ac:	1001703a 	wrctl	status,r2
  
  return context;
  80a0b0:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
  80a0b4:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
  80a0b8:	e0bffa03 	ldbu	r2,-24(fp)
  80a0bc:	00c020b4 	movhi	r3,130
  80a0c0:	18fc7604 	addi	r3,r3,-3624
  80a0c4:	1085883a 	add	r2,r2,r2
  80a0c8:	1085883a 	add	r2,r2,r2
  80a0cc:	10c7883a 	add	r3,r2,r3
  80a0d0:	e0bff917 	ldw	r2,-28(fp)
  80a0d4:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
  80a0d8:	d0e71917 	ldw	r3,-25500(gp)
  80a0dc:	e0bff917 	ldw	r2,-28(fp)
  80a0e0:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
  80a0e4:	e0bff917 	ldw	r2,-28(fp)
  80a0e8:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
  80a0ec:	d0a71917 	ldw	r2,-25500(gp)
  80a0f0:	1005003a 	cmpeq	r2,r2,zero
  80a0f4:	1000031e 	bne	r2,zero,80a104 <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
  80a0f8:	d0e71917 	ldw	r3,-25500(gp)
  80a0fc:	e0bff917 	ldw	r2,-28(fp)
  80a100:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
  80a104:	e0bff917 	ldw	r2,-28(fp)
  80a108:	d0a71915 	stw	r2,-25500(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
  80a10c:	e0bff917 	ldw	r2,-28(fp)
  80a110:	10c00d83 	ldbu	r3,54(r2)
  80a114:	d0a72203 	ldbu	r2,-25464(gp)
  80a118:	1884b03a 	or	r2,r3,r2
  80a11c:	d0a72205 	stb	r2,-25464(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  80a120:	e0bff917 	ldw	r2,-28(fp)
  80a124:	10800d03 	ldbu	r2,52(r2)
  80a128:	11003fcc 	andi	r4,r2,255
  80a12c:	e0bff917 	ldw	r2,-28(fp)
  80a130:	10800d03 	ldbu	r2,52(r2)
  80a134:	10c03fcc 	andi	r3,r2,255
  80a138:	d0a72244 	addi	r2,gp,-25463
  80a13c:	1885883a 	add	r2,r3,r2
  80a140:	10c00003 	ldbu	r3,0(r2)
  80a144:	e0bff917 	ldw	r2,-28(fp)
  80a148:	10800d43 	ldbu	r2,53(r2)
  80a14c:	1884b03a 	or	r2,r3,r2
  80a150:	1007883a 	mov	r3,r2
  80a154:	d0a72244 	addi	r2,gp,-25463
  80a158:	2085883a 	add	r2,r4,r2
  80a15c:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
  80a160:	d0a71e43 	ldbu	r2,-25479(gp)
  80a164:	10800044 	addi	r2,r2,1
  80a168:	d0a71e45 	stb	r2,-25479(gp)
  80a16c:	e0bff817 	ldw	r2,-32(fp)
  80a170:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a174:	e0bff417 	ldw	r2,-48(fp)
  80a178:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  80a17c:	e03fff15 	stw	zero,-4(fp)
  80a180:	00000606 	br	80a19c <OS_TCBInit+0x2c8>
  80a184:	e0bff817 	ldw	r2,-32(fp)
  80a188:	e0bff315 	stw	r2,-52(fp)
  80a18c:	e0bff317 	ldw	r2,-52(fp)
  80a190:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
  80a194:	00801084 	movi	r2,66
  80a198:	e0bfff15 	stw	r2,-4(fp)
  80a19c:	e0bfff17 	ldw	r2,-4(fp)
}
  80a1a0:	e037883a 	mov	sp,fp
  80a1a4:	dfc00117 	ldw	ra,4(sp)
  80a1a8:	df000017 	ldw	fp,0(sp)
  80a1ac:	dec00204 	addi	sp,sp,8
  80a1b0:	f800283a 	ret

0080a1b4 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
  80a1b4:	defffe04 	addi	sp,sp,-8
  80a1b8:	df000115 	stw	fp,4(sp)
  80a1bc:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
  80a1c0:	d0a00f04 	addi	r2,gp,-32708
  80a1c4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
  80a1c8:	d0a01004 	addi	r2,gp,-32704
  80a1cc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
  80a1d0:	d0a01184 	addi	r2,gp,-32698
  80a1d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
  80a1d8:	d0a01204 	addi	r2,gp,-32696
  80a1dc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
  80a1e0:	d0a01104 	addi	r2,gp,-32700
  80a1e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
  80a1e8:	d0a01284 	addi	r2,gp,-32694
  80a1ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
  80a1f0:	d0a01304 	addi	r2,gp,-32692
  80a1f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
  80a1f8:	d0a01384 	addi	r2,gp,-32690
  80a1fc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
  80a200:	d0a01404 	addi	r2,gp,-32688
  80a204:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
  80a208:	d0a01484 	addi	r2,gp,-32686
  80a20c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
  80a210:	d0a01504 	addi	r2,gp,-32684
  80a214:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
  80a218:	d0a01584 	addi	r2,gp,-32682
  80a21c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
  80a220:	d0a01604 	addi	r2,gp,-32680
  80a224:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
  80a228:	d0a01684 	addi	r2,gp,-32678
  80a22c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
  80a230:	d0a01704 	addi	r2,gp,-32676
  80a234:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
  80a238:	d0a01784 	addi	r2,gp,-32674
  80a23c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
  80a240:	d0a01804 	addi	r2,gp,-32672
  80a244:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
  80a248:	d0a01884 	addi	r2,gp,-32670
  80a24c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
  80a250:	d0a01904 	addi	r2,gp,-32668
  80a254:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
  80a258:	d0a01984 	addi	r2,gp,-32666
  80a25c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
  80a260:	d0a01a04 	addi	r2,gp,-32664
  80a264:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
  80a268:	d0a01a84 	addi	r2,gp,-32662
  80a26c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
  80a270:	d0a01b04 	addi	r2,gp,-32660
  80a274:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
  80a278:	d0a01b84 	addi	r2,gp,-32658
  80a27c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
  80a280:	d0a01c04 	addi	r2,gp,-32656
  80a284:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
  80a288:	d0a01c84 	addi	r2,gp,-32654
  80a28c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
  80a290:	d0a01d04 	addi	r2,gp,-32652
  80a294:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
  80a298:	d0a01d84 	addi	r2,gp,-32650
  80a29c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
  80a2a0:	d0a01e04 	addi	r2,gp,-32648
  80a2a4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
  80a2a8:	d0a01e84 	addi	r2,gp,-32646
  80a2ac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
  80a2b0:	d0a01f04 	addi	r2,gp,-32644
  80a2b4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
  80a2b8:	d0a01f84 	addi	r2,gp,-32642
  80a2bc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
  80a2c0:	d0a02004 	addi	r2,gp,-32640
  80a2c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
  80a2c8:	d0a02084 	addi	r2,gp,-32638
  80a2cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
  80a2d0:	d0a02104 	addi	r2,gp,-32636
  80a2d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
  80a2d8:	d0a02184 	addi	r2,gp,-32634
  80a2dc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
  80a2e0:	d0a02204 	addi	r2,gp,-32632
  80a2e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
  80a2e8:	d0a02284 	addi	r2,gp,-32630
  80a2ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
  80a2f0:	d0a02304 	addi	r2,gp,-32628
  80a2f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
  80a2f8:	d0a02384 	addi	r2,gp,-32626
  80a2fc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
  80a300:	d0a02404 	addi	r2,gp,-32624
  80a304:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
  80a308:	d0a02484 	addi	r2,gp,-32622
  80a30c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
  80a310:	d0a02504 	addi	r2,gp,-32620
  80a314:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
  80a318:	d0a02584 	addi	r2,gp,-32618
  80a31c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
  80a320:	d0a02604 	addi	r2,gp,-32616
  80a324:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
  80a328:	d0a02b04 	addi	r2,gp,-32596
  80a32c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
  80a330:	e037883a 	mov	sp,fp
  80a334:	df000017 	ldw	fp,0(sp)
  80a338:	dec00104 	addi	sp,sp,4
  80a33c:	f800283a 	ret

0080a340 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
  80a340:	defff104 	addi	sp,sp,-60
  80a344:	df000e15 	stw	fp,56(sp)
  80a348:	df000e04 	addi	fp,sp,56
  80a34c:	e13ffa15 	stw	r4,-24(fp)
  80a350:	e1fffd15 	stw	r7,-12(fp)
  80a354:	e17ffb0d 	sth	r5,-20(fp)
  80a358:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  80a35c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80a360:	e0bffd17 	ldw	r2,-12(fp)
  80a364:	1004c03a 	cmpne	r2,r2,zero
  80a368:	1000021e 	bne	r2,zero,80a374 <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
  80a36c:	e03fff15 	stw	zero,-4(fp)
  80a370:	0000bb06 	br	80a660 <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  80a374:	e0bffa17 	ldw	r2,-24(fp)
  80a378:	1004c03a 	cmpne	r2,r2,zero
  80a37c:	1000051e 	bne	r2,zero,80a394 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80a380:	e0fffd17 	ldw	r3,-12(fp)
  80a384:	00801b84 	movi	r2,110
  80a388:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80a38c:	e03fff15 	stw	zero,-4(fp)
  80a390:	0000b306 	br	80a660 <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  80a394:	e0bffa17 	ldw	r2,-24(fp)
  80a398:	10800003 	ldbu	r2,0(r2)
  80a39c:	10803fcc 	andi	r2,r2,255
  80a3a0:	10800160 	cmpeqi	r2,r2,5
  80a3a4:	1000051e 	bne	r2,zero,80a3bc <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  80a3a8:	e0fffd17 	ldw	r3,-12(fp)
  80a3ac:	00800044 	movi	r2,1
  80a3b0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80a3b4:	e03fff15 	stw	zero,-4(fp)
  80a3b8:	0000a906 	br	80a660 <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  80a3bc:	e0fffc03 	ldbu	r3,-16(fp)
  80a3c0:	00bfe004 	movi	r2,-128
  80a3c4:	1884703a 	and	r2,r3,r2
  80a3c8:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
  80a3cc:	e0bff943 	ldbu	r2,-27(fp)
  80a3d0:	1005003a 	cmpeq	r2,r2,zero
  80a3d4:	1000061e 	bne	r2,zero,80a3f0 <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
  80a3d8:	e0bffc03 	ldbu	r2,-16(fp)
  80a3dc:	10801fcc 	andi	r2,r2,127
  80a3e0:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
  80a3e4:	00800044 	movi	r2,1
  80a3e8:	e0bff905 	stb	r2,-28(fp)
  80a3ec:	00000106 	br	80a3f4 <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
  80a3f0:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
  80a3f4:	e0bffd17 	ldw	r2,-12(fp)
  80a3f8:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a3fc:	0005303a 	rdctl	r2,status
  80a400:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a404:	e0fff717 	ldw	r3,-36(fp)
  80a408:	00bfff84 	movi	r2,-2
  80a40c:	1884703a 	and	r2,r3,r2
  80a410:	1001703a 	wrctl	status,r2
  
  return context;
  80a414:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  80a418:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
  80a41c:	e0bffc03 	ldbu	r2,-16(fp)
  80a420:	e0bffe15 	stw	r2,-8(fp)
  80a424:	e0fffe17 	ldw	r3,-8(fp)
  80a428:	18800060 	cmpeqi	r2,r3,1
  80a42c:	1000651e 	bne	r2,zero,80a5c4 <OSFlagAccept+0x284>
  80a430:	e0fffe17 	ldw	r3,-8(fp)
  80a434:	18800088 	cmpgei	r2,r3,2
  80a438:	1000041e 	bne	r2,zero,80a44c <OSFlagAccept+0x10c>
  80a43c:	e0fffe17 	ldw	r3,-8(fp)
  80a440:	1805003a 	cmpeq	r2,r3,zero
  80a444:	1000421e 	bne	r2,zero,80a550 <OSFlagAccept+0x210>
  80a448:	00007b06 	br	80a638 <OSFlagAccept+0x2f8>
  80a44c:	e0fffe17 	ldw	r3,-8(fp)
  80a450:	188000a0 	cmpeqi	r2,r3,2
  80a454:	1000041e 	bne	r2,zero,80a468 <OSFlagAccept+0x128>
  80a458:	e0fffe17 	ldw	r3,-8(fp)
  80a45c:	188000e0 	cmpeqi	r2,r3,3
  80a460:	10001e1e 	bne	r2,zero,80a4dc <OSFlagAccept+0x19c>
  80a464:	00007406 	br	80a638 <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  80a468:	e0bffa17 	ldw	r2,-24(fp)
  80a46c:	10c0020b 	ldhu	r3,8(r2)
  80a470:	e0bffb0b 	ldhu	r2,-20(fp)
  80a474:	1884703a 	and	r2,r3,r2
  80a478:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  80a47c:	e0fff98b 	ldhu	r3,-26(fp)
  80a480:	e0bffb0b 	ldhu	r2,-20(fp)
  80a484:	18800d1e 	bne	r3,r2,80a4bc <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80a488:	e0bff903 	ldbu	r2,-28(fp)
  80a48c:	10800058 	cmpnei	r2,r2,1
  80a490:	10000d1e 	bne	r2,zero,80a4c8 <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  80a494:	e0bffa17 	ldw	r2,-24(fp)
  80a498:	1080020b 	ldhu	r2,8(r2)
  80a49c:	1007883a 	mov	r3,r2
  80a4a0:	e0bff98b 	ldhu	r2,-26(fp)
  80a4a4:	0084303a 	nor	r2,zero,r2
  80a4a8:	1884703a 	and	r2,r3,r2
  80a4ac:	1007883a 	mov	r3,r2
  80a4b0:	e0bffa17 	ldw	r2,-24(fp)
  80a4b4:	10c0020d 	sth	r3,8(r2)
  80a4b8:	00000306 	br	80a4c8 <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80a4bc:	e0fffd17 	ldw	r3,-12(fp)
  80a4c0:	00801c04 	movi	r2,112
  80a4c4:	18800005 	stb	r2,0(r3)
  80a4c8:	e0bff817 	ldw	r2,-32(fp)
  80a4cc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a4d0:	e0bff617 	ldw	r2,-40(fp)
  80a4d4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80a4d8:	00005f06 	br	80a658 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  80a4dc:	e0bffa17 	ldw	r2,-24(fp)
  80a4e0:	10c0020b 	ldhu	r3,8(r2)
  80a4e4:	e0bffb0b 	ldhu	r2,-20(fp)
  80a4e8:	1884703a 	and	r2,r3,r2
  80a4ec:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  80a4f0:	e0bff98b 	ldhu	r2,-26(fp)
  80a4f4:	1005003a 	cmpeq	r2,r2,zero
  80a4f8:	10000d1e 	bne	r2,zero,80a530 <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80a4fc:	e0bff903 	ldbu	r2,-28(fp)
  80a500:	10800058 	cmpnei	r2,r2,1
  80a504:	10000d1e 	bne	r2,zero,80a53c <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  80a508:	e0bffa17 	ldw	r2,-24(fp)
  80a50c:	1080020b 	ldhu	r2,8(r2)
  80a510:	1007883a 	mov	r3,r2
  80a514:	e0bff98b 	ldhu	r2,-26(fp)
  80a518:	0084303a 	nor	r2,zero,r2
  80a51c:	1884703a 	and	r2,r3,r2
  80a520:	1007883a 	mov	r3,r2
  80a524:	e0bffa17 	ldw	r2,-24(fp)
  80a528:	10c0020d 	sth	r3,8(r2)
  80a52c:	00000306 	br	80a53c <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80a530:	e0fffd17 	ldw	r3,-12(fp)
  80a534:	00801c04 	movi	r2,112
  80a538:	18800005 	stb	r2,0(r3)
  80a53c:	e0bff817 	ldw	r2,-32(fp)
  80a540:	e0bff515 	stw	r2,-44(fp)
  80a544:	e0bff517 	ldw	r2,-44(fp)
  80a548:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80a54c:	00004206 	br	80a658 <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  80a550:	e0bffa17 	ldw	r2,-24(fp)
  80a554:	1080020b 	ldhu	r2,8(r2)
  80a558:	0084303a 	nor	r2,zero,r2
  80a55c:	1007883a 	mov	r3,r2
  80a560:	e0bffb0b 	ldhu	r2,-20(fp)
  80a564:	1884703a 	and	r2,r3,r2
  80a568:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  80a56c:	e0fff98b 	ldhu	r3,-26(fp)
  80a570:	e0bffb0b 	ldhu	r2,-20(fp)
  80a574:	18800b1e 	bne	r3,r2,80a5a4 <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80a578:	e0bff903 	ldbu	r2,-28(fp)
  80a57c:	10800058 	cmpnei	r2,r2,1
  80a580:	10000b1e 	bne	r2,zero,80a5b0 <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  80a584:	e0bffa17 	ldw	r2,-24(fp)
  80a588:	10c0020b 	ldhu	r3,8(r2)
  80a58c:	e0bff98b 	ldhu	r2,-26(fp)
  80a590:	1884b03a 	or	r2,r3,r2
  80a594:	1007883a 	mov	r3,r2
  80a598:	e0bffa17 	ldw	r2,-24(fp)
  80a59c:	10c0020d 	sth	r3,8(r2)
  80a5a0:	00000306 	br	80a5b0 <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80a5a4:	e0fffd17 	ldw	r3,-12(fp)
  80a5a8:	00801c04 	movi	r2,112
  80a5ac:	18800005 	stb	r2,0(r3)
  80a5b0:	e0bff817 	ldw	r2,-32(fp)
  80a5b4:	e0bff415 	stw	r2,-48(fp)
  80a5b8:	e0bff417 	ldw	r2,-48(fp)
  80a5bc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80a5c0:	00002506 	br	80a658 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  80a5c4:	e0bffa17 	ldw	r2,-24(fp)
  80a5c8:	1080020b 	ldhu	r2,8(r2)
  80a5cc:	0084303a 	nor	r2,zero,r2
  80a5d0:	1007883a 	mov	r3,r2
  80a5d4:	e0bffb0b 	ldhu	r2,-20(fp)
  80a5d8:	1884703a 	and	r2,r3,r2
  80a5dc:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  80a5e0:	e0bff98b 	ldhu	r2,-26(fp)
  80a5e4:	1005003a 	cmpeq	r2,r2,zero
  80a5e8:	10000b1e 	bne	r2,zero,80a618 <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80a5ec:	e0bff903 	ldbu	r2,-28(fp)
  80a5f0:	10800058 	cmpnei	r2,r2,1
  80a5f4:	10000b1e 	bne	r2,zero,80a624 <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  80a5f8:	e0bffa17 	ldw	r2,-24(fp)
  80a5fc:	10c0020b 	ldhu	r3,8(r2)
  80a600:	e0bff98b 	ldhu	r2,-26(fp)
  80a604:	1884b03a 	or	r2,r3,r2
  80a608:	1007883a 	mov	r3,r2
  80a60c:	e0bffa17 	ldw	r2,-24(fp)
  80a610:	10c0020d 	sth	r3,8(r2)
  80a614:	00000306 	br	80a624 <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80a618:	e0fffd17 	ldw	r3,-12(fp)
  80a61c:	00801c04 	movi	r2,112
  80a620:	18800005 	stb	r2,0(r3)
  80a624:	e0bff817 	ldw	r2,-32(fp)
  80a628:	e0bff315 	stw	r2,-52(fp)
  80a62c:	e0bff317 	ldw	r2,-52(fp)
  80a630:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80a634:	00000806 	br	80a658 <OSFlagAccept+0x318>
  80a638:	e0bff817 	ldw	r2,-32(fp)
  80a63c:	e0bff215 	stw	r2,-56(fp)
  80a640:	e0bff217 	ldw	r2,-56(fp)
  80a644:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  80a648:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
  80a64c:	e0fffd17 	ldw	r3,-12(fp)
  80a650:	00801bc4 	movi	r2,111
  80a654:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
  80a658:	e0bff98b 	ldhu	r2,-26(fp)
  80a65c:	e0bfff15 	stw	r2,-4(fp)
  80a660:	e0bfff17 	ldw	r2,-4(fp)
}
  80a664:	e037883a 	mov	sp,fp
  80a668:	df000017 	ldw	fp,0(sp)
  80a66c:	dec00104 	addi	sp,sp,4
  80a670:	f800283a 	ret

0080a674 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
  80a674:	defff704 	addi	sp,sp,-36
  80a678:	df000815 	stw	fp,32(sp)
  80a67c:	df000804 	addi	fp,sp,32
  80a680:	e17ffe15 	stw	r5,-8(fp)
  80a684:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
  80a688:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
  80a68c:	e0bffe17 	ldw	r2,-8(fp)
  80a690:	1004c03a 	cmpne	r2,r2,zero
  80a694:	1000021e 	bne	r2,zero,80a6a0 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
  80a698:	e03fff15 	stw	zero,-4(fp)
  80a69c:	00003f06 	br	80a79c <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
  80a6a0:	00802074 	movhi	r2,129
  80a6a4:	109fb004 	addi	r2,r2,32448
  80a6a8:	10800003 	ldbu	r2,0(r2)
  80a6ac:	10803fcc 	andi	r2,r2,255
  80a6b0:	1005003a 	cmpeq	r2,r2,zero
  80a6b4:	1000051e 	bne	r2,zero,80a6cc <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
  80a6b8:	e0fffe17 	ldw	r3,-8(fp)
  80a6bc:	00800404 	movi	r2,16
  80a6c0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
  80a6c4:	e03fff15 	stw	zero,-4(fp)
  80a6c8:	00003406 	br	80a79c <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a6cc:	0005303a 	rdctl	r2,status
  80a6d0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a6d4:	e0fffa17 	ldw	r3,-24(fp)
  80a6d8:	00bfff84 	movi	r2,-2
  80a6dc:	1884703a 	and	r2,r3,r2
  80a6e0:	1001703a 	wrctl	status,r2
  
  return context;
  80a6e4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80a6e8:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
  80a6ec:	00802074 	movhi	r2,129
  80a6f0:	109fb304 	addi	r2,r2,32460
  80a6f4:	10800017 	ldw	r2,0(r2)
  80a6f8:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
  80a6fc:	e0bffc17 	ldw	r2,-16(fp)
  80a700:	1005003a 	cmpeq	r2,r2,zero
  80a704:	10001c1e 	bne	r2,zero,80a778 <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
  80a708:	00802074 	movhi	r2,129
  80a70c:	109fb304 	addi	r2,r2,32460
  80a710:	10800017 	ldw	r2,0(r2)
  80a714:	10800117 	ldw	r2,4(r2)
  80a718:	1007883a 	mov	r3,r2
  80a71c:	00802074 	movhi	r2,129
  80a720:	109fb304 	addi	r2,r2,32460
  80a724:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
  80a728:	e0fffc17 	ldw	r3,-16(fp)
  80a72c:	00800144 	movi	r2,5
  80a730:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
  80a734:	e0fffc17 	ldw	r3,-16(fp)
  80a738:	e0bffd0b 	ldhu	r2,-12(fp)
  80a73c:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
  80a740:	e0bffc17 	ldw	r2,-16(fp)
  80a744:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
  80a748:	e0fffc17 	ldw	r3,-16(fp)
  80a74c:	00800fc4 	movi	r2,63
  80a750:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  80a754:	e0bffc17 	ldw	r2,-16(fp)
  80a758:	100002c5 	stb	zero,11(r2)
  80a75c:	e0bffb17 	ldw	r2,-20(fp)
  80a760:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a764:	e0bff917 	ldw	r2,-28(fp)
  80a768:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
  80a76c:	e0bffe17 	ldw	r2,-8(fp)
  80a770:	10000005 	stb	zero,0(r2)
  80a774:	00000706 	br	80a794 <OSFlagCreate+0x120>
  80a778:	e0bffb17 	ldw	r2,-20(fp)
  80a77c:	e0bff815 	stw	r2,-32(fp)
  80a780:	e0bff817 	ldw	r2,-32(fp)
  80a784:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
  80a788:	e0fffe17 	ldw	r3,-8(fp)
  80a78c:	00801c84 	movi	r2,114
  80a790:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
  80a794:	e0bffc17 	ldw	r2,-16(fp)
  80a798:	e0bfff15 	stw	r2,-4(fp)
  80a79c:	e0bfff17 	ldw	r2,-4(fp)
}
  80a7a0:	e037883a 	mov	sp,fp
  80a7a4:	df000017 	ldw	fp,0(sp)
  80a7a8:	dec00104 	addi	sp,sp,4
  80a7ac:	f800283a 	ret

0080a7b0 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
  80a7b0:	defff004 	addi	sp,sp,-64
  80a7b4:	dfc00f15 	stw	ra,60(sp)
  80a7b8:	df000e15 	stw	fp,56(sp)
  80a7bc:	df000e04 	addi	fp,sp,56
  80a7c0:	e13ffb15 	stw	r4,-20(fp)
  80a7c4:	e1bffd15 	stw	r6,-12(fp)
  80a7c8:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  80a7cc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80a7d0:	e0bffd17 	ldw	r2,-12(fp)
  80a7d4:	1004c03a 	cmpne	r2,r2,zero
  80a7d8:	1000031e 	bne	r2,zero,80a7e8 <OSFlagDel+0x38>
        return (pgrp);
  80a7dc:	e0bffb17 	ldw	r2,-20(fp)
  80a7e0:	e0bfff15 	stw	r2,-4(fp)
  80a7e4:	00009606 	br	80aa40 <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  80a7e8:	e0bffb17 	ldw	r2,-20(fp)
  80a7ec:	1004c03a 	cmpne	r2,r2,zero
  80a7f0:	1000061e 	bne	r2,zero,80a80c <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80a7f4:	e0fffd17 	ldw	r3,-12(fp)
  80a7f8:	00801b84 	movi	r2,110
  80a7fc:	18800005 	stb	r2,0(r3)
        return (pgrp);
  80a800:	e0fffb17 	ldw	r3,-20(fp)
  80a804:	e0ffff15 	stw	r3,-4(fp)
  80a808:	00008d06 	br	80aa40 <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  80a80c:	00802074 	movhi	r2,129
  80a810:	109fb004 	addi	r2,r2,32448
  80a814:	10800003 	ldbu	r2,0(r2)
  80a818:	10803fcc 	andi	r2,r2,255
  80a81c:	1005003a 	cmpeq	r2,r2,zero
  80a820:	1000061e 	bne	r2,zero,80a83c <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  80a824:	e0fffd17 	ldw	r3,-12(fp)
  80a828:	008003c4 	movi	r2,15
  80a82c:	18800005 	stb	r2,0(r3)
        return (pgrp);
  80a830:	e0bffb17 	ldw	r2,-20(fp)
  80a834:	e0bfff15 	stw	r2,-4(fp)
  80a838:	00008106 	br	80aa40 <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
  80a83c:	e0bffb17 	ldw	r2,-20(fp)
  80a840:	10800003 	ldbu	r2,0(r2)
  80a844:	10803fcc 	andi	r2,r2,255
  80a848:	10800160 	cmpeqi	r2,r2,5
  80a84c:	1000061e 	bne	r2,zero,80a868 <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
  80a850:	e0fffd17 	ldw	r3,-12(fp)
  80a854:	00800044 	movi	r2,1
  80a858:	18800005 	stb	r2,0(r3)
        return (pgrp);
  80a85c:	e0fffb17 	ldw	r3,-20(fp)
  80a860:	e0ffff15 	stw	r3,-4(fp)
  80a864:	00007606 	br	80aa40 <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a868:	0005303a 	rdctl	r2,status
  80a86c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a870:	e0fff617 	ldw	r3,-40(fp)
  80a874:	00bfff84 	movi	r2,-2
  80a878:	1884703a 	and	r2,r3,r2
  80a87c:	1001703a 	wrctl	status,r2
  
  return context;
  80a880:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  80a884:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
  80a888:	e0bffb17 	ldw	r2,-20(fp)
  80a88c:	10800117 	ldw	r2,4(r2)
  80a890:	1005003a 	cmpeq	r2,r2,zero
  80a894:	1000031e 	bne	r2,zero,80a8a4 <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  80a898:	00800044 	movi	r2,1
  80a89c:	e0bffa05 	stb	r2,-24(fp)
  80a8a0:	00000106 	br	80a8a8 <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  80a8a4:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  80a8a8:	e0bffc03 	ldbu	r2,-16(fp)
  80a8ac:	e0bffe15 	stw	r2,-8(fp)
  80a8b0:	e0fffe17 	ldw	r3,-8(fp)
  80a8b4:	1805003a 	cmpeq	r2,r3,zero
  80a8b8:	1000041e 	bne	r2,zero,80a8cc <OSFlagDel+0x11c>
  80a8bc:	e0fffe17 	ldw	r3,-8(fp)
  80a8c0:	18800060 	cmpeqi	r2,r3,1
  80a8c4:	1000281e 	bne	r2,zero,80a968 <OSFlagDel+0x1b8>
  80a8c8:	00005206 	br	80aa14 <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
  80a8cc:	e0bffa03 	ldbu	r2,-24(fp)
  80a8d0:	1004c03a 	cmpne	r2,r2,zero
  80a8d4:	10001a1e 	bne	r2,zero,80a940 <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
  80a8d8:	e0fffb17 	ldw	r3,-20(fp)
  80a8dc:	00800fc4 	movi	r2,63
  80a8e0:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  80a8e4:	e0bffb17 	ldw	r2,-20(fp)
  80a8e8:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  80a8ec:	e0bffb17 	ldw	r2,-20(fp)
  80a8f0:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
  80a8f4:	00802074 	movhi	r2,129
  80a8f8:	109fb304 	addi	r2,r2,32460
  80a8fc:	10c00017 	ldw	r3,0(r2)
  80a900:	e0bffb17 	ldw	r2,-20(fp)
  80a904:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
  80a908:	e0bffb17 	ldw	r2,-20(fp)
  80a90c:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
  80a910:	00c02074 	movhi	r3,129
  80a914:	18dfb304 	addi	r3,r3,32460
  80a918:	e0bffb17 	ldw	r2,-20(fp)
  80a91c:	18800015 	stw	r2,0(r3)
  80a920:	e0bff717 	ldw	r2,-36(fp)
  80a924:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a928:	e0bff517 	ldw	r2,-44(fp)
  80a92c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
  80a930:	e0bffd17 	ldw	r2,-12(fp)
  80a934:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
  80a938:	e03ff815 	stw	zero,-32(fp)
  80a93c:	00003e06 	br	80aa38 <OSFlagDel+0x288>
  80a940:	e0bff717 	ldw	r2,-36(fp)
  80a944:	e0bff415 	stw	r2,-48(fp)
  80a948:	e0bff417 	ldw	r2,-48(fp)
  80a94c:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
  80a950:	e0fffd17 	ldw	r3,-12(fp)
  80a954:	00801244 	movi	r2,73
  80a958:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
  80a95c:	e0bffb17 	ldw	r2,-20(fp)
  80a960:	e0bff815 	stw	r2,-32(fp)
             }
             break;
  80a964:	00003406 	br	80aa38 <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  80a968:	e0bffb17 	ldw	r2,-20(fp)
  80a96c:	10800117 	ldw	r2,4(r2)
  80a970:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  80a974:	00000606 	br	80a990 <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
  80a978:	e13ff917 	ldw	r4,-28(fp)
  80a97c:	000b883a 	mov	r5,zero
  80a980:	080bac00 	call	80bac0 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  80a984:	e0bff917 	ldw	r2,-28(fp)
  80a988:	10800017 	ldw	r2,0(r2)
  80a98c:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  80a990:	e0bff917 	ldw	r2,-28(fp)
  80a994:	1004c03a 	cmpne	r2,r2,zero
  80a998:	103ff71e 	bne	r2,zero,80a978 <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
  80a99c:	e0fffb17 	ldw	r3,-20(fp)
  80a9a0:	00800fc4 	movi	r2,63
  80a9a4:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  80a9a8:	e0bffb17 	ldw	r2,-20(fp)
  80a9ac:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  80a9b0:	e0bffb17 	ldw	r2,-20(fp)
  80a9b4:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
  80a9b8:	00802074 	movhi	r2,129
  80a9bc:	109fb304 	addi	r2,r2,32460
  80a9c0:	10c00017 	ldw	r3,0(r2)
  80a9c4:	e0bffb17 	ldw	r2,-20(fp)
  80a9c8:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
  80a9cc:	e0bffb17 	ldw	r2,-20(fp)
  80a9d0:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
  80a9d4:	00c02074 	movhi	r3,129
  80a9d8:	18dfb304 	addi	r3,r3,32460
  80a9dc:	e0bffb17 	ldw	r2,-20(fp)
  80a9e0:	18800015 	stw	r2,0(r3)
  80a9e4:	e0bff717 	ldw	r2,-36(fp)
  80a9e8:	e0bff315 	stw	r2,-52(fp)
  80a9ec:	e0bff317 	ldw	r2,-52(fp)
  80a9f0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  80a9f4:	e0bffa03 	ldbu	r2,-24(fp)
  80a9f8:	10800058 	cmpnei	r2,r2,1
  80a9fc:	1000011e 	bne	r2,zero,80aa04 <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  80aa00:	0809acc0 	call	809acc <OS_Sched>
             }
             *perr = OS_ERR_NONE;
  80aa04:	e0bffd17 	ldw	r2,-12(fp)
  80aa08:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
  80aa0c:	e03ff815 	stw	zero,-32(fp)
             break;
  80aa10:	00000906 	br	80aa38 <OSFlagDel+0x288>
  80aa14:	e0bff717 	ldw	r2,-36(fp)
  80aa18:	e0bff215 	stw	r2,-56(fp)
  80aa1c:	e0bff217 	ldw	r2,-56(fp)
  80aa20:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
  80aa24:	e0fffd17 	ldw	r3,-12(fp)
  80aa28:	008001c4 	movi	r2,7
  80aa2c:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
  80aa30:	e0bffb17 	ldw	r2,-20(fp)
  80aa34:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
  80aa38:	e0bff817 	ldw	r2,-32(fp)
  80aa3c:	e0bfff15 	stw	r2,-4(fp)
  80aa40:	e0bfff17 	ldw	r2,-4(fp)
}
  80aa44:	e037883a 	mov	sp,fp
  80aa48:	dfc00117 	ldw	ra,4(sp)
  80aa4c:	df000017 	ldw	fp,0(sp)
  80aa50:	dec00204 	addi	sp,sp,8
  80aa54:	f800283a 	ret

0080aa58 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  80aa58:	defff504 	addi	sp,sp,-44
  80aa5c:	dfc00a15 	stw	ra,40(sp)
  80aa60:	df000915 	stw	fp,36(sp)
  80aa64:	df000904 	addi	fp,sp,36
  80aa68:	e13ffc15 	stw	r4,-16(fp)
  80aa6c:	e17ffd15 	stw	r5,-12(fp)
  80aa70:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80aa74:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80aa78:	e0bffe17 	ldw	r2,-8(fp)
  80aa7c:	1004c03a 	cmpne	r2,r2,zero
  80aa80:	1000021e 	bne	r2,zero,80aa8c <OSFlagNameGet+0x34>
        return (0);
  80aa84:	e03fff15 	stw	zero,-4(fp)
  80aa88:	00003e06 	br	80ab84 <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  80aa8c:	e0bffc17 	ldw	r2,-16(fp)
  80aa90:	1004c03a 	cmpne	r2,r2,zero
  80aa94:	1000051e 	bne	r2,zero,80aaac <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80aa98:	e0fffe17 	ldw	r3,-8(fp)
  80aa9c:	00801b84 	movi	r2,110
  80aaa0:	18800005 	stb	r2,0(r3)
        return (0);
  80aaa4:	e03fff15 	stw	zero,-4(fp)
  80aaa8:	00003606 	br	80ab84 <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80aaac:	e0bffd17 	ldw	r2,-12(fp)
  80aab0:	1004c03a 	cmpne	r2,r2,zero
  80aab4:	1000051e 	bne	r2,zero,80aacc <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  80aab8:	e0fffe17 	ldw	r3,-8(fp)
  80aabc:	00800304 	movi	r2,12
  80aac0:	18800005 	stb	r2,0(r3)
        return (0);
  80aac4:	e03fff15 	stw	zero,-4(fp)
  80aac8:	00002e06 	br	80ab84 <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80aacc:	00802074 	movhi	r2,129
  80aad0:	109fb004 	addi	r2,r2,32448
  80aad4:	10800003 	ldbu	r2,0(r2)
  80aad8:	10803fcc 	andi	r2,r2,255
  80aadc:	1005003a 	cmpeq	r2,r2,zero
  80aae0:	1000051e 	bne	r2,zero,80aaf8 <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
  80aae4:	e0fffe17 	ldw	r3,-8(fp)
  80aae8:	00800444 	movi	r2,17
  80aaec:	18800005 	stb	r2,0(r3)
        return (0);
  80aaf0:	e03fff15 	stw	zero,-4(fp)
  80aaf4:	00002306 	br	80ab84 <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80aaf8:	0005303a 	rdctl	r2,status
  80aafc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ab00:	e0fff917 	ldw	r3,-28(fp)
  80ab04:	00bfff84 	movi	r2,-2
  80ab08:	1884703a 	and	r2,r3,r2
  80ab0c:	1001703a 	wrctl	status,r2
  
  return context;
  80ab10:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80ab14:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  80ab18:	e0bffc17 	ldw	r2,-16(fp)
  80ab1c:	10800003 	ldbu	r2,0(r2)
  80ab20:	10803fcc 	andi	r2,r2,255
  80ab24:	10800160 	cmpeqi	r2,r2,5
  80ab28:	1000091e 	bne	r2,zero,80ab50 <OSFlagNameGet+0xf8>
  80ab2c:	e0bffa17 	ldw	r2,-24(fp)
  80ab30:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ab34:	e0bff817 	ldw	r2,-32(fp)
  80ab38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  80ab3c:	e0fffe17 	ldw	r3,-8(fp)
  80ab40:	00800044 	movi	r2,1
  80ab44:	18800005 	stb	r2,0(r3)
        return (0);
  80ab48:	e03fff15 	stw	zero,-4(fp)
  80ab4c:	00000d06 	br	80ab84 <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
  80ab50:	e0bffc17 	ldw	r2,-16(fp)
  80ab54:	11400284 	addi	r5,r2,10
  80ab58:	e13ffd17 	ldw	r4,-12(fp)
  80ab5c:	0809c100 	call	809c10 <OS_StrCopy>
  80ab60:	e0bffb05 	stb	r2,-20(fp)
  80ab64:	e0bffa17 	ldw	r2,-24(fp)
  80ab68:	e0bff715 	stw	r2,-36(fp)
  80ab6c:	e0bff717 	ldw	r2,-36(fp)
  80ab70:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80ab74:	e0bffe17 	ldw	r2,-8(fp)
  80ab78:	10000005 	stb	zero,0(r2)
    return (len);
  80ab7c:	e0bffb03 	ldbu	r2,-20(fp)
  80ab80:	e0bfff15 	stw	r2,-4(fp)
  80ab84:	e0bfff17 	ldw	r2,-4(fp)
}
  80ab88:	e037883a 	mov	sp,fp
  80ab8c:	dfc00117 	ldw	ra,4(sp)
  80ab90:	df000017 	ldw	fp,0(sp)
  80ab94:	dec00204 	addi	sp,sp,8
  80ab98:	f800283a 	ret

0080ab9c <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  80ab9c:	defff504 	addi	sp,sp,-44
  80aba0:	dfc00a15 	stw	ra,40(sp)
  80aba4:	df000915 	stw	fp,36(sp)
  80aba8:	df000904 	addi	fp,sp,36
  80abac:	e13ffd15 	stw	r4,-12(fp)
  80abb0:	e17ffe15 	stw	r5,-8(fp)
  80abb4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80abb8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80abbc:	e0bfff17 	ldw	r2,-4(fp)
  80abc0:	1005003a 	cmpeq	r2,r2,zero
  80abc4:	1000451e 	bne	r2,zero,80acdc <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  80abc8:	e0bffd17 	ldw	r2,-12(fp)
  80abcc:	1004c03a 	cmpne	r2,r2,zero
  80abd0:	1000041e 	bne	r2,zero,80abe4 <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80abd4:	e0ffff17 	ldw	r3,-4(fp)
  80abd8:	00801b84 	movi	r2,110
  80abdc:	18800005 	stb	r2,0(r3)
        return;
  80abe0:	00003e06 	br	80acdc <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80abe4:	e0bffe17 	ldw	r2,-8(fp)
  80abe8:	1004c03a 	cmpne	r2,r2,zero
  80abec:	1000041e 	bne	r2,zero,80ac00 <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  80abf0:	e0ffff17 	ldw	r3,-4(fp)
  80abf4:	00800304 	movi	r2,12
  80abf8:	18800005 	stb	r2,0(r3)
        return;
  80abfc:	00003706 	br	80acdc <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80ac00:	00802074 	movhi	r2,129
  80ac04:	109fb004 	addi	r2,r2,32448
  80ac08:	10800003 	ldbu	r2,0(r2)
  80ac0c:	10803fcc 	andi	r2,r2,255
  80ac10:	1005003a 	cmpeq	r2,r2,zero
  80ac14:	1000041e 	bne	r2,zero,80ac28 <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
  80ac18:	e0ffff17 	ldw	r3,-4(fp)
  80ac1c:	00800484 	movi	r2,18
  80ac20:	18800005 	stb	r2,0(r3)
        return;
  80ac24:	00002d06 	br	80acdc <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ac28:	0005303a 	rdctl	r2,status
  80ac2c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ac30:	e0fffa17 	ldw	r3,-24(fp)
  80ac34:	00bfff84 	movi	r2,-2
  80ac38:	1884703a 	and	r2,r3,r2
  80ac3c:	1001703a 	wrctl	status,r2
  
  return context;
  80ac40:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80ac44:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  80ac48:	e0bffd17 	ldw	r2,-12(fp)
  80ac4c:	10800003 	ldbu	r2,0(r2)
  80ac50:	10803fcc 	andi	r2,r2,255
  80ac54:	10800160 	cmpeqi	r2,r2,5
  80ac58:	1000081e 	bne	r2,zero,80ac7c <OSFlagNameSet+0xe0>
  80ac5c:	e0bffb17 	ldw	r2,-20(fp)
  80ac60:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ac64:	e0bff917 	ldw	r2,-28(fp)
  80ac68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  80ac6c:	e0ffff17 	ldw	r3,-4(fp)
  80ac70:	00800044 	movi	r2,1
  80ac74:	18800005 	stb	r2,0(r3)
        return;
  80ac78:	00001806 	br	80acdc <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  80ac7c:	e13ffe17 	ldw	r4,-8(fp)
  80ac80:	0809c900 	call	809c90 <OS_StrLen>
  80ac84:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
  80ac88:	e0bffc03 	ldbu	r2,-16(fp)
  80ac8c:	10800830 	cmpltui	r2,r2,32
  80ac90:	1000081e 	bne	r2,zero,80acb4 <OSFlagNameSet+0x118>
  80ac94:	e0bffb17 	ldw	r2,-20(fp)
  80ac98:	e0bff815 	stw	r2,-32(fp)
  80ac9c:	e0bff817 	ldw	r2,-32(fp)
  80aca0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
  80aca4:	e0ffff17 	ldw	r3,-4(fp)
  80aca8:	00801cc4 	movi	r2,115
  80acac:	18800005 	stb	r2,0(r3)
        return;
  80acb0:	00000a06 	br	80acdc <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
  80acb4:	e0bffd17 	ldw	r2,-12(fp)
  80acb8:	11000284 	addi	r4,r2,10
  80acbc:	e17ffe17 	ldw	r5,-8(fp)
  80acc0:	0809c100 	call	809c10 <OS_StrCopy>
  80acc4:	e0bffb17 	ldw	r2,-20(fp)
  80acc8:	e0bff715 	stw	r2,-36(fp)
  80accc:	e0bff717 	ldw	r2,-36(fp)
  80acd0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80acd4:	e0bfff17 	ldw	r2,-4(fp)
  80acd8:	10000005 	stb	zero,0(r2)
    return;
}
  80acdc:	e037883a 	mov	sp,fp
  80ace0:	dfc00117 	ldw	ra,4(sp)
  80ace4:	df000017 	ldw	fp,0(sp)
  80ace8:	dec00204 	addi	sp,sp,8
  80acec:	f800283a 	ret

0080acf0 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
  80acf0:	deffe004 	addi	sp,sp,-128
  80acf4:	dfc01f15 	stw	ra,124(sp)
  80acf8:	df001e15 	stw	fp,120(sp)
  80acfc:	df001e04 	addi	fp,sp,120
  80ad00:	e13ff915 	stw	r4,-28(fp)
  80ad04:	e17ffa0d 	sth	r5,-24(fp)
  80ad08:	e1bffb05 	stb	r6,-20(fp)
  80ad0c:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  80ad10:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80ad14:	e0800217 	ldw	r2,8(fp)
  80ad18:	1004c03a 	cmpne	r2,r2,zero
  80ad1c:	1000021e 	bne	r2,zero,80ad28 <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
  80ad20:	e03fff15 	stw	zero,-4(fp)
  80ad24:	00017d06 	br	80b31c <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  80ad28:	e0bff917 	ldw	r2,-28(fp)
  80ad2c:	1004c03a 	cmpne	r2,r2,zero
  80ad30:	1000051e 	bne	r2,zero,80ad48 <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80ad34:	e0c00217 	ldw	r3,8(fp)
  80ad38:	00801b84 	movi	r2,110
  80ad3c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80ad40:	e03fff15 	stw	zero,-4(fp)
  80ad44:	00017506 	br	80b31c <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  80ad48:	00802074 	movhi	r2,129
  80ad4c:	109fb004 	addi	r2,r2,32448
  80ad50:	10800003 	ldbu	r2,0(r2)
  80ad54:	10803fcc 	andi	r2,r2,255
  80ad58:	1005003a 	cmpeq	r2,r2,zero
  80ad5c:	1000051e 	bne	r2,zero,80ad74 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
  80ad60:	e0c00217 	ldw	r3,8(fp)
  80ad64:	00800084 	movi	r2,2
  80ad68:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80ad6c:	e03fff15 	stw	zero,-4(fp)
  80ad70:	00016a06 	br	80b31c <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
  80ad74:	00802074 	movhi	r2,129
  80ad78:	109fa204 	addi	r2,r2,32392
  80ad7c:	10800003 	ldbu	r2,0(r2)
  80ad80:	10803fcc 	andi	r2,r2,255
  80ad84:	1005003a 	cmpeq	r2,r2,zero
  80ad88:	1000051e 	bne	r2,zero,80ada0 <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
  80ad8c:	e0c00217 	ldw	r3,8(fp)
  80ad90:	00800344 	movi	r2,13
  80ad94:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80ad98:	e03fff15 	stw	zero,-4(fp)
  80ad9c:	00015f06 	br	80b31c <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  80ada0:	e0bff917 	ldw	r2,-28(fp)
  80ada4:	10800003 	ldbu	r2,0(r2)
  80ada8:	10803fcc 	andi	r2,r2,255
  80adac:	10800160 	cmpeqi	r2,r2,5
  80adb0:	1000051e 	bne	r2,zero,80adc8 <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
  80adb4:	e0c00217 	ldw	r3,8(fp)
  80adb8:	00800044 	movi	r2,1
  80adbc:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80adc0:	e03fff15 	stw	zero,-4(fp)
  80adc4:	00015506 	br	80b31c <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  80adc8:	e0fffb03 	ldbu	r3,-20(fp)
  80adcc:	00bfe004 	movi	r2,-128
  80add0:	1884703a 	and	r2,r3,r2
  80add4:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
  80add8:	e0bff283 	ldbu	r2,-54(fp)
  80addc:	1005003a 	cmpeq	r2,r2,zero
  80ade0:	1000071e 	bne	r2,zero,80ae00 <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
  80ade4:	00c01fc4 	movi	r3,127
  80ade8:	e0bffb03 	ldbu	r2,-20(fp)
  80adec:	10c4703a 	and	r2,r2,r3
  80adf0:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
  80adf4:	00800044 	movi	r2,1
  80adf8:	e0bff205 	stb	r2,-56(fp)
  80adfc:	00000106 	br	80ae04 <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
  80ae00:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ae04:	0005303a 	rdctl	r2,status
  80ae08:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ae0c:	e0fff017 	ldw	r3,-64(fp)
  80ae10:	00bfff84 	movi	r2,-2
  80ae14:	1884703a 	and	r2,r3,r2
  80ae18:	1001703a 	wrctl	status,r2
  
  return context;
  80ae1c:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  80ae20:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
  80ae24:	e0bffb03 	ldbu	r2,-20(fp)
  80ae28:	e0bffe15 	stw	r2,-8(fp)
  80ae2c:	e0fffe17 	ldw	r3,-8(fp)
  80ae30:	18800060 	cmpeqi	r2,r3,1
  80ae34:	1000981e 	bne	r2,zero,80b098 <OSFlagPend+0x3a8>
  80ae38:	e0fffe17 	ldw	r3,-8(fp)
  80ae3c:	18800088 	cmpgei	r2,r3,2
  80ae40:	1000041e 	bne	r2,zero,80ae54 <OSFlagPend+0x164>
  80ae44:	e0fffe17 	ldw	r3,-8(fp)
  80ae48:	1805003a 	cmpeq	r2,r3,zero
  80ae4c:	1000641e 	bne	r2,zero,80afe0 <OSFlagPend+0x2f0>
  80ae50:	0000bf06 	br	80b150 <OSFlagPend+0x460>
  80ae54:	e0fffe17 	ldw	r3,-8(fp)
  80ae58:	188000a0 	cmpeqi	r2,r3,2
  80ae5c:	1000041e 	bne	r2,zero,80ae70 <OSFlagPend+0x180>
  80ae60:	e0fffe17 	ldw	r3,-8(fp)
  80ae64:	188000e0 	cmpeqi	r2,r3,3
  80ae68:	10002f1e 	bne	r2,zero,80af28 <OSFlagPend+0x238>
  80ae6c:	0000b806 	br	80b150 <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
  80ae70:	e0bff917 	ldw	r2,-28(fp)
  80ae74:	10c0020b 	ldhu	r3,8(r2)
  80ae78:	e0bffa0b 	ldhu	r2,-24(fp)
  80ae7c:	1884703a 	and	r2,r3,r2
  80ae80:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  80ae84:	e0fff30b 	ldhu	r3,-52(fp)
  80ae88:	e0bffa0b 	ldhu	r2,-24(fp)
  80ae8c:	18801a1e 	bne	r3,r2,80aef8 <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80ae90:	e0bff203 	ldbu	r2,-56(fp)
  80ae94:	10800058 	cmpnei	r2,r2,1
  80ae98:	1000091e 	bne	r2,zero,80aec0 <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  80ae9c:	e0bff917 	ldw	r2,-28(fp)
  80aea0:	1080020b 	ldhu	r2,8(r2)
  80aea4:	1007883a 	mov	r3,r2
  80aea8:	e0bff30b 	ldhu	r2,-52(fp)
  80aeac:	0084303a 	nor	r2,zero,r2
  80aeb0:	1884703a 	and	r2,r3,r2
  80aeb4:	1007883a 	mov	r3,r2
  80aeb8:	e0bff917 	ldw	r2,-28(fp)
  80aebc:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  80aec0:	00802074 	movhi	r2,129
  80aec4:	109fb104 	addi	r2,r2,32452
  80aec8:	10c00017 	ldw	r3,0(r2)
  80aecc:	e0bff30b 	ldhu	r2,-52(fp)
  80aed0:	18800b0d 	sth	r2,44(r3)
  80aed4:	e0bff117 	ldw	r2,-60(fp)
  80aed8:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80aedc:	e0bfef17 	ldw	r2,-68(fp)
  80aee0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  80aee4:	e0800217 	ldw	r2,8(fp)
  80aee8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  80aeec:	e0bff30b 	ldhu	r2,-52(fp)
  80aef0:	e0bfff15 	stw	r2,-4(fp)
  80aef4:	00010906 	br	80b31c <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  80aef8:	e1bffa0b 	ldhu	r6,-24(fp)
  80aefc:	e1fffb03 	ldbu	r7,-20(fp)
  80af00:	e0bffc0b 	ldhu	r2,-16(fp)
  80af04:	e17ff404 	addi	r5,fp,-48
  80af08:	d8800015 	stw	r2,0(sp)
  80af0c:	e13ff917 	ldw	r4,-28(fp)
  80af10:	080b8180 	call	80b818 <OS_FlagBlock>
  80af14:	e0bff117 	ldw	r2,-60(fp)
  80af18:	e0bfee15 	stw	r2,-72(fp)
  80af1c:	e0bfee17 	ldw	r2,-72(fp)
  80af20:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  80af24:	00009506 	br	80b17c <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
  80af28:	e0bff917 	ldw	r2,-28(fp)
  80af2c:	10c0020b 	ldhu	r3,8(r2)
  80af30:	e0bffa0b 	ldhu	r2,-24(fp)
  80af34:	1884703a 	and	r2,r3,r2
  80af38:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  80af3c:	e0bff30b 	ldhu	r2,-52(fp)
  80af40:	1005003a 	cmpeq	r2,r2,zero
  80af44:	10001a1e 	bne	r2,zero,80afb0 <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80af48:	e0bff203 	ldbu	r2,-56(fp)
  80af4c:	10800058 	cmpnei	r2,r2,1
  80af50:	1000091e 	bne	r2,zero,80af78 <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  80af54:	e0bff917 	ldw	r2,-28(fp)
  80af58:	1080020b 	ldhu	r2,8(r2)
  80af5c:	1007883a 	mov	r3,r2
  80af60:	e0bff30b 	ldhu	r2,-52(fp)
  80af64:	0084303a 	nor	r2,zero,r2
  80af68:	1884703a 	and	r2,r3,r2
  80af6c:	1007883a 	mov	r3,r2
  80af70:	e0bff917 	ldw	r2,-28(fp)
  80af74:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  80af78:	00802074 	movhi	r2,129
  80af7c:	109fb104 	addi	r2,r2,32452
  80af80:	10c00017 	ldw	r3,0(r2)
  80af84:	e0bff30b 	ldhu	r2,-52(fp)
  80af88:	18800b0d 	sth	r2,44(r3)
  80af8c:	e0bff117 	ldw	r2,-60(fp)
  80af90:	e0bfed15 	stw	r2,-76(fp)
  80af94:	e0bfed17 	ldw	r2,-76(fp)
  80af98:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  80af9c:	e0800217 	ldw	r2,8(fp)
  80afa0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  80afa4:	e0fff30b 	ldhu	r3,-52(fp)
  80afa8:	e0ffff15 	stw	r3,-4(fp)
  80afac:	0000db06 	br	80b31c <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  80afb0:	e1bffa0b 	ldhu	r6,-24(fp)
  80afb4:	e1fffb03 	ldbu	r7,-20(fp)
  80afb8:	e0bffc0b 	ldhu	r2,-16(fp)
  80afbc:	e17ff404 	addi	r5,fp,-48
  80afc0:	d8800015 	stw	r2,0(sp)
  80afc4:	e13ff917 	ldw	r4,-28(fp)
  80afc8:	080b8180 	call	80b818 <OS_FlagBlock>
  80afcc:	e0bff117 	ldw	r2,-60(fp)
  80afd0:	e0bfec15 	stw	r2,-80(fp)
  80afd4:	e0bfec17 	ldw	r2,-80(fp)
  80afd8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  80afdc:	00006706 	br	80b17c <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  80afe0:	e0bff917 	ldw	r2,-28(fp)
  80afe4:	1080020b 	ldhu	r2,8(r2)
  80afe8:	0084303a 	nor	r2,zero,r2
  80afec:	1007883a 	mov	r3,r2
  80aff0:	e0bffa0b 	ldhu	r2,-24(fp)
  80aff4:	1884703a 	and	r2,r3,r2
  80aff8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  80affc:	e0fff30b 	ldhu	r3,-52(fp)
  80b000:	e0bffa0b 	ldhu	r2,-24(fp)
  80b004:	1880181e 	bne	r3,r2,80b068 <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80b008:	e0bff203 	ldbu	r2,-56(fp)
  80b00c:	10800058 	cmpnei	r2,r2,1
  80b010:	1000071e 	bne	r2,zero,80b030 <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  80b014:	e0bff917 	ldw	r2,-28(fp)
  80b018:	10c0020b 	ldhu	r3,8(r2)
  80b01c:	e0bff30b 	ldhu	r2,-52(fp)
  80b020:	1884b03a 	or	r2,r3,r2
  80b024:	1007883a 	mov	r3,r2
  80b028:	e0bff917 	ldw	r2,-28(fp)
  80b02c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  80b030:	00802074 	movhi	r2,129
  80b034:	109fb104 	addi	r2,r2,32452
  80b038:	10c00017 	ldw	r3,0(r2)
  80b03c:	e0bff30b 	ldhu	r2,-52(fp)
  80b040:	18800b0d 	sth	r2,44(r3)
  80b044:	e0bff117 	ldw	r2,-60(fp)
  80b048:	e0bfeb15 	stw	r2,-84(fp)
  80b04c:	e0bfeb17 	ldw	r2,-84(fp)
  80b050:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  80b054:	e0800217 	ldw	r2,8(fp)
  80b058:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  80b05c:	e0bff30b 	ldhu	r2,-52(fp)
  80b060:	e0bfff15 	stw	r2,-4(fp)
  80b064:	0000ad06 	br	80b31c <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  80b068:	e1bffa0b 	ldhu	r6,-24(fp)
  80b06c:	e1fffb03 	ldbu	r7,-20(fp)
  80b070:	e0bffc0b 	ldhu	r2,-16(fp)
  80b074:	e17ff404 	addi	r5,fp,-48
  80b078:	d8800015 	stw	r2,0(sp)
  80b07c:	e13ff917 	ldw	r4,-28(fp)
  80b080:	080b8180 	call	80b818 <OS_FlagBlock>
  80b084:	e0bff117 	ldw	r2,-60(fp)
  80b088:	e0bfea15 	stw	r2,-88(fp)
  80b08c:	e0bfea17 	ldw	r2,-88(fp)
  80b090:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  80b094:	00003906 	br	80b17c <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  80b098:	e0bff917 	ldw	r2,-28(fp)
  80b09c:	1080020b 	ldhu	r2,8(r2)
  80b0a0:	0084303a 	nor	r2,zero,r2
  80b0a4:	1007883a 	mov	r3,r2
  80b0a8:	e0bffa0b 	ldhu	r2,-24(fp)
  80b0ac:	1884703a 	and	r2,r3,r2
  80b0b0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  80b0b4:	e0bff30b 	ldhu	r2,-52(fp)
  80b0b8:	1005003a 	cmpeq	r2,r2,zero
  80b0bc:	1000181e 	bne	r2,zero,80b120 <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80b0c0:	e0bff203 	ldbu	r2,-56(fp)
  80b0c4:	10800058 	cmpnei	r2,r2,1
  80b0c8:	1000071e 	bne	r2,zero,80b0e8 <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  80b0cc:	e0bff917 	ldw	r2,-28(fp)
  80b0d0:	10c0020b 	ldhu	r3,8(r2)
  80b0d4:	e0bff30b 	ldhu	r2,-52(fp)
  80b0d8:	1884b03a 	or	r2,r3,r2
  80b0dc:	1007883a 	mov	r3,r2
  80b0e0:	e0bff917 	ldw	r2,-28(fp)
  80b0e4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  80b0e8:	00802074 	movhi	r2,129
  80b0ec:	109fb104 	addi	r2,r2,32452
  80b0f0:	10c00017 	ldw	r3,0(r2)
  80b0f4:	e0bff30b 	ldhu	r2,-52(fp)
  80b0f8:	18800b0d 	sth	r2,44(r3)
  80b0fc:	e0bff117 	ldw	r2,-60(fp)
  80b100:	e0bfe915 	stw	r2,-92(fp)
  80b104:	e0bfe917 	ldw	r2,-92(fp)
  80b108:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  80b10c:	e0800217 	ldw	r2,8(fp)
  80b110:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  80b114:	e0fff30b 	ldhu	r3,-52(fp)
  80b118:	e0ffff15 	stw	r3,-4(fp)
  80b11c:	00007f06 	br	80b31c <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  80b120:	e1bffa0b 	ldhu	r6,-24(fp)
  80b124:	e1fffb03 	ldbu	r7,-20(fp)
  80b128:	e0bffc0b 	ldhu	r2,-16(fp)
  80b12c:	e17ff404 	addi	r5,fp,-48
  80b130:	d8800015 	stw	r2,0(sp)
  80b134:	e13ff917 	ldw	r4,-28(fp)
  80b138:	080b8180 	call	80b818 <OS_FlagBlock>
  80b13c:	e0bff117 	ldw	r2,-60(fp)
  80b140:	e0bfe815 	stw	r2,-96(fp)
  80b144:	e0bfe817 	ldw	r2,-96(fp)
  80b148:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  80b14c:	00000b06 	br	80b17c <OSFlagPend+0x48c>
  80b150:	e0bff117 	ldw	r2,-60(fp)
  80b154:	e0bfe715 	stw	r2,-100(fp)
  80b158:	e0bfe717 	ldw	r2,-100(fp)
  80b15c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  80b160:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
  80b164:	e0c00217 	ldw	r3,8(fp)
  80b168:	00801bc4 	movi	r2,111
  80b16c:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
  80b170:	e0bff30b 	ldhu	r2,-52(fp)
  80b174:	e0bfff15 	stw	r2,-4(fp)
  80b178:	00006806 	br	80b31c <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
  80b17c:	0809acc0 	call	809acc <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b180:	0005303a 	rdctl	r2,status
  80b184:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b188:	e0ffe617 	ldw	r3,-104(fp)
  80b18c:	00bfff84 	movi	r2,-2
  80b190:	1884703a 	and	r2,r3,r2
  80b194:	1001703a 	wrctl	status,r2
  
  return context;
  80b198:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
  80b19c:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
  80b1a0:	00802074 	movhi	r2,129
  80b1a4:	109fb104 	addi	r2,r2,32452
  80b1a8:	10800017 	ldw	r2,0(r2)
  80b1ac:	10800c43 	ldbu	r2,49(r2)
  80b1b0:	10803fcc 	andi	r2,r2,255
  80b1b4:	1005003a 	cmpeq	r2,r2,zero
  80b1b8:	1000221e 	bne	r2,zero,80b244 <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
  80b1bc:	00802074 	movhi	r2,129
  80b1c0:	109fb104 	addi	r2,r2,32452
  80b1c4:	10800017 	ldw	r2,0(r2)
  80b1c8:	10800c43 	ldbu	r2,49(r2)
  80b1cc:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  80b1d0:	00802074 	movhi	r2,129
  80b1d4:	109fb104 	addi	r2,r2,32452
  80b1d8:	10800017 	ldw	r2,0(r2)
  80b1dc:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
  80b1e0:	e13ff404 	addi	r4,fp,-48
  80b1e4:	080bbd00 	call	80bbd0 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
  80b1e8:	00802074 	movhi	r2,129
  80b1ec:	109fb104 	addi	r2,r2,32452
  80b1f0:	10800017 	ldw	r2,0(r2)
  80b1f4:	10000c05 	stb	zero,48(r2)
  80b1f8:	e0bff117 	ldw	r2,-60(fp)
  80b1fc:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b200:	e0bfe517 	ldw	r2,-108(fp)
  80b204:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
  80b208:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
  80b20c:	e0bff243 	ldbu	r2,-55(fp)
  80b210:	108000a0 	cmpeqi	r2,r2,2
  80b214:	1000011e 	bne	r2,zero,80b21c <OSFlagPend+0x52c>
  80b218:	00000406 	br	80b22c <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
  80b21c:	e0c00217 	ldw	r3,8(fp)
  80b220:	00800384 	movi	r2,14
  80b224:	18800005 	stb	r2,0(r3)
                 break;
  80b228:	00000306 	br	80b238 <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
  80b22c:	e0c00217 	ldw	r3,8(fp)
  80b230:	00800284 	movi	r2,10
  80b234:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
  80b238:	e0fff30b 	ldhu	r3,-52(fp)
  80b23c:	e0ffff15 	stw	r3,-4(fp)
  80b240:	00003606 	br	80b31c <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
  80b244:	00802074 	movhi	r2,129
  80b248:	109fb104 	addi	r2,r2,32452
  80b24c:	10800017 	ldw	r2,0(r2)
  80b250:	10800b0b 	ldhu	r2,44(r2)
  80b254:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
  80b258:	e0bff203 	ldbu	r2,-56(fp)
  80b25c:	10800058 	cmpnei	r2,r2,1
  80b260:	1000261e 	bne	r2,zero,80b2fc <OSFlagPend+0x60c>
        switch (wait_type) {
  80b264:	e0bffb03 	ldbu	r2,-20(fp)
  80b268:	e0bffd15 	stw	r2,-12(fp)
  80b26c:	e0fffd17 	ldw	r3,-12(fp)
  80b270:	1804803a 	cmplt	r2,r3,zero
  80b274:	1000181e 	bne	r2,zero,80b2d8 <OSFlagPend+0x5e8>
  80b278:	e0fffd17 	ldw	r3,-12(fp)
  80b27c:	18800090 	cmplti	r2,r3,2
  80b280:	10000d1e 	bne	r2,zero,80b2b8 <OSFlagPend+0x5c8>
  80b284:	e0fffd17 	ldw	r3,-12(fp)
  80b288:	18800108 	cmpgei	r2,r3,4
  80b28c:	1000121e 	bne	r2,zero,80b2d8 <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
  80b290:	e0bff917 	ldw	r2,-28(fp)
  80b294:	1080020b 	ldhu	r2,8(r2)
  80b298:	1007883a 	mov	r3,r2
  80b29c:	e0bff30b 	ldhu	r2,-52(fp)
  80b2a0:	0084303a 	nor	r2,zero,r2
  80b2a4:	1884703a 	and	r2,r3,r2
  80b2a8:	1007883a 	mov	r3,r2
  80b2ac:	e0bff917 	ldw	r2,-28(fp)
  80b2b0:	10c0020d 	sth	r3,8(r2)
                 break;
  80b2b4:	00001106 	br	80b2fc <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
  80b2b8:	e0bff917 	ldw	r2,-28(fp)
  80b2bc:	10c0020b 	ldhu	r3,8(r2)
  80b2c0:	e0bff30b 	ldhu	r2,-52(fp)
  80b2c4:	1884b03a 	or	r2,r3,r2
  80b2c8:	1007883a 	mov	r3,r2
  80b2cc:	e0bff917 	ldw	r2,-28(fp)
  80b2d0:	10c0020d 	sth	r3,8(r2)
                 break;
  80b2d4:	00000906 	br	80b2fc <OSFlagPend+0x60c>
  80b2d8:	e0bff117 	ldw	r2,-60(fp)
  80b2dc:	e0bfe415 	stw	r2,-112(fp)
  80b2e0:	e0bfe417 	ldw	r2,-112(fp)
  80b2e4:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  80b2e8:	e0c00217 	ldw	r3,8(fp)
  80b2ec:	00801bc4 	movi	r2,111
  80b2f0:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
  80b2f4:	e03fff15 	stw	zero,-4(fp)
  80b2f8:	00000806 	br	80b31c <OSFlagPend+0x62c>
  80b2fc:	e0bff117 	ldw	r2,-60(fp)
  80b300:	e0bfe315 	stw	r2,-116(fp)
  80b304:	e0bfe317 	ldw	r2,-116(fp)
  80b308:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
  80b30c:	e0800217 	ldw	r2,8(fp)
  80b310:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
  80b314:	e0bff30b 	ldhu	r2,-52(fp)
  80b318:	e0bfff15 	stw	r2,-4(fp)
  80b31c:	e0bfff17 	ldw	r2,-4(fp)
}
  80b320:	e037883a 	mov	sp,fp
  80b324:	dfc00117 	ldw	ra,4(sp)
  80b328:	df000017 	ldw	fp,0(sp)
  80b32c:	dec00204 	addi	sp,sp,8
  80b330:	f800283a 	ret

0080b334 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
  80b334:	defffb04 	addi	sp,sp,-20
  80b338:	df000415 	stw	fp,16(sp)
  80b33c:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  80b340:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b344:	0005303a 	rdctl	r2,status
  80b348:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b34c:	e0fffd17 	ldw	r3,-12(fp)
  80b350:	00bfff84 	movi	r2,-2
  80b354:	1884703a 	and	r2,r3,r2
  80b358:	1001703a 	wrctl	status,r2
  
  return context;
  80b35c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  80b360:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
  80b364:	00802074 	movhi	r2,129
  80b368:	109fb104 	addi	r2,r2,32452
  80b36c:	10800017 	ldw	r2,0(r2)
  80b370:	10800b0b 	ldhu	r2,44(r2)
  80b374:	e0bfff0d 	sth	r2,-4(fp)
  80b378:	e0bffe17 	ldw	r2,-8(fp)
  80b37c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b380:	e0bffc17 	ldw	r2,-16(fp)
  80b384:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
  80b388:	e0bfff0b 	ldhu	r2,-4(fp)
}
  80b38c:	e037883a 	mov	sp,fp
  80b390:	df000017 	ldw	fp,0(sp)
  80b394:	dec00104 	addi	sp,sp,4
  80b398:	f800283a 	ret

0080b39c <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
  80b39c:	deffed04 	addi	sp,sp,-76
  80b3a0:	dfc01215 	stw	ra,72(sp)
  80b3a4:	df001115 	stw	fp,68(sp)
  80b3a8:	df001104 	addi	fp,sp,68
  80b3ac:	e13ff915 	stw	r4,-28(fp)
  80b3b0:	e1fffc15 	stw	r7,-16(fp)
  80b3b4:	e17ffa0d 	sth	r5,-24(fp)
  80b3b8:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
  80b3bc:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  80b3c0:	e0bffc17 	ldw	r2,-16(fp)
  80b3c4:	1004c03a 	cmpne	r2,r2,zero
  80b3c8:	1000021e 	bne	r2,zero,80b3d4 <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
  80b3cc:	e03fff15 	stw	zero,-4(fp)
  80b3d0:	0000d606 	br	80b72c <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
  80b3d4:	e0bff917 	ldw	r2,-28(fp)
  80b3d8:	1004c03a 	cmpne	r2,r2,zero
  80b3dc:	1000051e 	bne	r2,zero,80b3f4 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80b3e0:	e0fffc17 	ldw	r3,-16(fp)
  80b3e4:	00801b84 	movi	r2,110
  80b3e8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80b3ec:	e03fff15 	stw	zero,-4(fp)
  80b3f0:	0000ce06 	br	80b72c <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
  80b3f4:	e0bff917 	ldw	r2,-28(fp)
  80b3f8:	10800003 	ldbu	r2,0(r2)
  80b3fc:	10803fcc 	andi	r2,r2,255
  80b400:	10800160 	cmpeqi	r2,r2,5
  80b404:	1000051e 	bne	r2,zero,80b41c <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
  80b408:	e0fffc17 	ldw	r3,-16(fp)
  80b40c:	00800044 	movi	r2,1
  80b410:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80b414:	e03fff15 	stw	zero,-4(fp)
  80b418:	0000c406 	br	80b72c <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b41c:	0005303a 	rdctl	r2,status
  80b420:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b424:	e0fff417 	ldw	r3,-48(fp)
  80b428:	00bfff84 	movi	r2,-2
  80b42c:	1884703a 	and	r2,r3,r2
  80b430:	1001703a 	wrctl	status,r2
  
  return context;
  80b434:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  80b438:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
  80b43c:	e0bffb03 	ldbu	r2,-20(fp)
  80b440:	e0bffe15 	stw	r2,-8(fp)
  80b444:	e0fffe17 	ldw	r3,-8(fp)
  80b448:	1805003a 	cmpeq	r2,r3,zero
  80b44c:	1000041e 	bne	r2,zero,80b460 <OSFlagPost+0xc4>
  80b450:	e0fffe17 	ldw	r3,-8(fp)
  80b454:	18800060 	cmpeqi	r2,r3,1
  80b458:	10000b1e 	bne	r2,zero,80b488 <OSFlagPost+0xec>
  80b45c:	00001206 	br	80b4a8 <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
  80b460:	e0bff917 	ldw	r2,-28(fp)
  80b464:	1080020b 	ldhu	r2,8(r2)
  80b468:	1007883a 	mov	r3,r2
  80b46c:	e0bffa0b 	ldhu	r2,-24(fp)
  80b470:	0084303a 	nor	r2,zero,r2
  80b474:	1884703a 	and	r2,r3,r2
  80b478:	1007883a 	mov	r3,r2
  80b47c:	e0bff917 	ldw	r2,-28(fp)
  80b480:	10c0020d 	sth	r3,8(r2)
             break;
  80b484:	00001106 	br	80b4cc <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
  80b488:	e0bff917 	ldw	r2,-28(fp)
  80b48c:	10c0020b 	ldhu	r3,8(r2)
  80b490:	e0bffa0b 	ldhu	r2,-24(fp)
  80b494:	1884b03a 	or	r2,r3,r2
  80b498:	1007883a 	mov	r3,r2
  80b49c:	e0bff917 	ldw	r2,-28(fp)
  80b4a0:	10c0020d 	sth	r3,8(r2)
             break;
  80b4a4:	00000906 	br	80b4cc <OSFlagPost+0x130>
  80b4a8:	e0bff517 	ldw	r2,-44(fp)
  80b4ac:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b4b0:	e0bff317 	ldw	r2,-52(fp)
  80b4b4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
  80b4b8:	e0fffc17 	ldw	r3,-16(fp)
  80b4bc:	00801c44 	movi	r2,113
  80b4c0:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
  80b4c4:	e03fff15 	stw	zero,-4(fp)
  80b4c8:	00009806 	br	80b72c <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
  80b4cc:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  80b4d0:	e0bff917 	ldw	r2,-28(fp)
  80b4d4:	10800117 	ldw	r2,4(r2)
  80b4d8:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  80b4dc:	00007506 	br	80b6b4 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
  80b4e0:	e0bff817 	ldw	r2,-32(fp)
  80b4e4:	10800483 	ldbu	r2,18(r2)
  80b4e8:	10803fcc 	andi	r2,r2,255
  80b4ec:	e0bffd15 	stw	r2,-12(fp)
  80b4f0:	e0fffd17 	ldw	r3,-12(fp)
  80b4f4:	18800060 	cmpeqi	r2,r3,1
  80b4f8:	10004d1e 	bne	r2,zero,80b630 <OSFlagPost+0x294>
  80b4fc:	e0fffd17 	ldw	r3,-12(fp)
  80b500:	18800088 	cmpgei	r2,r3,2
  80b504:	1000041e 	bne	r2,zero,80b518 <OSFlagPost+0x17c>
  80b508:	e0fffd17 	ldw	r3,-12(fp)
  80b50c:	1805003a 	cmpeq	r2,r3,zero
  80b510:	1000301e 	bne	r2,zero,80b5d4 <OSFlagPost+0x238>
  80b514:	00005b06 	br	80b684 <OSFlagPost+0x2e8>
  80b518:	e0fffd17 	ldw	r3,-12(fp)
  80b51c:	188000a0 	cmpeqi	r2,r3,2
  80b520:	1000041e 	bne	r2,zero,80b534 <OSFlagPost+0x198>
  80b524:	e0fffd17 	ldw	r3,-12(fp)
  80b528:	188000e0 	cmpeqi	r2,r3,3
  80b52c:	1000161e 	bne	r2,zero,80b588 <OSFlagPost+0x1ec>
  80b530:	00005406 	br	80b684 <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  80b534:	e0bff917 	ldw	r2,-28(fp)
  80b538:	10c0020b 	ldhu	r3,8(r2)
  80b53c:	e0bff817 	ldw	r2,-32(fp)
  80b540:	1080040b 	ldhu	r2,16(r2)
  80b544:	1884703a 	and	r2,r3,r2
  80b548:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  80b54c:	e0bff817 	ldw	r2,-32(fp)
  80b550:	1080040b 	ldhu	r2,16(r2)
  80b554:	10ffffcc 	andi	r3,r2,65535
  80b558:	e0bff68b 	ldhu	r2,-38(fp)
  80b55c:	1880521e 	bne	r3,r2,80b6a8 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  80b560:	e17ff68b 	ldhu	r5,-38(fp)
  80b564:	e13ff817 	ldw	r4,-32(fp)
  80b568:	080bac00 	call	80bac0 <OS_FlagTaskRdy>
  80b56c:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  80b570:	e0bff603 	ldbu	r2,-40(fp)
  80b574:	10800058 	cmpnei	r2,r2,1
  80b578:	10004b1e 	bne	r2,zero,80b6a8 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  80b57c:	00800044 	movi	r2,1
  80b580:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  80b584:	00004806 	br	80b6a8 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  80b588:	e0bff917 	ldw	r2,-28(fp)
  80b58c:	10c0020b 	ldhu	r3,8(r2)
  80b590:	e0bff817 	ldw	r2,-32(fp)
  80b594:	1080040b 	ldhu	r2,16(r2)
  80b598:	1884703a 	and	r2,r3,r2
  80b59c:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  80b5a0:	e0bff68b 	ldhu	r2,-38(fp)
  80b5a4:	1005003a 	cmpeq	r2,r2,zero
  80b5a8:	10003f1e 	bne	r2,zero,80b6a8 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  80b5ac:	e17ff68b 	ldhu	r5,-38(fp)
  80b5b0:	e13ff817 	ldw	r4,-32(fp)
  80b5b4:	080bac00 	call	80bac0 <OS_FlagTaskRdy>
  80b5b8:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  80b5bc:	e0bff603 	ldbu	r2,-40(fp)
  80b5c0:	10800058 	cmpnei	r2,r2,1
  80b5c4:	1000381e 	bne	r2,zero,80b6a8 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  80b5c8:	00800044 	movi	r2,1
  80b5cc:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  80b5d0:	00003506 	br	80b6a8 <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  80b5d4:	e0bff917 	ldw	r2,-28(fp)
  80b5d8:	1080020b 	ldhu	r2,8(r2)
  80b5dc:	0084303a 	nor	r2,zero,r2
  80b5e0:	1007883a 	mov	r3,r2
  80b5e4:	e0bff817 	ldw	r2,-32(fp)
  80b5e8:	1080040b 	ldhu	r2,16(r2)
  80b5ec:	1884703a 	and	r2,r3,r2
  80b5f0:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  80b5f4:	e0bff817 	ldw	r2,-32(fp)
  80b5f8:	1080040b 	ldhu	r2,16(r2)
  80b5fc:	10ffffcc 	andi	r3,r2,65535
  80b600:	e0bff68b 	ldhu	r2,-38(fp)
  80b604:	1880281e 	bne	r3,r2,80b6a8 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  80b608:	e17ff68b 	ldhu	r5,-38(fp)
  80b60c:	e13ff817 	ldw	r4,-32(fp)
  80b610:	080bac00 	call	80bac0 <OS_FlagTaskRdy>
  80b614:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  80b618:	e0bff603 	ldbu	r2,-40(fp)
  80b61c:	10800058 	cmpnei	r2,r2,1
  80b620:	1000211e 	bne	r2,zero,80b6a8 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  80b624:	00800044 	movi	r2,1
  80b628:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  80b62c:	00001e06 	br	80b6a8 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  80b630:	e0bff917 	ldw	r2,-28(fp)
  80b634:	1080020b 	ldhu	r2,8(r2)
  80b638:	0084303a 	nor	r2,zero,r2
  80b63c:	1007883a 	mov	r3,r2
  80b640:	e0bff817 	ldw	r2,-32(fp)
  80b644:	1080040b 	ldhu	r2,16(r2)
  80b648:	1884703a 	and	r2,r3,r2
  80b64c:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  80b650:	e0bff68b 	ldhu	r2,-38(fp)
  80b654:	1005003a 	cmpeq	r2,r2,zero
  80b658:	1000131e 	bne	r2,zero,80b6a8 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  80b65c:	e17ff68b 	ldhu	r5,-38(fp)
  80b660:	e13ff817 	ldw	r4,-32(fp)
  80b664:	080bac00 	call	80bac0 <OS_FlagTaskRdy>
  80b668:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  80b66c:	e0bff603 	ldbu	r2,-40(fp)
  80b670:	10800058 	cmpnei	r2,r2,1
  80b674:	10000c1e 	bne	r2,zero,80b6a8 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  80b678:	00800044 	movi	r2,1
  80b67c:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  80b680:	00000906 	br	80b6a8 <OSFlagPost+0x30c>
  80b684:	e0bff517 	ldw	r2,-44(fp)
  80b688:	e0bff215 	stw	r2,-56(fp)
  80b68c:	e0bff217 	ldw	r2,-56(fp)
  80b690:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  80b694:	e0fffc17 	ldw	r3,-16(fp)
  80b698:	00801bc4 	movi	r2,111
  80b69c:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
  80b6a0:	e03fff15 	stw	zero,-4(fp)
  80b6a4:	00002106 	br	80b72c <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
  80b6a8:	e0bff817 	ldw	r2,-32(fp)
  80b6ac:	10800017 	ldw	r2,0(r2)
  80b6b0:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  80b6b4:	e0bff817 	ldw	r2,-32(fp)
  80b6b8:	1004c03a 	cmpne	r2,r2,zero
  80b6bc:	103f881e 	bne	r2,zero,80b4e0 <OSFlagPost+0x144>
  80b6c0:	e0bff517 	ldw	r2,-44(fp)
  80b6c4:	e0bff115 	stw	r2,-60(fp)
  80b6c8:	e0bff117 	ldw	r2,-60(fp)
  80b6cc:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
  80b6d0:	e0bff783 	ldbu	r2,-34(fp)
  80b6d4:	10800058 	cmpnei	r2,r2,1
  80b6d8:	1000011e 	bne	r2,zero,80b6e0 <OSFlagPost+0x344>
        OS_Sched();
  80b6dc:	0809acc0 	call	809acc <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b6e0:	0005303a 	rdctl	r2,status
  80b6e4:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b6e8:	e0fff017 	ldw	r3,-64(fp)
  80b6ec:	00bfff84 	movi	r2,-2
  80b6f0:	1884703a 	and	r2,r3,r2
  80b6f4:	1001703a 	wrctl	status,r2
  
  return context;
  80b6f8:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
  80b6fc:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
  80b700:	e0bff917 	ldw	r2,-28(fp)
  80b704:	1080020b 	ldhu	r2,8(r2)
  80b708:	e0bff70d 	sth	r2,-36(fp)
  80b70c:	e0bff517 	ldw	r2,-44(fp)
  80b710:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b714:	e0bfef17 	ldw	r2,-68(fp)
  80b718:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
  80b71c:	e0bffc17 	ldw	r2,-16(fp)
  80b720:	10000005 	stb	zero,0(r2)
    return (flags_cur);
  80b724:	e0bff70b 	ldhu	r2,-36(fp)
  80b728:	e0bfff15 	stw	r2,-4(fp)
  80b72c:	e0bfff17 	ldw	r2,-4(fp)
}
  80b730:	e037883a 	mov	sp,fp
  80b734:	dfc00117 	ldw	ra,4(sp)
  80b738:	df000017 	ldw	fp,0(sp)
  80b73c:	dec00204 	addi	sp,sp,8
  80b740:	f800283a 	ret

0080b744 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
  80b744:	defff804 	addi	sp,sp,-32
  80b748:	df000715 	stw	fp,28(sp)
  80b74c:	df000704 	addi	fp,sp,28
  80b750:	e13ffd15 	stw	r4,-12(fp)
  80b754:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
  80b758:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
  80b75c:	e0bffe17 	ldw	r2,-8(fp)
  80b760:	1004c03a 	cmpne	r2,r2,zero
  80b764:	1000021e 	bne	r2,zero,80b770 <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
  80b768:	e03fff15 	stw	zero,-4(fp)
  80b76c:	00002506 	br	80b804 <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
  80b770:	e0bffd17 	ldw	r2,-12(fp)
  80b774:	1004c03a 	cmpne	r2,r2,zero
  80b778:	1000051e 	bne	r2,zero,80b790 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80b77c:	e0fffe17 	ldw	r3,-8(fp)
  80b780:	00801b84 	movi	r2,110
  80b784:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80b788:	e03fff15 	stw	zero,-4(fp)
  80b78c:	00001d06 	br	80b804 <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
  80b790:	e0bffd17 	ldw	r2,-12(fp)
  80b794:	10800003 	ldbu	r2,0(r2)
  80b798:	10803fcc 	andi	r2,r2,255
  80b79c:	10800160 	cmpeqi	r2,r2,5
  80b7a0:	1000051e 	bne	r2,zero,80b7b8 <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
  80b7a4:	e0fffe17 	ldw	r3,-8(fp)
  80b7a8:	00800044 	movi	r2,1
  80b7ac:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80b7b0:	e03fff15 	stw	zero,-4(fp)
  80b7b4:	00001306 	br	80b804 <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b7b8:	0005303a 	rdctl	r2,status
  80b7bc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b7c0:	e0fffa17 	ldw	r3,-24(fp)
  80b7c4:	00bfff84 	movi	r2,-2
  80b7c8:	1884703a 	and	r2,r3,r2
  80b7cc:	1001703a 	wrctl	status,r2
  
  return context;
  80b7d0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80b7d4:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
  80b7d8:	e0bffd17 	ldw	r2,-12(fp)
  80b7dc:	1080020b 	ldhu	r2,8(r2)
  80b7e0:	e0bffc0d 	sth	r2,-16(fp)
  80b7e4:	e0bffb17 	ldw	r2,-20(fp)
  80b7e8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b7ec:	e0bff917 	ldw	r2,-28(fp)
  80b7f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80b7f4:	e0bffe17 	ldw	r2,-8(fp)
  80b7f8:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
  80b7fc:	e0bffc0b 	ldhu	r2,-16(fp)
  80b800:	e0bfff15 	stw	r2,-4(fp)
  80b804:	e0bfff17 	ldw	r2,-4(fp)
}
  80b808:	e037883a 	mov	sp,fp
  80b80c:	df000017 	ldw	fp,0(sp)
  80b810:	dec00104 	addi	sp,sp,4
  80b814:	f800283a 	ret

0080b818 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
  80b818:	defff804 	addi	sp,sp,-32
  80b81c:	df000715 	stw	fp,28(sp)
  80b820:	df000704 	addi	fp,sp,28
  80b824:	e13ffb15 	stw	r4,-20(fp)
  80b828:	e17ffc15 	stw	r5,-16(fp)
  80b82c:	e0800117 	ldw	r2,4(fp)
  80b830:	e1bffd0d 	sth	r6,-12(fp)
  80b834:	e1fffe05 	stb	r7,-8(fp)
  80b838:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
  80b83c:	00802074 	movhi	r2,129
  80b840:	109fb104 	addi	r2,r2,32452
  80b844:	10c00017 	ldw	r3,0(r2)
  80b848:	00802074 	movhi	r2,129
  80b84c:	109fb104 	addi	r2,r2,32452
  80b850:	10800017 	ldw	r2,0(r2)
  80b854:	10800c03 	ldbu	r2,48(r2)
  80b858:	10800814 	ori	r2,r2,32
  80b85c:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
  80b860:	00802074 	movhi	r2,129
  80b864:	109fb104 	addi	r2,r2,32452
  80b868:	10800017 	ldw	r2,0(r2)
  80b86c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
  80b870:	00802074 	movhi	r2,129
  80b874:	109fb104 	addi	r2,r2,32452
  80b878:	10c00017 	ldw	r3,0(r2)
  80b87c:	e0bfff0b 	ldhu	r2,-4(fp)
  80b880:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
  80b884:	00802074 	movhi	r2,129
  80b888:	109fb104 	addi	r2,r2,32452
  80b88c:	10c00017 	ldw	r3,0(r2)
  80b890:	e0bffc17 	ldw	r2,-16(fp)
  80b894:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
  80b898:	e0fffc17 	ldw	r3,-16(fp)
  80b89c:	e0bffd0b 	ldhu	r2,-12(fp)
  80b8a0:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
  80b8a4:	e0fffc17 	ldw	r3,-16(fp)
  80b8a8:	e0bffe03 	ldbu	r2,-8(fp)
  80b8ac:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
  80b8b0:	00802074 	movhi	r2,129
  80b8b4:	109fb104 	addi	r2,r2,32452
  80b8b8:	10c00017 	ldw	r3,0(r2)
  80b8bc:	e0bffc17 	ldw	r2,-16(fp)
  80b8c0:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
  80b8c4:	e0bffb17 	ldw	r2,-20(fp)
  80b8c8:	10c00117 	ldw	r3,4(r2)
  80b8cc:	e0bffc17 	ldw	r2,-16(fp)
  80b8d0:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
  80b8d4:	e0bffc17 	ldw	r2,-16(fp)
  80b8d8:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
  80b8dc:	e0fffc17 	ldw	r3,-16(fp)
  80b8e0:	e0bffb17 	ldw	r2,-20(fp)
  80b8e4:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  80b8e8:	e0bffb17 	ldw	r2,-20(fp)
  80b8ec:	10800117 	ldw	r2,4(r2)
  80b8f0:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
  80b8f4:	e0bffa17 	ldw	r2,-24(fp)
  80b8f8:	1005003a 	cmpeq	r2,r2,zero
  80b8fc:	1000031e 	bne	r2,zero,80b90c <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
  80b900:	e0fffa17 	ldw	r3,-24(fp)
  80b904:	e0bffc17 	ldw	r2,-16(fp)
  80b908:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
  80b90c:	e0fffb17 	ldw	r3,-20(fp)
  80b910:	e0bffc17 	ldw	r2,-16(fp)
  80b914:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
  80b918:	00802074 	movhi	r2,129
  80b91c:	109fb104 	addi	r2,r2,32452
  80b920:	10800017 	ldw	r2,0(r2)
  80b924:	10800d03 	ldbu	r2,52(r2)
  80b928:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  80b92c:	e13ff903 	ldbu	r4,-28(fp)
  80b930:	e0fff903 	ldbu	r3,-28(fp)
  80b934:	00802074 	movhi	r2,129
  80b938:	109fae44 	addi	r2,r2,32441
  80b93c:	10c5883a 	add	r2,r2,r3
  80b940:	10800003 	ldbu	r2,0(r2)
  80b944:	1007883a 	mov	r3,r2
  80b948:	00802074 	movhi	r2,129
  80b94c:	109fb104 	addi	r2,r2,32452
  80b950:	10800017 	ldw	r2,0(r2)
  80b954:	10800d43 	ldbu	r2,53(r2)
  80b958:	0084303a 	nor	r2,zero,r2
  80b95c:	1884703a 	and	r2,r3,r2
  80b960:	1007883a 	mov	r3,r2
  80b964:	00802074 	movhi	r2,129
  80b968:	109fae44 	addi	r2,r2,32441
  80b96c:	1105883a 	add	r2,r2,r4
  80b970:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
  80b974:	e0fff903 	ldbu	r3,-28(fp)
  80b978:	00802074 	movhi	r2,129
  80b97c:	109fae44 	addi	r2,r2,32441
  80b980:	10c5883a 	add	r2,r2,r3
  80b984:	10800003 	ldbu	r2,0(r2)
  80b988:	10803fcc 	andi	r2,r2,255
  80b98c:	1004c03a 	cmpne	r2,r2,zero
  80b990:	10000e1e 	bne	r2,zero,80b9cc <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  80b994:	00802074 	movhi	r2,129
  80b998:	109fb104 	addi	r2,r2,32452
  80b99c:	10800017 	ldw	r2,0(r2)
  80b9a0:	10800d83 	ldbu	r2,54(r2)
  80b9a4:	0084303a 	nor	r2,zero,r2
  80b9a8:	1007883a 	mov	r3,r2
  80b9ac:	00802074 	movhi	r2,129
  80b9b0:	109fae04 	addi	r2,r2,32440
  80b9b4:	10800003 	ldbu	r2,0(r2)
  80b9b8:	1884703a 	and	r2,r3,r2
  80b9bc:	1007883a 	mov	r3,r2
  80b9c0:	00802074 	movhi	r2,129
  80b9c4:	109fae04 	addi	r2,r2,32440
  80b9c8:	10c00005 	stb	r3,0(r2)
    }
}
  80b9cc:	e037883a 	mov	sp,fp
  80b9d0:	df000017 	ldw	fp,0(sp)
  80b9d4:	dec00104 	addi	sp,sp,4
  80b9d8:	f800283a 	ret

0080b9dc <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
  80b9dc:	defffb04 	addi	sp,sp,-20
  80b9e0:	dfc00415 	stw	ra,16(sp)
  80b9e4:	df000315 	stw	fp,12(sp)
  80b9e8:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
  80b9ec:	010020b4 	movhi	r4,130
  80b9f0:	21300204 	addi	r4,r4,-16376
  80b9f4:	0140dc04 	movi	r5,880
  80b9f8:	0809a0c0 	call	809a0c <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
  80b9fc:	008020b4 	movhi	r2,130
  80ba00:	10b00204 	addi	r2,r2,-16376
  80ba04:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
  80ba08:	008020b4 	movhi	r2,130
  80ba0c:	10b00d04 	addi	r2,r2,-16332
  80ba10:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  80ba14:	e03fff0d 	sth	zero,-4(fp)
  80ba18:	00001306 	br	80ba68 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  80ba1c:	e0bffe17 	ldw	r2,-8(fp)
  80ba20:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
  80ba24:	e0fffe17 	ldw	r3,-8(fp)
  80ba28:	e0bffd17 	ldw	r2,-12(fp)
  80ba2c:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
  80ba30:	e0fffe17 	ldw	r3,-8(fp)
  80ba34:	00800fc4 	movi	r2,63
  80ba38:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  80ba3c:	e0bffe17 	ldw	r2,-8(fp)
  80ba40:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
  80ba44:	e0bffe17 	ldw	r2,-8(fp)
  80ba48:	10800b04 	addi	r2,r2,44
  80ba4c:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
  80ba50:	e0bffd17 	ldw	r2,-12(fp)
  80ba54:	10800b04 	addi	r2,r2,44
  80ba58:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  80ba5c:	e0bfff0b 	ldhu	r2,-4(fp)
  80ba60:	10800044 	addi	r2,r2,1
  80ba64:	e0bfff0d 	sth	r2,-4(fp)
  80ba68:	e0bfff0b 	ldhu	r2,-4(fp)
  80ba6c:	108004f0 	cmpltui	r2,r2,19
  80ba70:	103fea1e 	bne	r2,zero,80ba1c <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  80ba74:	e0bffe17 	ldw	r2,-8(fp)
  80ba78:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
  80ba7c:	e0bffe17 	ldw	r2,-8(fp)
  80ba80:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
  80ba84:	e0fffe17 	ldw	r3,-8(fp)
  80ba88:	00800fc4 	movi	r2,63
  80ba8c:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  80ba90:	e0bffe17 	ldw	r2,-8(fp)
  80ba94:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
  80ba98:	00c02074 	movhi	r3,129
  80ba9c:	18dfb304 	addi	r3,r3,32460
  80baa0:	008020b4 	movhi	r2,130
  80baa4:	10b00204 	addi	r2,r2,-16376
  80baa8:	18800015 	stw	r2,0(r3)
#endif
}
  80baac:	e037883a 	mov	sp,fp
  80bab0:	dfc00117 	ldw	ra,4(sp)
  80bab4:	df000017 	ldw	fp,0(sp)
  80bab8:	dec00204 	addi	sp,sp,8
  80babc:	f800283a 	ret

0080bac0 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
  80bac0:	defffa04 	addi	sp,sp,-24
  80bac4:	dfc00515 	stw	ra,20(sp)
  80bac8:	df000415 	stw	fp,16(sp)
  80bacc:	df000404 	addi	fp,sp,16
  80bad0:	e13ffe15 	stw	r4,-8(fp)
  80bad4:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
  80bad8:	e0bffe17 	ldw	r2,-8(fp)
  80badc:	10800217 	ldw	r2,8(r2)
  80bae0:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
  80bae4:	e0bffd17 	ldw	r2,-12(fp)
  80bae8:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
  80baec:	e0fffd17 	ldw	r3,-12(fp)
  80baf0:	e0bfff0b 	ldhu	r2,-4(fp)
  80baf4:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
  80baf8:	e0bffd17 	ldw	r2,-12(fp)
  80bafc:	10c00c03 	ldbu	r3,48(r2)
  80bb00:	00bff7c4 	movi	r2,-33
  80bb04:	1884703a 	and	r2,r3,r2
  80bb08:	1007883a 	mov	r3,r2
  80bb0c:	e0bffd17 	ldw	r2,-12(fp)
  80bb10:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
  80bb14:	e0bffd17 	ldw	r2,-12(fp)
  80bb18:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
  80bb1c:	e0bffd17 	ldw	r2,-12(fp)
  80bb20:	10800c03 	ldbu	r2,48(r2)
  80bb24:	10803fcc 	andi	r2,r2,255
  80bb28:	1004c03a 	cmpne	r2,r2,zero
  80bb2c:	10001f1e 	bne	r2,zero,80bbac <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
  80bb30:	e0bffd17 	ldw	r2,-12(fp)
  80bb34:	10c00d83 	ldbu	r3,54(r2)
  80bb38:	00802074 	movhi	r2,129
  80bb3c:	109fae04 	addi	r2,r2,32440
  80bb40:	10800003 	ldbu	r2,0(r2)
  80bb44:	1884b03a 	or	r2,r3,r2
  80bb48:	1007883a 	mov	r3,r2
  80bb4c:	00802074 	movhi	r2,129
  80bb50:	109fae04 	addi	r2,r2,32440
  80bb54:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  80bb58:	e0bffd17 	ldw	r2,-12(fp)
  80bb5c:	10800d03 	ldbu	r2,52(r2)
  80bb60:	11003fcc 	andi	r4,r2,255
  80bb64:	e0bffd17 	ldw	r2,-12(fp)
  80bb68:	10800d03 	ldbu	r2,52(r2)
  80bb6c:	10c03fcc 	andi	r3,r2,255
  80bb70:	00802074 	movhi	r2,129
  80bb74:	109fae44 	addi	r2,r2,32441
  80bb78:	10c5883a 	add	r2,r2,r3
  80bb7c:	10c00003 	ldbu	r3,0(r2)
  80bb80:	e0bffd17 	ldw	r2,-12(fp)
  80bb84:	10800d43 	ldbu	r2,53(r2)
  80bb88:	1884b03a 	or	r2,r3,r2
  80bb8c:	1007883a 	mov	r3,r2
  80bb90:	00802074 	movhi	r2,129
  80bb94:	109fae44 	addi	r2,r2,32441
  80bb98:	1105883a 	add	r2,r2,r4
  80bb9c:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
  80bba0:	00800044 	movi	r2,1
  80bba4:	e0bffc05 	stb	r2,-16(fp)
  80bba8:	00000106 	br	80bbb0 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
  80bbac:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
  80bbb0:	e13ffe17 	ldw	r4,-8(fp)
  80bbb4:	080bbd00 	call	80bbd0 <OS_FlagUnlink>
    return (sched);
  80bbb8:	e0bffc03 	ldbu	r2,-16(fp)
}
  80bbbc:	e037883a 	mov	sp,fp
  80bbc0:	dfc00117 	ldw	ra,4(sp)
  80bbc4:	df000017 	ldw	fp,0(sp)
  80bbc8:	dec00204 	addi	sp,sp,8
  80bbcc:	f800283a 	ret

0080bbd0 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
  80bbd0:	defffa04 	addi	sp,sp,-24
  80bbd4:	df000515 	stw	fp,20(sp)
  80bbd8:	df000504 	addi	fp,sp,20
  80bbdc:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
  80bbe0:	e0bfff17 	ldw	r2,-4(fp)
  80bbe4:	10800117 	ldw	r2,4(r2)
  80bbe8:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  80bbec:	e0bfff17 	ldw	r2,-4(fp)
  80bbf0:	10800017 	ldw	r2,0(r2)
  80bbf4:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
  80bbf8:	e0bffc17 	ldw	r2,-16(fp)
  80bbfc:	1004c03a 	cmpne	r2,r2,zero
  80bc00:	10000c1e 	bne	r2,zero,80bc34 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
  80bc04:	e0bfff17 	ldw	r2,-4(fp)
  80bc08:	10800317 	ldw	r2,12(r2)
  80bc0c:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
  80bc10:	e0fffd17 	ldw	r3,-12(fp)
  80bc14:	e0bffb17 	ldw	r2,-20(fp)
  80bc18:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
  80bc1c:	e0bffb17 	ldw	r2,-20(fp)
  80bc20:	1005003a 	cmpeq	r2,r2,zero
  80bc24:	10000c1e 	bne	r2,zero,80bc58 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
  80bc28:	e0bffb17 	ldw	r2,-20(fp)
  80bc2c:	10000115 	stw	zero,4(r2)
  80bc30:	00000906 	br	80bc58 <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
  80bc34:	e0fffc17 	ldw	r3,-16(fp)
  80bc38:	e0bffb17 	ldw	r2,-20(fp)
  80bc3c:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
  80bc40:	e0bffb17 	ldw	r2,-20(fp)
  80bc44:	1005003a 	cmpeq	r2,r2,zero
  80bc48:	1000031e 	bne	r2,zero,80bc58 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
  80bc4c:	e0fffb17 	ldw	r3,-20(fp)
  80bc50:	e0bffc17 	ldw	r2,-16(fp)
  80bc54:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
  80bc58:	e0bfff17 	ldw	r2,-4(fp)
  80bc5c:	10800217 	ldw	r2,8(r2)
  80bc60:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
  80bc64:	e0bffe17 	ldw	r2,-8(fp)
  80bc68:	10000a15 	stw	zero,40(r2)
#endif
}
  80bc6c:	e037883a 	mov	sp,fp
  80bc70:	df000017 	ldw	fp,0(sp)
  80bc74:	dec00104 	addi	sp,sp,4
  80bc78:	f800283a 	ret

0080bc7c <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
  80bc7c:	defff304 	addi	sp,sp,-52
  80bc80:	df000c15 	stw	fp,48(sp)
  80bc84:	df000c04 	addi	fp,sp,48
  80bc88:	e13ffb15 	stw	r4,-20(fp)
  80bc8c:	e17ffc15 	stw	r5,-16(fp)
  80bc90:	e1bffd15 	stw	r6,-12(fp)
  80bc94:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80bc98:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  80bc9c:	e0bffe17 	ldw	r2,-8(fp)
  80bca0:	1004c03a 	cmpne	r2,r2,zero
  80bca4:	1000021e 	bne	r2,zero,80bcb0 <OSMemCreate+0x34>
        return ((OS_MEM *)0);
  80bca8:	e03fff15 	stw	zero,-4(fp)
  80bcac:	00007506 	br	80be84 <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
  80bcb0:	e0bffb17 	ldw	r2,-20(fp)
  80bcb4:	1004c03a 	cmpne	r2,r2,zero
  80bcb8:	1000051e 	bne	r2,zero,80bcd0 <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  80bcbc:	e0fffe17 	ldw	r3,-8(fp)
  80bcc0:	00801884 	movi	r2,98
  80bcc4:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  80bcc8:	e03fff15 	stw	zero,-4(fp)
  80bccc:	00006d06 	br	80be84 <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
  80bcd0:	e0bffb17 	ldw	r2,-20(fp)
  80bcd4:	108000cc 	andi	r2,r2,3
  80bcd8:	1005003a 	cmpeq	r2,r2,zero
  80bcdc:	1000051e 	bne	r2,zero,80bcf4 <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  80bce0:	e0fffe17 	ldw	r3,-8(fp)
  80bce4:	00801884 	movi	r2,98
  80bce8:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  80bcec:	e03fff15 	stw	zero,-4(fp)
  80bcf0:	00006406 	br	80be84 <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
  80bcf4:	e0bffc17 	ldw	r2,-16(fp)
  80bcf8:	108000a8 	cmpgeui	r2,r2,2
  80bcfc:	1000051e 	bne	r2,zero,80bd14 <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
  80bd00:	e0fffe17 	ldw	r3,-8(fp)
  80bd04:	008016c4 	movi	r2,91
  80bd08:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  80bd0c:	e03fff15 	stw	zero,-4(fp)
  80bd10:	00005c06 	br	80be84 <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
  80bd14:	e0bffd17 	ldw	r2,-12(fp)
  80bd18:	10800128 	cmpgeui	r2,r2,4
  80bd1c:	1000051e 	bne	r2,zero,80bd34 <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
  80bd20:	e0fffe17 	ldw	r3,-8(fp)
  80bd24:	00801704 	movi	r2,92
  80bd28:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  80bd2c:	e03fff15 	stw	zero,-4(fp)
  80bd30:	00005406 	br	80be84 <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bd34:	0005303a 	rdctl	r2,status
  80bd38:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bd3c:	e0fff517 	ldw	r3,-44(fp)
  80bd40:	00bfff84 	movi	r2,-2
  80bd44:	1884703a 	and	r2,r3,r2
  80bd48:	1001703a 	wrctl	status,r2
  
  return context;
  80bd4c:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80bd50:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
  80bd54:	00802074 	movhi	r2,129
  80bd58:	109fab04 	addi	r2,r2,32428
  80bd5c:	10800017 	ldw	r2,0(r2)
  80bd60:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
  80bd64:	00802074 	movhi	r2,129
  80bd68:	109fab04 	addi	r2,r2,32428
  80bd6c:	10800017 	ldw	r2,0(r2)
  80bd70:	1005003a 	cmpeq	r2,r2,zero
  80bd74:	1000081e 	bne	r2,zero,80bd98 <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
  80bd78:	00802074 	movhi	r2,129
  80bd7c:	109fab04 	addi	r2,r2,32428
  80bd80:	10800017 	ldw	r2,0(r2)
  80bd84:	10800117 	ldw	r2,4(r2)
  80bd88:	1007883a 	mov	r3,r2
  80bd8c:	00802074 	movhi	r2,129
  80bd90:	109fab04 	addi	r2,r2,32428
  80bd94:	10c00015 	stw	r3,0(r2)
  80bd98:	e0bff617 	ldw	r2,-40(fp)
  80bd9c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bda0:	e0bff417 	ldw	r2,-48(fp)
  80bda4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
  80bda8:	e0bffa17 	ldw	r2,-24(fp)
  80bdac:	1004c03a 	cmpne	r2,r2,zero
  80bdb0:	1000051e 	bne	r2,zero,80bdc8 <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
  80bdb4:	e0fffe17 	ldw	r3,-8(fp)
  80bdb8:	00801684 	movi	r2,90
  80bdbc:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  80bdc0:	e03fff15 	stw	zero,-4(fp)
  80bdc4:	00002f06 	br	80be84 <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
  80bdc8:	e0bffb17 	ldw	r2,-20(fp)
  80bdcc:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
  80bdd0:	e0bffb17 	ldw	r2,-20(fp)
  80bdd4:	1007883a 	mov	r3,r2
  80bdd8:	e0bffd17 	ldw	r2,-12(fp)
  80bddc:	1885883a 	add	r2,r3,r2
  80bde0:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
  80bde4:	e03ff715 	stw	zero,-36(fp)
  80bde8:	00000d06 	br	80be20 <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
  80bdec:	e0fff817 	ldw	r3,-32(fp)
  80bdf0:	e0bff917 	ldw	r2,-28(fp)
  80bdf4:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
  80bdf8:	e0bff917 	ldw	r2,-28(fp)
  80bdfc:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
  80be00:	e0bff917 	ldw	r2,-28(fp)
  80be04:	1007883a 	mov	r3,r2
  80be08:	e0bffd17 	ldw	r2,-12(fp)
  80be0c:	1885883a 	add	r2,r3,r2
  80be10:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
  80be14:	e0bff717 	ldw	r2,-36(fp)
  80be18:	10800044 	addi	r2,r2,1
  80be1c:	e0bff715 	stw	r2,-36(fp)
  80be20:	e0bffc17 	ldw	r2,-16(fp)
  80be24:	10ffffc4 	addi	r3,r2,-1
  80be28:	e0bff717 	ldw	r2,-36(fp)
  80be2c:	10ffef36 	bltu	r2,r3,80bdec <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
  80be30:	e0bff817 	ldw	r2,-32(fp)
  80be34:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
  80be38:	e0fffa17 	ldw	r3,-24(fp)
  80be3c:	e0bffb17 	ldw	r2,-20(fp)
  80be40:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
  80be44:	e0fffa17 	ldw	r3,-24(fp)
  80be48:	e0bffb17 	ldw	r2,-20(fp)
  80be4c:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
  80be50:	e0fffa17 	ldw	r3,-24(fp)
  80be54:	e0bffc17 	ldw	r2,-16(fp)
  80be58:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
  80be5c:	e0fffa17 	ldw	r3,-24(fp)
  80be60:	e0bffc17 	ldw	r2,-16(fp)
  80be64:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
  80be68:	e0fffa17 	ldw	r3,-24(fp)
  80be6c:	e0bffd17 	ldw	r2,-12(fp)
  80be70:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
  80be74:	e0bffe17 	ldw	r2,-8(fp)
  80be78:	10000005 	stb	zero,0(r2)
    return (pmem);
  80be7c:	e0bffa17 	ldw	r2,-24(fp)
  80be80:	e0bfff15 	stw	r2,-4(fp)
  80be84:	e0bfff17 	ldw	r2,-4(fp)
}
  80be88:	e037883a 	mov	sp,fp
  80be8c:	df000017 	ldw	fp,0(sp)
  80be90:	dec00104 	addi	sp,sp,4
  80be94:	f800283a 	ret

0080be98 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
  80be98:	defff704 	addi	sp,sp,-36
  80be9c:	df000815 	stw	fp,32(sp)
  80bea0:	df000804 	addi	fp,sp,32
  80bea4:	e13ffd15 	stw	r4,-12(fp)
  80bea8:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80beac:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  80beb0:	e0bffe17 	ldw	r2,-8(fp)
  80beb4:	1004c03a 	cmpne	r2,r2,zero
  80beb8:	1000021e 	bne	r2,zero,80bec4 <OSMemGet+0x2c>
        return ((void *)0);
  80bebc:	e03fff15 	stw	zero,-4(fp)
  80bec0:	00003106 	br	80bf88 <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
  80bec4:	e0bffd17 	ldw	r2,-12(fp)
  80bec8:	1004c03a 	cmpne	r2,r2,zero
  80becc:	1000051e 	bne	r2,zero,80bee4 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  80bed0:	e0fffe17 	ldw	r3,-8(fp)
  80bed4:	00801804 	movi	r2,96
  80bed8:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80bedc:	e03fff15 	stw	zero,-4(fp)
  80bee0:	00002906 	br	80bf88 <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bee4:	0005303a 	rdctl	r2,status
  80bee8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80beec:	e0fffa17 	ldw	r3,-24(fp)
  80bef0:	00bfff84 	movi	r2,-2
  80bef4:	1884703a 	and	r2,r3,r2
  80bef8:	1001703a 	wrctl	status,r2
  
  return context;
  80befc:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80bf00:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
  80bf04:	e0bffd17 	ldw	r2,-12(fp)
  80bf08:	10800417 	ldw	r2,16(r2)
  80bf0c:	1005003a 	cmpeq	r2,r2,zero
  80bf10:	1000151e 	bne	r2,zero,80bf68 <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
  80bf14:	e0bffd17 	ldw	r2,-12(fp)
  80bf18:	10800117 	ldw	r2,4(r2)
  80bf1c:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
  80bf20:	e0bffc17 	ldw	r2,-16(fp)
  80bf24:	10c00017 	ldw	r3,0(r2)
  80bf28:	e0bffd17 	ldw	r2,-12(fp)
  80bf2c:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
  80bf30:	e0bffd17 	ldw	r2,-12(fp)
  80bf34:	10800417 	ldw	r2,16(r2)
  80bf38:	10ffffc4 	addi	r3,r2,-1
  80bf3c:	e0bffd17 	ldw	r2,-12(fp)
  80bf40:	10c00415 	stw	r3,16(r2)
  80bf44:	e0bffb17 	ldw	r2,-20(fp)
  80bf48:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bf4c:	e0bff917 	ldw	r2,-28(fp)
  80bf50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
  80bf54:	e0bffe17 	ldw	r2,-8(fp)
  80bf58:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
  80bf5c:	e0bffc17 	ldw	r2,-16(fp)
  80bf60:	e0bfff15 	stw	r2,-4(fp)
  80bf64:	00000806 	br	80bf88 <OSMemGet+0xf0>
  80bf68:	e0bffb17 	ldw	r2,-20(fp)
  80bf6c:	e0bff815 	stw	r2,-32(fp)
  80bf70:	e0bff817 	ldw	r2,-32(fp)
  80bf74:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
  80bf78:	e0fffe17 	ldw	r3,-8(fp)
  80bf7c:	00801744 	movi	r2,93
  80bf80:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
  80bf84:	e03fff15 	stw	zero,-4(fp)
  80bf88:	e0bfff17 	ldw	r2,-4(fp)
}
  80bf8c:	e037883a 	mov	sp,fp
  80bf90:	df000017 	ldw	fp,0(sp)
  80bf94:	dec00104 	addi	sp,sp,4
  80bf98:	f800283a 	ret

0080bf9c <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  80bf9c:	defff604 	addi	sp,sp,-40
  80bfa0:	dfc00915 	stw	ra,36(sp)
  80bfa4:	df000815 	stw	fp,32(sp)
  80bfa8:	df000804 	addi	fp,sp,32
  80bfac:	e13ffc15 	stw	r4,-16(fp)
  80bfb0:	e17ffd15 	stw	r5,-12(fp)
  80bfb4:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80bfb8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80bfbc:	e0bffe17 	ldw	r2,-8(fp)
  80bfc0:	1004c03a 	cmpne	r2,r2,zero
  80bfc4:	1000021e 	bne	r2,zero,80bfd0 <OSMemNameGet+0x34>
        return (0);
  80bfc8:	e03fff15 	stw	zero,-4(fp)
  80bfcc:	00003006 	br	80c090 <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  80bfd0:	e0bffc17 	ldw	r2,-16(fp)
  80bfd4:	1004c03a 	cmpne	r2,r2,zero
  80bfd8:	1000051e 	bne	r2,zero,80bff0 <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  80bfdc:	e0fffe17 	ldw	r3,-8(fp)
  80bfe0:	00801804 	movi	r2,96
  80bfe4:	18800005 	stb	r2,0(r3)
        return (0);
  80bfe8:	e03fff15 	stw	zero,-4(fp)
  80bfec:	00002806 	br	80c090 <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80bff0:	e0bffd17 	ldw	r2,-12(fp)
  80bff4:	1004c03a 	cmpne	r2,r2,zero
  80bff8:	1000051e 	bne	r2,zero,80c010 <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  80bffc:	e0fffe17 	ldw	r3,-8(fp)
  80c000:	00800304 	movi	r2,12
  80c004:	18800005 	stb	r2,0(r3)
        return (0);
  80c008:	e03fff15 	stw	zero,-4(fp)
  80c00c:	00002006 	br	80c090 <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80c010:	00802074 	movhi	r2,129
  80c014:	109fb004 	addi	r2,r2,32448
  80c018:	10800003 	ldbu	r2,0(r2)
  80c01c:	10803fcc 	andi	r2,r2,255
  80c020:	1005003a 	cmpeq	r2,r2,zero
  80c024:	1000051e 	bne	r2,zero,80c03c <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
  80c028:	e0fffe17 	ldw	r3,-8(fp)
  80c02c:	00800444 	movi	r2,17
  80c030:	18800005 	stb	r2,0(r3)
        return (0);
  80c034:	e03fff15 	stw	zero,-4(fp)
  80c038:	00001506 	br	80c090 <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c03c:	0005303a 	rdctl	r2,status
  80c040:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c044:	e0fff917 	ldw	r3,-28(fp)
  80c048:	00bfff84 	movi	r2,-2
  80c04c:	1884703a 	and	r2,r3,r2
  80c050:	1001703a 	wrctl	status,r2
  
  return context;
  80c054:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80c058:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
  80c05c:	e0bffc17 	ldw	r2,-16(fp)
  80c060:	11400504 	addi	r5,r2,20
  80c064:	e13ffd17 	ldw	r4,-12(fp)
  80c068:	0809c100 	call	809c10 <OS_StrCopy>
  80c06c:	e0bffb05 	stb	r2,-20(fp)
  80c070:	e0bffa17 	ldw	r2,-24(fp)
  80c074:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c078:	e0bff817 	ldw	r2,-32(fp)
  80c07c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80c080:	e0bffe17 	ldw	r2,-8(fp)
  80c084:	10000005 	stb	zero,0(r2)
    return (len);
  80c088:	e0bffb03 	ldbu	r2,-20(fp)
  80c08c:	e0bfff15 	stw	r2,-4(fp)
  80c090:	e0bfff17 	ldw	r2,-4(fp)
}
  80c094:	e037883a 	mov	sp,fp
  80c098:	dfc00117 	ldw	ra,4(sp)
  80c09c:	df000017 	ldw	fp,0(sp)
  80c0a0:	dec00204 	addi	sp,sp,8
  80c0a4:	f800283a 	ret

0080c0a8 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  80c0a8:	defff604 	addi	sp,sp,-40
  80c0ac:	dfc00915 	stw	ra,36(sp)
  80c0b0:	df000815 	stw	fp,32(sp)
  80c0b4:	df000804 	addi	fp,sp,32
  80c0b8:	e13ffd15 	stw	r4,-12(fp)
  80c0bc:	e17ffe15 	stw	r5,-8(fp)
  80c0c0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80c0c4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80c0c8:	e0bfff17 	ldw	r2,-4(fp)
  80c0cc:	1005003a 	cmpeq	r2,r2,zero
  80c0d0:	1000381e 	bne	r2,zero,80c1b4 <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  80c0d4:	e0bffd17 	ldw	r2,-12(fp)
  80c0d8:	1004c03a 	cmpne	r2,r2,zero
  80c0dc:	1000041e 	bne	r2,zero,80c0f0 <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  80c0e0:	e0ffff17 	ldw	r3,-4(fp)
  80c0e4:	00801804 	movi	r2,96
  80c0e8:	18800005 	stb	r2,0(r3)
        return;
  80c0ec:	00003106 	br	80c1b4 <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80c0f0:	e0bffe17 	ldw	r2,-8(fp)
  80c0f4:	1004c03a 	cmpne	r2,r2,zero
  80c0f8:	1000041e 	bne	r2,zero,80c10c <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  80c0fc:	e0ffff17 	ldw	r3,-4(fp)
  80c100:	00800304 	movi	r2,12
  80c104:	18800005 	stb	r2,0(r3)
        return;
  80c108:	00002a06 	br	80c1b4 <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80c10c:	00802074 	movhi	r2,129
  80c110:	109fb004 	addi	r2,r2,32448
  80c114:	10800003 	ldbu	r2,0(r2)
  80c118:	10803fcc 	andi	r2,r2,255
  80c11c:	1005003a 	cmpeq	r2,r2,zero
  80c120:	1000041e 	bne	r2,zero,80c134 <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
  80c124:	e0ffff17 	ldw	r3,-4(fp)
  80c128:	00800484 	movi	r2,18
  80c12c:	18800005 	stb	r2,0(r3)
        return;
  80c130:	00002006 	br	80c1b4 <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c134:	0005303a 	rdctl	r2,status
  80c138:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c13c:	e0fffa17 	ldw	r3,-24(fp)
  80c140:	00bfff84 	movi	r2,-2
  80c144:	1884703a 	and	r2,r3,r2
  80c148:	1001703a 	wrctl	status,r2
  
  return context;
  80c14c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80c150:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  80c154:	e13ffe17 	ldw	r4,-8(fp)
  80c158:	0809c900 	call	809c90 <OS_StrLen>
  80c15c:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
  80c160:	e0bffc03 	ldbu	r2,-16(fp)
  80c164:	10800830 	cmpltui	r2,r2,32
  80c168:	1000081e 	bne	r2,zero,80c18c <OSMemNameSet+0xe4>
  80c16c:	e0bffb17 	ldw	r2,-20(fp)
  80c170:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c174:	e0bff917 	ldw	r2,-28(fp)
  80c178:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
  80c17c:	e0ffff17 	ldw	r3,-4(fp)
  80c180:	008018c4 	movi	r2,99
  80c184:	18800005 	stb	r2,0(r3)
        return;
  80c188:	00000a06 	br	80c1b4 <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
  80c18c:	e0bffd17 	ldw	r2,-12(fp)
  80c190:	11000504 	addi	r4,r2,20
  80c194:	e17ffe17 	ldw	r5,-8(fp)
  80c198:	0809c100 	call	809c10 <OS_StrCopy>
  80c19c:	e0bffb17 	ldw	r2,-20(fp)
  80c1a0:	e0bff815 	stw	r2,-32(fp)
  80c1a4:	e0bff817 	ldw	r2,-32(fp)
  80c1a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80c1ac:	e0bfff17 	ldw	r2,-4(fp)
  80c1b0:	10000005 	stb	zero,0(r2)
}
  80c1b4:	e037883a 	mov	sp,fp
  80c1b8:	dfc00117 	ldw	ra,4(sp)
  80c1bc:	df000017 	ldw	fp,0(sp)
  80c1c0:	dec00204 	addi	sp,sp,8
  80c1c4:	f800283a 	ret

0080c1c8 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
  80c1c8:	defff804 	addi	sp,sp,-32
  80c1cc:	df000715 	stw	fp,28(sp)
  80c1d0:	df000704 	addi	fp,sp,28
  80c1d4:	e13ffd15 	stw	r4,-12(fp)
  80c1d8:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80c1dc:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  80c1e0:	e0bffd17 	ldw	r2,-12(fp)
  80c1e4:	1004c03a 	cmpne	r2,r2,zero
  80c1e8:	1000031e 	bne	r2,zero,80c1f8 <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
  80c1ec:	00801804 	movi	r2,96
  80c1f0:	e0bfff15 	stw	r2,-4(fp)
  80c1f4:	00002b06 	br	80c2a4 <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
  80c1f8:	e0bffe17 	ldw	r2,-8(fp)
  80c1fc:	1004c03a 	cmpne	r2,r2,zero
  80c200:	1000031e 	bne	r2,zero,80c210 <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
  80c204:	008017c4 	movi	r2,95
  80c208:	e0bfff15 	stw	r2,-4(fp)
  80c20c:	00002506 	br	80c2a4 <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c210:	0005303a 	rdctl	r2,status
  80c214:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c218:	e0fffb17 	ldw	r3,-20(fp)
  80c21c:	00bfff84 	movi	r2,-2
  80c220:	1884703a 	and	r2,r3,r2
  80c224:	1001703a 	wrctl	status,r2
  
  return context;
  80c228:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80c22c:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
  80c230:	e0bffd17 	ldw	r2,-12(fp)
  80c234:	10c00417 	ldw	r3,16(r2)
  80c238:	e0bffd17 	ldw	r2,-12(fp)
  80c23c:	10800317 	ldw	r2,12(r2)
  80c240:	18800736 	bltu	r3,r2,80c260 <OSMemPut+0x98>
  80c244:	e0bffc17 	ldw	r2,-16(fp)
  80c248:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c24c:	e0bffa17 	ldw	r2,-24(fp)
  80c250:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
  80c254:	00801784 	movi	r2,94
  80c258:	e0bfff15 	stw	r2,-4(fp)
  80c25c:	00001106 	br	80c2a4 <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
  80c260:	e0fffe17 	ldw	r3,-8(fp)
  80c264:	e0bffd17 	ldw	r2,-12(fp)
  80c268:	10800117 	ldw	r2,4(r2)
  80c26c:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
  80c270:	e0fffd17 	ldw	r3,-12(fp)
  80c274:	e0bffe17 	ldw	r2,-8(fp)
  80c278:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
  80c27c:	e0bffd17 	ldw	r2,-12(fp)
  80c280:	10800417 	ldw	r2,16(r2)
  80c284:	10c00044 	addi	r3,r2,1
  80c288:	e0bffd17 	ldw	r2,-12(fp)
  80c28c:	10c00415 	stw	r3,16(r2)
  80c290:	e0bffc17 	ldw	r2,-16(fp)
  80c294:	e0bff915 	stw	r2,-28(fp)
  80c298:	e0bff917 	ldw	r2,-28(fp)
  80c29c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
  80c2a0:	e03fff15 	stw	zero,-4(fp)
  80c2a4:	e0bfff17 	ldw	r2,-4(fp)
}
  80c2a8:	e037883a 	mov	sp,fp
  80c2ac:	df000017 	ldw	fp,0(sp)
  80c2b0:	dec00104 	addi	sp,sp,4
  80c2b4:	f800283a 	ret

0080c2b8 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
  80c2b8:	defff904 	addi	sp,sp,-28
  80c2bc:	df000615 	stw	fp,24(sp)
  80c2c0:	df000604 	addi	fp,sp,24
  80c2c4:	e13ffd15 	stw	r4,-12(fp)
  80c2c8:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80c2cc:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  80c2d0:	e0bffd17 	ldw	r2,-12(fp)
  80c2d4:	1004c03a 	cmpne	r2,r2,zero
  80c2d8:	1000031e 	bne	r2,zero,80c2e8 <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
  80c2dc:	00801804 	movi	r2,96
  80c2e0:	e0bfff15 	stw	r2,-4(fp)
  80c2e4:	00002e06 	br	80c3a0 <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
  80c2e8:	e0bffe17 	ldw	r2,-8(fp)
  80c2ec:	1004c03a 	cmpne	r2,r2,zero
  80c2f0:	1000031e 	bne	r2,zero,80c300 <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
  80c2f4:	00801844 	movi	r2,97
  80c2f8:	e0bfff15 	stw	r2,-4(fp)
  80c2fc:	00002806 	br	80c3a0 <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c300:	0005303a 	rdctl	r2,status
  80c304:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c308:	e0fffb17 	ldw	r3,-20(fp)
  80c30c:	00bfff84 	movi	r2,-2
  80c310:	1884703a 	and	r2,r3,r2
  80c314:	1001703a 	wrctl	status,r2
  
  return context;
  80c318:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80c31c:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
  80c320:	e0bffd17 	ldw	r2,-12(fp)
  80c324:	10c00017 	ldw	r3,0(r2)
  80c328:	e0bffe17 	ldw	r2,-8(fp)
  80c32c:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
  80c330:	e0bffd17 	ldw	r2,-12(fp)
  80c334:	10c00117 	ldw	r3,4(r2)
  80c338:	e0bffe17 	ldw	r2,-8(fp)
  80c33c:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
  80c340:	e0bffd17 	ldw	r2,-12(fp)
  80c344:	10c00217 	ldw	r3,8(r2)
  80c348:	e0bffe17 	ldw	r2,-8(fp)
  80c34c:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
  80c350:	e0bffd17 	ldw	r2,-12(fp)
  80c354:	10c00317 	ldw	r3,12(r2)
  80c358:	e0bffe17 	ldw	r2,-8(fp)
  80c35c:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
  80c360:	e0bffd17 	ldw	r2,-12(fp)
  80c364:	10c00417 	ldw	r3,16(r2)
  80c368:	e0bffe17 	ldw	r2,-8(fp)
  80c36c:	10c00415 	stw	r3,16(r2)
  80c370:	e0bffc17 	ldw	r2,-16(fp)
  80c374:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c378:	e0bffa17 	ldw	r2,-24(fp)
  80c37c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
  80c380:	e0bffe17 	ldw	r2,-8(fp)
  80c384:	10c00317 	ldw	r3,12(r2)
  80c388:	e0bffe17 	ldw	r2,-8(fp)
  80c38c:	10800417 	ldw	r2,16(r2)
  80c390:	1887c83a 	sub	r3,r3,r2
  80c394:	e0bffe17 	ldw	r2,-8(fp)
  80c398:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
  80c39c:	e03fff15 	stw	zero,-4(fp)
  80c3a0:	e0bfff17 	ldw	r2,-4(fp)
}
  80c3a4:	e037883a 	mov	sp,fp
  80c3a8:	df000017 	ldw	fp,0(sp)
  80c3ac:	dec00104 	addi	sp,sp,4
  80c3b0:	f800283a 	ret

0080c3b4 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
  80c3b4:	defffc04 	addi	sp,sp,-16
  80c3b8:	dfc00315 	stw	ra,12(sp)
  80c3bc:	df000215 	stw	fp,8(sp)
  80c3c0:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
  80c3c4:	010020b4 	movhi	r4,130
  80c3c8:	2130de04 	addi	r4,r4,-15496
  80c3cc:	01430c04 	movi	r5,3120
  80c3d0:	0809a0c0 	call	809a0c <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
  80c3d4:	008020b4 	movhi	r2,130
  80c3d8:	10b0de04 	addi	r2,r2,-15496
  80c3dc:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  80c3e0:	e03ffe0d 	sth	zero,-8(fp)
  80c3e4:	00001306 	br	80c434 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
  80c3e8:	e0bffe0b 	ldhu	r2,-8(fp)
  80c3ec:	10800d24 	muli	r2,r2,52
  80c3f0:	1007883a 	mov	r3,r2
  80c3f4:	008020b4 	movhi	r2,130
  80c3f8:	10b0eb04 	addi	r2,r2,-15444
  80c3fc:	1887883a 	add	r3,r3,r2
  80c400:	e0bfff17 	ldw	r2,-4(fp)
  80c404:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
  80c408:	e0ffff17 	ldw	r3,-4(fp)
  80c40c:	00800fc4 	movi	r2,63
  80c410:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
  80c414:	e0bfff17 	ldw	r2,-4(fp)
  80c418:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
  80c41c:	e0bfff17 	ldw	r2,-4(fp)
  80c420:	10800d04 	addi	r2,r2,52
  80c424:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  80c428:	e0bffe0b 	ldhu	r2,-8(fp)
  80c42c:	10800044 	addi	r2,r2,1
  80c430:	e0bffe0d 	sth	r2,-8(fp)
  80c434:	e0bffe0b 	ldhu	r2,-8(fp)
  80c438:	10800ef0 	cmpltui	r2,r2,59
  80c43c:	103fea1e 	bne	r2,zero,80c3e8 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
  80c440:	e0bfff17 	ldw	r2,-4(fp)
  80c444:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
  80c448:	e0ffff17 	ldw	r3,-4(fp)
  80c44c:	00800fc4 	movi	r2,63
  80c450:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
  80c454:	e0bfff17 	ldw	r2,-4(fp)
  80c458:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
  80c45c:	00c02074 	movhi	r3,129
  80c460:	18dfab04 	addi	r3,r3,32428
  80c464:	008020b4 	movhi	r2,130
  80c468:	10b0de04 	addi	r2,r2,-15496
  80c46c:	18800015 	stw	r2,0(r3)
#endif
}
  80c470:	e037883a 	mov	sp,fp
  80c474:	dfc00117 	ldw	ra,4(sp)
  80c478:	df000017 	ldw	fp,0(sp)
  80c47c:	dec00204 	addi	sp,sp,8
  80c480:	f800283a 	ret

0080c484 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
  80c484:	defff704 	addi	sp,sp,-36
  80c488:	df000815 	stw	fp,32(sp)
  80c48c:	df000804 	addi	fp,sp,32
  80c490:	e13ffd15 	stw	r4,-12(fp)
  80c494:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80c498:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80c49c:	e0bffe17 	ldw	r2,-8(fp)
  80c4a0:	1004c03a 	cmpne	r2,r2,zero
  80c4a4:	1000021e 	bne	r2,zero,80c4b0 <OSQAccept+0x2c>
        return ((void *)0);
  80c4a8:	e03fff15 	stw	zero,-4(fp)
  80c4ac:	00004506 	br	80c5c4 <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  80c4b0:	e0bffd17 	ldw	r2,-12(fp)
  80c4b4:	1004c03a 	cmpne	r2,r2,zero
  80c4b8:	1000051e 	bne	r2,zero,80c4d0 <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
  80c4bc:	e0fffe17 	ldw	r3,-8(fp)
  80c4c0:	00800104 	movi	r2,4
  80c4c4:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80c4c8:	e03fff15 	stw	zero,-4(fp)
  80c4cc:	00003d06 	br	80c5c4 <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  80c4d0:	e0bffd17 	ldw	r2,-12(fp)
  80c4d4:	10800003 	ldbu	r2,0(r2)
  80c4d8:	10803fcc 	andi	r2,r2,255
  80c4dc:	108000a0 	cmpeqi	r2,r2,2
  80c4e0:	1000051e 	bne	r2,zero,80c4f8 <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
  80c4e4:	e0fffe17 	ldw	r3,-8(fp)
  80c4e8:	00800044 	movi	r2,1
  80c4ec:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80c4f0:	e03fff15 	stw	zero,-4(fp)
  80c4f4:	00003306 	br	80c5c4 <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c4f8:	0005303a 	rdctl	r2,status
  80c4fc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c500:	e0fff917 	ldw	r3,-28(fp)
  80c504:	00bfff84 	movi	r2,-2
  80c508:	1884703a 	and	r2,r3,r2
  80c50c:	1001703a 	wrctl	status,r2
  
  return context;
  80c510:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80c514:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  80c518:	e0bffd17 	ldw	r2,-12(fp)
  80c51c:	10800117 	ldw	r2,4(r2)
  80c520:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  80c524:	e0bffb17 	ldw	r2,-20(fp)
  80c528:	1080058b 	ldhu	r2,22(r2)
  80c52c:	10bfffcc 	andi	r2,r2,65535
  80c530:	1005003a 	cmpeq	r2,r2,zero
  80c534:	1000191e 	bne	r2,zero,80c59c <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  80c538:	e0bffb17 	ldw	r2,-20(fp)
  80c53c:	10c00417 	ldw	r3,16(r2)
  80c540:	18800017 	ldw	r2,0(r3)
  80c544:	e0bffc15 	stw	r2,-16(fp)
  80c548:	18c00104 	addi	r3,r3,4
  80c54c:	e0bffb17 	ldw	r2,-20(fp)
  80c550:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  80c554:	e0bffb17 	ldw	r2,-20(fp)
  80c558:	1080058b 	ldhu	r2,22(r2)
  80c55c:	10bfffc4 	addi	r2,r2,-1
  80c560:	1007883a 	mov	r3,r2
  80c564:	e0bffb17 	ldw	r2,-20(fp)
  80c568:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  80c56c:	e0bffb17 	ldw	r2,-20(fp)
  80c570:	10c00417 	ldw	r3,16(r2)
  80c574:	e0bffb17 	ldw	r2,-20(fp)
  80c578:	10800217 	ldw	r2,8(r2)
  80c57c:	1880041e 	bne	r3,r2,80c590 <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
  80c580:	e0bffb17 	ldw	r2,-20(fp)
  80c584:	10c00117 	ldw	r3,4(r2)
  80c588:	e0bffb17 	ldw	r2,-20(fp)
  80c58c:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
  80c590:	e0bffe17 	ldw	r2,-8(fp)
  80c594:	10000005 	stb	zero,0(r2)
  80c598:	00000406 	br	80c5ac <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
  80c59c:	e0fffe17 	ldw	r3,-8(fp)
  80c5a0:	008007c4 	movi	r2,31
  80c5a4:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
  80c5a8:	e03ffc15 	stw	zero,-16(fp)
  80c5ac:	e0bffa17 	ldw	r2,-24(fp)
  80c5b0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c5b4:	e0bff817 	ldw	r2,-32(fp)
  80c5b8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
  80c5bc:	e0bffc17 	ldw	r2,-16(fp)
  80c5c0:	e0bfff15 	stw	r2,-4(fp)
  80c5c4:	e0bfff17 	ldw	r2,-4(fp)
}
  80c5c8:	e037883a 	mov	sp,fp
  80c5cc:	df000017 	ldw	fp,0(sp)
  80c5d0:	dec00104 	addi	sp,sp,4
  80c5d4:	f800283a 	ret

0080c5d8 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
  80c5d8:	defff304 	addi	sp,sp,-52
  80c5dc:	dfc00c15 	stw	ra,48(sp)
  80c5e0:	df000b15 	stw	fp,44(sp)
  80c5e4:	df000b04 	addi	fp,sp,44
  80c5e8:	e13ffd15 	stw	r4,-12(fp)
  80c5ec:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80c5f0:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  80c5f4:	00802074 	movhi	r2,129
  80c5f8:	109fb004 	addi	r2,r2,32448
  80c5fc:	10800003 	ldbu	r2,0(r2)
  80c600:	10803fcc 	andi	r2,r2,255
  80c604:	1005003a 	cmpeq	r2,r2,zero
  80c608:	1000021e 	bne	r2,zero,80c614 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
  80c60c:	e03fff15 	stw	zero,-4(fp)
  80c610:	00007006 	br	80c7d4 <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c614:	0005303a 	rdctl	r2,status
  80c618:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c61c:	e0fff917 	ldw	r3,-28(fp)
  80c620:	00bfff84 	movi	r2,-2
  80c624:	1884703a 	and	r2,r3,r2
  80c628:	1001703a 	wrctl	status,r2
  
  return context;
  80c62c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80c630:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
  80c634:	00802074 	movhi	r2,129
  80c638:	109faf04 	addi	r2,r2,32444
  80c63c:	10800017 	ldw	r2,0(r2)
  80c640:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
  80c644:	00802074 	movhi	r2,129
  80c648:	109faf04 	addi	r2,r2,32444
  80c64c:	10800017 	ldw	r2,0(r2)
  80c650:	1005003a 	cmpeq	r2,r2,zero
  80c654:	1000081e 	bne	r2,zero,80c678 <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  80c658:	00802074 	movhi	r2,129
  80c65c:	109faf04 	addi	r2,r2,32444
  80c660:	10800017 	ldw	r2,0(r2)
  80c664:	10800117 	ldw	r2,4(r2)
  80c668:	1007883a 	mov	r3,r2
  80c66c:	00802074 	movhi	r2,129
  80c670:	109faf04 	addi	r2,r2,32444
  80c674:	10c00015 	stw	r3,0(r2)
  80c678:	e0bffa17 	ldw	r2,-24(fp)
  80c67c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c680:	e0bff817 	ldw	r2,-32(fp)
  80c684:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
  80c688:	e0bffc17 	ldw	r2,-16(fp)
  80c68c:	1005003a 	cmpeq	r2,r2,zero
  80c690:	10004e1e 	bne	r2,zero,80c7cc <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c694:	0005303a 	rdctl	r2,status
  80c698:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c69c:	e0fff717 	ldw	r3,-36(fp)
  80c6a0:	00bfff84 	movi	r2,-2
  80c6a4:	1884703a 	and	r2,r3,r2
  80c6a8:	1001703a 	wrctl	status,r2
  
  return context;
  80c6ac:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
  80c6b0:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
  80c6b4:	00802074 	movhi	r2,129
  80c6b8:	109fad04 	addi	r2,r2,32436
  80c6bc:	10800017 	ldw	r2,0(r2)
  80c6c0:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
  80c6c4:	e0bffb17 	ldw	r2,-20(fp)
  80c6c8:	1005003a 	cmpeq	r2,r2,zero
  80c6cc:	1000311e 	bne	r2,zero,80c794 <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
  80c6d0:	00802074 	movhi	r2,129
  80c6d4:	109fad04 	addi	r2,r2,32436
  80c6d8:	10800017 	ldw	r2,0(r2)
  80c6dc:	10c00017 	ldw	r3,0(r2)
  80c6e0:	00802074 	movhi	r2,129
  80c6e4:	109fad04 	addi	r2,r2,32436
  80c6e8:	10c00015 	stw	r3,0(r2)
  80c6ec:	e0bffa17 	ldw	r2,-24(fp)
  80c6f0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c6f4:	e0bff617 	ldw	r2,-40(fp)
  80c6f8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
  80c6fc:	e0fffb17 	ldw	r3,-20(fp)
  80c700:	e0bffd17 	ldw	r2,-12(fp)
  80c704:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
  80c708:	e0bffe0b 	ldhu	r2,-8(fp)
  80c70c:	1085883a 	add	r2,r2,r2
  80c710:	1085883a 	add	r2,r2,r2
  80c714:	1007883a 	mov	r3,r2
  80c718:	e0bffd17 	ldw	r2,-12(fp)
  80c71c:	1887883a 	add	r3,r3,r2
  80c720:	e0bffb17 	ldw	r2,-20(fp)
  80c724:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
  80c728:	e0fffb17 	ldw	r3,-20(fp)
  80c72c:	e0bffd17 	ldw	r2,-12(fp)
  80c730:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
  80c734:	e0fffb17 	ldw	r3,-20(fp)
  80c738:	e0bffd17 	ldw	r2,-12(fp)
  80c73c:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
  80c740:	e0fffb17 	ldw	r3,-20(fp)
  80c744:	e0bffe0b 	ldhu	r2,-8(fp)
  80c748:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
  80c74c:	e0bffb17 	ldw	r2,-20(fp)
  80c750:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
  80c754:	e0fffc17 	ldw	r3,-16(fp)
  80c758:	00800084 	movi	r2,2
  80c75c:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
  80c760:	e0bffc17 	ldw	r2,-16(fp)
  80c764:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
  80c768:	e0fffc17 	ldw	r3,-16(fp)
  80c76c:	e0bffb17 	ldw	r2,-20(fp)
  80c770:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
  80c774:	e0fffc17 	ldw	r3,-16(fp)
  80c778:	00800fc4 	movi	r2,63
  80c77c:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
  80c780:	e0bffc17 	ldw	r2,-16(fp)
  80c784:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
  80c788:	e13ffc17 	ldw	r4,-16(fp)
  80c78c:	08096400 	call	809640 <OS_EventWaitListInit>
  80c790:	00000e06 	br	80c7cc <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
  80c794:	00802074 	movhi	r2,129
  80c798:	109faf04 	addi	r2,r2,32444
  80c79c:	10c00017 	ldw	r3,0(r2)
  80c7a0:	e0bffc17 	ldw	r2,-16(fp)
  80c7a4:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
  80c7a8:	00c02074 	movhi	r3,129
  80c7ac:	18dfaf04 	addi	r3,r3,32444
  80c7b0:	e0bffc17 	ldw	r2,-16(fp)
  80c7b4:	18800015 	stw	r2,0(r3)
  80c7b8:	e0bffa17 	ldw	r2,-24(fp)
  80c7bc:	e0bff515 	stw	r2,-44(fp)
  80c7c0:	e0bff517 	ldw	r2,-44(fp)
  80c7c4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
  80c7c8:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
  80c7cc:	e0bffc17 	ldw	r2,-16(fp)
  80c7d0:	e0bfff15 	stw	r2,-4(fp)
  80c7d4:	e0bfff17 	ldw	r2,-4(fp)
}
  80c7d8:	e037883a 	mov	sp,fp
  80c7dc:	dfc00117 	ldw	ra,4(sp)
  80c7e0:	df000017 	ldw	fp,0(sp)
  80c7e4:	dec00204 	addi	sp,sp,8
  80c7e8:	f800283a 	ret

0080c7ec <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  80c7ec:	defff004 	addi	sp,sp,-64
  80c7f0:	dfc00f15 	stw	ra,60(sp)
  80c7f4:	df000e15 	stw	fp,56(sp)
  80c7f8:	df000e04 	addi	fp,sp,56
  80c7fc:	e13ffb15 	stw	r4,-20(fp)
  80c800:	e1bffd15 	stw	r6,-12(fp)
  80c804:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80c808:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80c80c:	e0bffd17 	ldw	r2,-12(fp)
  80c810:	1004c03a 	cmpne	r2,r2,zero
  80c814:	1000031e 	bne	r2,zero,80c824 <OSQDel+0x38>
        return (pevent);
  80c818:	e0bffb17 	ldw	r2,-20(fp)
  80c81c:	e0bfff15 	stw	r2,-4(fp)
  80c820:	0000ac06 	br	80cad4 <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  80c824:	e0bffb17 	ldw	r2,-20(fp)
  80c828:	1004c03a 	cmpne	r2,r2,zero
  80c82c:	1000061e 	bne	r2,zero,80c848 <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
  80c830:	e0fffd17 	ldw	r3,-12(fp)
  80c834:	00800104 	movi	r2,4
  80c838:	18800005 	stb	r2,0(r3)
        return (pevent);
  80c83c:	e0fffb17 	ldw	r3,-20(fp)
  80c840:	e0ffff15 	stw	r3,-4(fp)
  80c844:	0000a306 	br	80cad4 <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  80c848:	e0bffb17 	ldw	r2,-20(fp)
  80c84c:	10800003 	ldbu	r2,0(r2)
  80c850:	10803fcc 	andi	r2,r2,255
  80c854:	108000a0 	cmpeqi	r2,r2,2
  80c858:	1000061e 	bne	r2,zero,80c874 <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
  80c85c:	e0fffd17 	ldw	r3,-12(fp)
  80c860:	00800044 	movi	r2,1
  80c864:	18800005 	stb	r2,0(r3)
        return (pevent);
  80c868:	e0bffb17 	ldw	r2,-20(fp)
  80c86c:	e0bfff15 	stw	r2,-4(fp)
  80c870:	00009806 	br	80cad4 <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  80c874:	00802074 	movhi	r2,129
  80c878:	109fb004 	addi	r2,r2,32448
  80c87c:	10800003 	ldbu	r2,0(r2)
  80c880:	10803fcc 	andi	r2,r2,255
  80c884:	1005003a 	cmpeq	r2,r2,zero
  80c888:	1000061e 	bne	r2,zero,80c8a4 <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  80c88c:	e0fffd17 	ldw	r3,-12(fp)
  80c890:	008003c4 	movi	r2,15
  80c894:	18800005 	stb	r2,0(r3)
        return (pevent);
  80c898:	e0fffb17 	ldw	r3,-20(fp)
  80c89c:	e0ffff15 	stw	r3,-4(fp)
  80c8a0:	00008c06 	br	80cad4 <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c8a4:	0005303a 	rdctl	r2,status
  80c8a8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c8ac:	e0fff617 	ldw	r3,-40(fp)
  80c8b0:	00bfff84 	movi	r2,-2
  80c8b4:	1884703a 	and	r2,r3,r2
  80c8b8:	1001703a 	wrctl	status,r2
  
  return context;
  80c8bc:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  80c8c0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
  80c8c4:	e0bffb17 	ldw	r2,-20(fp)
  80c8c8:	10800283 	ldbu	r2,10(r2)
  80c8cc:	10803fcc 	andi	r2,r2,255
  80c8d0:	1005003a 	cmpeq	r2,r2,zero
  80c8d4:	1000031e 	bne	r2,zero,80c8e4 <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  80c8d8:	00800044 	movi	r2,1
  80c8dc:	e0bffa05 	stb	r2,-24(fp)
  80c8e0:	00000106 	br	80c8e8 <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  80c8e4:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  80c8e8:	e0bffc03 	ldbu	r2,-16(fp)
  80c8ec:	e0bffe15 	stw	r2,-8(fp)
  80c8f0:	e0fffe17 	ldw	r3,-8(fp)
  80c8f4:	1805003a 	cmpeq	r2,r3,zero
  80c8f8:	1000041e 	bne	r2,zero,80c90c <OSQDel+0x120>
  80c8fc:	e0fffe17 	ldw	r3,-8(fp)
  80c900:	18800060 	cmpeqi	r2,r3,1
  80c904:	1000391e 	bne	r2,zero,80c9ec <OSQDel+0x200>
  80c908:	00006706 	br	80caa8 <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
  80c90c:	e0bffa03 	ldbu	r2,-24(fp)
  80c910:	1004c03a 	cmpne	r2,r2,zero
  80c914:	1000261e 	bne	r2,zero,80c9b0 <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  80c918:	e0fffb17 	ldw	r3,-20(fp)
  80c91c:	00800fc4 	movi	r2,63
  80c920:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  80c924:	e0bffb17 	ldw	r2,-20(fp)
  80c928:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
  80c92c:	e0bffb17 	ldw	r2,-20(fp)
  80c930:	10800117 	ldw	r2,4(r2)
  80c934:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
  80c938:	00802074 	movhi	r2,129
  80c93c:	109fad04 	addi	r2,r2,32436
  80c940:	10c00017 	ldw	r3,0(r2)
  80c944:	e0bff817 	ldw	r2,-32(fp)
  80c948:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
  80c94c:	00c02074 	movhi	r3,129
  80c950:	18dfad04 	addi	r3,r3,32436
  80c954:	e0bff817 	ldw	r2,-32(fp)
  80c958:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  80c95c:	e0bffb17 	ldw	r2,-20(fp)
  80c960:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  80c964:	00802074 	movhi	r2,129
  80c968:	109faf04 	addi	r2,r2,32444
  80c96c:	10c00017 	ldw	r3,0(r2)
  80c970:	e0bffb17 	ldw	r2,-20(fp)
  80c974:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  80c978:	e0bffb17 	ldw	r2,-20(fp)
  80c97c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  80c980:	00c02074 	movhi	r3,129
  80c984:	18dfaf04 	addi	r3,r3,32444
  80c988:	e0bffb17 	ldw	r2,-20(fp)
  80c98c:	18800015 	stw	r2,0(r3)
  80c990:	e0bff717 	ldw	r2,-36(fp)
  80c994:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c998:	e0bff517 	ldw	r2,-44(fp)
  80c99c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  80c9a0:	e0bffd17 	ldw	r2,-12(fp)
  80c9a4:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
  80c9a8:	e03ff915 	stw	zero,-28(fp)
  80c9ac:	00004706 	br	80cacc <OSQDel+0x2e0>
  80c9b0:	e0bff717 	ldw	r2,-36(fp)
  80c9b4:	e0bff415 	stw	r2,-48(fp)
  80c9b8:	e0bff417 	ldw	r2,-48(fp)
  80c9bc:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  80c9c0:	e0fffd17 	ldw	r3,-12(fp)
  80c9c4:	00801244 	movi	r2,73
  80c9c8:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
  80c9cc:	e0bffb17 	ldw	r2,-20(fp)
  80c9d0:	e0bff915 	stw	r2,-28(fp)
             }
             break;
  80c9d4:	00003d06 	br	80cacc <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
  80c9d8:	e13ffb17 	ldw	r4,-20(fp)
  80c9dc:	000b883a 	mov	r5,zero
  80c9e0:	01800104 	movi	r6,4
  80c9e4:	000f883a 	mov	r7,zero
  80c9e8:	080908c0 	call	80908c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
  80c9ec:	e0bffb17 	ldw	r2,-20(fp)
  80c9f0:	10800283 	ldbu	r2,10(r2)
  80c9f4:	10803fcc 	andi	r2,r2,255
  80c9f8:	1004c03a 	cmpne	r2,r2,zero
  80c9fc:	103ff61e 	bne	r2,zero,80c9d8 <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  80ca00:	e0fffb17 	ldw	r3,-20(fp)
  80ca04:	00800fc4 	movi	r2,63
  80ca08:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  80ca0c:	e0bffb17 	ldw	r2,-20(fp)
  80ca10:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
  80ca14:	e0bffb17 	ldw	r2,-20(fp)
  80ca18:	10800117 	ldw	r2,4(r2)
  80ca1c:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
  80ca20:	00802074 	movhi	r2,129
  80ca24:	109fad04 	addi	r2,r2,32436
  80ca28:	10c00017 	ldw	r3,0(r2)
  80ca2c:	e0bff817 	ldw	r2,-32(fp)
  80ca30:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
  80ca34:	00c02074 	movhi	r3,129
  80ca38:	18dfad04 	addi	r3,r3,32436
  80ca3c:	e0bff817 	ldw	r2,-32(fp)
  80ca40:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  80ca44:	e0bffb17 	ldw	r2,-20(fp)
  80ca48:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  80ca4c:	00802074 	movhi	r2,129
  80ca50:	109faf04 	addi	r2,r2,32444
  80ca54:	10c00017 	ldw	r3,0(r2)
  80ca58:	e0bffb17 	ldw	r2,-20(fp)
  80ca5c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  80ca60:	e0bffb17 	ldw	r2,-20(fp)
  80ca64:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  80ca68:	00c02074 	movhi	r3,129
  80ca6c:	18dfaf04 	addi	r3,r3,32444
  80ca70:	e0bffb17 	ldw	r2,-20(fp)
  80ca74:	18800015 	stw	r2,0(r3)
  80ca78:	e0bff717 	ldw	r2,-36(fp)
  80ca7c:	e0bff315 	stw	r2,-52(fp)
  80ca80:	e0bff317 	ldw	r2,-52(fp)
  80ca84:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  80ca88:	e0bffa03 	ldbu	r2,-24(fp)
  80ca8c:	10800058 	cmpnei	r2,r2,1
  80ca90:	1000011e 	bne	r2,zero,80ca98 <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  80ca94:	0809acc0 	call	809acc <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  80ca98:	e0bffd17 	ldw	r2,-12(fp)
  80ca9c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
  80caa0:	e03ff915 	stw	zero,-28(fp)
             break;
  80caa4:	00000906 	br	80cacc <OSQDel+0x2e0>
  80caa8:	e0bff717 	ldw	r2,-36(fp)
  80caac:	e0bff215 	stw	r2,-56(fp)
  80cab0:	e0bff217 	ldw	r2,-56(fp)
  80cab4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  80cab8:	e0fffd17 	ldw	r3,-12(fp)
  80cabc:	008001c4 	movi	r2,7
  80cac0:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
  80cac4:	e0bffb17 	ldw	r2,-20(fp)
  80cac8:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
  80cacc:	e0bff917 	ldw	r2,-28(fp)
  80cad0:	e0bfff15 	stw	r2,-4(fp)
  80cad4:	e0bfff17 	ldw	r2,-4(fp)
}
  80cad8:	e037883a 	mov	sp,fp
  80cadc:	dfc00117 	ldw	ra,4(sp)
  80cae0:	df000017 	ldw	fp,0(sp)
  80cae4:	dec00204 	addi	sp,sp,8
  80cae8:	f800283a 	ret

0080caec <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
  80caec:	defff904 	addi	sp,sp,-28
  80caf0:	df000615 	stw	fp,24(sp)
  80caf4:	df000604 	addi	fp,sp,24
  80caf8:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80cafc:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  80cb00:	e0bffe17 	ldw	r2,-8(fp)
  80cb04:	1004c03a 	cmpne	r2,r2,zero
  80cb08:	1000031e 	bne	r2,zero,80cb18 <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
  80cb0c:	00800104 	movi	r2,4
  80cb10:	e0bfff15 	stw	r2,-4(fp)
  80cb14:	00002206 	br	80cba0 <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  80cb18:	e0bffe17 	ldw	r2,-8(fp)
  80cb1c:	10800003 	ldbu	r2,0(r2)
  80cb20:	10803fcc 	andi	r2,r2,255
  80cb24:	108000a0 	cmpeqi	r2,r2,2
  80cb28:	1000031e 	bne	r2,zero,80cb38 <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
  80cb2c:	00800044 	movi	r2,1
  80cb30:	e0bfff15 	stw	r2,-4(fp)
  80cb34:	00001a06 	br	80cba0 <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cb38:	0005303a 	rdctl	r2,status
  80cb3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cb40:	e0fffb17 	ldw	r3,-20(fp)
  80cb44:	00bfff84 	movi	r2,-2
  80cb48:	1884703a 	and	r2,r3,r2
  80cb4c:	1001703a 	wrctl	status,r2
  
  return context;
  80cb50:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80cb54:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
  80cb58:	e0bffe17 	ldw	r2,-8(fp)
  80cb5c:	10800117 	ldw	r2,4(r2)
  80cb60:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
  80cb64:	e0bffd17 	ldw	r2,-12(fp)
  80cb68:	10c00117 	ldw	r3,4(r2)
  80cb6c:	e0bffd17 	ldw	r2,-12(fp)
  80cb70:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
  80cb74:	e0bffd17 	ldw	r2,-12(fp)
  80cb78:	10c00117 	ldw	r3,4(r2)
  80cb7c:	e0bffd17 	ldw	r2,-12(fp)
  80cb80:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
  80cb84:	e0bffd17 	ldw	r2,-12(fp)
  80cb88:	1000058d 	sth	zero,22(r2)
  80cb8c:	e0bffc17 	ldw	r2,-16(fp)
  80cb90:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cb94:	e0bffa17 	ldw	r2,-24(fp)
  80cb98:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80cb9c:	e03fff15 	stw	zero,-4(fp)
  80cba0:	e0bfff17 	ldw	r2,-4(fp)
}
  80cba4:	e037883a 	mov	sp,fp
  80cba8:	df000017 	ldw	fp,0(sp)
  80cbac:	dec00104 	addi	sp,sp,4
  80cbb0:	f800283a 	ret

0080cbb4 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  80cbb4:	defff104 	addi	sp,sp,-60
  80cbb8:	dfc00e15 	stw	ra,56(sp)
  80cbbc:	df000d15 	stw	fp,52(sp)
  80cbc0:	df000d04 	addi	fp,sp,52
  80cbc4:	e13ffb15 	stw	r4,-20(fp)
  80cbc8:	e1bffd15 	stw	r6,-12(fp)
  80cbcc:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80cbd0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80cbd4:	e0bffd17 	ldw	r2,-12(fp)
  80cbd8:	1004c03a 	cmpne	r2,r2,zero
  80cbdc:	1000021e 	bne	r2,zero,80cbe8 <OSQPend+0x34>
        return ((void *)0);
  80cbe0:	e03fff15 	stw	zero,-4(fp)
  80cbe4:	0000b506 	br	80cebc <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  80cbe8:	e0bffb17 	ldw	r2,-20(fp)
  80cbec:	1004c03a 	cmpne	r2,r2,zero
  80cbf0:	1000051e 	bne	r2,zero,80cc08 <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  80cbf4:	e0fffd17 	ldw	r3,-12(fp)
  80cbf8:	00800104 	movi	r2,4
  80cbfc:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80cc00:	e03fff15 	stw	zero,-4(fp)
  80cc04:	0000ad06 	br	80cebc <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  80cc08:	e0bffb17 	ldw	r2,-20(fp)
  80cc0c:	10800003 	ldbu	r2,0(r2)
  80cc10:	10803fcc 	andi	r2,r2,255
  80cc14:	108000a0 	cmpeqi	r2,r2,2
  80cc18:	1000051e 	bne	r2,zero,80cc30 <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  80cc1c:	e0fffd17 	ldw	r3,-12(fp)
  80cc20:	00800044 	movi	r2,1
  80cc24:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80cc28:	e03fff15 	stw	zero,-4(fp)
  80cc2c:	0000a306 	br	80cebc <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  80cc30:	00802074 	movhi	r2,129
  80cc34:	109fb004 	addi	r2,r2,32448
  80cc38:	10800003 	ldbu	r2,0(r2)
  80cc3c:	10803fcc 	andi	r2,r2,255
  80cc40:	1005003a 	cmpeq	r2,r2,zero
  80cc44:	1000051e 	bne	r2,zero,80cc5c <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
  80cc48:	e0fffd17 	ldw	r3,-12(fp)
  80cc4c:	00800084 	movi	r2,2
  80cc50:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80cc54:	e03fff15 	stw	zero,-4(fp)
  80cc58:	00009806 	br	80cebc <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
  80cc5c:	00802074 	movhi	r2,129
  80cc60:	109fa204 	addi	r2,r2,32392
  80cc64:	10800003 	ldbu	r2,0(r2)
  80cc68:	10803fcc 	andi	r2,r2,255
  80cc6c:	1005003a 	cmpeq	r2,r2,zero
  80cc70:	1000051e 	bne	r2,zero,80cc88 <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
  80cc74:	e0fffd17 	ldw	r3,-12(fp)
  80cc78:	00800344 	movi	r2,13
  80cc7c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80cc80:	e03fff15 	stw	zero,-4(fp)
  80cc84:	00008d06 	br	80cebc <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cc88:	0005303a 	rdctl	r2,status
  80cc8c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cc90:	e0fff717 	ldw	r3,-36(fp)
  80cc94:	00bfff84 	movi	r2,-2
  80cc98:	1884703a 	and	r2,r3,r2
  80cc9c:	1001703a 	wrctl	status,r2
  
  return context;
  80cca0:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  80cca4:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  80cca8:	e0bffb17 	ldw	r2,-20(fp)
  80ccac:	10800117 	ldw	r2,4(r2)
  80ccb0:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  80ccb4:	e0bff917 	ldw	r2,-28(fp)
  80ccb8:	1080058b 	ldhu	r2,22(r2)
  80ccbc:	10bfffcc 	andi	r2,r2,65535
  80ccc0:	1005003a 	cmpeq	r2,r2,zero
  80ccc4:	10001f1e 	bne	r2,zero,80cd44 <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  80ccc8:	e0bff917 	ldw	r2,-28(fp)
  80cccc:	10c00417 	ldw	r3,16(r2)
  80ccd0:	18800017 	ldw	r2,0(r3)
  80ccd4:	e0bffa15 	stw	r2,-24(fp)
  80ccd8:	18c00104 	addi	r3,r3,4
  80ccdc:	e0bff917 	ldw	r2,-28(fp)
  80cce0:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  80cce4:	e0bff917 	ldw	r2,-28(fp)
  80cce8:	1080058b 	ldhu	r2,22(r2)
  80ccec:	10bfffc4 	addi	r2,r2,-1
  80ccf0:	1007883a 	mov	r3,r2
  80ccf4:	e0bff917 	ldw	r2,-28(fp)
  80ccf8:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  80ccfc:	e0bff917 	ldw	r2,-28(fp)
  80cd00:	10c00417 	ldw	r3,16(r2)
  80cd04:	e0bff917 	ldw	r2,-28(fp)
  80cd08:	10800217 	ldw	r2,8(r2)
  80cd0c:	1880041e 	bne	r3,r2,80cd20 <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
  80cd10:	e0bff917 	ldw	r2,-28(fp)
  80cd14:	10c00117 	ldw	r3,4(r2)
  80cd18:	e0bff917 	ldw	r2,-28(fp)
  80cd1c:	10c00415 	stw	r3,16(r2)
  80cd20:	e0bff817 	ldw	r2,-32(fp)
  80cd24:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cd28:	e0bff617 	ldw	r2,-40(fp)
  80cd2c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  80cd30:	e0bffd17 	ldw	r2,-12(fp)
  80cd34:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
  80cd38:	e0bffa17 	ldw	r2,-24(fp)
  80cd3c:	e0bfff15 	stw	r2,-4(fp)
  80cd40:	00005e06 	br	80cebc <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
  80cd44:	00802074 	movhi	r2,129
  80cd48:	109fb104 	addi	r2,r2,32452
  80cd4c:	10c00017 	ldw	r3,0(r2)
  80cd50:	00802074 	movhi	r2,129
  80cd54:	109fb104 	addi	r2,r2,32452
  80cd58:	10800017 	ldw	r2,0(r2)
  80cd5c:	10800c03 	ldbu	r2,48(r2)
  80cd60:	10800114 	ori	r2,r2,4
  80cd64:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  80cd68:	00802074 	movhi	r2,129
  80cd6c:	109fb104 	addi	r2,r2,32452
  80cd70:	10800017 	ldw	r2,0(r2)
  80cd74:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
  80cd78:	00802074 	movhi	r2,129
  80cd7c:	109fb104 	addi	r2,r2,32452
  80cd80:	10c00017 	ldw	r3,0(r2)
  80cd84:	e0bffc0b 	ldhu	r2,-16(fp)
  80cd88:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
  80cd8c:	e13ffb17 	ldw	r4,-20(fp)
  80cd90:	08092200 	call	809220 <OS_EventTaskWait>
  80cd94:	e0bff817 	ldw	r2,-32(fp)
  80cd98:	e0bff515 	stw	r2,-44(fp)
  80cd9c:	e0bff517 	ldw	r2,-44(fp)
  80cda0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
  80cda4:	0809acc0 	call	809acc <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cda8:	0005303a 	rdctl	r2,status
  80cdac:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cdb0:	e0fff417 	ldw	r3,-48(fp)
  80cdb4:	00bfff84 	movi	r2,-2
  80cdb8:	1884703a 	and	r2,r3,r2
  80cdbc:	1001703a 	wrctl	status,r2
  
  return context;
  80cdc0:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
  80cdc4:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  80cdc8:	00802074 	movhi	r2,129
  80cdcc:	109fb104 	addi	r2,r2,32452
  80cdd0:	10800017 	ldw	r2,0(r2)
  80cdd4:	10800c43 	ldbu	r2,49(r2)
  80cdd8:	10803fcc 	andi	r2,r2,255
  80cddc:	e0bffe15 	stw	r2,-8(fp)
  80cde0:	e0fffe17 	ldw	r3,-8(fp)
  80cde4:	1805003a 	cmpeq	r2,r3,zero
  80cde8:	1000041e 	bne	r2,zero,80cdfc <OSQPend+0x248>
  80cdec:	e0fffe17 	ldw	r3,-8(fp)
  80cdf0:	188000a0 	cmpeqi	r2,r3,2
  80cdf4:	1000091e 	bne	r2,zero,80ce1c <OSQPend+0x268>
  80cdf8:	00000d06 	br	80ce30 <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
  80cdfc:	00802074 	movhi	r2,129
  80ce00:	109fb104 	addi	r2,r2,32452
  80ce04:	10800017 	ldw	r2,0(r2)
  80ce08:	10800917 	ldw	r2,36(r2)
  80ce0c:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
  80ce10:	e0bffd17 	ldw	r2,-12(fp)
  80ce14:	10000005 	stb	zero,0(r2)
             break;
  80ce18:	00000e06 	br	80ce54 <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
  80ce1c:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  80ce20:	e0fffd17 	ldw	r3,-12(fp)
  80ce24:	00800384 	movi	r2,14
  80ce28:	18800005 	stb	r2,0(r3)
             break;
  80ce2c:	00000906 	br	80ce54 <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
  80ce30:	00802074 	movhi	r2,129
  80ce34:	109fb104 	addi	r2,r2,32452
  80ce38:	11000017 	ldw	r4,0(r2)
  80ce3c:	e17ffb17 	ldw	r5,-20(fp)
  80ce40:	08094840 	call	809484 <OS_EventTaskRemove>
             pmsg = (void *)0;
  80ce44:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  80ce48:	e0fffd17 	ldw	r3,-12(fp)
  80ce4c:	00800284 	movi	r2,10
  80ce50:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  80ce54:	00802074 	movhi	r2,129
  80ce58:	109fb104 	addi	r2,r2,32452
  80ce5c:	10800017 	ldw	r2,0(r2)
  80ce60:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  80ce64:	00802074 	movhi	r2,129
  80ce68:	109fb104 	addi	r2,r2,32452
  80ce6c:	10800017 	ldw	r2,0(r2)
  80ce70:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  80ce74:	00802074 	movhi	r2,129
  80ce78:	109fb104 	addi	r2,r2,32452
  80ce7c:	10800017 	ldw	r2,0(r2)
  80ce80:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  80ce84:	00802074 	movhi	r2,129
  80ce88:	109fb104 	addi	r2,r2,32452
  80ce8c:	10800017 	ldw	r2,0(r2)
  80ce90:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
  80ce94:	00802074 	movhi	r2,129
  80ce98:	109fb104 	addi	r2,r2,32452
  80ce9c:	10800017 	ldw	r2,0(r2)
  80cea0:	10000915 	stw	zero,36(r2)
  80cea4:	e0bff817 	ldw	r2,-32(fp)
  80cea8:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ceac:	e0bff317 	ldw	r2,-52(fp)
  80ceb0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
  80ceb4:	e0bffa17 	ldw	r2,-24(fp)
  80ceb8:	e0bfff15 	stw	r2,-4(fp)
  80cebc:	e0bfff17 	ldw	r2,-4(fp)
}
  80cec0:	e037883a 	mov	sp,fp
  80cec4:	dfc00117 	ldw	ra,4(sp)
  80cec8:	df000017 	ldw	fp,0(sp)
  80cecc:	dec00204 	addi	sp,sp,8
  80ced0:	f800283a 	ret

0080ced4 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  80ced4:	defff504 	addi	sp,sp,-44
  80ced8:	dfc00a15 	stw	ra,40(sp)
  80cedc:	df000915 	stw	fp,36(sp)
  80cee0:	df000904 	addi	fp,sp,36
  80cee4:	e13ffc15 	stw	r4,-16(fp)
  80cee8:	e1bffe15 	stw	r6,-8(fp)
  80ceec:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80cef0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80cef4:	e0bffe17 	ldw	r2,-8(fp)
  80cef8:	1004c03a 	cmpne	r2,r2,zero
  80cefc:	1000021e 	bne	r2,zero,80cf08 <OSQPendAbort+0x34>
        return (0);
  80cf00:	e03fff15 	stw	zero,-4(fp)
  80cf04:	00004c06 	br	80d038 <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  80cf08:	e0bffc17 	ldw	r2,-16(fp)
  80cf0c:	1004c03a 	cmpne	r2,r2,zero
  80cf10:	1000051e 	bne	r2,zero,80cf28 <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  80cf14:	e0fffe17 	ldw	r3,-8(fp)
  80cf18:	00800104 	movi	r2,4
  80cf1c:	18800005 	stb	r2,0(r3)
        return (0);
  80cf20:	e03fff15 	stw	zero,-4(fp)
  80cf24:	00004406 	br	80d038 <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  80cf28:	e0bffc17 	ldw	r2,-16(fp)
  80cf2c:	10800003 	ldbu	r2,0(r2)
  80cf30:	10803fcc 	andi	r2,r2,255
  80cf34:	108000a0 	cmpeqi	r2,r2,2
  80cf38:	1000051e 	bne	r2,zero,80cf50 <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  80cf3c:	e0fffe17 	ldw	r3,-8(fp)
  80cf40:	00800044 	movi	r2,1
  80cf44:	18800005 	stb	r2,0(r3)
        return (0);
  80cf48:	e03fff15 	stw	zero,-4(fp)
  80cf4c:	00003a06 	br	80d038 <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cf50:	0005303a 	rdctl	r2,status
  80cf54:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cf58:	e0fff917 	ldw	r3,-28(fp)
  80cf5c:	00bfff84 	movi	r2,-2
  80cf60:	1884703a 	and	r2,r3,r2
  80cf64:	1001703a 	wrctl	status,r2
  
  return context;
  80cf68:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80cf6c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
  80cf70:	e0bffc17 	ldw	r2,-16(fp)
  80cf74:	10800283 	ldbu	r2,10(r2)
  80cf78:	10803fcc 	andi	r2,r2,255
  80cf7c:	1005003a 	cmpeq	r2,r2,zero
  80cf80:	1000261e 	bne	r2,zero,80d01c <OSQPendAbort+0x148>
        nbr_tasks = 0;
  80cf84:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
  80cf88:	e0bffd03 	ldbu	r2,-12(fp)
  80cf8c:	10800060 	cmpeqi	r2,r2,1
  80cf90:	1000091e 	bne	r2,zero,80cfb8 <OSQPendAbort+0xe4>
  80cf94:	00000e06 	br	80cfd0 <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  80cf98:	e13ffc17 	ldw	r4,-16(fp)
  80cf9c:	000b883a 	mov	r5,zero
  80cfa0:	01800104 	movi	r6,4
  80cfa4:	01c00084 	movi	r7,2
  80cfa8:	080908c0 	call	80908c <OS_EventTaskRdy>
                     nbr_tasks++;
  80cfac:	e0bffb03 	ldbu	r2,-20(fp)
  80cfb0:	10800044 	addi	r2,r2,1
  80cfb4:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  80cfb8:	e0bffc17 	ldw	r2,-16(fp)
  80cfbc:	10800283 	ldbu	r2,10(r2)
  80cfc0:	10803fcc 	andi	r2,r2,255
  80cfc4:	1004c03a 	cmpne	r2,r2,zero
  80cfc8:	103ff31e 	bne	r2,zero,80cf98 <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  80cfcc:	00000806 	br	80cff0 <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  80cfd0:	e13ffc17 	ldw	r4,-16(fp)
  80cfd4:	000b883a 	mov	r5,zero
  80cfd8:	01800104 	movi	r6,4
  80cfdc:	01c00084 	movi	r7,2
  80cfe0:	080908c0 	call	80908c <OS_EventTaskRdy>
                 nbr_tasks++;
  80cfe4:	e0bffb03 	ldbu	r2,-20(fp)
  80cfe8:	10800044 	addi	r2,r2,1
  80cfec:	e0bffb05 	stb	r2,-20(fp)
  80cff0:	e0bffa17 	ldw	r2,-24(fp)
  80cff4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cff8:	e0bff817 	ldw	r2,-32(fp)
  80cffc:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
  80d000:	0809acc0 	call	809acc <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  80d004:	e0fffe17 	ldw	r3,-8(fp)
  80d008:	00800384 	movi	r2,14
  80d00c:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
  80d010:	e0bffb03 	ldbu	r2,-20(fp)
  80d014:	e0bfff15 	stw	r2,-4(fp)
  80d018:	00000706 	br	80d038 <OSQPendAbort+0x164>
  80d01c:	e0bffa17 	ldw	r2,-24(fp)
  80d020:	e0bff715 	stw	r2,-36(fp)
  80d024:	e0bff717 	ldw	r2,-36(fp)
  80d028:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80d02c:	e0bffe17 	ldw	r2,-8(fp)
  80d030:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
  80d034:	e03fff15 	stw	zero,-4(fp)
  80d038:	e0bfff17 	ldw	r2,-4(fp)
}
  80d03c:	e037883a 	mov	sp,fp
  80d040:	dfc00117 	ldw	ra,4(sp)
  80d044:	df000017 	ldw	fp,0(sp)
  80d048:	dec00204 	addi	sp,sp,8
  80d04c:	f800283a 	ret

0080d050 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
  80d050:	defff504 	addi	sp,sp,-44
  80d054:	dfc00a15 	stw	ra,40(sp)
  80d058:	df000915 	stw	fp,36(sp)
  80d05c:	df000904 	addi	fp,sp,36
  80d060:	e13ffd15 	stw	r4,-12(fp)
  80d064:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  80d068:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  80d06c:	e0bffd17 	ldw	r2,-12(fp)
  80d070:	1004c03a 	cmpne	r2,r2,zero
  80d074:	1000031e 	bne	r2,zero,80d084 <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
  80d078:	00800104 	movi	r2,4
  80d07c:	e0bfff15 	stw	r2,-4(fp)
  80d080:	00004d06 	br	80d1b8 <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  80d084:	e0bffd17 	ldw	r2,-12(fp)
  80d088:	10800003 	ldbu	r2,0(r2)
  80d08c:	10803fcc 	andi	r2,r2,255
  80d090:	108000a0 	cmpeqi	r2,r2,2
  80d094:	1000031e 	bne	r2,zero,80d0a4 <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
  80d098:	00800044 	movi	r2,1
  80d09c:	e0bfff15 	stw	r2,-4(fp)
  80d0a0:	00004506 	br	80d1b8 <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d0a4:	0005303a 	rdctl	r2,status
  80d0a8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d0ac:	e0fffa17 	ldw	r3,-24(fp)
  80d0b0:	00bfff84 	movi	r2,-2
  80d0b4:	1884703a 	and	r2,r3,r2
  80d0b8:	1001703a 	wrctl	status,r2
  
  return context;
  80d0bc:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80d0c0:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
  80d0c4:	e0bffd17 	ldw	r2,-12(fp)
  80d0c8:	10800283 	ldbu	r2,10(r2)
  80d0cc:	10803fcc 	andi	r2,r2,255
  80d0d0:	1005003a 	cmpeq	r2,r2,zero
  80d0d4:	10000c1e 	bne	r2,zero,80d108 <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  80d0d8:	e13ffd17 	ldw	r4,-12(fp)
  80d0dc:	e17ffe17 	ldw	r5,-8(fp)
  80d0e0:	01800104 	movi	r6,4
  80d0e4:	000f883a 	mov	r7,zero
  80d0e8:	080908c0 	call	80908c <OS_EventTaskRdy>
  80d0ec:	e0bffb17 	ldw	r2,-20(fp)
  80d0f0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d0f4:	e0bff917 	ldw	r2,-28(fp)
  80d0f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
  80d0fc:	0809acc0 	call	809acc <OS_Sched>
        return (OS_ERR_NONE);
  80d100:	e03fff15 	stw	zero,-4(fp)
  80d104:	00002c06 	br	80d1b8 <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
  80d108:	e0bffd17 	ldw	r2,-12(fp)
  80d10c:	10800117 	ldw	r2,4(r2)
  80d110:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
  80d114:	e0bffc17 	ldw	r2,-16(fp)
  80d118:	10c0058b 	ldhu	r3,22(r2)
  80d11c:	e0bffc17 	ldw	r2,-16(fp)
  80d120:	1080050b 	ldhu	r2,20(r2)
  80d124:	18ffffcc 	andi	r3,r3,65535
  80d128:	10bfffcc 	andi	r2,r2,65535
  80d12c:	18800736 	bltu	r3,r2,80d14c <OSQPost+0xfc>
  80d130:	e0bffb17 	ldw	r2,-20(fp)
  80d134:	e0bff815 	stw	r2,-32(fp)
  80d138:	e0bff817 	ldw	r2,-32(fp)
  80d13c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  80d140:	00800784 	movi	r2,30
  80d144:	e0bfff15 	stw	r2,-4(fp)
  80d148:	00001b06 	br	80d1b8 <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
  80d14c:	e0bffc17 	ldw	r2,-16(fp)
  80d150:	10c00317 	ldw	r3,12(r2)
  80d154:	e0bffe17 	ldw	r2,-8(fp)
  80d158:	18800015 	stw	r2,0(r3)
  80d15c:	18c00104 	addi	r3,r3,4
  80d160:	e0bffc17 	ldw	r2,-16(fp)
  80d164:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
  80d168:	e0bffc17 	ldw	r2,-16(fp)
  80d16c:	1080058b 	ldhu	r2,22(r2)
  80d170:	10800044 	addi	r2,r2,1
  80d174:	1007883a 	mov	r3,r2
  80d178:	e0bffc17 	ldw	r2,-16(fp)
  80d17c:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
  80d180:	e0bffc17 	ldw	r2,-16(fp)
  80d184:	10c00317 	ldw	r3,12(r2)
  80d188:	e0bffc17 	ldw	r2,-16(fp)
  80d18c:	10800217 	ldw	r2,8(r2)
  80d190:	1880041e 	bne	r3,r2,80d1a4 <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
  80d194:	e0bffc17 	ldw	r2,-16(fp)
  80d198:	10c00117 	ldw	r3,4(r2)
  80d19c:	e0bffc17 	ldw	r2,-16(fp)
  80d1a0:	10c00315 	stw	r3,12(r2)
  80d1a4:	e0bffb17 	ldw	r2,-20(fp)
  80d1a8:	e0bff715 	stw	r2,-36(fp)
  80d1ac:	e0bff717 	ldw	r2,-36(fp)
  80d1b0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80d1b4:	e03fff15 	stw	zero,-4(fp)
  80d1b8:	e0bfff17 	ldw	r2,-4(fp)
}
  80d1bc:	e037883a 	mov	sp,fp
  80d1c0:	dfc00117 	ldw	ra,4(sp)
  80d1c4:	df000017 	ldw	fp,0(sp)
  80d1c8:	dec00204 	addi	sp,sp,8
  80d1cc:	f800283a 	ret

0080d1d0 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
  80d1d0:	defff504 	addi	sp,sp,-44
  80d1d4:	dfc00a15 	stw	ra,40(sp)
  80d1d8:	df000915 	stw	fp,36(sp)
  80d1dc:	df000904 	addi	fp,sp,36
  80d1e0:	e13ffd15 	stw	r4,-12(fp)
  80d1e4:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80d1e8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  80d1ec:	e0bffd17 	ldw	r2,-12(fp)
  80d1f0:	1004c03a 	cmpne	r2,r2,zero
  80d1f4:	1000031e 	bne	r2,zero,80d204 <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
  80d1f8:	00800104 	movi	r2,4
  80d1fc:	e0bfff15 	stw	r2,-4(fp)
  80d200:	00004f06 	br	80d340 <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  80d204:	e0bffd17 	ldw	r2,-12(fp)
  80d208:	10800003 	ldbu	r2,0(r2)
  80d20c:	10803fcc 	andi	r2,r2,255
  80d210:	108000a0 	cmpeqi	r2,r2,2
  80d214:	1000031e 	bne	r2,zero,80d224 <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
  80d218:	00800044 	movi	r2,1
  80d21c:	e0bfff15 	stw	r2,-4(fp)
  80d220:	00004706 	br	80d340 <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d224:	0005303a 	rdctl	r2,status
  80d228:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d22c:	e0fffa17 	ldw	r3,-24(fp)
  80d230:	00bfff84 	movi	r2,-2
  80d234:	1884703a 	and	r2,r3,r2
  80d238:	1001703a 	wrctl	status,r2
  
  return context;
  80d23c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80d240:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
  80d244:	e0bffd17 	ldw	r2,-12(fp)
  80d248:	10800283 	ldbu	r2,10(r2)
  80d24c:	10803fcc 	andi	r2,r2,255
  80d250:	1005003a 	cmpeq	r2,r2,zero
  80d254:	10000c1e 	bne	r2,zero,80d288 <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  80d258:	e13ffd17 	ldw	r4,-12(fp)
  80d25c:	e17ffe17 	ldw	r5,-8(fp)
  80d260:	01800104 	movi	r6,4
  80d264:	000f883a 	mov	r7,zero
  80d268:	080908c0 	call	80908c <OS_EventTaskRdy>
  80d26c:	e0bffb17 	ldw	r2,-20(fp)
  80d270:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d274:	e0bff917 	ldw	r2,-28(fp)
  80d278:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
  80d27c:	0809acc0 	call	809acc <OS_Sched>
        return (OS_ERR_NONE);
  80d280:	e03fff15 	stw	zero,-4(fp)
  80d284:	00002e06 	br	80d340 <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  80d288:	e0bffd17 	ldw	r2,-12(fp)
  80d28c:	10800117 	ldw	r2,4(r2)
  80d290:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  80d294:	e0bffc17 	ldw	r2,-16(fp)
  80d298:	10c0058b 	ldhu	r3,22(r2)
  80d29c:	e0bffc17 	ldw	r2,-16(fp)
  80d2a0:	1080050b 	ldhu	r2,20(r2)
  80d2a4:	18ffffcc 	andi	r3,r3,65535
  80d2a8:	10bfffcc 	andi	r2,r2,65535
  80d2ac:	18800736 	bltu	r3,r2,80d2cc <OSQPostFront+0xfc>
  80d2b0:	e0bffb17 	ldw	r2,-20(fp)
  80d2b4:	e0bff815 	stw	r2,-32(fp)
  80d2b8:	e0bff817 	ldw	r2,-32(fp)
  80d2bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  80d2c0:	00800784 	movi	r2,30
  80d2c4:	e0bfff15 	stw	r2,-4(fp)
  80d2c8:	00001d06 	br	80d340 <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
  80d2cc:	e0bffc17 	ldw	r2,-16(fp)
  80d2d0:	10c00417 	ldw	r3,16(r2)
  80d2d4:	e0bffc17 	ldw	r2,-16(fp)
  80d2d8:	10800117 	ldw	r2,4(r2)
  80d2dc:	1880041e 	bne	r3,r2,80d2f0 <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
  80d2e0:	e0bffc17 	ldw	r2,-16(fp)
  80d2e4:	10c00217 	ldw	r3,8(r2)
  80d2e8:	e0bffc17 	ldw	r2,-16(fp)
  80d2ec:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
  80d2f0:	e0bffc17 	ldw	r2,-16(fp)
  80d2f4:	10800417 	ldw	r2,16(r2)
  80d2f8:	10ffff04 	addi	r3,r2,-4
  80d2fc:	e0bffc17 	ldw	r2,-16(fp)
  80d300:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
  80d304:	e0bffc17 	ldw	r2,-16(fp)
  80d308:	10c00417 	ldw	r3,16(r2)
  80d30c:	e0bffe17 	ldw	r2,-8(fp)
  80d310:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  80d314:	e0bffc17 	ldw	r2,-16(fp)
  80d318:	1080058b 	ldhu	r2,22(r2)
  80d31c:	10800044 	addi	r2,r2,1
  80d320:	1007883a 	mov	r3,r2
  80d324:	e0bffc17 	ldw	r2,-16(fp)
  80d328:	10c0058d 	sth	r3,22(r2)
  80d32c:	e0bffb17 	ldw	r2,-20(fp)
  80d330:	e0bff715 	stw	r2,-36(fp)
  80d334:	e0bff717 	ldw	r2,-36(fp)
  80d338:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80d33c:	e03fff15 	stw	zero,-4(fp)
  80d340:	e0bfff17 	ldw	r2,-4(fp)
}
  80d344:	e037883a 	mov	sp,fp
  80d348:	dfc00117 	ldw	ra,4(sp)
  80d34c:	df000017 	ldw	fp,0(sp)
  80d350:	dec00204 	addi	sp,sp,8
  80d354:	f800283a 	ret

0080d358 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
  80d358:	defff404 	addi	sp,sp,-48
  80d35c:	dfc00b15 	stw	ra,44(sp)
  80d360:	df000a15 	stw	fp,40(sp)
  80d364:	df000a04 	addi	fp,sp,40
  80d368:	e13ffc15 	stw	r4,-16(fp)
  80d36c:	e17ffd15 	stw	r5,-12(fp)
  80d370:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80d374:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  80d378:	e0bffc17 	ldw	r2,-16(fp)
  80d37c:	1004c03a 	cmpne	r2,r2,zero
  80d380:	1000031e 	bne	r2,zero,80d390 <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
  80d384:	00800104 	movi	r2,4
  80d388:	e0bfff15 	stw	r2,-4(fp)
  80d38c:	00007906 	br	80d574 <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  80d390:	e0bffc17 	ldw	r2,-16(fp)
  80d394:	10800003 	ldbu	r2,0(r2)
  80d398:	10803fcc 	andi	r2,r2,255
  80d39c:	108000a0 	cmpeqi	r2,r2,2
  80d3a0:	1000031e 	bne	r2,zero,80d3b0 <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
  80d3a4:	00800044 	movi	r2,1
  80d3a8:	e0bfff15 	stw	r2,-4(fp)
  80d3ac:	00007106 	br	80d574 <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d3b0:	0005303a 	rdctl	r2,status
  80d3b4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d3b8:	e0fff917 	ldw	r3,-28(fp)
  80d3bc:	00bfff84 	movi	r2,-2
  80d3c0:	1884703a 	and	r2,r3,r2
  80d3c4:	1001703a 	wrctl	status,r2
  
  return context;
  80d3c8:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80d3cc:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
  80d3d0:	e0bffc17 	ldw	r2,-16(fp)
  80d3d4:	10800283 	ldbu	r2,10(r2)
  80d3d8:	10803fcc 	andi	r2,r2,255
  80d3dc:	1005003a 	cmpeq	r2,r2,zero
  80d3e0:	1000211e 	bne	r2,zero,80d468 <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
  80d3e4:	e0bffe03 	ldbu	r2,-8(fp)
  80d3e8:	1080004c 	andi	r2,r2,1
  80d3ec:	10803fcc 	andi	r2,r2,255
  80d3f0:	1005003a 	cmpeq	r2,r2,zero
  80d3f4:	10000c1e 	bne	r2,zero,80d428 <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  80d3f8:	00000506 	br	80d410 <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  80d3fc:	e13ffc17 	ldw	r4,-16(fp)
  80d400:	e17ffd17 	ldw	r5,-12(fp)
  80d404:	01800104 	movi	r6,4
  80d408:	000f883a 	mov	r7,zero
  80d40c:	080908c0 	call	80908c <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  80d410:	e0bffc17 	ldw	r2,-16(fp)
  80d414:	10800283 	ldbu	r2,10(r2)
  80d418:	10803fcc 	andi	r2,r2,255
  80d41c:	1004c03a 	cmpne	r2,r2,zero
  80d420:	103ff61e 	bne	r2,zero,80d3fc <OSQPostOpt+0xa4>
  80d424:	00000506 	br	80d43c <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  80d428:	e13ffc17 	ldw	r4,-16(fp)
  80d42c:	e17ffd17 	ldw	r5,-12(fp)
  80d430:	01800104 	movi	r6,4
  80d434:	000f883a 	mov	r7,zero
  80d438:	080908c0 	call	80908c <OS_EventTaskRdy>
  80d43c:	e0bffa17 	ldw	r2,-24(fp)
  80d440:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d444:	e0bff817 	ldw	r2,-32(fp)
  80d448:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
  80d44c:	e0bffe03 	ldbu	r2,-8(fp)
  80d450:	1080010c 	andi	r2,r2,4
  80d454:	1004c03a 	cmpne	r2,r2,zero
  80d458:	1000011e 	bne	r2,zero,80d460 <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
  80d45c:	0809acc0 	call	809acc <OS_Sched>
        }
        return (OS_ERR_NONE);
  80d460:	e03fff15 	stw	zero,-4(fp)
  80d464:	00004306 	br	80d574 <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  80d468:	e0bffc17 	ldw	r2,-16(fp)
  80d46c:	10800117 	ldw	r2,4(r2)
  80d470:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  80d474:	e0bffb17 	ldw	r2,-20(fp)
  80d478:	10c0058b 	ldhu	r3,22(r2)
  80d47c:	e0bffb17 	ldw	r2,-20(fp)
  80d480:	1080050b 	ldhu	r2,20(r2)
  80d484:	18ffffcc 	andi	r3,r3,65535
  80d488:	10bfffcc 	andi	r2,r2,65535
  80d48c:	18800736 	bltu	r3,r2,80d4ac <OSQPostOpt+0x154>
  80d490:	e0bffa17 	ldw	r2,-24(fp)
  80d494:	e0bff715 	stw	r2,-36(fp)
  80d498:	e0bff717 	ldw	r2,-36(fp)
  80d49c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  80d4a0:	00800784 	movi	r2,30
  80d4a4:	e0bfff15 	stw	r2,-4(fp)
  80d4a8:	00003206 	br	80d574 <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
  80d4ac:	e0bffe03 	ldbu	r2,-8(fp)
  80d4b0:	1080008c 	andi	r2,r2,2
  80d4b4:	1005003a 	cmpeq	r2,r2,zero
  80d4b8:	1000131e 	bne	r2,zero,80d508 <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
  80d4bc:	e0bffb17 	ldw	r2,-20(fp)
  80d4c0:	10c00417 	ldw	r3,16(r2)
  80d4c4:	e0bffb17 	ldw	r2,-20(fp)
  80d4c8:	10800117 	ldw	r2,4(r2)
  80d4cc:	1880041e 	bne	r3,r2,80d4e0 <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
  80d4d0:	e0bffb17 	ldw	r2,-20(fp)
  80d4d4:	10c00217 	ldw	r3,8(r2)
  80d4d8:	e0bffb17 	ldw	r2,-20(fp)
  80d4dc:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
  80d4e0:	e0bffb17 	ldw	r2,-20(fp)
  80d4e4:	10800417 	ldw	r2,16(r2)
  80d4e8:	10ffff04 	addi	r3,r2,-4
  80d4ec:	e0bffb17 	ldw	r2,-20(fp)
  80d4f0:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
  80d4f4:	e0bffb17 	ldw	r2,-20(fp)
  80d4f8:	10c00417 	ldw	r3,16(r2)
  80d4fc:	e0bffd17 	ldw	r2,-12(fp)
  80d500:	18800015 	stw	r2,0(r3)
  80d504:	00001006 	br	80d548 <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
  80d508:	e0bffb17 	ldw	r2,-20(fp)
  80d50c:	10c00317 	ldw	r3,12(r2)
  80d510:	e0bffd17 	ldw	r2,-12(fp)
  80d514:	18800015 	stw	r2,0(r3)
  80d518:	18c00104 	addi	r3,r3,4
  80d51c:	e0bffb17 	ldw	r2,-20(fp)
  80d520:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
  80d524:	e0bffb17 	ldw	r2,-20(fp)
  80d528:	10c00317 	ldw	r3,12(r2)
  80d52c:	e0bffb17 	ldw	r2,-20(fp)
  80d530:	10800217 	ldw	r2,8(r2)
  80d534:	1880041e 	bne	r3,r2,80d548 <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
  80d538:	e0bffb17 	ldw	r2,-20(fp)
  80d53c:	10c00117 	ldw	r3,4(r2)
  80d540:	e0bffb17 	ldw	r2,-20(fp)
  80d544:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  80d548:	e0bffb17 	ldw	r2,-20(fp)
  80d54c:	1080058b 	ldhu	r2,22(r2)
  80d550:	10800044 	addi	r2,r2,1
  80d554:	1007883a 	mov	r3,r2
  80d558:	e0bffb17 	ldw	r2,-20(fp)
  80d55c:	10c0058d 	sth	r3,22(r2)
  80d560:	e0bffa17 	ldw	r2,-24(fp)
  80d564:	e0bff615 	stw	r2,-40(fp)
  80d568:	e0bff617 	ldw	r2,-40(fp)
  80d56c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80d570:	e03fff15 	stw	zero,-4(fp)
  80d574:	e0bfff17 	ldw	r2,-4(fp)
}
  80d578:	e037883a 	mov	sp,fp
  80d57c:	dfc00117 	ldw	ra,4(sp)
  80d580:	df000017 	ldw	fp,0(sp)
  80d584:	dec00204 	addi	sp,sp,8
  80d588:	f800283a 	ret

0080d58c <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
  80d58c:	defff504 	addi	sp,sp,-44
  80d590:	df000a15 	stw	fp,40(sp)
  80d594:	df000a04 	addi	fp,sp,40
  80d598:	e13ffd15 	stw	r4,-12(fp)
  80d59c:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  80d5a0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  80d5a4:	e0bffd17 	ldw	r2,-12(fp)
  80d5a8:	1004c03a 	cmpne	r2,r2,zero
  80d5ac:	1000031e 	bne	r2,zero,80d5bc <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
  80d5b0:	00800104 	movi	r2,4
  80d5b4:	e0bfff15 	stw	r2,-4(fp)
  80d5b8:	00004f06 	br	80d6f8 <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
  80d5bc:	e0bffe17 	ldw	r2,-8(fp)
  80d5c0:	1004c03a 	cmpne	r2,r2,zero
  80d5c4:	1000031e 	bne	r2,zero,80d5d4 <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
  80d5c8:	00800244 	movi	r2,9
  80d5cc:	e0bfff15 	stw	r2,-4(fp)
  80d5d0:	00004906 	br	80d6f8 <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  80d5d4:	e0bffd17 	ldw	r2,-12(fp)
  80d5d8:	10800003 	ldbu	r2,0(r2)
  80d5dc:	10803fcc 	andi	r2,r2,255
  80d5e0:	108000a0 	cmpeqi	r2,r2,2
  80d5e4:	1000031e 	bne	r2,zero,80d5f4 <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
  80d5e8:	00800044 	movi	r2,1
  80d5ec:	e0bfff15 	stw	r2,-4(fp)
  80d5f0:	00004106 	br	80d6f8 <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d5f4:	0005303a 	rdctl	r2,status
  80d5f8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d5fc:	e0fff717 	ldw	r3,-36(fp)
  80d600:	00bfff84 	movi	r2,-2
  80d604:	1884703a 	and	r2,r3,r2
  80d608:	1001703a 	wrctl	status,r2
  
  return context;
  80d60c:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  80d610:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
  80d614:	e0bffd17 	ldw	r2,-12(fp)
  80d618:	10c00283 	ldbu	r3,10(r2)
  80d61c:	e0bffe17 	ldw	r2,-8(fp)
  80d620:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
  80d624:	e0bffd17 	ldw	r2,-12(fp)
  80d628:	108002c4 	addi	r2,r2,11
  80d62c:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
  80d630:	e0bffe17 	ldw	r2,-8(fp)
  80d634:	10800204 	addi	r2,r2,8
  80d638:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  80d63c:	e03ffb05 	stb	zero,-20(fp)
  80d640:	00000d06 	br	80d678 <OSQQuery+0xec>
        *pdest++ = *psrc++;
  80d644:	e0bffa17 	ldw	r2,-24(fp)
  80d648:	10c00003 	ldbu	r3,0(r2)
  80d64c:	e0bff917 	ldw	r2,-28(fp)
  80d650:	10c00005 	stb	r3,0(r2)
  80d654:	e0bff917 	ldw	r2,-28(fp)
  80d658:	10800044 	addi	r2,r2,1
  80d65c:	e0bff915 	stw	r2,-28(fp)
  80d660:	e0bffa17 	ldw	r2,-24(fp)
  80d664:	10800044 	addi	r2,r2,1
  80d668:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  80d66c:	e0bffb03 	ldbu	r2,-20(fp)
  80d670:	10800044 	addi	r2,r2,1
  80d674:	e0bffb05 	stb	r2,-20(fp)
  80d678:	e0bffb03 	ldbu	r2,-20(fp)
  80d67c:	108000f0 	cmpltui	r2,r2,3
  80d680:	103ff01e 	bne	r2,zero,80d644 <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
  80d684:	e0bffd17 	ldw	r2,-12(fp)
  80d688:	10800117 	ldw	r2,4(r2)
  80d68c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
  80d690:	e0bffc17 	ldw	r2,-16(fp)
  80d694:	1080058b 	ldhu	r2,22(r2)
  80d698:	10bfffcc 	andi	r2,r2,65535
  80d69c:	1005003a 	cmpeq	r2,r2,zero
  80d6a0:	1000061e 	bne	r2,zero,80d6bc <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
  80d6a4:	e0bffc17 	ldw	r2,-16(fp)
  80d6a8:	10800417 	ldw	r2,16(r2)
  80d6ac:	10c00017 	ldw	r3,0(r2)
  80d6b0:	e0bffe17 	ldw	r2,-8(fp)
  80d6b4:	10c00015 	stw	r3,0(r2)
  80d6b8:	00000206 	br	80d6c4 <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
  80d6bc:	e0bffe17 	ldw	r2,-8(fp)
  80d6c0:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
  80d6c4:	e0bffc17 	ldw	r2,-16(fp)
  80d6c8:	10c0058b 	ldhu	r3,22(r2)
  80d6cc:	e0bffe17 	ldw	r2,-8(fp)
  80d6d0:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
  80d6d4:	e0bffc17 	ldw	r2,-16(fp)
  80d6d8:	10c0050b 	ldhu	r3,20(r2)
  80d6dc:	e0bffe17 	ldw	r2,-8(fp)
  80d6e0:	10c0018d 	sth	r3,6(r2)
  80d6e4:	e0bff817 	ldw	r2,-32(fp)
  80d6e8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d6ec:	e0bff617 	ldw	r2,-40(fp)
  80d6f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80d6f4:	e03fff15 	stw	zero,-4(fp)
  80d6f8:	e0bfff17 	ldw	r2,-4(fp)
}
  80d6fc:	e037883a 	mov	sp,fp
  80d700:	df000017 	ldw	fp,0(sp)
  80d704:	dec00104 	addi	sp,sp,4
  80d708:	f800283a 	ret

0080d70c <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
  80d70c:	defffb04 	addi	sp,sp,-20
  80d710:	dfc00415 	stw	ra,16(sp)
  80d714:	df000315 	stw	fp,12(sp)
  80d718:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
  80d71c:	010020b4 	movhi	r4,130
  80d720:	2135ea04 	addi	r4,r4,-10328
  80d724:	01407804 	movi	r5,480
  80d728:	0809a0c0 	call	809a0c <OS_MemClr>
    pq1 = &OSQTbl[0];
  80d72c:	008020b4 	movhi	r2,130
  80d730:	10b5ea04 	addi	r2,r2,-10328
  80d734:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
  80d738:	008020b4 	movhi	r2,130
  80d73c:	10b5f004 	addi	r2,r2,-10304
  80d740:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  80d744:	e03fff0d 	sth	zero,-4(fp)
  80d748:	00000c06 	br	80d77c <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
  80d74c:	e0fffe17 	ldw	r3,-8(fp)
  80d750:	e0bffd17 	ldw	r2,-12(fp)
  80d754:	18800015 	stw	r2,0(r3)
        pq1++;
  80d758:	e0bffe17 	ldw	r2,-8(fp)
  80d75c:	10800604 	addi	r2,r2,24
  80d760:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
  80d764:	e0bffd17 	ldw	r2,-12(fp)
  80d768:	10800604 	addi	r2,r2,24
  80d76c:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  80d770:	e0bfff0b 	ldhu	r2,-4(fp)
  80d774:	10800044 	addi	r2,r2,1
  80d778:	e0bfff0d 	sth	r2,-4(fp)
  80d77c:	e0bfff0b 	ldhu	r2,-4(fp)
  80d780:	108004f0 	cmpltui	r2,r2,19
  80d784:	103ff11e 	bne	r2,zero,80d74c <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
  80d788:	e0bffe17 	ldw	r2,-8(fp)
  80d78c:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
  80d790:	00c02074 	movhi	r3,129
  80d794:	18dfad04 	addi	r3,r3,32436
  80d798:	008020b4 	movhi	r2,130
  80d79c:	10b5ea04 	addi	r2,r2,-10328
  80d7a0:	18800015 	stw	r2,0(r3)
#endif
}
  80d7a4:	e037883a 	mov	sp,fp
  80d7a8:	dfc00117 	ldw	ra,4(sp)
  80d7ac:	df000017 	ldw	fp,0(sp)
  80d7b0:	dec00204 	addi	sp,sp,8
  80d7b4:	f800283a 	ret

0080d7b8 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
  80d7b8:	defff904 	addi	sp,sp,-28
  80d7bc:	df000615 	stw	fp,24(sp)
  80d7c0:	df000604 	addi	fp,sp,24
  80d7c4:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80d7c8:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  80d7cc:	e0bffe17 	ldw	r2,-8(fp)
  80d7d0:	1004c03a 	cmpne	r2,r2,zero
  80d7d4:	1000021e 	bne	r2,zero,80d7e0 <OSSemAccept+0x28>
        return (0);
  80d7d8:	e03fff15 	stw	zero,-4(fp)
  80d7dc:	00002106 	br	80d864 <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  80d7e0:	e0bffe17 	ldw	r2,-8(fp)
  80d7e4:	10800003 	ldbu	r2,0(r2)
  80d7e8:	10803fcc 	andi	r2,r2,255
  80d7ec:	108000e0 	cmpeqi	r2,r2,3
  80d7f0:	1000021e 	bne	r2,zero,80d7fc <OSSemAccept+0x44>
        return (0);
  80d7f4:	e03fff15 	stw	zero,-4(fp)
  80d7f8:	00001a06 	br	80d864 <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d7fc:	0005303a 	rdctl	r2,status
  80d800:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d804:	e0fffb17 	ldw	r3,-20(fp)
  80d808:	00bfff84 	movi	r2,-2
  80d80c:	1884703a 	and	r2,r3,r2
  80d810:	1001703a 	wrctl	status,r2
  
  return context;
  80d814:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  80d818:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
  80d81c:	e0bffe17 	ldw	r2,-8(fp)
  80d820:	1080020b 	ldhu	r2,8(r2)
  80d824:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
  80d828:	e0bffd0b 	ldhu	r2,-12(fp)
  80d82c:	1005003a 	cmpeq	r2,r2,zero
  80d830:	1000061e 	bne	r2,zero,80d84c <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
  80d834:	e0bffe17 	ldw	r2,-8(fp)
  80d838:	1080020b 	ldhu	r2,8(r2)
  80d83c:	10bfffc4 	addi	r2,r2,-1
  80d840:	1007883a 	mov	r3,r2
  80d844:	e0bffe17 	ldw	r2,-8(fp)
  80d848:	10c0020d 	sth	r3,8(r2)
  80d84c:	e0bffc17 	ldw	r2,-16(fp)
  80d850:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d854:	e0bffa17 	ldw	r2,-24(fp)
  80d858:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
  80d85c:	e0bffd0b 	ldhu	r2,-12(fp)
  80d860:	e0bfff15 	stw	r2,-4(fp)
  80d864:	e0bfff17 	ldw	r2,-4(fp)
}
  80d868:	e037883a 	mov	sp,fp
  80d86c:	df000017 	ldw	fp,0(sp)
  80d870:	dec00104 	addi	sp,sp,4
  80d874:	f800283a 	ret

0080d878 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
  80d878:	defff804 	addi	sp,sp,-32
  80d87c:	dfc00715 	stw	ra,28(sp)
  80d880:	df000615 	stw	fp,24(sp)
  80d884:	df000604 	addi	fp,sp,24
  80d888:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80d88c:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  80d890:	00802074 	movhi	r2,129
  80d894:	109fb004 	addi	r2,r2,32448
  80d898:	10800003 	ldbu	r2,0(r2)
  80d89c:	10803fcc 	andi	r2,r2,255
  80d8a0:	1005003a 	cmpeq	r2,r2,zero
  80d8a4:	1000021e 	bne	r2,zero,80d8b0 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
  80d8a8:	e03fff15 	stw	zero,-4(fp)
  80d8ac:	00003106 	br	80d974 <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d8b0:	0005303a 	rdctl	r2,status
  80d8b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d8b8:	e0fffb17 	ldw	r3,-20(fp)
  80d8bc:	00bfff84 	movi	r2,-2
  80d8c0:	1884703a 	and	r2,r3,r2
  80d8c4:	1001703a 	wrctl	status,r2
  
  return context;
  80d8c8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  80d8cc:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
  80d8d0:	00802074 	movhi	r2,129
  80d8d4:	109faf04 	addi	r2,r2,32444
  80d8d8:	10800017 	ldw	r2,0(r2)
  80d8dc:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
  80d8e0:	00802074 	movhi	r2,129
  80d8e4:	109faf04 	addi	r2,r2,32444
  80d8e8:	10800017 	ldw	r2,0(r2)
  80d8ec:	1005003a 	cmpeq	r2,r2,zero
  80d8f0:	1000081e 	bne	r2,zero,80d914 <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  80d8f4:	00802074 	movhi	r2,129
  80d8f8:	109faf04 	addi	r2,r2,32444
  80d8fc:	10800017 	ldw	r2,0(r2)
  80d900:	10800117 	ldw	r2,4(r2)
  80d904:	1007883a 	mov	r3,r2
  80d908:	00802074 	movhi	r2,129
  80d90c:	109faf04 	addi	r2,r2,32444
  80d910:	10c00015 	stw	r3,0(r2)
  80d914:	e0bffc17 	ldw	r2,-16(fp)
  80d918:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d91c:	e0bffa17 	ldw	r2,-24(fp)
  80d920:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
  80d924:	e0bffd17 	ldw	r2,-12(fp)
  80d928:	1005003a 	cmpeq	r2,r2,zero
  80d92c:	10000f1e 	bne	r2,zero,80d96c <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
  80d930:	e0fffd17 	ldw	r3,-12(fp)
  80d934:	008000c4 	movi	r2,3
  80d938:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
  80d93c:	e0fffd17 	ldw	r3,-12(fp)
  80d940:	e0bffe0b 	ldhu	r2,-8(fp)
  80d944:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
  80d948:	e0bffd17 	ldw	r2,-12(fp)
  80d94c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
  80d950:	e0fffd17 	ldw	r3,-12(fp)
  80d954:	00800fc4 	movi	r2,63
  80d958:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
  80d95c:	e0bffd17 	ldw	r2,-12(fp)
  80d960:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
  80d964:	e13ffd17 	ldw	r4,-12(fp)
  80d968:	08096400 	call	809640 <OS_EventWaitListInit>
    }
    return (pevent);
  80d96c:	e0bffd17 	ldw	r2,-12(fp)
  80d970:	e0bfff15 	stw	r2,-4(fp)
  80d974:	e0bfff17 	ldw	r2,-4(fp)
}
  80d978:	e037883a 	mov	sp,fp
  80d97c:	dfc00117 	ldw	ra,4(sp)
  80d980:	df000017 	ldw	fp,0(sp)
  80d984:	dec00204 	addi	sp,sp,8
  80d988:	f800283a 	ret

0080d98c <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  80d98c:	defff104 	addi	sp,sp,-60
  80d990:	dfc00e15 	stw	ra,56(sp)
  80d994:	df000d15 	stw	fp,52(sp)
  80d998:	df000d04 	addi	fp,sp,52
  80d99c:	e13ffb15 	stw	r4,-20(fp)
  80d9a0:	e1bffd15 	stw	r6,-12(fp)
  80d9a4:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80d9a8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80d9ac:	e0bffd17 	ldw	r2,-12(fp)
  80d9b0:	1004c03a 	cmpne	r2,r2,zero
  80d9b4:	1000031e 	bne	r2,zero,80d9c4 <OSSemDel+0x38>
        return (pevent);
  80d9b8:	e0bffb17 	ldw	r2,-20(fp)
  80d9bc:	e0bfff15 	stw	r2,-4(fp)
  80d9c0:	00009406 	br	80dc14 <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  80d9c4:	e0bffb17 	ldw	r2,-20(fp)
  80d9c8:	1004c03a 	cmpne	r2,r2,zero
  80d9cc:	1000061e 	bne	r2,zero,80d9e8 <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
  80d9d0:	e0fffd17 	ldw	r3,-12(fp)
  80d9d4:	00800104 	movi	r2,4
  80d9d8:	18800005 	stb	r2,0(r3)
        return (pevent);
  80d9dc:	e0fffb17 	ldw	r3,-20(fp)
  80d9e0:	e0ffff15 	stw	r3,-4(fp)
  80d9e4:	00008b06 	br	80dc14 <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  80d9e8:	e0bffb17 	ldw	r2,-20(fp)
  80d9ec:	10800003 	ldbu	r2,0(r2)
  80d9f0:	10803fcc 	andi	r2,r2,255
  80d9f4:	108000e0 	cmpeqi	r2,r2,3
  80d9f8:	1000061e 	bne	r2,zero,80da14 <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
  80d9fc:	e0fffd17 	ldw	r3,-12(fp)
  80da00:	00800044 	movi	r2,1
  80da04:	18800005 	stb	r2,0(r3)
        return (pevent);
  80da08:	e0bffb17 	ldw	r2,-20(fp)
  80da0c:	e0bfff15 	stw	r2,-4(fp)
  80da10:	00008006 	br	80dc14 <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  80da14:	00802074 	movhi	r2,129
  80da18:	109fb004 	addi	r2,r2,32448
  80da1c:	10800003 	ldbu	r2,0(r2)
  80da20:	10803fcc 	andi	r2,r2,255
  80da24:	1005003a 	cmpeq	r2,r2,zero
  80da28:	1000061e 	bne	r2,zero,80da44 <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
  80da2c:	e0fffd17 	ldw	r3,-12(fp)
  80da30:	008003c4 	movi	r2,15
  80da34:	18800005 	stb	r2,0(r3)
        return (pevent);
  80da38:	e0fffb17 	ldw	r3,-20(fp)
  80da3c:	e0ffff15 	stw	r3,-4(fp)
  80da40:	00007406 	br	80dc14 <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80da44:	0005303a 	rdctl	r2,status
  80da48:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80da4c:	e0fff717 	ldw	r3,-36(fp)
  80da50:	00bfff84 	movi	r2,-2
  80da54:	1884703a 	and	r2,r3,r2
  80da58:	1001703a 	wrctl	status,r2
  
  return context;
  80da5c:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  80da60:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
  80da64:	e0bffb17 	ldw	r2,-20(fp)
  80da68:	10800283 	ldbu	r2,10(r2)
  80da6c:	10803fcc 	andi	r2,r2,255
  80da70:	1005003a 	cmpeq	r2,r2,zero
  80da74:	1000031e 	bne	r2,zero,80da84 <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  80da78:	00800044 	movi	r2,1
  80da7c:	e0bffa05 	stb	r2,-24(fp)
  80da80:	00000106 	br	80da88 <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  80da84:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  80da88:	e0bffc03 	ldbu	r2,-16(fp)
  80da8c:	e0bffe15 	stw	r2,-8(fp)
  80da90:	e0fffe17 	ldw	r3,-8(fp)
  80da94:	1805003a 	cmpeq	r2,r3,zero
  80da98:	1000041e 	bne	r2,zero,80daac <OSSemDel+0x120>
  80da9c:	e0fffe17 	ldw	r3,-8(fp)
  80daa0:	18800060 	cmpeqi	r2,r3,1
  80daa4:	10002d1e 	bne	r2,zero,80db5c <OSSemDel+0x1d0>
  80daa8:	00004f06 	br	80dbe8 <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
  80daac:	e0bffa03 	ldbu	r2,-24(fp)
  80dab0:	1004c03a 	cmpne	r2,r2,zero
  80dab4:	10001a1e 	bne	r2,zero,80db20 <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  80dab8:	e0fffb17 	ldw	r3,-20(fp)
  80dabc:	00800fc4 	movi	r2,63
  80dac0:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  80dac4:	e0bffb17 	ldw	r2,-20(fp)
  80dac8:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  80dacc:	e0bffb17 	ldw	r2,-20(fp)
  80dad0:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  80dad4:	00802074 	movhi	r2,129
  80dad8:	109faf04 	addi	r2,r2,32444
  80dadc:	10c00017 	ldw	r3,0(r2)
  80dae0:	e0bffb17 	ldw	r2,-20(fp)
  80dae4:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  80dae8:	e0bffb17 	ldw	r2,-20(fp)
  80daec:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  80daf0:	00c02074 	movhi	r3,129
  80daf4:	18dfaf04 	addi	r3,r3,32444
  80daf8:	e0bffb17 	ldw	r2,-20(fp)
  80dafc:	18800015 	stw	r2,0(r3)
  80db00:	e0bff817 	ldw	r2,-32(fp)
  80db04:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80db08:	e0bff617 	ldw	r2,-40(fp)
  80db0c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  80db10:	e0bffd17 	ldw	r2,-12(fp)
  80db14:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
  80db18:	e03ff915 	stw	zero,-28(fp)
  80db1c:	00003b06 	br	80dc0c <OSSemDel+0x280>
  80db20:	e0bff817 	ldw	r2,-32(fp)
  80db24:	e0bff515 	stw	r2,-44(fp)
  80db28:	e0bff517 	ldw	r2,-44(fp)
  80db2c:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  80db30:	e0fffd17 	ldw	r3,-12(fp)
  80db34:	00801244 	movi	r2,73
  80db38:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
  80db3c:	e0bffb17 	ldw	r2,-20(fp)
  80db40:	e0bff915 	stw	r2,-28(fp)
             }
             break;
  80db44:	00003106 	br	80dc0c <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  80db48:	e13ffb17 	ldw	r4,-20(fp)
  80db4c:	000b883a 	mov	r5,zero
  80db50:	01800044 	movi	r6,1
  80db54:	000f883a 	mov	r7,zero
  80db58:	080908c0 	call	80908c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
  80db5c:	e0bffb17 	ldw	r2,-20(fp)
  80db60:	10800283 	ldbu	r2,10(r2)
  80db64:	10803fcc 	andi	r2,r2,255
  80db68:	1004c03a 	cmpne	r2,r2,zero
  80db6c:	103ff61e 	bne	r2,zero,80db48 <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  80db70:	e0fffb17 	ldw	r3,-20(fp)
  80db74:	00800fc4 	movi	r2,63
  80db78:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  80db7c:	e0bffb17 	ldw	r2,-20(fp)
  80db80:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  80db84:	e0bffb17 	ldw	r2,-20(fp)
  80db88:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  80db8c:	00802074 	movhi	r2,129
  80db90:	109faf04 	addi	r2,r2,32444
  80db94:	10c00017 	ldw	r3,0(r2)
  80db98:	e0bffb17 	ldw	r2,-20(fp)
  80db9c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  80dba0:	e0bffb17 	ldw	r2,-20(fp)
  80dba4:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  80dba8:	00c02074 	movhi	r3,129
  80dbac:	18dfaf04 	addi	r3,r3,32444
  80dbb0:	e0bffb17 	ldw	r2,-20(fp)
  80dbb4:	18800015 	stw	r2,0(r3)
  80dbb8:	e0bff817 	ldw	r2,-32(fp)
  80dbbc:	e0bff415 	stw	r2,-48(fp)
  80dbc0:	e0bff417 	ldw	r2,-48(fp)
  80dbc4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  80dbc8:	e0bffa03 	ldbu	r2,-24(fp)
  80dbcc:	10800058 	cmpnei	r2,r2,1
  80dbd0:	1000011e 	bne	r2,zero,80dbd8 <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  80dbd4:	0809acc0 	call	809acc <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  80dbd8:	e0bffd17 	ldw	r2,-12(fp)
  80dbdc:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
  80dbe0:	e03ff915 	stw	zero,-28(fp)
             break;
  80dbe4:	00000906 	br	80dc0c <OSSemDel+0x280>
  80dbe8:	e0bff817 	ldw	r2,-32(fp)
  80dbec:	e0bff315 	stw	r2,-52(fp)
  80dbf0:	e0bff317 	ldw	r2,-52(fp)
  80dbf4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  80dbf8:	e0fffd17 	ldw	r3,-12(fp)
  80dbfc:	008001c4 	movi	r2,7
  80dc00:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
  80dc04:	e0bffb17 	ldw	r2,-20(fp)
  80dc08:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
  80dc0c:	e0bff917 	ldw	r2,-28(fp)
  80dc10:	e0bfff15 	stw	r2,-4(fp)
  80dc14:	e0bfff17 	ldw	r2,-4(fp)
}
  80dc18:	e037883a 	mov	sp,fp
  80dc1c:	dfc00117 	ldw	ra,4(sp)
  80dc20:	df000017 	ldw	fp,0(sp)
  80dc24:	dec00204 	addi	sp,sp,8
  80dc28:	f800283a 	ret

0080dc2c <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  80dc2c:	defff404 	addi	sp,sp,-48
  80dc30:	dfc00b15 	stw	ra,44(sp)
  80dc34:	df000a15 	stw	fp,40(sp)
  80dc38:	df000a04 	addi	fp,sp,40
  80dc3c:	e13ffc15 	stw	r4,-16(fp)
  80dc40:	e1bffe15 	stw	r6,-8(fp)
  80dc44:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80dc48:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  80dc4c:	e0bffe17 	ldw	r2,-8(fp)
  80dc50:	1005003a 	cmpeq	r2,r2,zero
  80dc54:	10008f1e 	bne	r2,zero,80de94 <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  80dc58:	e0bffc17 	ldw	r2,-16(fp)
  80dc5c:	1004c03a 	cmpne	r2,r2,zero
  80dc60:	1000041e 	bne	r2,zero,80dc74 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
  80dc64:	e0fffe17 	ldw	r3,-8(fp)
  80dc68:	00800104 	movi	r2,4
  80dc6c:	18800005 	stb	r2,0(r3)
        return;
  80dc70:	00008806 	br	80de94 <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  80dc74:	e0bffc17 	ldw	r2,-16(fp)
  80dc78:	10800003 	ldbu	r2,0(r2)
  80dc7c:	10803fcc 	andi	r2,r2,255
  80dc80:	108000e0 	cmpeqi	r2,r2,3
  80dc84:	1000041e 	bne	r2,zero,80dc98 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  80dc88:	e0fffe17 	ldw	r3,-8(fp)
  80dc8c:	00800044 	movi	r2,1
  80dc90:	18800005 	stb	r2,0(r3)
        return;
  80dc94:	00007f06 	br	80de94 <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
  80dc98:	00802074 	movhi	r2,129
  80dc9c:	109fb004 	addi	r2,r2,32448
  80dca0:	10800003 	ldbu	r2,0(r2)
  80dca4:	10803fcc 	andi	r2,r2,255
  80dca8:	1005003a 	cmpeq	r2,r2,zero
  80dcac:	1000041e 	bne	r2,zero,80dcc0 <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
  80dcb0:	e0fffe17 	ldw	r3,-8(fp)
  80dcb4:	00800084 	movi	r2,2
  80dcb8:	18800005 	stb	r2,0(r3)
        return;
  80dcbc:	00007506 	br	80de94 <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
  80dcc0:	00802074 	movhi	r2,129
  80dcc4:	109fa204 	addi	r2,r2,32392
  80dcc8:	10800003 	ldbu	r2,0(r2)
  80dccc:	10803fcc 	andi	r2,r2,255
  80dcd0:	1005003a 	cmpeq	r2,r2,zero
  80dcd4:	1000041e 	bne	r2,zero,80dce8 <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
  80dcd8:	e0fffe17 	ldw	r3,-8(fp)
  80dcdc:	00800344 	movi	r2,13
  80dce0:	18800005 	stb	r2,0(r3)
        return;
  80dce4:	00006b06 	br	80de94 <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80dce8:	0005303a 	rdctl	r2,status
  80dcec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80dcf0:	e0fffa17 	ldw	r3,-24(fp)
  80dcf4:	00bfff84 	movi	r2,-2
  80dcf8:	1884703a 	and	r2,r3,r2
  80dcfc:	1001703a 	wrctl	status,r2
  
  return context;
  80dd00:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80dd04:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
  80dd08:	e0bffc17 	ldw	r2,-16(fp)
  80dd0c:	1080020b 	ldhu	r2,8(r2)
  80dd10:	10bfffcc 	andi	r2,r2,65535
  80dd14:	1005003a 	cmpeq	r2,r2,zero
  80dd18:	10000d1e 	bne	r2,zero,80dd50 <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
  80dd1c:	e0bffc17 	ldw	r2,-16(fp)
  80dd20:	1080020b 	ldhu	r2,8(r2)
  80dd24:	10bfffc4 	addi	r2,r2,-1
  80dd28:	1007883a 	mov	r3,r2
  80dd2c:	e0bffc17 	ldw	r2,-16(fp)
  80dd30:	10c0020d 	sth	r3,8(r2)
  80dd34:	e0bffb17 	ldw	r2,-20(fp)
  80dd38:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80dd3c:	e0bff917 	ldw	r2,-28(fp)
  80dd40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  80dd44:	e0bffe17 	ldw	r2,-8(fp)
  80dd48:	10000005 	stb	zero,0(r2)
        return;
  80dd4c:	00005106 	br	80de94 <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
  80dd50:	00802074 	movhi	r2,129
  80dd54:	109fb104 	addi	r2,r2,32452
  80dd58:	10c00017 	ldw	r3,0(r2)
  80dd5c:	00802074 	movhi	r2,129
  80dd60:	109fb104 	addi	r2,r2,32452
  80dd64:	10800017 	ldw	r2,0(r2)
  80dd68:	10800c03 	ldbu	r2,48(r2)
  80dd6c:	10800054 	ori	r2,r2,1
  80dd70:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  80dd74:	00802074 	movhi	r2,129
  80dd78:	109fb104 	addi	r2,r2,32452
  80dd7c:	10800017 	ldw	r2,0(r2)
  80dd80:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
  80dd84:	00802074 	movhi	r2,129
  80dd88:	109fb104 	addi	r2,r2,32452
  80dd8c:	10c00017 	ldw	r3,0(r2)
  80dd90:	e0bffd0b 	ldhu	r2,-12(fp)
  80dd94:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
  80dd98:	e13ffc17 	ldw	r4,-16(fp)
  80dd9c:	08092200 	call	809220 <OS_EventTaskWait>
  80dda0:	e0bffb17 	ldw	r2,-20(fp)
  80dda4:	e0bff815 	stw	r2,-32(fp)
  80dda8:	e0bff817 	ldw	r2,-32(fp)
  80ddac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
  80ddb0:	0809acc0 	call	809acc <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ddb4:	0005303a 	rdctl	r2,status
  80ddb8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ddbc:	e0fff717 	ldw	r3,-36(fp)
  80ddc0:	00bfff84 	movi	r2,-2
  80ddc4:	1884703a 	and	r2,r3,r2
  80ddc8:	1001703a 	wrctl	status,r2
  
  return context;
  80ddcc:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  80ddd0:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  80ddd4:	00802074 	movhi	r2,129
  80ddd8:	109fb104 	addi	r2,r2,32452
  80dddc:	10800017 	ldw	r2,0(r2)
  80dde0:	10800c43 	ldbu	r2,49(r2)
  80dde4:	10803fcc 	andi	r2,r2,255
  80dde8:	e0bfff15 	stw	r2,-4(fp)
  80ddec:	e0ffff17 	ldw	r3,-4(fp)
  80ddf0:	1805003a 	cmpeq	r2,r3,zero
  80ddf4:	1000041e 	bne	r2,zero,80de08 <OSSemPend+0x1dc>
  80ddf8:	e0ffff17 	ldw	r3,-4(fp)
  80ddfc:	188000a0 	cmpeqi	r2,r3,2
  80de00:	1000041e 	bne	r2,zero,80de14 <OSSemPend+0x1e8>
  80de04:	00000706 	br	80de24 <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
  80de08:	e0bffe17 	ldw	r2,-8(fp)
  80de0c:	10000005 	stb	zero,0(r2)
             break;
  80de10:	00000c06 	br	80de44 <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  80de14:	e0fffe17 	ldw	r3,-8(fp)
  80de18:	00800384 	movi	r2,14
  80de1c:	18800005 	stb	r2,0(r3)
             break;
  80de20:	00000806 	br	80de44 <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
  80de24:	00802074 	movhi	r2,129
  80de28:	109fb104 	addi	r2,r2,32452
  80de2c:	11000017 	ldw	r4,0(r2)
  80de30:	e17ffc17 	ldw	r5,-16(fp)
  80de34:	08094840 	call	809484 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  80de38:	e0fffe17 	ldw	r3,-8(fp)
  80de3c:	00800284 	movi	r2,10
  80de40:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  80de44:	00802074 	movhi	r2,129
  80de48:	109fb104 	addi	r2,r2,32452
  80de4c:	10800017 	ldw	r2,0(r2)
  80de50:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  80de54:	00802074 	movhi	r2,129
  80de58:	109fb104 	addi	r2,r2,32452
  80de5c:	10800017 	ldw	r2,0(r2)
  80de60:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  80de64:	00802074 	movhi	r2,129
  80de68:	109fb104 	addi	r2,r2,32452
  80de6c:	10800017 	ldw	r2,0(r2)
  80de70:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  80de74:	00802074 	movhi	r2,129
  80de78:	109fb104 	addi	r2,r2,32452
  80de7c:	10800017 	ldw	r2,0(r2)
  80de80:	10000815 	stw	zero,32(r2)
  80de84:	e0bffb17 	ldw	r2,-20(fp)
  80de88:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80de8c:	e0bff617 	ldw	r2,-40(fp)
  80de90:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
  80de94:	e037883a 	mov	sp,fp
  80de98:	dfc00117 	ldw	ra,4(sp)
  80de9c:	df000017 	ldw	fp,0(sp)
  80dea0:	dec00204 	addi	sp,sp,8
  80dea4:	f800283a 	ret

0080dea8 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  80dea8:	defff504 	addi	sp,sp,-44
  80deac:	dfc00a15 	stw	ra,40(sp)
  80deb0:	df000915 	stw	fp,36(sp)
  80deb4:	df000904 	addi	fp,sp,36
  80deb8:	e13ffc15 	stw	r4,-16(fp)
  80debc:	e1bffe15 	stw	r6,-8(fp)
  80dec0:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80dec4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  80dec8:	e0bffe17 	ldw	r2,-8(fp)
  80decc:	1004c03a 	cmpne	r2,r2,zero
  80ded0:	1000021e 	bne	r2,zero,80dedc <OSSemPendAbort+0x34>
        return (0);
  80ded4:	e03fff15 	stw	zero,-4(fp)
  80ded8:	00004c06 	br	80e00c <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  80dedc:	e0bffc17 	ldw	r2,-16(fp)
  80dee0:	1004c03a 	cmpne	r2,r2,zero
  80dee4:	1000051e 	bne	r2,zero,80defc <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  80dee8:	e0fffe17 	ldw	r3,-8(fp)
  80deec:	00800104 	movi	r2,4
  80def0:	18800005 	stb	r2,0(r3)
        return (0);
  80def4:	e03fff15 	stw	zero,-4(fp)
  80def8:	00004406 	br	80e00c <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  80defc:	e0bffc17 	ldw	r2,-16(fp)
  80df00:	10800003 	ldbu	r2,0(r2)
  80df04:	10803fcc 	andi	r2,r2,255
  80df08:	108000e0 	cmpeqi	r2,r2,3
  80df0c:	1000051e 	bne	r2,zero,80df24 <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  80df10:	e0fffe17 	ldw	r3,-8(fp)
  80df14:	00800044 	movi	r2,1
  80df18:	18800005 	stb	r2,0(r3)
        return (0);
  80df1c:	e03fff15 	stw	zero,-4(fp)
  80df20:	00003a06 	br	80e00c <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80df24:	0005303a 	rdctl	r2,status
  80df28:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80df2c:	e0fff917 	ldw	r3,-28(fp)
  80df30:	00bfff84 	movi	r2,-2
  80df34:	1884703a 	and	r2,r3,r2
  80df38:	1001703a 	wrctl	status,r2
  
  return context;
  80df3c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80df40:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
  80df44:	e0bffc17 	ldw	r2,-16(fp)
  80df48:	10800283 	ldbu	r2,10(r2)
  80df4c:	10803fcc 	andi	r2,r2,255
  80df50:	1005003a 	cmpeq	r2,r2,zero
  80df54:	1000261e 	bne	r2,zero,80dff0 <OSSemPendAbort+0x148>
        nbr_tasks = 0;
  80df58:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
  80df5c:	e0bffd03 	ldbu	r2,-12(fp)
  80df60:	10800060 	cmpeqi	r2,r2,1
  80df64:	1000091e 	bne	r2,zero,80df8c <OSSemPendAbort+0xe4>
  80df68:	00000e06 	br	80dfa4 <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  80df6c:	e13ffc17 	ldw	r4,-16(fp)
  80df70:	000b883a 	mov	r5,zero
  80df74:	01800044 	movi	r6,1
  80df78:	01c00084 	movi	r7,2
  80df7c:	080908c0 	call	80908c <OS_EventTaskRdy>
                     nbr_tasks++;
  80df80:	e0bffb03 	ldbu	r2,-20(fp)
  80df84:	10800044 	addi	r2,r2,1
  80df88:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  80df8c:	e0bffc17 	ldw	r2,-16(fp)
  80df90:	10800283 	ldbu	r2,10(r2)
  80df94:	10803fcc 	andi	r2,r2,255
  80df98:	1004c03a 	cmpne	r2,r2,zero
  80df9c:	103ff31e 	bne	r2,zero,80df6c <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  80dfa0:	00000806 	br	80dfc4 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  80dfa4:	e13ffc17 	ldw	r4,-16(fp)
  80dfa8:	000b883a 	mov	r5,zero
  80dfac:	01800044 	movi	r6,1
  80dfb0:	01c00084 	movi	r7,2
  80dfb4:	080908c0 	call	80908c <OS_EventTaskRdy>
                 nbr_tasks++;
  80dfb8:	e0bffb03 	ldbu	r2,-20(fp)
  80dfbc:	10800044 	addi	r2,r2,1
  80dfc0:	e0bffb05 	stb	r2,-20(fp)
  80dfc4:	e0bffa17 	ldw	r2,-24(fp)
  80dfc8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80dfcc:	e0bff817 	ldw	r2,-32(fp)
  80dfd0:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  80dfd4:	0809acc0 	call	809acc <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  80dfd8:	e0fffe17 	ldw	r3,-8(fp)
  80dfdc:	00800384 	movi	r2,14
  80dfe0:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
  80dfe4:	e0bffb03 	ldbu	r2,-20(fp)
  80dfe8:	e0bfff15 	stw	r2,-4(fp)
  80dfec:	00000706 	br	80e00c <OSSemPendAbort+0x164>
  80dff0:	e0bffa17 	ldw	r2,-24(fp)
  80dff4:	e0bff715 	stw	r2,-36(fp)
  80dff8:	e0bff717 	ldw	r2,-36(fp)
  80dffc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80e000:	e0bffe17 	ldw	r2,-8(fp)
  80e004:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
  80e008:	e03fff15 	stw	zero,-4(fp)
  80e00c:	e0bfff17 	ldw	r2,-4(fp)
}
  80e010:	e037883a 	mov	sp,fp
  80e014:	dfc00117 	ldw	ra,4(sp)
  80e018:	df000017 	ldw	fp,0(sp)
  80e01c:	dec00204 	addi	sp,sp,8
  80e020:	f800283a 	ret

0080e024 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
  80e024:	defff704 	addi	sp,sp,-36
  80e028:	dfc00815 	stw	ra,32(sp)
  80e02c:	df000715 	stw	fp,28(sp)
  80e030:	df000704 	addi	fp,sp,28
  80e034:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80e038:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  80e03c:	e0bffe17 	ldw	r2,-8(fp)
  80e040:	1004c03a 	cmpne	r2,r2,zero
  80e044:	1000031e 	bne	r2,zero,80e054 <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
  80e048:	00800104 	movi	r2,4
  80e04c:	e0bfff15 	stw	r2,-4(fp)
  80e050:	00003806 	br	80e134 <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  80e054:	e0bffe17 	ldw	r2,-8(fp)
  80e058:	10800003 	ldbu	r2,0(r2)
  80e05c:	10803fcc 	andi	r2,r2,255
  80e060:	108000e0 	cmpeqi	r2,r2,3
  80e064:	1000031e 	bne	r2,zero,80e074 <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
  80e068:	00800044 	movi	r2,1
  80e06c:	e0bfff15 	stw	r2,-4(fp)
  80e070:	00003006 	br	80e134 <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e074:	0005303a 	rdctl	r2,status
  80e078:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e07c:	e0fffc17 	ldw	r3,-16(fp)
  80e080:	00bfff84 	movi	r2,-2
  80e084:	1884703a 	and	r2,r3,r2
  80e088:	1001703a 	wrctl	status,r2
  
  return context;
  80e08c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  80e090:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
  80e094:	e0bffe17 	ldw	r2,-8(fp)
  80e098:	10800283 	ldbu	r2,10(r2)
  80e09c:	10803fcc 	andi	r2,r2,255
  80e0a0:	1005003a 	cmpeq	r2,r2,zero
  80e0a4:	10000c1e 	bne	r2,zero,80e0d8 <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  80e0a8:	e13ffe17 	ldw	r4,-8(fp)
  80e0ac:	000b883a 	mov	r5,zero
  80e0b0:	01800044 	movi	r6,1
  80e0b4:	000f883a 	mov	r7,zero
  80e0b8:	080908c0 	call	80908c <OS_EventTaskRdy>
  80e0bc:	e0bffd17 	ldw	r2,-12(fp)
  80e0c0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e0c4:	e0bffb17 	ldw	r2,-20(fp)
  80e0c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  80e0cc:	0809acc0 	call	809acc <OS_Sched>
        return (OS_ERR_NONE);
  80e0d0:	e03fff15 	stw	zero,-4(fp)
  80e0d4:	00001706 	br	80e134 <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
  80e0d8:	e0bffe17 	ldw	r2,-8(fp)
  80e0dc:	1080020b 	ldhu	r2,8(r2)
  80e0e0:	10ffffcc 	andi	r3,r2,65535
  80e0e4:	00bfffd4 	movui	r2,65535
  80e0e8:	18800c26 	beq	r3,r2,80e11c <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
  80e0ec:	e0bffe17 	ldw	r2,-8(fp)
  80e0f0:	1080020b 	ldhu	r2,8(r2)
  80e0f4:	10800044 	addi	r2,r2,1
  80e0f8:	1007883a 	mov	r3,r2
  80e0fc:	e0bffe17 	ldw	r2,-8(fp)
  80e100:	10c0020d 	sth	r3,8(r2)
  80e104:	e0bffd17 	ldw	r2,-12(fp)
  80e108:	e0bffa15 	stw	r2,-24(fp)
  80e10c:	e0bffa17 	ldw	r2,-24(fp)
  80e110:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  80e114:	e03fff15 	stw	zero,-4(fp)
  80e118:	00000606 	br	80e134 <OSSemPost+0x110>
  80e11c:	e0bffd17 	ldw	r2,-12(fp)
  80e120:	e0bff915 	stw	r2,-28(fp)
  80e124:	e0bff917 	ldw	r2,-28(fp)
  80e128:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
  80e12c:	00800c84 	movi	r2,50
  80e130:	e0bfff15 	stw	r2,-4(fp)
  80e134:	e0bfff17 	ldw	r2,-4(fp)
}
  80e138:	e037883a 	mov	sp,fp
  80e13c:	dfc00117 	ldw	ra,4(sp)
  80e140:	df000017 	ldw	fp,0(sp)
  80e144:	dec00204 	addi	sp,sp,8
  80e148:	f800283a 	ret

0080e14c <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
  80e14c:	defff604 	addi	sp,sp,-40
  80e150:	df000915 	stw	fp,36(sp)
  80e154:	df000904 	addi	fp,sp,36
  80e158:	e13ffd15 	stw	r4,-12(fp)
  80e15c:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80e160:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  80e164:	e0bffd17 	ldw	r2,-12(fp)
  80e168:	1004c03a 	cmpne	r2,r2,zero
  80e16c:	1000031e 	bne	r2,zero,80e17c <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
  80e170:	00800104 	movi	r2,4
  80e174:	e0bfff15 	stw	r2,-4(fp)
  80e178:	00003b06 	br	80e268 <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
  80e17c:	e0bffe17 	ldw	r2,-8(fp)
  80e180:	1004c03a 	cmpne	r2,r2,zero
  80e184:	1000031e 	bne	r2,zero,80e194 <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
  80e188:	00800244 	movi	r2,9
  80e18c:	e0bfff15 	stw	r2,-4(fp)
  80e190:	00003506 	br	80e268 <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  80e194:	e0bffd17 	ldw	r2,-12(fp)
  80e198:	10800003 	ldbu	r2,0(r2)
  80e19c:	10803fcc 	andi	r2,r2,255
  80e1a0:	108000e0 	cmpeqi	r2,r2,3
  80e1a4:	1000031e 	bne	r2,zero,80e1b4 <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
  80e1a8:	00800044 	movi	r2,1
  80e1ac:	e0bfff15 	stw	r2,-4(fp)
  80e1b0:	00002d06 	br	80e268 <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e1b4:	0005303a 	rdctl	r2,status
  80e1b8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e1bc:	e0fff817 	ldw	r3,-32(fp)
  80e1c0:	00bfff84 	movi	r2,-2
  80e1c4:	1884703a 	and	r2,r3,r2
  80e1c8:	1001703a 	wrctl	status,r2
  
  return context;
  80e1cc:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  80e1d0:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
  80e1d4:	e0bffd17 	ldw	r2,-12(fp)
  80e1d8:	10c00283 	ldbu	r3,10(r2)
  80e1dc:	e0bffe17 	ldw	r2,-8(fp)
  80e1e0:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
  80e1e4:	e0bffd17 	ldw	r2,-12(fp)
  80e1e8:	108002c4 	addi	r2,r2,11
  80e1ec:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
  80e1f0:	e0bffe17 	ldw	r2,-8(fp)
  80e1f4:	10800084 	addi	r2,r2,2
  80e1f8:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  80e1fc:	e03ffa05 	stb	zero,-24(fp)
  80e200:	00000d06 	br	80e238 <OSSemQuery+0xec>
        *pdest++ = *psrc++;
  80e204:	e0bffc17 	ldw	r2,-16(fp)
  80e208:	10c00003 	ldbu	r3,0(r2)
  80e20c:	e0bffb17 	ldw	r2,-20(fp)
  80e210:	10c00005 	stb	r3,0(r2)
  80e214:	e0bffb17 	ldw	r2,-20(fp)
  80e218:	10800044 	addi	r2,r2,1
  80e21c:	e0bffb15 	stw	r2,-20(fp)
  80e220:	e0bffc17 	ldw	r2,-16(fp)
  80e224:	10800044 	addi	r2,r2,1
  80e228:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  80e22c:	e0bffa03 	ldbu	r2,-24(fp)
  80e230:	10800044 	addi	r2,r2,1
  80e234:	e0bffa05 	stb	r2,-24(fp)
  80e238:	e0bffa03 	ldbu	r2,-24(fp)
  80e23c:	108000f0 	cmpltui	r2,r2,3
  80e240:	103ff01e 	bne	r2,zero,80e204 <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
  80e244:	e0bffd17 	ldw	r2,-12(fp)
  80e248:	10c0020b 	ldhu	r3,8(r2)
  80e24c:	e0bffe17 	ldw	r2,-8(fp)
  80e250:	10c0000d 	sth	r3,0(r2)
  80e254:	e0bff917 	ldw	r2,-28(fp)
  80e258:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e25c:	e0bff717 	ldw	r2,-36(fp)
  80e260:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80e264:	e03fff15 	stw	zero,-4(fp)
  80e268:	e0bfff17 	ldw	r2,-4(fp)
}
  80e26c:	e037883a 	mov	sp,fp
  80e270:	df000017 	ldw	fp,0(sp)
  80e274:	dec00104 	addi	sp,sp,4
  80e278:	f800283a 	ret

0080e27c <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
  80e27c:	defff904 	addi	sp,sp,-28
  80e280:	df000615 	stw	fp,24(sp)
  80e284:	df000604 	addi	fp,sp,24
  80e288:	e13ffd15 	stw	r4,-12(fp)
  80e28c:	e1bfff15 	stw	r6,-4(fp)
  80e290:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80e294:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  80e298:	e0bfff17 	ldw	r2,-4(fp)
  80e29c:	1005003a 	cmpeq	r2,r2,zero
  80e2a0:	1000331e 	bne	r2,zero,80e370 <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  80e2a4:	e0bffd17 	ldw	r2,-12(fp)
  80e2a8:	1004c03a 	cmpne	r2,r2,zero
  80e2ac:	1000041e 	bne	r2,zero,80e2c0 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  80e2b0:	e0ffff17 	ldw	r3,-4(fp)
  80e2b4:	00800104 	movi	r2,4
  80e2b8:	18800005 	stb	r2,0(r3)
        return;
  80e2bc:	00002c06 	br	80e370 <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  80e2c0:	e0bffd17 	ldw	r2,-12(fp)
  80e2c4:	10800003 	ldbu	r2,0(r2)
  80e2c8:	10803fcc 	andi	r2,r2,255
  80e2cc:	108000e0 	cmpeqi	r2,r2,3
  80e2d0:	1000041e 	bne	r2,zero,80e2e4 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
  80e2d4:	e0ffff17 	ldw	r3,-4(fp)
  80e2d8:	00800044 	movi	r2,1
  80e2dc:	18800005 	stb	r2,0(r3)
        return;
  80e2e0:	00002306 	br	80e370 <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e2e4:	0005303a 	rdctl	r2,status
  80e2e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e2ec:	e0fffb17 	ldw	r3,-20(fp)
  80e2f0:	00bfff84 	movi	r2,-2
  80e2f4:	1884703a 	and	r2,r3,r2
  80e2f8:	1001703a 	wrctl	status,r2
  
  return context;
  80e2fc:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  80e300:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
  80e304:	e0bfff17 	ldw	r2,-4(fp)
  80e308:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
  80e30c:	e0bffd17 	ldw	r2,-12(fp)
  80e310:	1080020b 	ldhu	r2,8(r2)
  80e314:	10bfffcc 	andi	r2,r2,65535
  80e318:	1005003a 	cmpeq	r2,r2,zero
  80e31c:	1000041e 	bne	r2,zero,80e330 <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
  80e320:	e0fffd17 	ldw	r3,-12(fp)
  80e324:	e0bffe0b 	ldhu	r2,-8(fp)
  80e328:	1880020d 	sth	r2,8(r3)
  80e32c:	00000c06 	br	80e360 <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
  80e330:	e0bffd17 	ldw	r2,-12(fp)
  80e334:	10800283 	ldbu	r2,10(r2)
  80e338:	10803fcc 	andi	r2,r2,255
  80e33c:	1004c03a 	cmpne	r2,r2,zero
  80e340:	1000041e 	bne	r2,zero,80e354 <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
  80e344:	e0fffd17 	ldw	r3,-12(fp)
  80e348:	e0bffe0b 	ldhu	r2,-8(fp)
  80e34c:	1880020d 	sth	r2,8(r3)
  80e350:	00000306 	br	80e360 <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
  80e354:	e0ffff17 	ldw	r3,-4(fp)
  80e358:	00801244 	movi	r2,73
  80e35c:	18800005 	stb	r2,0(r3)
  80e360:	e0bffc17 	ldw	r2,-16(fp)
  80e364:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e368:	e0bffa17 	ldw	r2,-24(fp)
  80e36c:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
  80e370:	e037883a 	mov	sp,fp
  80e374:	df000017 	ldw	fp,0(sp)
  80e378:	dec00104 	addi	sp,sp,4
  80e37c:	f800283a 	ret

0080e380 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
  80e380:	defff004 	addi	sp,sp,-64
  80e384:	dfc00f15 	stw	ra,60(sp)
  80e388:	df000e15 	stw	fp,56(sp)
  80e38c:	df000e04 	addi	fp,sp,56
  80e390:	e13ffd05 	stb	r4,-12(fp)
  80e394:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
  80e398:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
  80e39c:	e0bffd03 	ldbu	r2,-12(fp)
  80e3a0:	10800530 	cmpltui	r2,r2,20
  80e3a4:	1000061e 	bne	r2,zero,80e3c0 <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
  80e3a8:	e0bffd03 	ldbu	r2,-12(fp)
  80e3ac:	10803fe0 	cmpeqi	r2,r2,255
  80e3b0:	1000031e 	bne	r2,zero,80e3c0 <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
  80e3b4:	00800a84 	movi	r2,42
  80e3b8:	e0bfff15 	stw	r2,-4(fp)
  80e3bc:	00014706 	br	80e8dc <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
  80e3c0:	e0bffe03 	ldbu	r2,-8(fp)
  80e3c4:	10800530 	cmpltui	r2,r2,20
  80e3c8:	1000031e 	bne	r2,zero,80e3d8 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
  80e3cc:	00800a84 	movi	r2,42
  80e3d0:	e0bfff15 	stw	r2,-4(fp)
  80e3d4:	00014106 	br	80e8dc <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e3d8:	0005303a 	rdctl	r2,status
  80e3dc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e3e0:	e0fff617 	ldw	r3,-40(fp)
  80e3e4:	00bfff84 	movi	r2,-2
  80e3e8:	1884703a 	and	r2,r3,r2
  80e3ec:	1001703a 	wrctl	status,r2
  
  return context;
  80e3f0:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80e3f4:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
  80e3f8:	e0bffe03 	ldbu	r2,-8(fp)
  80e3fc:	00c020b4 	movhi	r3,130
  80e400:	18fc7604 	addi	r3,r3,-3624
  80e404:	1085883a 	add	r2,r2,r2
  80e408:	1085883a 	add	r2,r2,r2
  80e40c:	10c5883a 	add	r2,r2,r3
  80e410:	10800017 	ldw	r2,0(r2)
  80e414:	1005003a 	cmpeq	r2,r2,zero
  80e418:	1000071e 	bne	r2,zero,80e438 <OSTaskChangePrio+0xb8>
  80e41c:	e0bff717 	ldw	r2,-36(fp)
  80e420:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e424:	e0bff517 	ldw	r2,-44(fp)
  80e428:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
  80e42c:	00800a04 	movi	r2,40
  80e430:	e0bfff15 	stw	r2,-4(fp)
  80e434:	00012906 	br	80e8dc <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
  80e438:	e0bffd03 	ldbu	r2,-12(fp)
  80e43c:	10803fd8 	cmpnei	r2,r2,255
  80e440:	1000051e 	bne	r2,zero,80e458 <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
  80e444:	00802074 	movhi	r2,129
  80e448:	109fb104 	addi	r2,r2,32452
  80e44c:	10800017 	ldw	r2,0(r2)
  80e450:	10800c83 	ldbu	r2,50(r2)
  80e454:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
  80e458:	e0bffd03 	ldbu	r2,-12(fp)
  80e45c:	00c020b4 	movhi	r3,130
  80e460:	18fc7604 	addi	r3,r3,-3624
  80e464:	1085883a 	add	r2,r2,r2
  80e468:	1085883a 	add	r2,r2,r2
  80e46c:	10c5883a 	add	r2,r2,r3
  80e470:	10800017 	ldw	r2,0(r2)
  80e474:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
  80e478:	e0bffa17 	ldw	r2,-24(fp)
  80e47c:	1004c03a 	cmpne	r2,r2,zero
  80e480:	1000071e 	bne	r2,zero,80e4a0 <OSTaskChangePrio+0x120>
  80e484:	e0bff717 	ldw	r2,-36(fp)
  80e488:	e0bff415 	stw	r2,-48(fp)
  80e48c:	e0bff417 	ldw	r2,-48(fp)
  80e490:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
  80e494:	00800a44 	movi	r2,41
  80e498:	e0bfff15 	stw	r2,-4(fp)
  80e49c:	00010f06 	br	80e8dc <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
  80e4a0:	e0bffa17 	ldw	r2,-24(fp)
  80e4a4:	10800058 	cmpnei	r2,r2,1
  80e4a8:	1000071e 	bne	r2,zero,80e4c8 <OSTaskChangePrio+0x148>
  80e4ac:	e0bff717 	ldw	r2,-36(fp)
  80e4b0:	e0bff315 	stw	r2,-52(fp)
  80e4b4:	e0bff317 	ldw	r2,-52(fp)
  80e4b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
  80e4bc:	008010c4 	movi	r2,67
  80e4c0:	e0bfff15 	stw	r2,-4(fp)
  80e4c4:	00010506 	br	80e8dc <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
  80e4c8:	e0bffe03 	ldbu	r2,-8(fp)
  80e4cc:	1004d0fa 	srli	r2,r2,3
  80e4d0:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
  80e4d4:	e0bffe03 	ldbu	r2,-8(fp)
  80e4d8:	108001cc 	andi	r2,r2,7
  80e4dc:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
  80e4e0:	e0fff983 	ldbu	r3,-26(fp)
  80e4e4:	00800044 	movi	r2,1
  80e4e8:	10c4983a 	sll	r2,r2,r3
  80e4ec:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
  80e4f0:	e0fff943 	ldbu	r3,-27(fp)
  80e4f4:	00800044 	movi	r2,1
  80e4f8:	10c4983a 	sll	r2,r2,r3
  80e4fc:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
  80e500:	e0bffd03 	ldbu	r2,-12(fp)
  80e504:	00c020b4 	movhi	r3,130
  80e508:	18fc7604 	addi	r3,r3,-3624
  80e50c:	1085883a 	add	r2,r2,r2
  80e510:	1085883a 	add	r2,r2,r2
  80e514:	10c5883a 	add	r2,r2,r3
  80e518:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
  80e51c:	e0bffe03 	ldbu	r2,-8(fp)
  80e520:	00c020b4 	movhi	r3,130
  80e524:	18fc7604 	addi	r3,r3,-3624
  80e528:	1085883a 	add	r2,r2,r2
  80e52c:	1085883a 	add	r2,r2,r2
  80e530:	10c7883a 	add	r3,r2,r3
  80e534:	e0bffa17 	ldw	r2,-24(fp)
  80e538:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
  80e53c:	e0bffa17 	ldw	r2,-24(fp)
  80e540:	10800d03 	ldbu	r2,52(r2)
  80e544:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
  80e548:	e0bffa17 	ldw	r2,-24(fp)
  80e54c:	10800d83 	ldbu	r2,54(r2)
  80e550:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
  80e554:	e0bffa17 	ldw	r2,-24(fp)
  80e558:	10800d43 	ldbu	r2,53(r2)
  80e55c:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
  80e560:	e0fff903 	ldbu	r3,-28(fp)
  80e564:	00802074 	movhi	r2,129
  80e568:	109fae44 	addi	r2,r2,32441
  80e56c:	10c5883a 	add	r2,r2,r3
  80e570:	10c00003 	ldbu	r3,0(r2)
  80e574:	e0bff803 	ldbu	r2,-32(fp)
  80e578:	1884703a 	and	r2,r3,r2
  80e57c:	10803fcc 	andi	r2,r2,255
  80e580:	1005003a 	cmpeq	r2,r2,zero
  80e584:	1000381e 	bne	r2,zero,80e668 <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
  80e588:	e13ff903 	ldbu	r4,-28(fp)
  80e58c:	e0fff903 	ldbu	r3,-28(fp)
  80e590:	00802074 	movhi	r2,129
  80e594:	109fae44 	addi	r2,r2,32441
  80e598:	10c5883a 	add	r2,r2,r3
  80e59c:	10800003 	ldbu	r2,0(r2)
  80e5a0:	1007883a 	mov	r3,r2
  80e5a4:	e0bff803 	ldbu	r2,-32(fp)
  80e5a8:	0084303a 	nor	r2,zero,r2
  80e5ac:	1884703a 	and	r2,r3,r2
  80e5b0:	1007883a 	mov	r3,r2
  80e5b4:	00802074 	movhi	r2,129
  80e5b8:	109fae44 	addi	r2,r2,32441
  80e5bc:	1105883a 	add	r2,r2,r4
  80e5c0:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
  80e5c4:	e0fff903 	ldbu	r3,-28(fp)
  80e5c8:	00802074 	movhi	r2,129
  80e5cc:	109fae44 	addi	r2,r2,32441
  80e5d0:	10c5883a 	add	r2,r2,r3
  80e5d4:	10800003 	ldbu	r2,0(r2)
  80e5d8:	10803fcc 	andi	r2,r2,255
  80e5dc:	1004c03a 	cmpne	r2,r2,zero
  80e5e0:	10000b1e 	bne	r2,zero,80e610 <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
  80e5e4:	e0bff843 	ldbu	r2,-31(fp)
  80e5e8:	0084303a 	nor	r2,zero,r2
  80e5ec:	1007883a 	mov	r3,r2
  80e5f0:	00802074 	movhi	r2,129
  80e5f4:	109fae04 	addi	r2,r2,32440
  80e5f8:	10800003 	ldbu	r2,0(r2)
  80e5fc:	1884703a 	and	r2,r3,r2
  80e600:	1007883a 	mov	r3,r2
  80e604:	00802074 	movhi	r2,129
  80e608:	109fae04 	addi	r2,r2,32440
  80e60c:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
  80e610:	00802074 	movhi	r2,129
  80e614:	109fae04 	addi	r2,r2,32440
  80e618:	10c00003 	ldbu	r3,0(r2)
  80e61c:	e0bff8c3 	ldbu	r2,-29(fp)
  80e620:	1884b03a 	or	r2,r3,r2
  80e624:	1007883a 	mov	r3,r2
  80e628:	00802074 	movhi	r2,129
  80e62c:	109fae04 	addi	r2,r2,32440
  80e630:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
  80e634:	e13ff983 	ldbu	r4,-26(fp)
  80e638:	e0fff983 	ldbu	r3,-26(fp)
  80e63c:	00802074 	movhi	r2,129
  80e640:	109fae44 	addi	r2,r2,32441
  80e644:	10c5883a 	add	r2,r2,r3
  80e648:	10c00003 	ldbu	r3,0(r2)
  80e64c:	e0bff883 	ldbu	r2,-30(fp)
  80e650:	1884b03a 	or	r2,r3,r2
  80e654:	1007883a 	mov	r3,r2
  80e658:	00802074 	movhi	r2,129
  80e65c:	109fae44 	addi	r2,r2,32441
  80e660:	1105883a 	add	r2,r2,r4
  80e664:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
  80e668:	e0bffa17 	ldw	r2,-24(fp)
  80e66c:	10800717 	ldw	r2,28(r2)
  80e670:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
  80e674:	e0bffc17 	ldw	r2,-16(fp)
  80e678:	1005003a 	cmpeq	r2,r2,zero
  80e67c:	1000341e 	bne	r2,zero,80e750 <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
  80e680:	e13ff903 	ldbu	r4,-28(fp)
  80e684:	e0fff903 	ldbu	r3,-28(fp)
  80e688:	e0bffc17 	ldw	r2,-16(fp)
  80e68c:	1885883a 	add	r2,r3,r2
  80e690:	10800204 	addi	r2,r2,8
  80e694:	108000c3 	ldbu	r2,3(r2)
  80e698:	1007883a 	mov	r3,r2
  80e69c:	e0bff803 	ldbu	r2,-32(fp)
  80e6a0:	0084303a 	nor	r2,zero,r2
  80e6a4:	1884703a 	and	r2,r3,r2
  80e6a8:	1007883a 	mov	r3,r2
  80e6ac:	e0bffc17 	ldw	r2,-16(fp)
  80e6b0:	2085883a 	add	r2,r4,r2
  80e6b4:	10800204 	addi	r2,r2,8
  80e6b8:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
  80e6bc:	e0fff903 	ldbu	r3,-28(fp)
  80e6c0:	e0bffc17 	ldw	r2,-16(fp)
  80e6c4:	1885883a 	add	r2,r3,r2
  80e6c8:	10800204 	addi	r2,r2,8
  80e6cc:	108000c3 	ldbu	r2,3(r2)
  80e6d0:	10803fcc 	andi	r2,r2,255
  80e6d4:	1004c03a 	cmpne	r2,r2,zero
  80e6d8:	1000091e 	bne	r2,zero,80e700 <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
  80e6dc:	e0bffc17 	ldw	r2,-16(fp)
  80e6e0:	10800283 	ldbu	r2,10(r2)
  80e6e4:	1007883a 	mov	r3,r2
  80e6e8:	e0bff843 	ldbu	r2,-31(fp)
  80e6ec:	0084303a 	nor	r2,zero,r2
  80e6f0:	1884703a 	and	r2,r3,r2
  80e6f4:	1007883a 	mov	r3,r2
  80e6f8:	e0bffc17 	ldw	r2,-16(fp)
  80e6fc:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
  80e700:	e0bffc17 	ldw	r2,-16(fp)
  80e704:	10c00283 	ldbu	r3,10(r2)
  80e708:	e0bff8c3 	ldbu	r2,-29(fp)
  80e70c:	1884b03a 	or	r2,r3,r2
  80e710:	1007883a 	mov	r3,r2
  80e714:	e0bffc17 	ldw	r2,-16(fp)
  80e718:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
  80e71c:	e13ff983 	ldbu	r4,-26(fp)
  80e720:	e0fff983 	ldbu	r3,-26(fp)
  80e724:	e0bffc17 	ldw	r2,-16(fp)
  80e728:	1885883a 	add	r2,r3,r2
  80e72c:	10800204 	addi	r2,r2,8
  80e730:	10c000c3 	ldbu	r3,3(r2)
  80e734:	e0bff883 	ldbu	r2,-30(fp)
  80e738:	1884b03a 	or	r2,r3,r2
  80e73c:	1007883a 	mov	r3,r2
  80e740:	e0bffc17 	ldw	r2,-16(fp)
  80e744:	2085883a 	add	r2,r4,r2
  80e748:	10800204 	addi	r2,r2,8
  80e74c:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
  80e750:	e0bffa17 	ldw	r2,-24(fp)
  80e754:	10800817 	ldw	r2,32(r2)
  80e758:	1005003a 	cmpeq	r2,r2,zero
  80e75c:	1000441e 	bne	r2,zero,80e870 <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
  80e760:	e0bffa17 	ldw	r2,-24(fp)
  80e764:	10800817 	ldw	r2,32(r2)
  80e768:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
  80e76c:	e0bffb17 	ldw	r2,-20(fp)
  80e770:	10800017 	ldw	r2,0(r2)
  80e774:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
  80e778:	00003a06 	br	80e864 <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
  80e77c:	e13ff903 	ldbu	r4,-28(fp)
  80e780:	e0fff903 	ldbu	r3,-28(fp)
  80e784:	e0bffc17 	ldw	r2,-16(fp)
  80e788:	1885883a 	add	r2,r3,r2
  80e78c:	10800204 	addi	r2,r2,8
  80e790:	108000c3 	ldbu	r2,3(r2)
  80e794:	1007883a 	mov	r3,r2
  80e798:	e0bff803 	ldbu	r2,-32(fp)
  80e79c:	0084303a 	nor	r2,zero,r2
  80e7a0:	1884703a 	and	r2,r3,r2
  80e7a4:	1007883a 	mov	r3,r2
  80e7a8:	e0bffc17 	ldw	r2,-16(fp)
  80e7ac:	2085883a 	add	r2,r4,r2
  80e7b0:	10800204 	addi	r2,r2,8
  80e7b4:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
  80e7b8:	e0fff903 	ldbu	r3,-28(fp)
  80e7bc:	e0bffc17 	ldw	r2,-16(fp)
  80e7c0:	1885883a 	add	r2,r3,r2
  80e7c4:	10800204 	addi	r2,r2,8
  80e7c8:	108000c3 	ldbu	r2,3(r2)
  80e7cc:	10803fcc 	andi	r2,r2,255
  80e7d0:	1004c03a 	cmpne	r2,r2,zero
  80e7d4:	1000091e 	bne	r2,zero,80e7fc <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
  80e7d8:	e0bffc17 	ldw	r2,-16(fp)
  80e7dc:	10800283 	ldbu	r2,10(r2)
  80e7e0:	1007883a 	mov	r3,r2
  80e7e4:	e0bff843 	ldbu	r2,-31(fp)
  80e7e8:	0084303a 	nor	r2,zero,r2
  80e7ec:	1884703a 	and	r2,r3,r2
  80e7f0:	1007883a 	mov	r3,r2
  80e7f4:	e0bffc17 	ldw	r2,-16(fp)
  80e7f8:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
  80e7fc:	e0bffc17 	ldw	r2,-16(fp)
  80e800:	10c00283 	ldbu	r3,10(r2)
  80e804:	e0bff8c3 	ldbu	r2,-29(fp)
  80e808:	1884b03a 	or	r2,r3,r2
  80e80c:	1007883a 	mov	r3,r2
  80e810:	e0bffc17 	ldw	r2,-16(fp)
  80e814:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
  80e818:	e13ff983 	ldbu	r4,-26(fp)
  80e81c:	e0fff983 	ldbu	r3,-26(fp)
  80e820:	e0bffc17 	ldw	r2,-16(fp)
  80e824:	1885883a 	add	r2,r3,r2
  80e828:	10800204 	addi	r2,r2,8
  80e82c:	10c000c3 	ldbu	r3,3(r2)
  80e830:	e0bff883 	ldbu	r2,-30(fp)
  80e834:	1884b03a 	or	r2,r3,r2
  80e838:	1007883a 	mov	r3,r2
  80e83c:	e0bffc17 	ldw	r2,-16(fp)
  80e840:	2085883a 	add	r2,r4,r2
  80e844:	10800204 	addi	r2,r2,8
  80e848:	10c000c5 	stb	r3,3(r2)
            pevents++;
  80e84c:	e0bffb17 	ldw	r2,-20(fp)
  80e850:	10800104 	addi	r2,r2,4
  80e854:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
  80e858:	e0bffb17 	ldw	r2,-20(fp)
  80e85c:	10800017 	ldw	r2,0(r2)
  80e860:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
  80e864:	e0bffc17 	ldw	r2,-16(fp)
  80e868:	1004c03a 	cmpne	r2,r2,zero
  80e86c:	103fc31e 	bne	r2,zero,80e77c <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
  80e870:	e0fffa17 	ldw	r3,-24(fp)
  80e874:	e0bffe03 	ldbu	r2,-8(fp)
  80e878:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
  80e87c:	e0fffa17 	ldw	r3,-24(fp)
  80e880:	e0bff983 	ldbu	r2,-26(fp)
  80e884:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
  80e888:	e0fffa17 	ldw	r3,-24(fp)
  80e88c:	e0bff943 	ldbu	r2,-27(fp)
  80e890:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
  80e894:	e0fffa17 	ldw	r3,-24(fp)
  80e898:	e0bff8c3 	ldbu	r2,-29(fp)
  80e89c:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
  80e8a0:	e0fffa17 	ldw	r3,-24(fp)
  80e8a4:	e0bff883 	ldbu	r2,-30(fp)
  80e8a8:	18800d45 	stb	r2,53(r3)
  80e8ac:	e0bff717 	ldw	r2,-36(fp)
  80e8b0:	e0bff215 	stw	r2,-56(fp)
  80e8b4:	e0bff217 	ldw	r2,-56(fp)
  80e8b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  80e8bc:	00802074 	movhi	r2,129
  80e8c0:	109fa244 	addi	r2,r2,32393
  80e8c4:	10800003 	ldbu	r2,0(r2)
  80e8c8:	10803fcc 	andi	r2,r2,255
  80e8cc:	10800058 	cmpnei	r2,r2,1
  80e8d0:	1000011e 	bne	r2,zero,80e8d8 <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
  80e8d4:	0809acc0 	call	809acc <OS_Sched>
    }
    return (OS_ERR_NONE);
  80e8d8:	e03fff15 	stw	zero,-4(fp)
  80e8dc:	e0bfff17 	ldw	r2,-4(fp)
}
  80e8e0:	e037883a 	mov	sp,fp
  80e8e4:	dfc00117 	ldw	ra,4(sp)
  80e8e8:	df000017 	ldw	fp,0(sp)
  80e8ec:	dec00204 	addi	sp,sp,8
  80e8f0:	f800283a 	ret

0080e8f4 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
  80e8f4:	deffed04 	addi	sp,sp,-76
  80e8f8:	dfc01215 	stw	ra,72(sp)
  80e8fc:	df001115 	stw	fp,68(sp)
  80e900:	df001104 	addi	fp,sp,68
  80e904:	e13ffb15 	stw	r4,-20(fp)
  80e908:	e17ffc15 	stw	r5,-16(fp)
  80e90c:	e1bffd15 	stw	r6,-12(fp)
  80e910:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  80e914:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  80e918:	e0bffe03 	ldbu	r2,-8(fp)
  80e91c:	10800570 	cmpltui	r2,r2,21
  80e920:	1000031e 	bne	r2,zero,80e930 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
  80e924:	00800a84 	movi	r2,42
  80e928:	e0bfff15 	stw	r2,-4(fp)
  80e92c:	00006006 	br	80eab0 <OSTaskCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e930:	0005303a 	rdctl	r2,status
  80e934:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e938:	e0fff717 	ldw	r3,-36(fp)
  80e93c:	00bfff84 	movi	r2,-2
  80e940:	1884703a 	and	r2,r3,r2
  80e944:	1001703a 	wrctl	status,r2
  
  return context;
  80e948:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80e94c:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  80e950:	00802074 	movhi	r2,129
  80e954:	109fb004 	addi	r2,r2,32448
  80e958:	10800003 	ldbu	r2,0(r2)
  80e95c:	10803fcc 	andi	r2,r2,255
  80e960:	1005003a 	cmpeq	r2,r2,zero
  80e964:	1000071e 	bne	r2,zero,80e984 <OSTaskCreate+0x90>
  80e968:	e0bff817 	ldw	r2,-32(fp)
  80e96c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e970:	e0bff617 	ldw	r2,-40(fp)
  80e974:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  80e978:	00800f04 	movi	r2,60
  80e97c:	e0bfff15 	stw	r2,-4(fp)
  80e980:	00004b06 	br	80eab0 <OSTaskCreate+0x1bc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  80e984:	e0bffe03 	ldbu	r2,-8(fp)
  80e988:	00c020b4 	movhi	r3,130
  80e98c:	18fc7604 	addi	r3,r3,-3624
  80e990:	1085883a 	add	r2,r2,r2
  80e994:	1085883a 	add	r2,r2,r2
  80e998:	10c5883a 	add	r2,r2,r3
  80e99c:	10800017 	ldw	r2,0(r2)
  80e9a0:	1004c03a 	cmpne	r2,r2,zero
  80e9a4:	10003c1e 	bne	r2,zero,80ea98 <OSTaskCreate+0x1a4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  80e9a8:	e0bffe03 	ldbu	r2,-8(fp)
  80e9ac:	00c020b4 	movhi	r3,130
  80e9b0:	18fc7604 	addi	r3,r3,-3624
  80e9b4:	1085883a 	add	r2,r2,r2
  80e9b8:	1085883a 	add	r2,r2,r2
  80e9bc:	10c7883a 	add	r3,r2,r3
  80e9c0:	00800044 	movi	r2,1
  80e9c4:	18800015 	stw	r2,0(r3)
  80e9c8:	e0bff817 	ldw	r2,-32(fp)
  80e9cc:	e0bff515 	stw	r2,-44(fp)
  80e9d0:	e0bff517 	ldw	r2,-44(fp)
  80e9d4:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
  80e9d8:	e13ffb17 	ldw	r4,-20(fp)
  80e9dc:	e17ffc17 	ldw	r5,-16(fp)
  80e9e0:	e1bffd17 	ldw	r6,-12(fp)
  80e9e4:	000f883a 	mov	r7,zero
  80e9e8:	08137a00 	call	8137a0 <OSTaskStkInit>
  80e9ec:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
  80e9f0:	e13ffe03 	ldbu	r4,-8(fp)
  80e9f4:	d8000015 	stw	zero,0(sp)
  80e9f8:	d8000115 	stw	zero,4(sp)
  80e9fc:	d8000215 	stw	zero,8(sp)
  80ea00:	e17ffa17 	ldw	r5,-24(fp)
  80ea04:	000d883a 	mov	r6,zero
  80ea08:	000f883a 	mov	r7,zero
  80ea0c:	0809ed40 	call	809ed4 <OS_TCBInit>
  80ea10:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
  80ea14:	e0bff903 	ldbu	r2,-28(fp)
  80ea18:	1004c03a 	cmpne	r2,r2,zero
  80ea1c:	1000081e 	bne	r2,zero,80ea40 <OSTaskCreate+0x14c>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
  80ea20:	00802074 	movhi	r2,129
  80ea24:	109fa244 	addi	r2,r2,32393
  80ea28:	10800003 	ldbu	r2,0(r2)
  80ea2c:	10803fcc 	andi	r2,r2,255
  80ea30:	10800058 	cmpnei	r2,r2,1
  80ea34:	1000151e 	bne	r2,zero,80ea8c <OSTaskCreate+0x198>
                OS_Sched();
  80ea38:	0809acc0 	call	809acc <OS_Sched>
  80ea3c:	00001306 	br	80ea8c <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ea40:	0005303a 	rdctl	r2,status
  80ea44:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ea48:	e0fff417 	ldw	r3,-48(fp)
  80ea4c:	00bfff84 	movi	r2,-2
  80ea50:	1884703a 	and	r2,r3,r2
  80ea54:	1001703a 	wrctl	status,r2
  
  return context;
  80ea58:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  80ea5c:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
  80ea60:	e0bffe03 	ldbu	r2,-8(fp)
  80ea64:	00c020b4 	movhi	r3,130
  80ea68:	18fc7604 	addi	r3,r3,-3624
  80ea6c:	1085883a 	add	r2,r2,r2
  80ea70:	1085883a 	add	r2,r2,r2
  80ea74:	10c5883a 	add	r2,r2,r3
  80ea78:	10000015 	stw	zero,0(r2)
  80ea7c:	e0bff817 	ldw	r2,-32(fp)
  80ea80:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ea84:	e0bff317 	ldw	r2,-52(fp)
  80ea88:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  80ea8c:	e0bff903 	ldbu	r2,-28(fp)
  80ea90:	e0bfff15 	stw	r2,-4(fp)
  80ea94:	00000606 	br	80eab0 <OSTaskCreate+0x1bc>
  80ea98:	e0bff817 	ldw	r2,-32(fp)
  80ea9c:	e0bff215 	stw	r2,-56(fp)
  80eaa0:	e0bff217 	ldw	r2,-56(fp)
  80eaa4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  80eaa8:	00800a04 	movi	r2,40
  80eaac:	e0bfff15 	stw	r2,-4(fp)
  80eab0:	e0bfff17 	ldw	r2,-4(fp)
}
  80eab4:	e037883a 	mov	sp,fp
  80eab8:	dfc00117 	ldw	ra,4(sp)
  80eabc:	df000017 	ldw	fp,0(sp)
  80eac0:	dec00204 	addi	sp,sp,8
  80eac4:	f800283a 	ret

0080eac8 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
  80eac8:	deffeb04 	addi	sp,sp,-84
  80eacc:	dfc01415 	stw	ra,80(sp)
  80ead0:	df001315 	stw	fp,76(sp)
  80ead4:	df001304 	addi	fp,sp,76
  80ead8:	e13ff915 	stw	r4,-28(fp)
  80eadc:	e17ffa15 	stw	r5,-24(fp)
  80eae0:	e1bffb15 	stw	r6,-20(fp)
  80eae4:	e0800217 	ldw	r2,8(fp)
  80eae8:	e0c00617 	ldw	r3,24(fp)
  80eaec:	e1fffc05 	stb	r7,-16(fp)
  80eaf0:	e0bffd0d 	sth	r2,-12(fp)
  80eaf4:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  80eaf8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  80eafc:	e0bffc03 	ldbu	r2,-16(fp)
  80eb00:	10800570 	cmpltui	r2,r2,21
  80eb04:	1000031e 	bne	r2,zero,80eb14 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
  80eb08:	00800a84 	movi	r2,42
  80eb0c:	e0bfff15 	stw	r2,-4(fp)
  80eb10:	00006706 	br	80ecb0 <OSTaskCreateExt+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80eb14:	0005303a 	rdctl	r2,status
  80eb18:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80eb1c:	e0fff517 	ldw	r3,-44(fp)
  80eb20:	00bfff84 	movi	r2,-2
  80eb24:	1884703a 	and	r2,r3,r2
  80eb28:	1001703a 	wrctl	status,r2
  
  return context;
  80eb2c:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80eb30:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  80eb34:	00802074 	movhi	r2,129
  80eb38:	109fb004 	addi	r2,r2,32448
  80eb3c:	10800003 	ldbu	r2,0(r2)
  80eb40:	10803fcc 	andi	r2,r2,255
  80eb44:	1005003a 	cmpeq	r2,r2,zero
  80eb48:	1000071e 	bne	r2,zero,80eb68 <OSTaskCreateExt+0xa0>
  80eb4c:	e0bff617 	ldw	r2,-40(fp)
  80eb50:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80eb54:	e0bff417 	ldw	r2,-48(fp)
  80eb58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  80eb5c:	00800f04 	movi	r2,60
  80eb60:	e0bfff15 	stw	r2,-4(fp)
  80eb64:	00005206 	br	80ecb0 <OSTaskCreateExt+0x1e8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  80eb68:	e0bffc03 	ldbu	r2,-16(fp)
  80eb6c:	00c020b4 	movhi	r3,130
  80eb70:	18fc7604 	addi	r3,r3,-3624
  80eb74:	1085883a 	add	r2,r2,r2
  80eb78:	1085883a 	add	r2,r2,r2
  80eb7c:	10c5883a 	add	r2,r2,r3
  80eb80:	10800017 	ldw	r2,0(r2)
  80eb84:	1004c03a 	cmpne	r2,r2,zero
  80eb88:	1000431e 	bne	r2,zero,80ec98 <OSTaskCreateExt+0x1d0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  80eb8c:	e0bffc03 	ldbu	r2,-16(fp)
  80eb90:	00c020b4 	movhi	r3,130
  80eb94:	18fc7604 	addi	r3,r3,-3624
  80eb98:	1085883a 	add	r2,r2,r2
  80eb9c:	1085883a 	add	r2,r2,r2
  80eba0:	10c7883a 	add	r3,r2,r3
  80eba4:	00800044 	movi	r2,1
  80eba8:	18800015 	stw	r2,0(r3)
  80ebac:	e0bff617 	ldw	r2,-40(fp)
  80ebb0:	e0bff315 	stw	r2,-52(fp)
  80ebb4:	e0bff317 	ldw	r2,-52(fp)
  80ebb8:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
  80ebbc:	e1bffe0b 	ldhu	r6,-8(fp)
  80ebc0:	e1000317 	ldw	r4,12(fp)
  80ebc4:	e1400417 	ldw	r5,16(fp)
  80ebc8:	080fd440 	call	80fd44 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
  80ebcc:	e1fffe0b 	ldhu	r7,-8(fp)
  80ebd0:	e13ff917 	ldw	r4,-28(fp)
  80ebd4:	e17ffa17 	ldw	r5,-24(fp)
  80ebd8:	e1bffb17 	ldw	r6,-20(fp)
  80ebdc:	08137a00 	call	8137a0 <OSTaskStkInit>
  80ebe0:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
  80ebe4:	e13ffc03 	ldbu	r4,-16(fp)
  80ebe8:	e1fffd0b 	ldhu	r7,-12(fp)
  80ebec:	e0fffe0b 	ldhu	r3,-8(fp)
  80ebf0:	e0800417 	ldw	r2,16(fp)
  80ebf4:	d8800015 	stw	r2,0(sp)
  80ebf8:	e0800517 	ldw	r2,20(fp)
  80ebfc:	d8800115 	stw	r2,4(sp)
  80ec00:	d8c00215 	stw	r3,8(sp)
  80ec04:	e17ff817 	ldw	r5,-32(fp)
  80ec08:	e1800317 	ldw	r6,12(fp)
  80ec0c:	0809ed40 	call	809ed4 <OS_TCBInit>
  80ec10:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
  80ec14:	e0bff703 	ldbu	r2,-36(fp)
  80ec18:	1004c03a 	cmpne	r2,r2,zero
  80ec1c:	1000081e 	bne	r2,zero,80ec40 <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
  80ec20:	00802074 	movhi	r2,129
  80ec24:	109fa244 	addi	r2,r2,32393
  80ec28:	10800003 	ldbu	r2,0(r2)
  80ec2c:	10803fcc 	andi	r2,r2,255
  80ec30:	10800058 	cmpnei	r2,r2,1
  80ec34:	1000151e 	bne	r2,zero,80ec8c <OSTaskCreateExt+0x1c4>
                OS_Sched();
  80ec38:	0809acc0 	call	809acc <OS_Sched>
  80ec3c:	00001306 	br	80ec8c <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ec40:	0005303a 	rdctl	r2,status
  80ec44:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ec48:	e0fff217 	ldw	r3,-56(fp)
  80ec4c:	00bfff84 	movi	r2,-2
  80ec50:	1884703a 	and	r2,r3,r2
  80ec54:	1001703a 	wrctl	status,r2
  
  return context;
  80ec58:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  80ec5c:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
  80ec60:	e0bffc03 	ldbu	r2,-16(fp)
  80ec64:	00c020b4 	movhi	r3,130
  80ec68:	18fc7604 	addi	r3,r3,-3624
  80ec6c:	1085883a 	add	r2,r2,r2
  80ec70:	1085883a 	add	r2,r2,r2
  80ec74:	10c5883a 	add	r2,r2,r3
  80ec78:	10000015 	stw	zero,0(r2)
  80ec7c:	e0bff617 	ldw	r2,-40(fp)
  80ec80:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ec84:	e0bff117 	ldw	r2,-60(fp)
  80ec88:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  80ec8c:	e0bff703 	ldbu	r2,-36(fp)
  80ec90:	e0bfff15 	stw	r2,-4(fp)
  80ec94:	00000606 	br	80ecb0 <OSTaskCreateExt+0x1e8>
  80ec98:	e0bff617 	ldw	r2,-40(fp)
  80ec9c:	e0bff015 	stw	r2,-64(fp)
  80eca0:	e0bff017 	ldw	r2,-64(fp)
  80eca4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  80eca8:	00800a04 	movi	r2,40
  80ecac:	e0bfff15 	stw	r2,-4(fp)
  80ecb0:	e0bfff17 	ldw	r2,-4(fp)
}
  80ecb4:	e037883a 	mov	sp,fp
  80ecb8:	dfc00117 	ldw	ra,4(sp)
  80ecbc:	df000017 	ldw	fp,0(sp)
  80ecc0:	dec00204 	addi	sp,sp,8
  80ecc4:	f800283a 	ret

0080ecc8 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
  80ecc8:	defff304 	addi	sp,sp,-52
  80eccc:	dfc00c15 	stw	ra,48(sp)
  80ecd0:	df000b15 	stw	fp,44(sp)
  80ecd4:	df000b04 	addi	fp,sp,44
  80ecd8:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
  80ecdc:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
  80ece0:	00802074 	movhi	r2,129
  80ece4:	109fb004 	addi	r2,r2,32448
  80ece8:	10800003 	ldbu	r2,0(r2)
  80ecec:	10803fcc 	andi	r2,r2,255
  80ecf0:	1005003a 	cmpeq	r2,r2,zero
  80ecf4:	1000031e 	bne	r2,zero,80ed04 <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
  80ecf8:	00801004 	movi	r2,64
  80ecfc:	e0bfff15 	stw	r2,-4(fp)
  80ed00:	0000ee06 	br	80f0bc <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
  80ed04:	e0bffe03 	ldbu	r2,-8(fp)
  80ed08:	10800518 	cmpnei	r2,r2,20
  80ed0c:	1000031e 	bne	r2,zero,80ed1c <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
  80ed10:	00800f84 	movi	r2,62
  80ed14:	e0bfff15 	stw	r2,-4(fp)
  80ed18:	0000e806 	br	80f0bc <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
  80ed1c:	e0bffe03 	ldbu	r2,-8(fp)
  80ed20:	10800530 	cmpltui	r2,r2,20
  80ed24:	1000061e 	bne	r2,zero,80ed40 <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
  80ed28:	e0bffe03 	ldbu	r2,-8(fp)
  80ed2c:	10803fe0 	cmpeqi	r2,r2,255
  80ed30:	1000031e 	bne	r2,zero,80ed40 <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
  80ed34:	00800a84 	movi	r2,42
  80ed38:	e0bfff15 	stw	r2,-4(fp)
  80ed3c:	0000df06 	br	80f0bc <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ed40:	0005303a 	rdctl	r2,status
  80ed44:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ed48:	e0fffa17 	ldw	r3,-24(fp)
  80ed4c:	00bfff84 	movi	r2,-2
  80ed50:	1884703a 	and	r2,r3,r2
  80ed54:	1001703a 	wrctl	status,r2
  
  return context;
  80ed58:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
  80ed5c:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
  80ed60:	e0bffe03 	ldbu	r2,-8(fp)
  80ed64:	10803fd8 	cmpnei	r2,r2,255
  80ed68:	1000051e 	bne	r2,zero,80ed80 <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
  80ed6c:	00802074 	movhi	r2,129
  80ed70:	109fb104 	addi	r2,r2,32452
  80ed74:	10800017 	ldw	r2,0(r2)
  80ed78:	10800c83 	ldbu	r2,50(r2)
  80ed7c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  80ed80:	e0bffe03 	ldbu	r2,-8(fp)
  80ed84:	00c020b4 	movhi	r3,130
  80ed88:	18fc7604 	addi	r3,r3,-3624
  80ed8c:	1085883a 	add	r2,r2,r2
  80ed90:	1085883a 	add	r2,r2,r2
  80ed94:	10c5883a 	add	r2,r2,r3
  80ed98:	10800017 	ldw	r2,0(r2)
  80ed9c:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
  80eda0:	e0bffc17 	ldw	r2,-16(fp)
  80eda4:	1004c03a 	cmpne	r2,r2,zero
  80eda8:	1000071e 	bne	r2,zero,80edc8 <OSTaskDel+0x100>
  80edac:	e0bffb17 	ldw	r2,-20(fp)
  80edb0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80edb4:	e0bff917 	ldw	r2,-28(fp)
  80edb8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  80edbc:	008010c4 	movi	r2,67
  80edc0:	e0bfff15 	stw	r2,-4(fp)
  80edc4:	0000bd06 	br	80f0bc <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
  80edc8:	e0bffc17 	ldw	r2,-16(fp)
  80edcc:	10800058 	cmpnei	r2,r2,1
  80edd0:	1000071e 	bne	r2,zero,80edf0 <OSTaskDel+0x128>
  80edd4:	e0bffb17 	ldw	r2,-20(fp)
  80edd8:	e0bff815 	stw	r2,-32(fp)
  80eddc:	e0bff817 	ldw	r2,-32(fp)
  80ede0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  80ede4:	00800f44 	movi	r2,61
  80ede8:	e0bfff15 	stw	r2,-4(fp)
  80edec:	0000b306 	br	80f0bc <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
  80edf0:	e0bffc17 	ldw	r2,-16(fp)
  80edf4:	10800d03 	ldbu	r2,52(r2)
  80edf8:	11003fcc 	andi	r4,r2,255
  80edfc:	e0bffc17 	ldw	r2,-16(fp)
  80ee00:	10800d03 	ldbu	r2,52(r2)
  80ee04:	10c03fcc 	andi	r3,r2,255
  80ee08:	00802074 	movhi	r2,129
  80ee0c:	109fae44 	addi	r2,r2,32441
  80ee10:	10c5883a 	add	r2,r2,r3
  80ee14:	10800003 	ldbu	r2,0(r2)
  80ee18:	1007883a 	mov	r3,r2
  80ee1c:	e0bffc17 	ldw	r2,-16(fp)
  80ee20:	10800d43 	ldbu	r2,53(r2)
  80ee24:	0084303a 	nor	r2,zero,r2
  80ee28:	1884703a 	and	r2,r3,r2
  80ee2c:	1007883a 	mov	r3,r2
  80ee30:	00802074 	movhi	r2,129
  80ee34:	109fae44 	addi	r2,r2,32441
  80ee38:	1105883a 	add	r2,r2,r4
  80ee3c:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
  80ee40:	e0bffc17 	ldw	r2,-16(fp)
  80ee44:	10800d03 	ldbu	r2,52(r2)
  80ee48:	10c03fcc 	andi	r3,r2,255
  80ee4c:	00802074 	movhi	r2,129
  80ee50:	109fae44 	addi	r2,r2,32441
  80ee54:	10c5883a 	add	r2,r2,r3
  80ee58:	10800003 	ldbu	r2,0(r2)
  80ee5c:	10803fcc 	andi	r2,r2,255
  80ee60:	1004c03a 	cmpne	r2,r2,zero
  80ee64:	10000c1e 	bne	r2,zero,80ee98 <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
  80ee68:	e0bffc17 	ldw	r2,-16(fp)
  80ee6c:	10800d83 	ldbu	r2,54(r2)
  80ee70:	0084303a 	nor	r2,zero,r2
  80ee74:	1007883a 	mov	r3,r2
  80ee78:	00802074 	movhi	r2,129
  80ee7c:	109fae04 	addi	r2,r2,32440
  80ee80:	10800003 	ldbu	r2,0(r2)
  80ee84:	1884703a 	and	r2,r3,r2
  80ee88:	1007883a 	mov	r3,r2
  80ee8c:	00802074 	movhi	r2,129
  80ee90:	109fae04 	addi	r2,r2,32440
  80ee94:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
  80ee98:	e0bffc17 	ldw	r2,-16(fp)
  80ee9c:	10800717 	ldw	r2,28(r2)
  80eea0:	1005003a 	cmpeq	r2,r2,zero
  80eea4:	1000041e 	bne	r2,zero,80eeb8 <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
  80eea8:	e0bffc17 	ldw	r2,-16(fp)
  80eeac:	11400717 	ldw	r5,28(r2)
  80eeb0:	e13ffc17 	ldw	r4,-16(fp)
  80eeb4:	08094840 	call	809484 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
  80eeb8:	e0bffc17 	ldw	r2,-16(fp)
  80eebc:	10800817 	ldw	r2,32(r2)
  80eec0:	1005003a 	cmpeq	r2,r2,zero
  80eec4:	1000041e 	bne	r2,zero,80eed8 <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  80eec8:	e0bffc17 	ldw	r2,-16(fp)
  80eecc:	11400817 	ldw	r5,32(r2)
  80eed0:	e13ffc17 	ldw	r4,-16(fp)
  80eed4:	080953c0 	call	80953c <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
  80eed8:	e0bffc17 	ldw	r2,-16(fp)
  80eedc:	10800a17 	ldw	r2,40(r2)
  80eee0:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
  80eee4:	e0bffd17 	ldw	r2,-12(fp)
  80eee8:	1005003a 	cmpeq	r2,r2,zero
  80eeec:	1000021e 	bne	r2,zero,80eef8 <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
  80eef0:	e13ffd17 	ldw	r4,-12(fp)
  80eef4:	080bbd00 	call	80bbd0 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
  80eef8:	e0bffc17 	ldw	r2,-16(fp)
  80eefc:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
  80ef00:	e0bffc17 	ldw	r2,-16(fp)
  80ef04:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  80ef08:	e0bffc17 	ldw	r2,-16(fp)
  80ef0c:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
  80ef10:	00802074 	movhi	r2,129
  80ef14:	109fa204 	addi	r2,r2,32392
  80ef18:	10800003 	ldbu	r2,0(r2)
  80ef1c:	10803fcc 	andi	r2,r2,255
  80ef20:	10803fe0 	cmpeqi	r2,r2,255
  80ef24:	1000081e 	bne	r2,zero,80ef48 <OSTaskDel+0x280>
        OSLockNesting++;
  80ef28:	00802074 	movhi	r2,129
  80ef2c:	109fa204 	addi	r2,r2,32392
  80ef30:	10800003 	ldbu	r2,0(r2)
  80ef34:	10800044 	addi	r2,r2,1
  80ef38:	1007883a 	mov	r3,r2
  80ef3c:	00802074 	movhi	r2,129
  80ef40:	109fa204 	addi	r2,r2,32392
  80ef44:	10c00005 	stb	r3,0(r2)
  80ef48:	e0bffb17 	ldw	r2,-20(fp)
  80ef4c:	e0bff715 	stw	r2,-36(fp)
  80ef50:	e0bff717 	ldw	r2,-36(fp)
  80ef54:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
  80ef58:	08090700 	call	809070 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ef5c:	0005303a 	rdctl	r2,status
  80ef60:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ef64:	e0fff617 	ldw	r3,-40(fp)
  80ef68:	00bfff84 	movi	r2,-2
  80ef6c:	1884703a 	and	r2,r3,r2
  80ef70:	1001703a 	wrctl	status,r2
  
  return context;
  80ef74:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
  80ef78:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
  80ef7c:	00802074 	movhi	r2,129
  80ef80:	109fa204 	addi	r2,r2,32392
  80ef84:	10800003 	ldbu	r2,0(r2)
  80ef88:	10803fcc 	andi	r2,r2,255
  80ef8c:	1005003a 	cmpeq	r2,r2,zero
  80ef90:	1000081e 	bne	r2,zero,80efb4 <OSTaskDel+0x2ec>
        OSLockNesting--;
  80ef94:	00802074 	movhi	r2,129
  80ef98:	109fa204 	addi	r2,r2,32392
  80ef9c:	10800003 	ldbu	r2,0(r2)
  80efa0:	10bfffc4 	addi	r2,r2,-1
  80efa4:	1007883a 	mov	r3,r2
  80efa8:	00802074 	movhi	r2,129
  80efac:	109fa204 	addi	r2,r2,32392
  80efb0:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
  80efb4:	e13ffc17 	ldw	r4,-16(fp)
  80efb8:	0813ad00 	call	813ad0 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
  80efbc:	00802074 	movhi	r2,129
  80efc0:	109faa44 	addi	r2,r2,32425
  80efc4:	10800003 	ldbu	r2,0(r2)
  80efc8:	10bfffc4 	addi	r2,r2,-1
  80efcc:	1007883a 	mov	r3,r2
  80efd0:	00802074 	movhi	r2,129
  80efd4:	109faa44 	addi	r2,r2,32425
  80efd8:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
  80efdc:	e0bffe03 	ldbu	r2,-8(fp)
  80efe0:	00c020b4 	movhi	r3,130
  80efe4:	18fc7604 	addi	r3,r3,-3624
  80efe8:	1085883a 	add	r2,r2,r2
  80efec:	1085883a 	add	r2,r2,r2
  80eff0:	10c5883a 	add	r2,r2,r3
  80eff4:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
  80eff8:	e0bffc17 	ldw	r2,-16(fp)
  80effc:	10800617 	ldw	r2,24(r2)
  80f000:	1004c03a 	cmpne	r2,r2,zero
  80f004:	1000091e 	bne	r2,zero,80f02c <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
  80f008:	e0bffc17 	ldw	r2,-16(fp)
  80f00c:	10800517 	ldw	r2,20(r2)
  80f010:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
  80f014:	e0bffc17 	ldw	r2,-16(fp)
  80f018:	10c00517 	ldw	r3,20(r2)
  80f01c:	00802074 	movhi	r2,129
  80f020:	109fa504 	addi	r2,r2,32404
  80f024:	10c00015 	stw	r3,0(r2)
  80f028:	00000a06 	br	80f054 <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
  80f02c:	e0bffc17 	ldw	r2,-16(fp)
  80f030:	10c00617 	ldw	r3,24(r2)
  80f034:	e0bffc17 	ldw	r2,-16(fp)
  80f038:	10800517 	ldw	r2,20(r2)
  80f03c:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
  80f040:	e0bffc17 	ldw	r2,-16(fp)
  80f044:	10c00517 	ldw	r3,20(r2)
  80f048:	e0bffc17 	ldw	r2,-16(fp)
  80f04c:	10800617 	ldw	r2,24(r2)
  80f050:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
  80f054:	00802074 	movhi	r2,129
  80f058:	109fa904 	addi	r2,r2,32420
  80f05c:	10c00017 	ldw	r3,0(r2)
  80f060:	e0bffc17 	ldw	r2,-16(fp)
  80f064:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
  80f068:	00c02074 	movhi	r3,129
  80f06c:	18dfa904 	addi	r3,r3,32420
  80f070:	e0bffc17 	ldw	r2,-16(fp)
  80f074:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
  80f078:	e0fffc17 	ldw	r3,-16(fp)
  80f07c:	00800fc4 	movi	r2,63
  80f080:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  80f084:	e0bffc17 	ldw	r2,-16(fp)
  80f088:	10001345 	stb	zero,77(r2)
  80f08c:	e0bffb17 	ldw	r2,-20(fp)
  80f090:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f094:	e0bff517 	ldw	r2,-44(fp)
  80f098:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  80f09c:	00802074 	movhi	r2,129
  80f0a0:	109fa244 	addi	r2,r2,32393
  80f0a4:	10800003 	ldbu	r2,0(r2)
  80f0a8:	10803fcc 	andi	r2,r2,255
  80f0ac:	10800058 	cmpnei	r2,r2,1
  80f0b0:	1000011e 	bne	r2,zero,80f0b8 <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
  80f0b4:	0809acc0 	call	809acc <OS_Sched>
    }
    return (OS_ERR_NONE);
  80f0b8:	e03fff15 	stw	zero,-4(fp)
  80f0bc:	e0bfff17 	ldw	r2,-4(fp)
}
  80f0c0:	e037883a 	mov	sp,fp
  80f0c4:	dfc00117 	ldw	ra,4(sp)
  80f0c8:	df000017 	ldw	fp,0(sp)
  80f0cc:	dec00204 	addi	sp,sp,8
  80f0d0:	f800283a 	ret

0080f0d4 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
  80f0d4:	defff404 	addi	sp,sp,-48
  80f0d8:	df000b15 	stw	fp,44(sp)
  80f0dc:	df000b04 	addi	fp,sp,44
  80f0e0:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80f0e4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
  80f0e8:	e0bffe03 	ldbu	r2,-8(fp)
  80f0ec:	10800518 	cmpnei	r2,r2,20
  80f0f0:	1000031e 	bne	r2,zero,80f100 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
  80f0f4:	00800f84 	movi	r2,62
  80f0f8:	e0bfff15 	stw	r2,-4(fp)
  80f0fc:	00004c06 	br	80f230 <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  80f100:	e0bffe03 	ldbu	r2,-8(fp)
  80f104:	10800530 	cmpltui	r2,r2,20
  80f108:	1000061e 	bne	r2,zero,80f124 <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
  80f10c:	e0bffe03 	ldbu	r2,-8(fp)
  80f110:	10803fe0 	cmpeqi	r2,r2,255
  80f114:	1000031e 	bne	r2,zero,80f124 <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
  80f118:	00800a84 	movi	r2,42
  80f11c:	e0bfff15 	stw	r2,-4(fp)
  80f120:	00004306 	br	80f230 <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
  80f124:	e0bffe03 	ldbu	r2,-8(fp)
  80f128:	10803fd8 	cmpnei	r2,r2,255
  80f12c:	1000141e 	bne	r2,zero,80f180 <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f130:	0005303a 	rdctl	r2,status
  80f134:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f138:	e0fffa17 	ldw	r3,-24(fp)
  80f13c:	00bfff84 	movi	r2,-2
  80f140:	1884703a 	and	r2,r3,r2
  80f144:	1001703a 	wrctl	status,r2
  
  return context;
  80f148:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
  80f14c:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
  80f150:	00802074 	movhi	r2,129
  80f154:	109fb104 	addi	r2,r2,32452
  80f158:	10800017 	ldw	r2,0(r2)
  80f15c:	10800dc3 	ldbu	r2,55(r2)
  80f160:	e0bffd05 	stb	r2,-12(fp)
  80f164:	e0bffb17 	ldw	r2,-20(fp)
  80f168:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f16c:	e0bff917 	ldw	r2,-28(fp)
  80f170:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
  80f174:	e0bffd03 	ldbu	r2,-12(fp)
  80f178:	e0bfff15 	stw	r2,-4(fp)
  80f17c:	00002c06 	br	80f230 <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f180:	0005303a 	rdctl	r2,status
  80f184:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f188:	e0fff817 	ldw	r3,-32(fp)
  80f18c:	00bfff84 	movi	r2,-2
  80f190:	1884703a 	and	r2,r3,r2
  80f194:	1001703a 	wrctl	status,r2
  
  return context;
  80f198:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  80f19c:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
  80f1a0:	e0bffe03 	ldbu	r2,-8(fp)
  80f1a4:	00c020b4 	movhi	r3,130
  80f1a8:	18fc7604 	addi	r3,r3,-3624
  80f1ac:	1085883a 	add	r2,r2,r2
  80f1b0:	1085883a 	add	r2,r2,r2
  80f1b4:	10c5883a 	add	r2,r2,r3
  80f1b8:	10800017 	ldw	r2,0(r2)
  80f1bc:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
  80f1c0:	e0bffc17 	ldw	r2,-16(fp)
  80f1c4:	1004c03a 	cmpne	r2,r2,zero
  80f1c8:	1000071e 	bne	r2,zero,80f1e8 <OSTaskDelReq+0x114>
  80f1cc:	e0bffb17 	ldw	r2,-20(fp)
  80f1d0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f1d4:	e0bff717 	ldw	r2,-36(fp)
  80f1d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
  80f1dc:	008010c4 	movi	r2,67
  80f1e0:	e0bfff15 	stw	r2,-4(fp)
  80f1e4:	00001206 	br	80f230 <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
  80f1e8:	e0bffc17 	ldw	r2,-16(fp)
  80f1ec:	10800058 	cmpnei	r2,r2,1
  80f1f0:	1000071e 	bne	r2,zero,80f210 <OSTaskDelReq+0x13c>
  80f1f4:	e0bffb17 	ldw	r2,-20(fp)
  80f1f8:	e0bff615 	stw	r2,-40(fp)
  80f1fc:	e0bff617 	ldw	r2,-40(fp)
  80f200:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  80f204:	00800f44 	movi	r2,61
  80f208:	e0bfff15 	stw	r2,-4(fp)
  80f20c:	00000806 	br	80f230 <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
  80f210:	e0fffc17 	ldw	r3,-16(fp)
  80f214:	00800fc4 	movi	r2,63
  80f218:	18800dc5 	stb	r2,55(r3)
  80f21c:	e0bffb17 	ldw	r2,-20(fp)
  80f220:	e0bff515 	stw	r2,-44(fp)
  80f224:	e0bff517 	ldw	r2,-44(fp)
  80f228:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80f22c:	e03fff15 	stw	zero,-4(fp)
  80f230:	e0bfff17 	ldw	r2,-4(fp)
}
  80f234:	e037883a 	mov	sp,fp
  80f238:	df000017 	ldw	fp,0(sp)
  80f23c:	dec00104 	addi	sp,sp,4
  80f240:	f800283a 	ret

0080f244 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
  80f244:	defff304 	addi	sp,sp,-52
  80f248:	dfc00c15 	stw	ra,48(sp)
  80f24c:	df000b15 	stw	fp,44(sp)
  80f250:	df000b04 	addi	fp,sp,44
  80f254:	e17ffd15 	stw	r5,-12(fp)
  80f258:	e1bffe15 	stw	r6,-8(fp)
  80f25c:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
  80f260:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
  80f264:	e0bffe17 	ldw	r2,-8(fp)
  80f268:	1004c03a 	cmpne	r2,r2,zero
  80f26c:	1000021e 	bne	r2,zero,80f278 <OSTaskNameGet+0x34>
        return (0);
  80f270:	e03fff15 	stw	zero,-4(fp)
  80f274:	00005b06 	br	80f3e4 <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
  80f278:	e0bffc03 	ldbu	r2,-16(fp)
  80f27c:	10800570 	cmpltui	r2,r2,21
  80f280:	1000081e 	bne	r2,zero,80f2a4 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
  80f284:	e0bffc03 	ldbu	r2,-16(fp)
  80f288:	10803fe0 	cmpeqi	r2,r2,255
  80f28c:	1000051e 	bne	r2,zero,80f2a4 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
  80f290:	e0fffe17 	ldw	r3,-8(fp)
  80f294:	00800a84 	movi	r2,42
  80f298:	18800005 	stb	r2,0(r3)
            return (0);
  80f29c:	e03fff15 	stw	zero,-4(fp)
  80f2a0:	00005006 	br	80f3e4 <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
  80f2a4:	e0bffd17 	ldw	r2,-12(fp)
  80f2a8:	1004c03a 	cmpne	r2,r2,zero
  80f2ac:	1000051e 	bne	r2,zero,80f2c4 <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
  80f2b0:	e0fffe17 	ldw	r3,-8(fp)
  80f2b4:	00800304 	movi	r2,12
  80f2b8:	18800005 	stb	r2,0(r3)
        return (0);
  80f2bc:	e03fff15 	stw	zero,-4(fp)
  80f2c0:	00004806 	br	80f3e4 <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
  80f2c4:	00802074 	movhi	r2,129
  80f2c8:	109fb004 	addi	r2,r2,32448
  80f2cc:	10800003 	ldbu	r2,0(r2)
  80f2d0:	10803fcc 	andi	r2,r2,255
  80f2d4:	1005003a 	cmpeq	r2,r2,zero
  80f2d8:	1000051e 	bne	r2,zero,80f2f0 <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
  80f2dc:	e0fffe17 	ldw	r3,-8(fp)
  80f2e0:	00800444 	movi	r2,17
  80f2e4:	18800005 	stb	r2,0(r3)
        return (0);
  80f2e8:	e03fff15 	stw	zero,-4(fp)
  80f2ec:	00003d06 	br	80f3e4 <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f2f0:	0005303a 	rdctl	r2,status
  80f2f4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f2f8:	e0fff817 	ldw	r3,-32(fp)
  80f2fc:	00bfff84 	movi	r2,-2
  80f300:	1884703a 	and	r2,r3,r2
  80f304:	1001703a 	wrctl	status,r2
  
  return context;
  80f308:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  80f30c:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
  80f310:	e0bffc03 	ldbu	r2,-16(fp)
  80f314:	10803fd8 	cmpnei	r2,r2,255
  80f318:	1000051e 	bne	r2,zero,80f330 <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
  80f31c:	00802074 	movhi	r2,129
  80f320:	109fb104 	addi	r2,r2,32452
  80f324:	10800017 	ldw	r2,0(r2)
  80f328:	10800c83 	ldbu	r2,50(r2)
  80f32c:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  80f330:	e0bffc03 	ldbu	r2,-16(fp)
  80f334:	00c020b4 	movhi	r3,130
  80f338:	18fc7604 	addi	r3,r3,-3624
  80f33c:	1085883a 	add	r2,r2,r2
  80f340:	1085883a 	add	r2,r2,r2
  80f344:	10c5883a 	add	r2,r2,r3
  80f348:	10800017 	ldw	r2,0(r2)
  80f34c:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
  80f350:	e0bffb17 	ldw	r2,-20(fp)
  80f354:	1004c03a 	cmpne	r2,r2,zero
  80f358:	1000091e 	bne	r2,zero,80f380 <OSTaskNameGet+0x13c>
  80f35c:	e0bff917 	ldw	r2,-28(fp)
  80f360:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f364:	e0bff717 	ldw	r2,-36(fp)
  80f368:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
  80f36c:	e0fffe17 	ldw	r3,-8(fp)
  80f370:	008010c4 	movi	r2,67
  80f374:	18800005 	stb	r2,0(r3)
        return (0);
  80f378:	e03fff15 	stw	zero,-4(fp)
  80f37c:	00001906 	br	80f3e4 <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
  80f380:	e0bffb17 	ldw	r2,-20(fp)
  80f384:	10800058 	cmpnei	r2,r2,1
  80f388:	1000091e 	bne	r2,zero,80f3b0 <OSTaskNameGet+0x16c>
  80f38c:	e0bff917 	ldw	r2,-28(fp)
  80f390:	e0bff615 	stw	r2,-40(fp)
  80f394:	e0bff617 	ldw	r2,-40(fp)
  80f398:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
  80f39c:	e0fffe17 	ldw	r3,-8(fp)
  80f3a0:	008010c4 	movi	r2,67
  80f3a4:	18800005 	stb	r2,0(r3)
        return (0);
  80f3a8:	e03fff15 	stw	zero,-4(fp)
  80f3ac:	00000d06 	br	80f3e4 <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
  80f3b0:	e0bffb17 	ldw	r2,-20(fp)
  80f3b4:	11401304 	addi	r5,r2,76
  80f3b8:	e13ffd17 	ldw	r4,-12(fp)
  80f3bc:	0809c100 	call	809c10 <OS_StrCopy>
  80f3c0:	e0bffa05 	stb	r2,-24(fp)
  80f3c4:	e0bff917 	ldw	r2,-28(fp)
  80f3c8:	e0bff515 	stw	r2,-44(fp)
  80f3cc:	e0bff517 	ldw	r2,-44(fp)
  80f3d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80f3d4:	e0bffe17 	ldw	r2,-8(fp)
  80f3d8:	10000005 	stb	zero,0(r2)
    return (len);
  80f3dc:	e0bffa03 	ldbu	r2,-24(fp)
  80f3e0:	e0bfff15 	stw	r2,-4(fp)
  80f3e4:	e0bfff17 	ldw	r2,-4(fp)
}
  80f3e8:	e037883a 	mov	sp,fp
  80f3ec:	dfc00117 	ldw	ra,4(sp)
  80f3f0:	df000017 	ldw	fp,0(sp)
  80f3f4:	dec00204 	addi	sp,sp,8
  80f3f8:	f800283a 	ret

0080f3fc <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
  80f3fc:	defff304 	addi	sp,sp,-52
  80f400:	dfc00c15 	stw	ra,48(sp)
  80f404:	df000b15 	stw	fp,44(sp)
  80f408:	df000b04 	addi	fp,sp,44
  80f40c:	e17ffe15 	stw	r5,-8(fp)
  80f410:	e1bfff15 	stw	r6,-4(fp)
  80f414:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  80f418:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  80f41c:	e0bfff17 	ldw	r2,-4(fp)
  80f420:	1005003a 	cmpeq	r2,r2,zero
  80f424:	1000611e 	bne	r2,zero,80f5ac <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
  80f428:	e0bffd03 	ldbu	r2,-12(fp)
  80f42c:	10800570 	cmpltui	r2,r2,21
  80f430:	1000071e 	bne	r2,zero,80f450 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
  80f434:	e0bffd03 	ldbu	r2,-12(fp)
  80f438:	10803fe0 	cmpeqi	r2,r2,255
  80f43c:	1000041e 	bne	r2,zero,80f450 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
  80f440:	e0ffff17 	ldw	r3,-4(fp)
  80f444:	00800a84 	movi	r2,42
  80f448:	18800005 	stb	r2,0(r3)
            return;
  80f44c:	00005706 	br	80f5ac <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
  80f450:	e0bffe17 	ldw	r2,-8(fp)
  80f454:	1004c03a 	cmpne	r2,r2,zero
  80f458:	1000041e 	bne	r2,zero,80f46c <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
  80f45c:	e0ffff17 	ldw	r3,-4(fp)
  80f460:	00800304 	movi	r2,12
  80f464:	18800005 	stb	r2,0(r3)
        return;
  80f468:	00005006 	br	80f5ac <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
  80f46c:	00802074 	movhi	r2,129
  80f470:	109fb004 	addi	r2,r2,32448
  80f474:	10800003 	ldbu	r2,0(r2)
  80f478:	10803fcc 	andi	r2,r2,255
  80f47c:	1005003a 	cmpeq	r2,r2,zero
  80f480:	1000041e 	bne	r2,zero,80f494 <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
  80f484:	e0ffff17 	ldw	r3,-4(fp)
  80f488:	00800484 	movi	r2,18
  80f48c:	18800005 	stb	r2,0(r3)
        return;
  80f490:	00004606 	br	80f5ac <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f494:	0005303a 	rdctl	r2,status
  80f498:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f49c:	e0fff917 	ldw	r3,-28(fp)
  80f4a0:	00bfff84 	movi	r2,-2
  80f4a4:	1884703a 	and	r2,r3,r2
  80f4a8:	1001703a 	wrctl	status,r2
  
  return context;
  80f4ac:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80f4b0:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
  80f4b4:	e0bffd03 	ldbu	r2,-12(fp)
  80f4b8:	10803fd8 	cmpnei	r2,r2,255
  80f4bc:	1000051e 	bne	r2,zero,80f4d4 <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
  80f4c0:	00802074 	movhi	r2,129
  80f4c4:	109fb104 	addi	r2,r2,32452
  80f4c8:	10800017 	ldw	r2,0(r2)
  80f4cc:	10800c83 	ldbu	r2,50(r2)
  80f4d0:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  80f4d4:	e0bffd03 	ldbu	r2,-12(fp)
  80f4d8:	00c020b4 	movhi	r3,130
  80f4dc:	18fc7604 	addi	r3,r3,-3624
  80f4e0:	1085883a 	add	r2,r2,r2
  80f4e4:	1085883a 	add	r2,r2,r2
  80f4e8:	10c5883a 	add	r2,r2,r3
  80f4ec:	10800017 	ldw	r2,0(r2)
  80f4f0:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
  80f4f4:	e0bffb17 	ldw	r2,-20(fp)
  80f4f8:	1004c03a 	cmpne	r2,r2,zero
  80f4fc:	1000081e 	bne	r2,zero,80f520 <OSTaskNameSet+0x124>
  80f500:	e0bffa17 	ldw	r2,-24(fp)
  80f504:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f508:	e0bff817 	ldw	r2,-32(fp)
  80f50c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
  80f510:	e0ffff17 	ldw	r3,-4(fp)
  80f514:	008010c4 	movi	r2,67
  80f518:	18800005 	stb	r2,0(r3)
        return;
  80f51c:	00002306 	br	80f5ac <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
  80f520:	e0bffb17 	ldw	r2,-20(fp)
  80f524:	10800058 	cmpnei	r2,r2,1
  80f528:	1000081e 	bne	r2,zero,80f54c <OSTaskNameSet+0x150>
  80f52c:	e0bffa17 	ldw	r2,-24(fp)
  80f530:	e0bff715 	stw	r2,-36(fp)
  80f534:	e0bff717 	ldw	r2,-36(fp)
  80f538:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
  80f53c:	e0ffff17 	ldw	r3,-4(fp)
  80f540:	008010c4 	movi	r2,67
  80f544:	18800005 	stb	r2,0(r3)
        return;
  80f548:	00001806 	br	80f5ac <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
  80f54c:	e13ffe17 	ldw	r4,-8(fp)
  80f550:	0809c900 	call	809c90 <OS_StrLen>
  80f554:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
  80f558:	e0bffc03 	ldbu	r2,-16(fp)
  80f55c:	10800830 	cmpltui	r2,r2,32
  80f560:	1000081e 	bne	r2,zero,80f584 <OSTaskNameSet+0x188>
  80f564:	e0bffa17 	ldw	r2,-24(fp)
  80f568:	e0bff615 	stw	r2,-40(fp)
  80f56c:	e0bff617 	ldw	r2,-40(fp)
  80f570:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
  80f574:	e0ffff17 	ldw	r3,-4(fp)
  80f578:	00801044 	movi	r2,65
  80f57c:	18800005 	stb	r2,0(r3)
        return;
  80f580:	00000a06 	br	80f5ac <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
  80f584:	e0bffb17 	ldw	r2,-20(fp)
  80f588:	11001304 	addi	r4,r2,76
  80f58c:	e17ffe17 	ldw	r5,-8(fp)
  80f590:	0809c100 	call	809c10 <OS_StrCopy>
  80f594:	e0bffa17 	ldw	r2,-24(fp)
  80f598:	e0bff515 	stw	r2,-44(fp)
  80f59c:	e0bff517 	ldw	r2,-44(fp)
  80f5a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80f5a4:	e0bfff17 	ldw	r2,-4(fp)
  80f5a8:	10000005 	stb	zero,0(r2)
}
  80f5ac:	e037883a 	mov	sp,fp
  80f5b0:	dfc00117 	ldw	ra,4(sp)
  80f5b4:	df000017 	ldw	fp,0(sp)
  80f5b8:	dec00204 	addi	sp,sp,8
  80f5bc:	f800283a 	ret

0080f5c0 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
  80f5c0:	defff304 	addi	sp,sp,-52
  80f5c4:	dfc00c15 	stw	ra,48(sp)
  80f5c8:	df000b15 	stw	fp,44(sp)
  80f5cc:	df000b04 	addi	fp,sp,44
  80f5d0:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  80f5d4:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
  80f5d8:	e0bffe03 	ldbu	r2,-8(fp)
  80f5dc:	10800530 	cmpltui	r2,r2,20
  80f5e0:	1000031e 	bne	r2,zero,80f5f0 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  80f5e4:	00800a84 	movi	r2,42
  80f5e8:	e0bfff15 	stw	r2,-4(fp)
  80f5ec:	00007406 	br	80f7c0 <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f5f0:	0005303a 	rdctl	r2,status
  80f5f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f5f8:	e0fffb17 	ldw	r3,-20(fp)
  80f5fc:	00bfff84 	movi	r2,-2
  80f600:	1884703a 	and	r2,r3,r2
  80f604:	1001703a 	wrctl	status,r2
  
  return context;
  80f608:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80f60c:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
  80f610:	e0bffe03 	ldbu	r2,-8(fp)
  80f614:	00c020b4 	movhi	r3,130
  80f618:	18fc7604 	addi	r3,r3,-3624
  80f61c:	1085883a 	add	r2,r2,r2
  80f620:	1085883a 	add	r2,r2,r2
  80f624:	10c5883a 	add	r2,r2,r3
  80f628:	10800017 	ldw	r2,0(r2)
  80f62c:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
  80f630:	e0bffd17 	ldw	r2,-12(fp)
  80f634:	1004c03a 	cmpne	r2,r2,zero
  80f638:	1000071e 	bne	r2,zero,80f658 <OSTaskResume+0x98>
  80f63c:	e0bffc17 	ldw	r2,-16(fp)
  80f640:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f644:	e0bffa17 	ldw	r2,-24(fp)
  80f648:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
  80f64c:	00801184 	movi	r2,70
  80f650:	e0bfff15 	stw	r2,-4(fp)
  80f654:	00005a06 	br	80f7c0 <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
  80f658:	e0bffd17 	ldw	r2,-12(fp)
  80f65c:	10800058 	cmpnei	r2,r2,1
  80f660:	1000071e 	bne	r2,zero,80f680 <OSTaskResume+0xc0>
  80f664:	e0bffc17 	ldw	r2,-16(fp)
  80f668:	e0bff915 	stw	r2,-28(fp)
  80f66c:	e0bff917 	ldw	r2,-28(fp)
  80f670:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  80f674:	008010c4 	movi	r2,67
  80f678:	e0bfff15 	stw	r2,-4(fp)
  80f67c:	00005006 	br	80f7c0 <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
  80f680:	e0bffd17 	ldw	r2,-12(fp)
  80f684:	10800c03 	ldbu	r2,48(r2)
  80f688:	10803fcc 	andi	r2,r2,255
  80f68c:	1080020c 	andi	r2,r2,8
  80f690:	1005003a 	cmpeq	r2,r2,zero
  80f694:	1000441e 	bne	r2,zero,80f7a8 <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
  80f698:	e0bffd17 	ldw	r2,-12(fp)
  80f69c:	10c00c03 	ldbu	r3,48(r2)
  80f6a0:	00bffdc4 	movi	r2,-9
  80f6a4:	1884703a 	and	r2,r3,r2
  80f6a8:	1007883a 	mov	r3,r2
  80f6ac:	e0bffd17 	ldw	r2,-12(fp)
  80f6b0:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
  80f6b4:	e0bffd17 	ldw	r2,-12(fp)
  80f6b8:	10800c03 	ldbu	r2,48(r2)
  80f6bc:	10803fcc 	andi	r2,r2,255
  80f6c0:	1004c03a 	cmpne	r2,r2,zero
  80f6c4:	1000321e 	bne	r2,zero,80f790 <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
  80f6c8:	e0bffd17 	ldw	r2,-12(fp)
  80f6cc:	10800b8b 	ldhu	r2,46(r2)
  80f6d0:	10bfffcc 	andi	r2,r2,65535
  80f6d4:	1004c03a 	cmpne	r2,r2,zero
  80f6d8:	1000281e 	bne	r2,zero,80f77c <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
  80f6dc:	e0bffd17 	ldw	r2,-12(fp)
  80f6e0:	10c00d83 	ldbu	r3,54(r2)
  80f6e4:	00802074 	movhi	r2,129
  80f6e8:	109fae04 	addi	r2,r2,32440
  80f6ec:	10800003 	ldbu	r2,0(r2)
  80f6f0:	1884b03a 	or	r2,r3,r2
  80f6f4:	1007883a 	mov	r3,r2
  80f6f8:	00802074 	movhi	r2,129
  80f6fc:	109fae04 	addi	r2,r2,32440
  80f700:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  80f704:	e0bffd17 	ldw	r2,-12(fp)
  80f708:	10800d03 	ldbu	r2,52(r2)
  80f70c:	11003fcc 	andi	r4,r2,255
  80f710:	e0bffd17 	ldw	r2,-12(fp)
  80f714:	10800d03 	ldbu	r2,52(r2)
  80f718:	10c03fcc 	andi	r3,r2,255
  80f71c:	00802074 	movhi	r2,129
  80f720:	109fae44 	addi	r2,r2,32441
  80f724:	10c5883a 	add	r2,r2,r3
  80f728:	10c00003 	ldbu	r3,0(r2)
  80f72c:	e0bffd17 	ldw	r2,-12(fp)
  80f730:	10800d43 	ldbu	r2,53(r2)
  80f734:	1884b03a 	or	r2,r3,r2
  80f738:	1007883a 	mov	r3,r2
  80f73c:	00802074 	movhi	r2,129
  80f740:	109fae44 	addi	r2,r2,32441
  80f744:	1105883a 	add	r2,r2,r4
  80f748:	10c00005 	stb	r3,0(r2)
  80f74c:	e0bffc17 	ldw	r2,-16(fp)
  80f750:	e0bff815 	stw	r2,-32(fp)
  80f754:	e0bff817 	ldw	r2,-32(fp)
  80f758:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
  80f75c:	00802074 	movhi	r2,129
  80f760:	109fa244 	addi	r2,r2,32393
  80f764:	10800003 	ldbu	r2,0(r2)
  80f768:	10803fcc 	andi	r2,r2,255
  80f76c:	10800058 	cmpnei	r2,r2,1
  80f770:	10000b1e 	bne	r2,zero,80f7a0 <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
  80f774:	0809acc0 	call	809acc <OS_Sched>
  80f778:	00000906 	br	80f7a0 <OSTaskResume+0x1e0>
  80f77c:	e0bffc17 	ldw	r2,-16(fp)
  80f780:	e0bff715 	stw	r2,-36(fp)
  80f784:	e0bff717 	ldw	r2,-36(fp)
  80f788:	1001703a 	wrctl	status,r2
  80f78c:	00000406 	br	80f7a0 <OSTaskResume+0x1e0>
  80f790:	e0bffc17 	ldw	r2,-16(fp)
  80f794:	e0bff615 	stw	r2,-40(fp)
  80f798:	e0bff617 	ldw	r2,-40(fp)
  80f79c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
  80f7a0:	e03fff15 	stw	zero,-4(fp)
  80f7a4:	00000606 	br	80f7c0 <OSTaskResume+0x200>
  80f7a8:	e0bffc17 	ldw	r2,-16(fp)
  80f7ac:	e0bff515 	stw	r2,-44(fp)
  80f7b0:	e0bff517 	ldw	r2,-44(fp)
  80f7b4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
  80f7b8:	00801104 	movi	r2,68
  80f7bc:	e0bfff15 	stw	r2,-4(fp)
  80f7c0:	e0bfff17 	ldw	r2,-4(fp)
}
  80f7c4:	e037883a 	mov	sp,fp
  80f7c8:	dfc00117 	ldw	ra,4(sp)
  80f7cc:	df000017 	ldw	fp,0(sp)
  80f7d0:	dec00204 	addi	sp,sp,8
  80f7d4:	f800283a 	ret

0080f7d8 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
  80f7d8:	defff204 	addi	sp,sp,-56
  80f7dc:	df000d15 	stw	fp,52(sp)
  80f7e0:	df000d04 	addi	fp,sp,52
  80f7e4:	e17ffe15 	stw	r5,-8(fp)
  80f7e8:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  80f7ec:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
  80f7f0:	e0bffd03 	ldbu	r2,-12(fp)
  80f7f4:	10800570 	cmpltui	r2,r2,21
  80f7f8:	1000061e 	bne	r2,zero,80f814 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
  80f7fc:	e0bffd03 	ldbu	r2,-12(fp)
  80f800:	10803fe0 	cmpeqi	r2,r2,255
  80f804:	1000031e 	bne	r2,zero,80f814 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
  80f808:	00800a84 	movi	r2,42
  80f80c:	e0bfff15 	stw	r2,-4(fp)
  80f810:	00006b06 	br	80f9c0 <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
  80f814:	e0bffe17 	ldw	r2,-8(fp)
  80f818:	1004c03a 	cmpne	r2,r2,zero
  80f81c:	1000031e 	bne	r2,zero,80f82c <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
  80f820:	00800244 	movi	r2,9
  80f824:	e0bfff15 	stw	r2,-4(fp)
  80f828:	00006506 	br	80f9c0 <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
  80f82c:	e0bffe17 	ldw	r2,-8(fp)
  80f830:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
  80f834:	e0bffe17 	ldw	r2,-8(fp)
  80f838:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f83c:	0005303a 	rdctl	r2,status
  80f840:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f844:	e0fff717 	ldw	r3,-36(fp)
  80f848:	00bfff84 	movi	r2,-2
  80f84c:	1884703a 	and	r2,r3,r2
  80f850:	1001703a 	wrctl	status,r2
  
  return context;
  80f854:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  80f858:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
  80f85c:	e0bffd03 	ldbu	r2,-12(fp)
  80f860:	10803fd8 	cmpnei	r2,r2,255
  80f864:	1000051e 	bne	r2,zero,80f87c <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
  80f868:	00802074 	movhi	r2,129
  80f86c:	109fb104 	addi	r2,r2,32452
  80f870:	10800017 	ldw	r2,0(r2)
  80f874:	10800c83 	ldbu	r2,50(r2)
  80f878:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  80f87c:	e0bffd03 	ldbu	r2,-12(fp)
  80f880:	00c020b4 	movhi	r3,130
  80f884:	18fc7604 	addi	r3,r3,-3624
  80f888:	1085883a 	add	r2,r2,r2
  80f88c:	1085883a 	add	r2,r2,r2
  80f890:	10c5883a 	add	r2,r2,r3
  80f894:	10800017 	ldw	r2,0(r2)
  80f898:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
  80f89c:	e0bffc17 	ldw	r2,-16(fp)
  80f8a0:	1004c03a 	cmpne	r2,r2,zero
  80f8a4:	1000071e 	bne	r2,zero,80f8c4 <OSTaskStkChk+0xec>
  80f8a8:	e0bff817 	ldw	r2,-32(fp)
  80f8ac:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f8b0:	e0bff617 	ldw	r2,-40(fp)
  80f8b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  80f8b8:	008010c4 	movi	r2,67
  80f8bc:	e0bfff15 	stw	r2,-4(fp)
  80f8c0:	00003f06 	br	80f9c0 <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
  80f8c4:	e0bffc17 	ldw	r2,-16(fp)
  80f8c8:	10800058 	cmpnei	r2,r2,1
  80f8cc:	1000071e 	bne	r2,zero,80f8ec <OSTaskStkChk+0x114>
  80f8d0:	e0bff817 	ldw	r2,-32(fp)
  80f8d4:	e0bff515 	stw	r2,-44(fp)
  80f8d8:	e0bff517 	ldw	r2,-44(fp)
  80f8dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  80f8e0:	008010c4 	movi	r2,67
  80f8e4:	e0bfff15 	stw	r2,-4(fp)
  80f8e8:	00003506 	br	80f9c0 <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
  80f8ec:	e0bffc17 	ldw	r2,-16(fp)
  80f8f0:	1080040b 	ldhu	r2,16(r2)
  80f8f4:	10bfffcc 	andi	r2,r2,65535
  80f8f8:	1080004c 	andi	r2,r2,1
  80f8fc:	1004c03a 	cmpne	r2,r2,zero
  80f900:	1000071e 	bne	r2,zero,80f920 <OSTaskStkChk+0x148>
  80f904:	e0bff817 	ldw	r2,-32(fp)
  80f908:	e0bff415 	stw	r2,-48(fp)
  80f90c:	e0bff417 	ldw	r2,-48(fp)
  80f910:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
  80f914:	00801144 	movi	r2,69
  80f918:	e0bfff15 	stw	r2,-4(fp)
  80f91c:	00002806 	br	80f9c0 <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
  80f920:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
  80f924:	e0bffc17 	ldw	r2,-16(fp)
  80f928:	10800317 	ldw	r2,12(r2)
  80f92c:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
  80f930:	e0bffc17 	ldw	r2,-16(fp)
  80f934:	10800217 	ldw	r2,8(r2)
  80f938:	e0bffb15 	stw	r2,-20(fp)
  80f93c:	e0bff817 	ldw	r2,-32(fp)
  80f940:	e0bff315 	stw	r2,-52(fp)
  80f944:	e0bff317 	ldw	r2,-52(fp)
  80f948:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  80f94c:	00000306 	br	80f95c <OSTaskStkChk+0x184>
        nfree++;
  80f950:	e0bffa17 	ldw	r2,-24(fp)
  80f954:	10800044 	addi	r2,r2,1
  80f958:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  80f95c:	e0bffb17 	ldw	r2,-20(fp)
  80f960:	10800017 	ldw	r2,0(r2)
  80f964:	1005003a 	cmpeq	r2,r2,zero
  80f968:	1007883a 	mov	r3,r2
  80f96c:	e0bffb17 	ldw	r2,-20(fp)
  80f970:	10800104 	addi	r2,r2,4
  80f974:	e0bffb15 	stw	r2,-20(fp)
  80f978:	18803fcc 	andi	r2,r3,255
  80f97c:	1004c03a 	cmpne	r2,r2,zero
  80f980:	103ff31e 	bne	r2,zero,80f950 <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
  80f984:	e0bffa17 	ldw	r2,-24(fp)
  80f988:	1085883a 	add	r2,r2,r2
  80f98c:	1085883a 	add	r2,r2,r2
  80f990:	1007883a 	mov	r3,r2
  80f994:	e0bffe17 	ldw	r2,-8(fp)
  80f998:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
  80f99c:	e0fff917 	ldw	r3,-28(fp)
  80f9a0:	e0bffa17 	ldw	r2,-24(fp)
  80f9a4:	1885c83a 	sub	r2,r3,r2
  80f9a8:	1085883a 	add	r2,r2,r2
  80f9ac:	1085883a 	add	r2,r2,r2
  80f9b0:	1007883a 	mov	r3,r2
  80f9b4:	e0bffe17 	ldw	r2,-8(fp)
  80f9b8:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
  80f9bc:	e03fff15 	stw	zero,-4(fp)
  80f9c0:	e0bfff17 	ldw	r2,-4(fp)
}
  80f9c4:	e037883a 	mov	sp,fp
  80f9c8:	df000017 	ldw	fp,0(sp)
  80f9cc:	dec00104 	addi	sp,sp,4
  80f9d0:	f800283a 	ret

0080f9d4 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
  80f9d4:	defff404 	addi	sp,sp,-48
  80f9d8:	dfc00b15 	stw	ra,44(sp)
  80f9dc:	df000a15 	stw	fp,40(sp)
  80f9e0:	df000a04 	addi	fp,sp,40
  80f9e4:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80f9e8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
  80f9ec:	e0bffe03 	ldbu	r2,-8(fp)
  80f9f0:	10800518 	cmpnei	r2,r2,20
  80f9f4:	1000031e 	bne	r2,zero,80fa04 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
  80f9f8:	008011c4 	movi	r2,71
  80f9fc:	e0bfff15 	stw	r2,-4(fp)
  80fa00:	00007906 	br	80fbe8 <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  80fa04:	e0bffe03 	ldbu	r2,-8(fp)
  80fa08:	10800530 	cmpltui	r2,r2,20
  80fa0c:	1000061e 	bne	r2,zero,80fa28 <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
  80fa10:	e0bffe03 	ldbu	r2,-8(fp)
  80fa14:	10803fe0 	cmpeqi	r2,r2,255
  80fa18:	1000031e 	bne	r2,zero,80fa28 <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
  80fa1c:	00800a84 	movi	r2,42
  80fa20:	e0bfff15 	stw	r2,-4(fp)
  80fa24:	00007006 	br	80fbe8 <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fa28:	0005303a 	rdctl	r2,status
  80fa2c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fa30:	e0fff917 	ldw	r3,-28(fp)
  80fa34:	00bfff84 	movi	r2,-2
  80fa38:	1884703a 	and	r2,r3,r2
  80fa3c:	1001703a 	wrctl	status,r2
  
  return context;
  80fa40:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
  80fa44:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
  80fa48:	e0bffe03 	ldbu	r2,-8(fp)
  80fa4c:	10803fd8 	cmpnei	r2,r2,255
  80fa50:	1000081e 	bne	r2,zero,80fa74 <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
  80fa54:	00802074 	movhi	r2,129
  80fa58:	109fb104 	addi	r2,r2,32452
  80fa5c:	10800017 	ldw	r2,0(r2)
  80fa60:	10800c83 	ldbu	r2,50(r2)
  80fa64:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
  80fa68:	00800044 	movi	r2,1
  80fa6c:	e0bffd05 	stb	r2,-12(fp)
  80fa70:	00000b06 	br	80faa0 <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
  80fa74:	00802074 	movhi	r2,129
  80fa78:	109fb104 	addi	r2,r2,32452
  80fa7c:	10800017 	ldw	r2,0(r2)
  80fa80:	10800c83 	ldbu	r2,50(r2)
  80fa84:	10c03fcc 	andi	r3,r2,255
  80fa88:	e0bffe03 	ldbu	r2,-8(fp)
  80fa8c:	1880031e 	bne	r3,r2,80fa9c <OSTaskSuspend+0xc8>
        self = OS_TRUE;
  80fa90:	00800044 	movi	r2,1
  80fa94:	e0bffd05 	stb	r2,-12(fp)
  80fa98:	00000106 	br	80faa0 <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
  80fa9c:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  80faa0:	e0bffe03 	ldbu	r2,-8(fp)
  80faa4:	00c020b4 	movhi	r3,130
  80faa8:	18fc7604 	addi	r3,r3,-3624
  80faac:	1085883a 	add	r2,r2,r2
  80fab0:	1085883a 	add	r2,r2,r2
  80fab4:	10c5883a 	add	r2,r2,r3
  80fab8:	10800017 	ldw	r2,0(r2)
  80fabc:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
  80fac0:	e0bffc17 	ldw	r2,-16(fp)
  80fac4:	1004c03a 	cmpne	r2,r2,zero
  80fac8:	1000071e 	bne	r2,zero,80fae8 <OSTaskSuspend+0x114>
  80facc:	e0bffa17 	ldw	r2,-24(fp)
  80fad0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fad4:	e0bff817 	ldw	r2,-32(fp)
  80fad8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
  80fadc:	00801204 	movi	r2,72
  80fae0:	e0bfff15 	stw	r2,-4(fp)
  80fae4:	00004006 	br	80fbe8 <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
  80fae8:	e0bffc17 	ldw	r2,-16(fp)
  80faec:	10800058 	cmpnei	r2,r2,1
  80faf0:	1000071e 	bne	r2,zero,80fb10 <OSTaskSuspend+0x13c>
  80faf4:	e0bffa17 	ldw	r2,-24(fp)
  80faf8:	e0bff715 	stw	r2,-36(fp)
  80fafc:	e0bff717 	ldw	r2,-36(fp)
  80fb00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  80fb04:	008010c4 	movi	r2,67
  80fb08:	e0bfff15 	stw	r2,-4(fp)
  80fb0c:	00003606 	br	80fbe8 <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
  80fb10:	e0bffc17 	ldw	r2,-16(fp)
  80fb14:	10800d03 	ldbu	r2,52(r2)
  80fb18:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
  80fb1c:	e13ffb03 	ldbu	r4,-20(fp)
  80fb20:	e0fffb03 	ldbu	r3,-20(fp)
  80fb24:	00802074 	movhi	r2,129
  80fb28:	109fae44 	addi	r2,r2,32441
  80fb2c:	10c5883a 	add	r2,r2,r3
  80fb30:	10800003 	ldbu	r2,0(r2)
  80fb34:	1007883a 	mov	r3,r2
  80fb38:	e0bffc17 	ldw	r2,-16(fp)
  80fb3c:	10800d43 	ldbu	r2,53(r2)
  80fb40:	0084303a 	nor	r2,zero,r2
  80fb44:	1884703a 	and	r2,r3,r2
  80fb48:	1007883a 	mov	r3,r2
  80fb4c:	00802074 	movhi	r2,129
  80fb50:	109fae44 	addi	r2,r2,32441
  80fb54:	1105883a 	add	r2,r2,r4
  80fb58:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  80fb5c:	e0fffb03 	ldbu	r3,-20(fp)
  80fb60:	00802074 	movhi	r2,129
  80fb64:	109fae44 	addi	r2,r2,32441
  80fb68:	10c5883a 	add	r2,r2,r3
  80fb6c:	10800003 	ldbu	r2,0(r2)
  80fb70:	10803fcc 	andi	r2,r2,255
  80fb74:	1004c03a 	cmpne	r2,r2,zero
  80fb78:	10000c1e 	bne	r2,zero,80fbac <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
  80fb7c:	e0bffc17 	ldw	r2,-16(fp)
  80fb80:	10800d83 	ldbu	r2,54(r2)
  80fb84:	0084303a 	nor	r2,zero,r2
  80fb88:	1007883a 	mov	r3,r2
  80fb8c:	00802074 	movhi	r2,129
  80fb90:	109fae04 	addi	r2,r2,32440
  80fb94:	10800003 	ldbu	r2,0(r2)
  80fb98:	1884703a 	and	r2,r3,r2
  80fb9c:	1007883a 	mov	r3,r2
  80fba0:	00802074 	movhi	r2,129
  80fba4:	109fae04 	addi	r2,r2,32440
  80fba8:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
  80fbac:	e0bffc17 	ldw	r2,-16(fp)
  80fbb0:	10800c03 	ldbu	r2,48(r2)
  80fbb4:	10800214 	ori	r2,r2,8
  80fbb8:	1007883a 	mov	r3,r2
  80fbbc:	e0bffc17 	ldw	r2,-16(fp)
  80fbc0:	10c00c05 	stb	r3,48(r2)
  80fbc4:	e0bffa17 	ldw	r2,-24(fp)
  80fbc8:	e0bff615 	stw	r2,-40(fp)
  80fbcc:	e0bff617 	ldw	r2,-40(fp)
  80fbd0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
  80fbd4:	e0bffd03 	ldbu	r2,-12(fp)
  80fbd8:	10800058 	cmpnei	r2,r2,1
  80fbdc:	1000011e 	bne	r2,zero,80fbe4 <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
  80fbe0:	0809acc0 	call	809acc <OS_Sched>
    }
    return (OS_ERR_NONE);
  80fbe4:	e03fff15 	stw	zero,-4(fp)
  80fbe8:	e0bfff17 	ldw	r2,-4(fp)
}
  80fbec:	e037883a 	mov	sp,fp
  80fbf0:	dfc00117 	ldw	ra,4(sp)
  80fbf4:	df000017 	ldw	fp,0(sp)
  80fbf8:	dec00204 	addi	sp,sp,8
  80fbfc:	f800283a 	ret

0080fc00 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
  80fc00:	defff504 	addi	sp,sp,-44
  80fc04:	dfc00a15 	stw	ra,40(sp)
  80fc08:	df000915 	stw	fp,36(sp)
  80fc0c:	df000904 	addi	fp,sp,36
  80fc10:	e17ffe15 	stw	r5,-8(fp)
  80fc14:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80fc18:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
  80fc1c:	e0bffd03 	ldbu	r2,-12(fp)
  80fc20:	10800570 	cmpltui	r2,r2,21
  80fc24:	1000061e 	bne	r2,zero,80fc40 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
  80fc28:	e0bffd03 	ldbu	r2,-12(fp)
  80fc2c:	10803fe0 	cmpeqi	r2,r2,255
  80fc30:	1000031e 	bne	r2,zero,80fc40 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
  80fc34:	00800a84 	movi	r2,42
  80fc38:	e0bfff15 	stw	r2,-4(fp)
  80fc3c:	00003b06 	br	80fd2c <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
  80fc40:	e0bffe17 	ldw	r2,-8(fp)
  80fc44:	1004c03a 	cmpne	r2,r2,zero
  80fc48:	1000031e 	bne	r2,zero,80fc58 <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
  80fc4c:	00800244 	movi	r2,9
  80fc50:	e0bfff15 	stw	r2,-4(fp)
  80fc54:	00003506 	br	80fd2c <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fc58:	0005303a 	rdctl	r2,status
  80fc5c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fc60:	e0fffa17 	ldw	r3,-24(fp)
  80fc64:	00bfff84 	movi	r2,-2
  80fc68:	1884703a 	and	r2,r3,r2
  80fc6c:	1001703a 	wrctl	status,r2
  
  return context;
  80fc70:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80fc74:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
  80fc78:	e0bffd03 	ldbu	r2,-12(fp)
  80fc7c:	10803fd8 	cmpnei	r2,r2,255
  80fc80:	1000051e 	bne	r2,zero,80fc98 <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
  80fc84:	00802074 	movhi	r2,129
  80fc88:	109fb104 	addi	r2,r2,32452
  80fc8c:	10800017 	ldw	r2,0(r2)
  80fc90:	10800c83 	ldbu	r2,50(r2)
  80fc94:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  80fc98:	e0bffd03 	ldbu	r2,-12(fp)
  80fc9c:	00c020b4 	movhi	r3,130
  80fca0:	18fc7604 	addi	r3,r3,-3624
  80fca4:	1085883a 	add	r2,r2,r2
  80fca8:	1085883a 	add	r2,r2,r2
  80fcac:	10c5883a 	add	r2,r2,r3
  80fcb0:	10800017 	ldw	r2,0(r2)
  80fcb4:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
  80fcb8:	e0bffc17 	ldw	r2,-16(fp)
  80fcbc:	1004c03a 	cmpne	r2,r2,zero
  80fcc0:	1000071e 	bne	r2,zero,80fce0 <OSTaskQuery+0xe0>
  80fcc4:	e0bffb17 	ldw	r2,-20(fp)
  80fcc8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fccc:	e0bff917 	ldw	r2,-28(fp)
  80fcd0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
  80fcd4:	00800a44 	movi	r2,41
  80fcd8:	e0bfff15 	stw	r2,-4(fp)
  80fcdc:	00001306 	br	80fd2c <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
  80fce0:	e0bffc17 	ldw	r2,-16(fp)
  80fce4:	10800058 	cmpnei	r2,r2,1
  80fce8:	1000071e 	bne	r2,zero,80fd08 <OSTaskQuery+0x108>
  80fcec:	e0bffb17 	ldw	r2,-20(fp)
  80fcf0:	e0bff815 	stw	r2,-32(fp)
  80fcf4:	e0bff817 	ldw	r2,-32(fp)
  80fcf8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  80fcfc:	008010c4 	movi	r2,67
  80fd00:	e0bfff15 	stw	r2,-4(fp)
  80fd04:	00000906 	br	80fd2c <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
  80fd08:	e13ffe17 	ldw	r4,-8(fp)
  80fd0c:	e17ffc17 	ldw	r5,-16(fp)
  80fd10:	01801b04 	movi	r6,108
  80fd14:	0809a600 	call	809a60 <OS_MemCopy>
  80fd18:	e0bffb17 	ldw	r2,-20(fp)
  80fd1c:	e0bff715 	stw	r2,-36(fp)
  80fd20:	e0bff717 	ldw	r2,-36(fp)
  80fd24:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80fd28:	e03fff15 	stw	zero,-4(fp)
  80fd2c:	e0bfff17 	ldw	r2,-4(fp)
}
  80fd30:	e037883a 	mov	sp,fp
  80fd34:	dfc00117 	ldw	ra,4(sp)
  80fd38:	df000017 	ldw	fp,0(sp)
  80fd3c:	dec00204 	addi	sp,sp,8
  80fd40:	f800283a 	ret

0080fd44 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
  80fd44:	defffc04 	addi	sp,sp,-16
  80fd48:	df000315 	stw	fp,12(sp)
  80fd4c:	df000304 	addi	fp,sp,12
  80fd50:	e13ffd15 	stw	r4,-12(fp)
  80fd54:	e17ffe15 	stw	r5,-8(fp)
  80fd58:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
  80fd5c:	e0bfff0b 	ldhu	r2,-4(fp)
  80fd60:	1080004c 	andi	r2,r2,1
  80fd64:	10803fcc 	andi	r2,r2,255
  80fd68:	1005003a 	cmpeq	r2,r2,zero
  80fd6c:	1000101e 	bne	r2,zero,80fdb0 <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
  80fd70:	e0bfff0b 	ldhu	r2,-4(fp)
  80fd74:	1080008c 	andi	r2,r2,2
  80fd78:	1005003a 	cmpeq	r2,r2,zero
  80fd7c:	10000c1e 	bne	r2,zero,80fdb0 <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  80fd80:	00000806 	br	80fda4 <OS_TaskStkClr+0x60>
                size--;
  80fd84:	e0bffe17 	ldw	r2,-8(fp)
  80fd88:	10bfffc4 	addi	r2,r2,-1
  80fd8c:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
  80fd90:	e0bffd17 	ldw	r2,-12(fp)
  80fd94:	10000015 	stw	zero,0(r2)
  80fd98:	e0bffd17 	ldw	r2,-12(fp)
  80fd9c:	10800104 	addi	r2,r2,4
  80fda0:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  80fda4:	e0bffe17 	ldw	r2,-8(fp)
  80fda8:	1004c03a 	cmpne	r2,r2,zero
  80fdac:	103ff51e 	bne	r2,zero,80fd84 <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
  80fdb0:	e037883a 	mov	sp,fp
  80fdb4:	df000017 	ldw	fp,0(sp)
  80fdb8:	dec00104 	addi	sp,sp,4
  80fdbc:	f800283a 	ret

0080fdc0 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
  80fdc0:	defff904 	addi	sp,sp,-28
  80fdc4:	dfc00615 	stw	ra,24(sp)
  80fdc8:	df000515 	stw	fp,20(sp)
  80fdcc:	df000504 	addi	fp,sp,20
  80fdd0:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80fdd4:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80fdd8:	00802074 	movhi	r2,129
  80fddc:	109fb004 	addi	r2,r2,32448
  80fde0:	10800003 	ldbu	r2,0(r2)
  80fde4:	10803fcc 	andi	r2,r2,255
  80fde8:	1004c03a 	cmpne	r2,r2,zero
  80fdec:	1000421e 	bne	r2,zero,80fef8 <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
  80fdf0:	e0bfff0b 	ldhu	r2,-4(fp)
  80fdf4:	1005003a 	cmpeq	r2,r2,zero
  80fdf8:	10003f1e 	bne	r2,zero,80fef8 <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fdfc:	0005303a 	rdctl	r2,status
  80fe00:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fe04:	e0fffc17 	ldw	r3,-16(fp)
  80fe08:	00bfff84 	movi	r2,-2
  80fe0c:	1884703a 	and	r2,r3,r2
  80fe10:	1001703a 	wrctl	status,r2
  
  return context;
  80fe14:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
  80fe18:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
  80fe1c:	00802074 	movhi	r2,129
  80fe20:	109fb104 	addi	r2,r2,32452
  80fe24:	10800017 	ldw	r2,0(r2)
  80fe28:	10800d03 	ldbu	r2,52(r2)
  80fe2c:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  80fe30:	e13ffe03 	ldbu	r4,-8(fp)
  80fe34:	e0fffe03 	ldbu	r3,-8(fp)
  80fe38:	00802074 	movhi	r2,129
  80fe3c:	109fae44 	addi	r2,r2,32441
  80fe40:	10c5883a 	add	r2,r2,r3
  80fe44:	10800003 	ldbu	r2,0(r2)
  80fe48:	1007883a 	mov	r3,r2
  80fe4c:	00802074 	movhi	r2,129
  80fe50:	109fb104 	addi	r2,r2,32452
  80fe54:	10800017 	ldw	r2,0(r2)
  80fe58:	10800d43 	ldbu	r2,53(r2)
  80fe5c:	0084303a 	nor	r2,zero,r2
  80fe60:	1884703a 	and	r2,r3,r2
  80fe64:	1007883a 	mov	r3,r2
  80fe68:	00802074 	movhi	r2,129
  80fe6c:	109fae44 	addi	r2,r2,32441
  80fe70:	1105883a 	add	r2,r2,r4
  80fe74:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
  80fe78:	e0fffe03 	ldbu	r3,-8(fp)
  80fe7c:	00802074 	movhi	r2,129
  80fe80:	109fae44 	addi	r2,r2,32441
  80fe84:	10c5883a 	add	r2,r2,r3
  80fe88:	10800003 	ldbu	r2,0(r2)
  80fe8c:	10803fcc 	andi	r2,r2,255
  80fe90:	1004c03a 	cmpne	r2,r2,zero
  80fe94:	10000e1e 	bne	r2,zero,80fed0 <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  80fe98:	00802074 	movhi	r2,129
  80fe9c:	109fb104 	addi	r2,r2,32452
  80fea0:	10800017 	ldw	r2,0(r2)
  80fea4:	10800d83 	ldbu	r2,54(r2)
  80fea8:	0084303a 	nor	r2,zero,r2
  80feac:	1007883a 	mov	r3,r2
  80feb0:	00802074 	movhi	r2,129
  80feb4:	109fae04 	addi	r2,r2,32440
  80feb8:	10800003 	ldbu	r2,0(r2)
  80febc:	1884703a 	and	r2,r3,r2
  80fec0:	1007883a 	mov	r3,r2
  80fec4:	00802074 	movhi	r2,129
  80fec8:	109fae04 	addi	r2,r2,32440
  80fecc:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
  80fed0:	00802074 	movhi	r2,129
  80fed4:	109fb104 	addi	r2,r2,32452
  80fed8:	10c00017 	ldw	r3,0(r2)
  80fedc:	e0bfff0b 	ldhu	r2,-4(fp)
  80fee0:	18800b8d 	sth	r2,46(r3)
  80fee4:	e0bffd17 	ldw	r2,-12(fp)
  80fee8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80feec:	e0bffb17 	ldw	r2,-20(fp)
  80fef0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
  80fef4:	0809acc0 	call	809acc <OS_Sched>
    }
}
  80fef8:	e037883a 	mov	sp,fp
  80fefc:	dfc00117 	ldw	ra,4(sp)
  80ff00:	df000017 	ldw	fp,0(sp)
  80ff04:	dec00204 	addi	sp,sp,8
  80ff08:	f800283a 	ret

0080ff0c <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
  80ff0c:	defff604 	addi	sp,sp,-40
  80ff10:	dfc00915 	stw	ra,36(sp)
  80ff14:	df000815 	stw	fp,32(sp)
  80ff18:	dc000715 	stw	r16,28(sp)
  80ff1c:	df000704 	addi	fp,sp,28
  80ff20:	e13ffb05 	stb	r4,-20(fp)
  80ff24:	e17ffc05 	stb	r5,-16(fp)
  80ff28:	e1bffd05 	stb	r6,-12(fp)
  80ff2c:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80ff30:	00802074 	movhi	r2,129
  80ff34:	109fb004 	addi	r2,r2,32448
  80ff38:	10800003 	ldbu	r2,0(r2)
  80ff3c:	10803fcc 	andi	r2,r2,255
  80ff40:	1005003a 	cmpeq	r2,r2,zero
  80ff44:	1000031e 	bne	r2,zero,80ff54 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
  80ff48:	00801544 	movi	r2,85
  80ff4c:	e0bfff15 	stw	r2,-4(fp)
  80ff50:	00004406 	br	810064 <OSTimeDlyHMSM+0x158>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
  80ff54:	e0bffb03 	ldbu	r2,-20(fp)
  80ff58:	1004c03a 	cmpne	r2,r2,zero
  80ff5c:	10000c1e 	bne	r2,zero,80ff90 <OSTimeDlyHMSM+0x84>
        if (minutes == 0) {
  80ff60:	e0bffc03 	ldbu	r2,-16(fp)
  80ff64:	1004c03a 	cmpne	r2,r2,zero
  80ff68:	1000091e 	bne	r2,zero,80ff90 <OSTimeDlyHMSM+0x84>
            if (seconds == 0) {
  80ff6c:	e0bffd03 	ldbu	r2,-12(fp)
  80ff70:	1004c03a 	cmpne	r2,r2,zero
  80ff74:	1000061e 	bne	r2,zero,80ff90 <OSTimeDlyHMSM+0x84>
                if (ms == 0) {
  80ff78:	e0bffe0b 	ldhu	r2,-8(fp)
  80ff7c:	1004c03a 	cmpne	r2,r2,zero
  80ff80:	1000031e 	bne	r2,zero,80ff90 <OSTimeDlyHMSM+0x84>
                    return (OS_ERR_TIME_ZERO_DLY);
  80ff84:	00801504 	movi	r2,84
  80ff88:	e0bfff15 	stw	r2,-4(fp)
  80ff8c:	00003506 	br	810064 <OSTimeDlyHMSM+0x158>
                }
            }
        }
    }
    if (minutes > 59) {
  80ff90:	e0bffc03 	ldbu	r2,-16(fp)
  80ff94:	10800f30 	cmpltui	r2,r2,60
  80ff98:	1000031e 	bne	r2,zero,80ffa8 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
  80ff9c:	00801444 	movi	r2,81
  80ffa0:	e0bfff15 	stw	r2,-4(fp)
  80ffa4:	00002f06 	br	810064 <OSTimeDlyHMSM+0x158>
    }
    if (seconds > 59) {
  80ffa8:	e0bffd03 	ldbu	r2,-12(fp)
  80ffac:	10800f30 	cmpltui	r2,r2,60
  80ffb0:	1000031e 	bne	r2,zero,80ffc0 <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_SECONDS);
  80ffb4:	00801484 	movi	r2,82
  80ffb8:	e0bfff15 	stw	r2,-4(fp)
  80ffbc:	00002906 	br	810064 <OSTimeDlyHMSM+0x158>
    }
    if (ms > 999) {
  80ffc0:	e0bffe0b 	ldhu	r2,-8(fp)
  80ffc4:	1080fa30 	cmpltui	r2,r2,1000
  80ffc8:	1000031e 	bne	r2,zero,80ffd8 <OSTimeDlyHMSM+0xcc>
        return (OS_ERR_TIME_INVALID_MS);
  80ffcc:	008014c4 	movi	r2,83
  80ffd0:	e0bfff15 	stw	r2,-4(fp)
  80ffd4:	00002306 	br	810064 <OSTimeDlyHMSM+0x158>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  80ffd8:	e0bffb03 	ldbu	r2,-20(fp)
  80ffdc:	10c38424 	muli	r3,r2,3600
  80ffe0:	e0bffc03 	ldbu	r2,-16(fp)
  80ffe4:	10800f24 	muli	r2,r2,60
  80ffe8:	1887883a 	add	r3,r3,r2
  80ffec:	e0bffd03 	ldbu	r2,-12(fp)
  80fff0:	1885883a 	add	r2,r3,r2
  80fff4:	1400fa24 	muli	r16,r2,1000
  80fff8:	e0bffe0b 	ldhu	r2,-8(fp)
  80fffc:	1100fa24 	muli	r4,r2,1000
  810000:	0140fa04 	movi	r5,1000
  810004:	08143400 	call	814340 <__udivsi3>
  810008:	8085883a 	add	r2,r16,r2
  81000c:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
  810010:	e0bffa17 	ldw	r2,-24(fp)
  810014:	1004d43a 	srli	r2,r2,16
  810018:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
  81001c:	e0bffa17 	ldw	r2,-24(fp)
  810020:	10bfffcc 	andi	r2,r2,65535
  810024:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
  810028:	e0bffa17 	ldw	r2,-24(fp)
  81002c:	113fffcc 	andi	r4,r2,65535
  810030:	080fdc00 	call	80fdc0 <OSTimeDly>
    while (loops > 0) {
  810034:	00000706 	br	810054 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
  810038:	01200014 	movui	r4,32768
  81003c:	080fdc00 	call	80fdc0 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
  810040:	01200014 	movui	r4,32768
  810044:	080fdc00 	call	80fdc0 <OSTimeDly>
        loops--;
  810048:	e0bff90b 	ldhu	r2,-28(fp)
  81004c:	10bfffc4 	addi	r2,r2,-1
  810050:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
  810054:	e0bff90b 	ldhu	r2,-28(fp)
  810058:	1004c03a 	cmpne	r2,r2,zero
  81005c:	103ff61e 	bne	r2,zero,810038 <OSTimeDlyHMSM+0x12c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
  810060:	e03fff15 	stw	zero,-4(fp)
  810064:	e0bfff17 	ldw	r2,-4(fp)
}
  810068:	e037883a 	mov	sp,fp
  81006c:	dfc00217 	ldw	ra,8(sp)
  810070:	df000117 	ldw	fp,4(sp)
  810074:	dc000017 	ldw	r16,0(sp)
  810078:	dec00304 	addi	sp,sp,12
  81007c:	f800283a 	ret

00810080 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
  810080:	defff404 	addi	sp,sp,-48
  810084:	dfc00b15 	stw	ra,44(sp)
  810088:	df000a15 	stw	fp,40(sp)
  81008c:	df000a04 	addi	fp,sp,40
  810090:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  810094:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
  810098:	e0bffe03 	ldbu	r2,-8(fp)
  81009c:	10800530 	cmpltui	r2,r2,20
  8100a0:	1000031e 	bne	r2,zero,8100b0 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  8100a4:	00800a84 	movi	r2,42
  8100a8:	e0bfff15 	stw	r2,-4(fp)
  8100ac:	00007206 	br	810278 <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8100b0:	0005303a 	rdctl	r2,status
  8100b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8100b8:	e0fffb17 	ldw	r3,-20(fp)
  8100bc:	00bfff84 	movi	r2,-2
  8100c0:	1884703a 	and	r2,r3,r2
  8100c4:	1001703a 	wrctl	status,r2
  
  return context;
  8100c8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  8100cc:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
  8100d0:	e0bffe03 	ldbu	r2,-8(fp)
  8100d4:	00c020b4 	movhi	r3,130
  8100d8:	18fc7604 	addi	r3,r3,-3624
  8100dc:	1085883a 	add	r2,r2,r2
  8100e0:	1085883a 	add	r2,r2,r2
  8100e4:	10c5883a 	add	r2,r2,r3
  8100e8:	10800017 	ldw	r2,0(r2)
  8100ec:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
  8100f0:	e0bffd17 	ldw	r2,-12(fp)
  8100f4:	1004c03a 	cmpne	r2,r2,zero
  8100f8:	1000071e 	bne	r2,zero,810118 <OSTimeDlyResume+0x98>
  8100fc:	e0bffc17 	ldw	r2,-16(fp)
  810100:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810104:	e0bffa17 	ldw	r2,-24(fp)
  810108:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  81010c:	008010c4 	movi	r2,67
  810110:	e0bfff15 	stw	r2,-4(fp)
  810114:	00005806 	br	810278 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
  810118:	e0bffd17 	ldw	r2,-12(fp)
  81011c:	10800058 	cmpnei	r2,r2,1
  810120:	1000071e 	bne	r2,zero,810140 <OSTimeDlyResume+0xc0>
  810124:	e0bffc17 	ldw	r2,-16(fp)
  810128:	e0bff915 	stw	r2,-28(fp)
  81012c:	e0bff917 	ldw	r2,-28(fp)
  810130:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  810134:	008010c4 	movi	r2,67
  810138:	e0bfff15 	stw	r2,-4(fp)
  81013c:	00004e06 	br	810278 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
  810140:	e0bffd17 	ldw	r2,-12(fp)
  810144:	10800b8b 	ldhu	r2,46(r2)
  810148:	10bfffcc 	andi	r2,r2,65535
  81014c:	1004c03a 	cmpne	r2,r2,zero
  810150:	1000071e 	bne	r2,zero,810170 <OSTimeDlyResume+0xf0>
  810154:	e0bffc17 	ldw	r2,-16(fp)
  810158:	e0bff815 	stw	r2,-32(fp)
  81015c:	e0bff817 	ldw	r2,-32(fp)
  810160:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
  810164:	00801404 	movi	r2,80
  810168:	e0bfff15 	stw	r2,-4(fp)
  81016c:	00004206 	br	810278 <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
  810170:	e0bffd17 	ldw	r2,-12(fp)
  810174:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  810178:	e0bffd17 	ldw	r2,-12(fp)
  81017c:	10800c03 	ldbu	r2,48(r2)
  810180:	10803fcc 	andi	r2,r2,255
  810184:	10800dcc 	andi	r2,r2,55
  810188:	1005003a 	cmpeq	r2,r2,zero
  81018c:	10000b1e 	bne	r2,zero,8101bc <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
  810190:	e0bffd17 	ldw	r2,-12(fp)
  810194:	10c00c03 	ldbu	r3,48(r2)
  810198:	00bff204 	movi	r2,-56
  81019c:	1884703a 	and	r2,r3,r2
  8101a0:	1007883a 	mov	r3,r2
  8101a4:	e0bffd17 	ldw	r2,-12(fp)
  8101a8:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
  8101ac:	e0fffd17 	ldw	r3,-12(fp)
  8101b0:	00800044 	movi	r2,1
  8101b4:	18800c45 	stb	r2,49(r3)
  8101b8:	00000206 	br	8101c4 <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
  8101bc:	e0bffd17 	ldw	r2,-12(fp)
  8101c0:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
  8101c4:	e0bffd17 	ldw	r2,-12(fp)
  8101c8:	10800c03 	ldbu	r2,48(r2)
  8101cc:	10803fcc 	andi	r2,r2,255
  8101d0:	1080020c 	andi	r2,r2,8
  8101d4:	1004c03a 	cmpne	r2,r2,zero
  8101d8:	1000221e 	bne	r2,zero,810264 <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
  8101dc:	e0bffd17 	ldw	r2,-12(fp)
  8101e0:	10c00d83 	ldbu	r3,54(r2)
  8101e4:	00802074 	movhi	r2,129
  8101e8:	109fae04 	addi	r2,r2,32440
  8101ec:	10800003 	ldbu	r2,0(r2)
  8101f0:	1884b03a 	or	r2,r3,r2
  8101f4:	1007883a 	mov	r3,r2
  8101f8:	00802074 	movhi	r2,129
  8101fc:	109fae04 	addi	r2,r2,32440
  810200:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  810204:	e0bffd17 	ldw	r2,-12(fp)
  810208:	10800d03 	ldbu	r2,52(r2)
  81020c:	11003fcc 	andi	r4,r2,255
  810210:	e0bffd17 	ldw	r2,-12(fp)
  810214:	10800d03 	ldbu	r2,52(r2)
  810218:	10c03fcc 	andi	r3,r2,255
  81021c:	00802074 	movhi	r2,129
  810220:	109fae44 	addi	r2,r2,32441
  810224:	10c5883a 	add	r2,r2,r3
  810228:	10c00003 	ldbu	r3,0(r2)
  81022c:	e0bffd17 	ldw	r2,-12(fp)
  810230:	10800d43 	ldbu	r2,53(r2)
  810234:	1884b03a 	or	r2,r3,r2
  810238:	1007883a 	mov	r3,r2
  81023c:	00802074 	movhi	r2,129
  810240:	109fae44 	addi	r2,r2,32441
  810244:	1105883a 	add	r2,r2,r4
  810248:	10c00005 	stb	r3,0(r2)
  81024c:	e0bffc17 	ldw	r2,-16(fp)
  810250:	e0bff715 	stw	r2,-36(fp)
  810254:	e0bff717 	ldw	r2,-36(fp)
  810258:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
  81025c:	0809acc0 	call	809acc <OS_Sched>
  810260:	00000406 	br	810274 <OSTimeDlyResume+0x1f4>
  810264:	e0bffc17 	ldw	r2,-16(fp)
  810268:	e0bff615 	stw	r2,-40(fp)
  81026c:	e0bff617 	ldw	r2,-40(fp)
  810270:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
  810274:	e03fff15 	stw	zero,-4(fp)
  810278:	e0bfff17 	ldw	r2,-4(fp)
}
  81027c:	e037883a 	mov	sp,fp
  810280:	dfc00117 	ldw	ra,4(sp)
  810284:	df000017 	ldw	fp,0(sp)
  810288:	dec00204 	addi	sp,sp,8
  81028c:	f800283a 	ret

00810290 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
  810290:	defffb04 	addi	sp,sp,-20
  810294:	df000415 	stw	fp,16(sp)
  810298:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81029c:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8102a0:	0005303a 	rdctl	r2,status
  8102a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8102a8:	e0fffd17 	ldw	r3,-12(fp)
  8102ac:	00bfff84 	movi	r2,-2
  8102b0:	1884703a 	and	r2,r3,r2
  8102b4:	1001703a 	wrctl	status,r2
  
  return context;
  8102b8:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  8102bc:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
  8102c0:	00802074 	movhi	r2,129
  8102c4:	109fb204 	addi	r2,r2,32456
  8102c8:	10800017 	ldw	r2,0(r2)
  8102cc:	e0bfff15 	stw	r2,-4(fp)
  8102d0:	e0bffe17 	ldw	r2,-8(fp)
  8102d4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8102d8:	e0bffc17 	ldw	r2,-16(fp)
  8102dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
  8102e0:	e0bfff17 	ldw	r2,-4(fp)
}
  8102e4:	e037883a 	mov	sp,fp
  8102e8:	df000017 	ldw	fp,0(sp)
  8102ec:	dec00104 	addi	sp,sp,4
  8102f0:	f800283a 	ret

008102f4 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
  8102f4:	defffb04 	addi	sp,sp,-20
  8102f8:	df000415 	stw	fp,16(sp)
  8102fc:	df000404 	addi	fp,sp,16
  810300:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  810304:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810308:	0005303a 	rdctl	r2,status
  81030c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810310:	e0fffd17 	ldw	r3,-12(fp)
  810314:	00bfff84 	movi	r2,-2
  810318:	1884703a 	and	r2,r3,r2
  81031c:	1001703a 	wrctl	status,r2
  
  return context;
  810320:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  810324:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
  810328:	00c02074 	movhi	r3,129
  81032c:	18dfb204 	addi	r3,r3,32456
  810330:	e0bfff17 	ldw	r2,-4(fp)
  810334:	18800015 	stw	r2,0(r3)
  810338:	e0bffe17 	ldw	r2,-8(fp)
  81033c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810340:	e0bffc17 	ldw	r2,-16(fp)
  810344:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  810348:	e037883a 	mov	sp,fp
  81034c:	df000017 	ldw	fp,0(sp)
  810350:	dec00104 	addi	sp,sp,4
  810354:	f800283a 	ret

00810358 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  810358:	defffd04 	addi	sp,sp,-12
  81035c:	dfc00215 	stw	ra,8(sp)
  810360:	df000115 	stw	fp,4(sp)
  810364:	df000104 	addi	fp,sp,4
  810368:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
  81036c:	08136b00 	call	8136b0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  810370:	00800044 	movi	r2,1
  810374:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  810378:	e037883a 	mov	sp,fp
  81037c:	dfc00117 	ldw	ra,4(sp)
  810380:	df000017 	ldw	fp,0(sp)
  810384:	dec00204 	addi	sp,sp,8
  810388:	f800283a 	ret

0081038c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  81038c:	defffe04 	addi	sp,sp,-8
  810390:	dfc00115 	stw	ra,4(sp)
  810394:	df000015 	stw	fp,0(sp)
  810398:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  81039c:	01004474 	movhi	r4,273
  8103a0:	21241004 	addi	r4,r4,-28608
  8103a4:	000b883a 	mov	r5,zero
  8103a8:	000d883a 	mov	r6,zero
  8103ac:	01c0fa04 	movi	r7,1000
  8103b0:	081177c0 	call	81177c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO_0, fifo_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  8103b4:	01002074 	movhi	r4,129
  8103b8:	21145804 	addi	r4,r4,20832
  8103bc:	000b883a 	mov	r5,zero
  8103c0:	01800044 	movi	r6,1
  8103c4:	0810af80 	call	810af8 <altera_avalon_jtag_uart_init>
  8103c8:	01002074 	movhi	r4,129
  8103cc:	21144e04 	addi	r4,r4,20792
  8103d0:	08104180 	call	810418 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
  8103d4:	01002074 	movhi	r4,129
  8103d8:	21186904 	addi	r4,r4,24996
  8103dc:	08104180 	call	810418 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_0, audio_0);
  8103e0:	01002074 	movhi	r4,129
  8103e4:	21187504 	addi	r4,r4,25044
  8103e8:	08104180 	call	810418 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
  8103ec:	01002074 	movhi	r4,129
  8103f0:	21188104 	addi	r4,r4,25092
  8103f4:	08128500 	call	812850 <alt_up_character_lcd_init>
  8103f8:	01002074 	movhi	r4,129
  8103fc:	21188104 	addi	r4,r4,25092
  810400:	08104180 	call	810418 <alt_dev_reg>
}
  810404:	e037883a 	mov	sp,fp
  810408:	dfc00117 	ldw	ra,4(sp)
  81040c:	df000017 	ldw	fp,0(sp)
  810410:	dec00204 	addi	sp,sp,8
  810414:	f800283a 	ret

00810418 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  810418:	defffd04 	addi	sp,sp,-12
  81041c:	dfc00215 	stw	ra,8(sp)
  810420:	df000115 	stw	fp,4(sp)
  810424:	df000104 	addi	fp,sp,4
  810428:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  81042c:	e13fff17 	ldw	r4,-4(fp)
  810430:	01402074 	movhi	r5,129
  810434:	29589304 	addi	r5,r5,25164
  810438:	0812e680 	call	812e68 <alt_dev_llist_insert>
}
  81043c:	e037883a 	mov	sp,fp
  810440:	dfc00117 	ldw	ra,4(sp)
  810444:	df000017 	ldw	fp,0(sp)
  810448:	dec00204 	addi	sp,sp,8
  81044c:	f800283a 	ret

00810450 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
  810450:	defff904 	addi	sp,sp,-28
  810454:	dfc00615 	stw	ra,24(sp)
  810458:	df000515 	stw	fp,20(sp)
  81045c:	df000504 	addi	fp,sp,20
  810460:	e13ffb15 	stw	r4,-20(fp)
  810464:	e17ffc15 	stw	r5,-16(fp)
  810468:	e1bffd15 	stw	r6,-12(fp)
  81046c:	e1fffe15 	stw	r7,-8(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
  810470:	e13ffb17 	ldw	r4,-20(fp)
  810474:	01400fc4 	movi	r5,63
  810478:	08106400 	call	810640 <altera_avalon_fifo_clear_event>
  81047c:	1005003a 	cmpeq	r2,r2,zero
  810480:	1000031e 	bne	r2,zero,810490 <altera_avalon_fifo_init+0x40>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
  810484:	00bfffc4 	movi	r2,-1
  810488:	e0bfff15 	stw	r2,-4(fp)
  81048c:	00001906 	br	8104f4 <altera_avalon_fifo_init+0xa4>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
  810490:	e13ffb17 	ldw	r4,-20(fp)
  810494:	e17ffc17 	ldw	r5,-16(fp)
  810498:	08106a80 	call	8106a8 <altera_avalon_fifo_write_ienable>
  81049c:	1005003a 	cmpeq	r2,r2,zero
  8104a0:	1000031e 	bne	r2,zero,8104b0 <altera_avalon_fifo_init+0x60>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
  8104a4:	00bfff84 	movi	r2,-2
  8104a8:	e0bfff15 	stw	r2,-4(fp)
  8104ac:	00001106 	br	8104f4 <altera_avalon_fifo_init+0xa4>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
  8104b0:	e13ffb17 	ldw	r4,-20(fp)
  8104b4:	e17ffe17 	ldw	r5,-8(fp)
  8104b8:	08107080 	call	810708 <altera_avalon_fifo_write_almostfull>
  8104bc:	1005003a 	cmpeq	r2,r2,zero
  8104c0:	1000031e 	bne	r2,zero,8104d0 <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
  8104c4:	00bfff44 	movi	r2,-3
  8104c8:	e0bfff15 	stw	r2,-4(fp)
  8104cc:	00000906 	br	8104f4 <altera_avalon_fifo_init+0xa4>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
  8104d0:	e13ffb17 	ldw	r4,-20(fp)
  8104d4:	e17ffd17 	ldw	r5,-12(fp)
  8104d8:	08107680 	call	810768 <altera_avalon_fifo_write_almostempty>
  8104dc:	1005003a 	cmpeq	r2,r2,zero
  8104e0:	1000031e 	bne	r2,zero,8104f0 <altera_avalon_fifo_init+0xa0>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
  8104e4:	00bfff44 	movi	r2,-3
  8104e8:	e0bfff15 	stw	r2,-4(fp)
  8104ec:	00000106 	br	8104f4 <altera_avalon_fifo_init+0xa4>
    }

    return ALTERA_AVALON_FIFO_OK;
  8104f0:	e03fff15 	stw	zero,-4(fp)
  8104f4:	e0bfff17 	ldw	r2,-4(fp)
}
  8104f8:	e037883a 	mov	sp,fp
  8104fc:	dfc00117 	ldw	ra,4(sp)
  810500:	df000017 	ldw	fp,0(sp)
  810504:	dec00204 	addi	sp,sp,8
  810508:	f800283a 	ret

0081050c <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
  81050c:	defffd04 	addi	sp,sp,-12
  810510:	df000215 	stw	fp,8(sp)
  810514:	df000204 	addi	fp,sp,8
  810518:	e13ffe15 	stw	r4,-8(fp)
  81051c:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
  810520:	e0bffe17 	ldw	r2,-8(fp)
  810524:	10800104 	addi	r2,r2,4
  810528:	10800037 	ldwio	r2,0(r2)
  81052c:	1007883a 	mov	r3,r2
  810530:	e0bfff17 	ldw	r2,-4(fp)
  810534:	1884703a 	and	r2,r3,r2
}
  810538:	e037883a 	mov	sp,fp
  81053c:	df000017 	ldw	fp,0(sp)
  810540:	dec00104 	addi	sp,sp,4
  810544:	f800283a 	ret

00810548 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
  810548:	defffd04 	addi	sp,sp,-12
  81054c:	df000215 	stw	fp,8(sp)
  810550:	df000204 	addi	fp,sp,8
  810554:	e13ffe15 	stw	r4,-8(fp)
  810558:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
  81055c:	e0bffe17 	ldw	r2,-8(fp)
  810560:	10800304 	addi	r2,r2,12
  810564:	10800037 	ldwio	r2,0(r2)
  810568:	1007883a 	mov	r3,r2
  81056c:	e0bfff17 	ldw	r2,-4(fp)
  810570:	1884703a 	and	r2,r3,r2
}
  810574:	e037883a 	mov	sp,fp
  810578:	df000017 	ldw	fp,0(sp)
  81057c:	dec00104 	addi	sp,sp,4
  810580:	f800283a 	ret

00810584 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
  810584:	defffe04 	addi	sp,sp,-8
  810588:	df000115 	stw	fp,4(sp)
  81058c:	df000104 	addi	fp,sp,4
  810590:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
  810594:	e0bfff17 	ldw	r2,-4(fp)
  810598:	10800404 	addi	r2,r2,16
  81059c:	10800037 	ldwio	r2,0(r2)
}
  8105a0:	e037883a 	mov	sp,fp
  8105a4:	df000017 	ldw	fp,0(sp)
  8105a8:	dec00104 	addi	sp,sp,4
  8105ac:	f800283a 	ret

008105b0 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
  8105b0:	defffe04 	addi	sp,sp,-8
  8105b4:	df000115 	stw	fp,4(sp)
  8105b8:	df000104 	addi	fp,sp,4
  8105bc:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
  8105c0:	e0bfff17 	ldw	r2,-4(fp)
  8105c4:	10800504 	addi	r2,r2,20
  8105c8:	10800037 	ldwio	r2,0(r2)
}
  8105cc:	e037883a 	mov	sp,fp
  8105d0:	df000017 	ldw	fp,0(sp)
  8105d4:	dec00104 	addi	sp,sp,4
  8105d8:	f800283a 	ret

008105dc <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
  8105dc:	defffd04 	addi	sp,sp,-12
  8105e0:	df000215 	stw	fp,8(sp)
  8105e4:	df000204 	addi	fp,sp,8
  8105e8:	e13ffe15 	stw	r4,-8(fp)
  8105ec:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
  8105f0:	e0bffe17 	ldw	r2,-8(fp)
  8105f4:	10800204 	addi	r2,r2,8
  8105f8:	10800037 	ldwio	r2,0(r2)
  8105fc:	1007883a 	mov	r3,r2
  810600:	e0bfff17 	ldw	r2,-4(fp)
  810604:	1884703a 	and	r2,r3,r2
}
  810608:	e037883a 	mov	sp,fp
  81060c:	df000017 	ldw	fp,0(sp)
  810610:	dec00104 	addi	sp,sp,4
  810614:	f800283a 	ret

00810618 <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
  810618:	defffe04 	addi	sp,sp,-8
  81061c:	df000115 	stw	fp,4(sp)
  810620:	df000104 	addi	fp,sp,4
  810624:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
  810628:	e0bfff17 	ldw	r2,-4(fp)
  81062c:	10800037 	ldwio	r2,0(r2)
}
  810630:	e037883a 	mov	sp,fp
  810634:	df000017 	ldw	fp,0(sp)
  810638:	dec00104 	addi	sp,sp,4
  81063c:	f800283a 	ret

00810640 <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
  810640:	defffc04 	addi	sp,sp,-16
  810644:	df000315 	stw	fp,12(sp)
  810648:	df000304 	addi	fp,sp,12
  81064c:	e13ffd15 	stw	r4,-12(fp)
  810650:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
  810654:	e0bffd17 	ldw	r2,-12(fp)
  810658:	10800204 	addi	r2,r2,8
  81065c:	e0fffe17 	ldw	r3,-8(fp)
  810660:	10c00035 	stwio	r3,0(r2)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
  810664:	e0bffd17 	ldw	r2,-12(fp)
  810668:	10800204 	addi	r2,r2,8
  81066c:	10800037 	ldwio	r2,0(r2)
  810670:	1007883a 	mov	r3,r2
  810674:	e0bffe17 	ldw	r2,-8(fp)
  810678:	1884703a 	and	r2,r3,r2
  81067c:	1004c03a 	cmpne	r2,r2,zero
  810680:	1000021e 	bne	r2,zero,81068c <altera_avalon_fifo_clear_event+0x4c>
        return ALTERA_AVALON_FIFO_OK;
  810684:	e03fff15 	stw	zero,-4(fp)
  810688:	00000206 	br	810694 <altera_avalon_fifo_clear_event+0x54>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
  81068c:	00bfffc4 	movi	r2,-1
  810690:	e0bfff15 	stw	r2,-4(fp)
  810694:	e0bfff17 	ldw	r2,-4(fp)
}
  810698:	e037883a 	mov	sp,fp
  81069c:	df000017 	ldw	fp,0(sp)
  8106a0:	dec00104 	addi	sp,sp,4
  8106a4:	f800283a 	ret

008106a8 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
  8106a8:	defffc04 	addi	sp,sp,-16
  8106ac:	df000315 	stw	fp,12(sp)
  8106b0:	df000304 	addi	fp,sp,12
  8106b4:	e13ffd15 	stw	r4,-12(fp)
  8106b8:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
  8106bc:	e0bffd17 	ldw	r2,-12(fp)
  8106c0:	10800304 	addi	r2,r2,12
  8106c4:	e0fffe17 	ldw	r3,-8(fp)
  8106c8:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
  8106cc:	e0bffd17 	ldw	r2,-12(fp)
  8106d0:	10800304 	addi	r2,r2,12
  8106d4:	10800037 	ldwio	r2,0(r2)
  8106d8:	1007883a 	mov	r3,r2
  8106dc:	e0bffe17 	ldw	r2,-8(fp)
  8106e0:	1880021e 	bne	r3,r2,8106ec <altera_avalon_fifo_write_ienable+0x44>
        return ALTERA_AVALON_FIFO_OK;
  8106e4:	e03fff15 	stw	zero,-4(fp)
  8106e8:	00000206 	br	8106f4 <altera_avalon_fifo_write_ienable+0x4c>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
  8106ec:	00bfff84 	movi	r2,-2
  8106f0:	e0bfff15 	stw	r2,-4(fp)
  8106f4:	e0bfff17 	ldw	r2,-4(fp)
}
  8106f8:	e037883a 	mov	sp,fp
  8106fc:	df000017 	ldw	fp,0(sp)
  810700:	dec00104 	addi	sp,sp,4
  810704:	f800283a 	ret

00810708 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
  810708:	defffc04 	addi	sp,sp,-16
  81070c:	df000315 	stw	fp,12(sp)
  810710:	df000304 	addi	fp,sp,12
  810714:	e13ffd15 	stw	r4,-12(fp)
  810718:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
  81071c:	e0bffd17 	ldw	r2,-12(fp)
  810720:	10800404 	addi	r2,r2,16
  810724:	e0fffe17 	ldw	r3,-8(fp)
  810728:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
  81072c:	e0bffd17 	ldw	r2,-12(fp)
  810730:	10800404 	addi	r2,r2,16
  810734:	10800037 	ldwio	r2,0(r2)
  810738:	1007883a 	mov	r3,r2
  81073c:	e0bffe17 	ldw	r2,-8(fp)
  810740:	1880021e 	bne	r3,r2,81074c <altera_avalon_fifo_write_almostfull+0x44>
        return ALTERA_AVALON_FIFO_OK;
  810744:	e03fff15 	stw	zero,-4(fp)
  810748:	00000206 	br	810754 <altera_avalon_fifo_write_almostfull+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
  81074c:	00bfff44 	movi	r2,-3
  810750:	e0bfff15 	stw	r2,-4(fp)
  810754:	e0bfff17 	ldw	r2,-4(fp)
}
  810758:	e037883a 	mov	sp,fp
  81075c:	df000017 	ldw	fp,0(sp)
  810760:	dec00104 	addi	sp,sp,4
  810764:	f800283a 	ret

00810768 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
  810768:	defffc04 	addi	sp,sp,-16
  81076c:	df000315 	stw	fp,12(sp)
  810770:	df000304 	addi	fp,sp,12
  810774:	e13ffd15 	stw	r4,-12(fp)
  810778:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
  81077c:	e0bffd17 	ldw	r2,-12(fp)
  810780:	10800504 	addi	r2,r2,20
  810784:	e0fffe17 	ldw	r3,-8(fp)
  810788:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
  81078c:	e0bffd17 	ldw	r2,-12(fp)
  810790:	10800504 	addi	r2,r2,20
  810794:	10800037 	ldwio	r2,0(r2)
  810798:	1007883a 	mov	r3,r2
  81079c:	e0bffe17 	ldw	r2,-8(fp)
  8107a0:	1880021e 	bne	r3,r2,8107ac <altera_avalon_fifo_write_almostempty+0x44>
        return ALTERA_AVALON_FIFO_OK;
  8107a4:	e03fff15 	stw	zero,-4(fp)
  8107a8:	00000206 	br	8107b4 <altera_avalon_fifo_write_almostempty+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
  8107ac:	00bfff44 	movi	r2,-3
  8107b0:	e0bfff15 	stw	r2,-4(fp)
  8107b4:	e0bfff17 	ldw	r2,-4(fp)
}
  8107b8:	e037883a 	mov	sp,fp
  8107bc:	df000017 	ldw	fp,0(sp)
  8107c0:	dec00104 	addi	sp,sp,4
  8107c4:	f800283a 	ret

008107c8 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
  8107c8:	defffa04 	addi	sp,sp,-24
  8107cc:	dfc00515 	stw	ra,20(sp)
  8107d0:	df000415 	stw	fp,16(sp)
  8107d4:	df000404 	addi	fp,sp,16
  8107d8:	e13ffc15 	stw	r4,-16(fp)
  8107dc:	e17ffd15 	stw	r5,-12(fp)
  8107e0:	e1bffe15 	stw	r6,-8(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
  8107e4:	e13ffd17 	ldw	r4,-12(fp)
  8107e8:	01400044 	movi	r5,1
  8107ec:	081050c0 	call	81050c <altera_avalon_fifo_read_status>
  8107f0:	1004c03a 	cmpne	r2,r2,zero
  8107f4:	1000051e 	bne	r2,zero,81080c <altera_avalon_fifo_write_fifo+0x44>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
  8107f8:	e0bffc17 	ldw	r2,-16(fp)
  8107fc:	e0fffe17 	ldw	r3,-8(fp)
  810800:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
  810804:	e03fff15 	stw	zero,-4(fp)
  810808:	00000206 	br	810814 <altera_avalon_fifo_write_fifo+0x4c>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
  81080c:	00bfff04 	movi	r2,-4
  810810:	e0bfff15 	stw	r2,-4(fp)
  810814:	e0bfff17 	ldw	r2,-4(fp)
    }
}
  810818:	e037883a 	mov	sp,fp
  81081c:	dfc00117 	ldw	ra,4(sp)
  810820:	df000017 	ldw	fp,0(sp)
  810824:	dec00204 	addi	sp,sp,8
  810828:	f800283a 	ret

0081082c <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
  81082c:	defffa04 	addi	sp,sp,-24
  810830:	dfc00515 	stw	ra,20(sp)
  810834:	df000415 	stw	fp,16(sp)
  810838:	df000404 	addi	fp,sp,16
  81083c:	e13ffd15 	stw	r4,-12(fp)
  810840:	e17ffe15 	stw	r5,-8(fp)
  810844:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
  810848:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
  81084c:	e0bfff17 	ldw	r2,-4(fp)
  810850:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
  810854:	e13ffe17 	ldw	r4,-8(fp)
  810858:	01400084 	movi	r5,2
  81085c:	081050c0 	call	81050c <altera_avalon_fifo_read_status>
  810860:	1004c03a 	cmpne	r2,r2,zero
  810864:	1000071e 	bne	r2,zero,810884 <altera_avalon_read_fifo+0x58>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
  810868:	e13ffe17 	ldw	r4,-8(fp)
  81086c:	08106180 	call	810618 <altera_avalon_fifo_read_level>
  810870:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
  810874:	e0bffd17 	ldw	r2,-12(fp)
  810878:	10c00037 	ldwio	r3,0(r2)
  81087c:	e0bfff17 	ldw	r2,-4(fp)
  810880:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
  810884:	e0bffc17 	ldw	r2,-16(fp)
}
  810888:	e037883a 	mov	sp,fp
  81088c:	dfc00117 	ldw	ra,4(sp)
  810890:	df000017 	ldw	fp,0(sp)
  810894:	dec00204 	addi	sp,sp,8
  810898:	f800283a 	ret

0081089c <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
  81089c:	defffb04 	addi	sp,sp,-20
  8108a0:	dfc00415 	stw	ra,16(sp)
  8108a4:	df000315 	stw	fp,12(sp)
  8108a8:	df000304 	addi	fp,sp,12
  8108ac:	e13ffd15 	stw	r4,-12(fp)
  8108b0:	e17ffe15 	stw	r5,-8(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
  8108b4:	e13ffe17 	ldw	r4,-8(fp)
  8108b8:	01400084 	movi	r5,2
  8108bc:	081050c0 	call	81050c <altera_avalon_fifo_read_status>
  8108c0:	1004c03a 	cmpne	r2,r2,zero
  8108c4:	1000041e 	bne	r2,zero,8108d8 <altera_avalon_fifo_read_fifo+0x3c>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
  8108c8:	e0bffd17 	ldw	r2,-12(fp)
  8108cc:	10800037 	ldwio	r2,0(r2)
  8108d0:	e0bfff15 	stw	r2,-4(fp)
  8108d4:	00000106 	br	8108dc <altera_avalon_fifo_read_fifo+0x40>
    }
    return 0;
  8108d8:	e03fff15 	stw	zero,-4(fp)
  8108dc:	e0bfff17 	ldw	r2,-4(fp)
}
  8108e0:	e037883a 	mov	sp,fp
  8108e4:	dfc00117 	ldw	ra,4(sp)
  8108e8:	df000017 	ldw	fp,0(sp)
  8108ec:	dec00204 	addi	sp,sp,8
  8108f0:	f800283a 	ret

008108f4 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
  8108f4:	defffa04 	addi	sp,sp,-24
  8108f8:	dfc00515 	stw	ra,20(sp)
  8108fc:	df000415 	stw	fp,16(sp)
  810900:	df000404 	addi	fp,sp,16
  810904:	e13ffc15 	stw	r4,-16(fp)
  810908:	e17ffd15 	stw	r5,-12(fp)
  81090c:	e1bffe15 	stw	r6,-8(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
  810910:	e13ffd17 	ldw	r4,-12(fp)
  810914:	01400044 	movi	r5,1
  810918:	081050c0 	call	81050c <altera_avalon_fifo_read_status>
  81091c:	1004c03a 	cmpne	r2,r2,zero
  810920:	1000061e 	bne	r2,zero,81093c <altera_avalon_fifo_write_other_info+0x48>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
  810924:	e0bffc17 	ldw	r2,-16(fp)
  810928:	10800104 	addi	r2,r2,4
  81092c:	e0fffe17 	ldw	r3,-8(fp)
  810930:	10c00035 	stwio	r3,0(r2)
	return ALTERA_AVALON_FIFO_OK;
  810934:	e03fff15 	stw	zero,-4(fp)
  810938:	00000206 	br	810944 <altera_avalon_fifo_write_other_info+0x50>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
  81093c:	00bfff04 	movi	r2,-4
  810940:	e0bfff15 	stw	r2,-4(fp)
  810944:	e0bfff17 	ldw	r2,-4(fp)
    }
}
  810948:	e037883a 	mov	sp,fp
  81094c:	dfc00117 	ldw	ra,4(sp)
  810950:	df000017 	ldw	fp,0(sp)
  810954:	dec00204 	addi	sp,sp,8
  810958:	f800283a 	ret

0081095c <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
  81095c:	defffe04 	addi	sp,sp,-8
  810960:	df000115 	stw	fp,4(sp)
  810964:	df000104 	addi	fp,sp,4
  810968:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
  81096c:	e0bfff17 	ldw	r2,-4(fp)
  810970:	10800104 	addi	r2,r2,4
  810974:	10800037 	ldwio	r2,0(r2)
}
  810978:	e037883a 	mov	sp,fp
  81097c:	df000017 	ldw	fp,0(sp)
  810980:	dec00104 	addi	sp,sp,4
  810984:	f800283a 	ret

00810988 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
  810988:	defffe04 	addi	sp,sp,-8
  81098c:	df000115 	stw	fp,4(sp)
  810990:	df000104 	addi	fp,sp,4
  810994:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
  810998:	e0bfff17 	ldw	r2,-4(fp)
  81099c:	10800037 	ldwio	r2,0(r2)
}
  8109a0:	e037883a 	mov	sp,fp
  8109a4:	df000017 	ldw	fp,0(sp)
  8109a8:	dec00104 	addi	sp,sp,4
  8109ac:	f800283a 	ret

008109b0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8109b0:	defffa04 	addi	sp,sp,-24
  8109b4:	dfc00515 	stw	ra,20(sp)
  8109b8:	df000415 	stw	fp,16(sp)
  8109bc:	df000404 	addi	fp,sp,16
  8109c0:	e13ffd15 	stw	r4,-12(fp)
  8109c4:	e17ffe15 	stw	r5,-8(fp)
  8109c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8109cc:	e0bffd17 	ldw	r2,-12(fp)
  8109d0:	10800017 	ldw	r2,0(r2)
  8109d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  8109d8:	e0bffc17 	ldw	r2,-16(fp)
  8109dc:	11000a04 	addi	r4,r2,40
  8109e0:	e0bffd17 	ldw	r2,-12(fp)
  8109e4:	11c00217 	ldw	r7,8(r2)
  8109e8:	e17ffe17 	ldw	r5,-8(fp)
  8109ec:	e1bfff17 	ldw	r6,-4(fp)
  8109f0:	08111700 	call	811170 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  8109f4:	e037883a 	mov	sp,fp
  8109f8:	dfc00117 	ldw	ra,4(sp)
  8109fc:	df000017 	ldw	fp,0(sp)
  810a00:	dec00204 	addi	sp,sp,8
  810a04:	f800283a 	ret

00810a08 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  810a08:	defffa04 	addi	sp,sp,-24
  810a0c:	dfc00515 	stw	ra,20(sp)
  810a10:	df000415 	stw	fp,16(sp)
  810a14:	df000404 	addi	fp,sp,16
  810a18:	e13ffd15 	stw	r4,-12(fp)
  810a1c:	e17ffe15 	stw	r5,-8(fp)
  810a20:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  810a24:	e0bffd17 	ldw	r2,-12(fp)
  810a28:	10800017 	ldw	r2,0(r2)
  810a2c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  810a30:	e0bffc17 	ldw	r2,-16(fp)
  810a34:	11000a04 	addi	r4,r2,40
  810a38:	e0bffd17 	ldw	r2,-12(fp)
  810a3c:	11c00217 	ldw	r7,8(r2)
  810a40:	e17ffe17 	ldw	r5,-8(fp)
  810a44:	e1bfff17 	ldw	r6,-4(fp)
  810a48:	08114300 	call	811430 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  810a4c:	e037883a 	mov	sp,fp
  810a50:	dfc00117 	ldw	ra,4(sp)
  810a54:	df000017 	ldw	fp,0(sp)
  810a58:	dec00204 	addi	sp,sp,8
  810a5c:	f800283a 	ret

00810a60 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  810a60:	defffc04 	addi	sp,sp,-16
  810a64:	dfc00315 	stw	ra,12(sp)
  810a68:	df000215 	stw	fp,8(sp)
  810a6c:	df000204 	addi	fp,sp,8
  810a70:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  810a74:	e0bfff17 	ldw	r2,-4(fp)
  810a78:	10800017 	ldw	r2,0(r2)
  810a7c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  810a80:	e0bffe17 	ldw	r2,-8(fp)
  810a84:	11000a04 	addi	r4,r2,40
  810a88:	e0bfff17 	ldw	r2,-4(fp)
  810a8c:	11400217 	ldw	r5,8(r2)
  810a90:	08110080 	call	811008 <altera_avalon_jtag_uart_close>
}
  810a94:	e037883a 	mov	sp,fp
  810a98:	dfc00117 	ldw	ra,4(sp)
  810a9c:	df000017 	ldw	fp,0(sp)
  810aa0:	dec00204 	addi	sp,sp,8
  810aa4:	f800283a 	ret

00810aa8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  810aa8:	defffa04 	addi	sp,sp,-24
  810aac:	dfc00515 	stw	ra,20(sp)
  810ab0:	df000415 	stw	fp,16(sp)
  810ab4:	df000404 	addi	fp,sp,16
  810ab8:	e13ffd15 	stw	r4,-12(fp)
  810abc:	e17ffe15 	stw	r5,-8(fp)
  810ac0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  810ac4:	e0bffd17 	ldw	r2,-12(fp)
  810ac8:	10800017 	ldw	r2,0(r2)
  810acc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  810ad0:	e0bffc17 	ldw	r2,-16(fp)
  810ad4:	11000a04 	addi	r4,r2,40
  810ad8:	e17ffe17 	ldw	r5,-8(fp)
  810adc:	e1bfff17 	ldw	r6,-4(fp)
  810ae0:	081107c0 	call	81107c <altera_avalon_jtag_uart_ioctl>
}
  810ae4:	e037883a 	mov	sp,fp
  810ae8:	dfc00117 	ldw	ra,4(sp)
  810aec:	df000017 	ldw	fp,0(sp)
  810af0:	dec00204 	addi	sp,sp,8
  810af4:	f800283a 	ret

00810af8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  810af8:	defff404 	addi	sp,sp,-48
  810afc:	dfc00b15 	stw	ra,44(sp)
  810b00:	df000a15 	stw	fp,40(sp)
  810b04:	df000a04 	addi	fp,sp,40
  810b08:	e13ffd15 	stw	r4,-12(fp)
  810b0c:	e17ffe15 	stw	r5,-8(fp)
  810b10:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  810b14:	e0bffd17 	ldw	r2,-12(fp)
  810b18:	10800c04 	addi	r2,r2,48
  810b1c:	e0bffb15 	stw	r2,-20(fp)
  810b20:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
  810b24:	e13ffc0b 	ldhu	r4,-16(fp)
  810b28:	e17ffc84 	addi	r5,fp,-14
  810b2c:	080a6740 	call	80a674 <OSFlagCreate>
  810b30:	1007883a 	mov	r3,r2
  810b34:	e0bffb17 	ldw	r2,-20(fp)
  810b38:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
  810b3c:	e0bffd17 	ldw	r2,-12(fp)
  810b40:	10800a04 	addi	r2,r2,40
  810b44:	e0bff915 	stw	r2,-28(fp)
  810b48:	00800044 	movi	r2,1
  810b4c:	e0bffa0d 	sth	r2,-24(fp)
  810b50:	e13ffa0b 	ldhu	r4,-24(fp)
  810b54:	080d8780 	call	80d878 <OSSemCreate>
  810b58:	1007883a 	mov	r3,r2
  810b5c:	e0bff917 	ldw	r2,-28(fp)
  810b60:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
  810b64:	e0bffd17 	ldw	r2,-12(fp)
  810b68:	10800b04 	addi	r2,r2,44
  810b6c:	e0bff715 	stw	r2,-36(fp)
  810b70:	00800044 	movi	r2,1
  810b74:	e0bff80d 	sth	r2,-32(fp)
  810b78:	e13ff80b 	ldhu	r4,-32(fp)
  810b7c:	080d8780 	call	80d878 <OSSemCreate>
  810b80:	1007883a 	mov	r3,r2
  810b84:	e0bff717 	ldw	r2,-36(fp)
  810b88:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  810b8c:	e0fffd17 	ldw	r3,-12(fp)
  810b90:	00800044 	movi	r2,1
  810b94:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  810b98:	e0bffd17 	ldw	r2,-12(fp)
  810b9c:	10800017 	ldw	r2,0(r2)
  810ba0:	11000104 	addi	r4,r2,4
  810ba4:	e0bffd17 	ldw	r2,-12(fp)
  810ba8:	10800817 	ldw	r2,32(r2)
  810bac:	1007883a 	mov	r3,r2
  810bb0:	2005883a 	mov	r2,r4
  810bb4:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  810bb8:	e13ffe17 	ldw	r4,-8(fp)
  810bbc:	e17fff17 	ldw	r5,-4(fp)
  810bc0:	d8000015 	stw	zero,0(sp)
  810bc4:	01802074 	movhi	r6,129
  810bc8:	31830c04 	addi	r6,r6,3120
  810bcc:	e1fffd17 	ldw	r7,-12(fp)
  810bd0:	08072a00 	call	8072a0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  810bd4:	e0bffd17 	ldw	r2,-12(fp)
  810bd8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  810bdc:	e0bffd17 	ldw	r2,-12(fp)
  810be0:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  810be4:	00802074 	movhi	r2,129
  810be8:	109fb604 	addi	r2,r2,32472
  810bec:	10800017 	ldw	r2,0(r2)
  810bf0:	100b883a 	mov	r5,r2
  810bf4:	01802074 	movhi	r6,129
  810bf8:	3183bd04 	addi	r6,r6,3828
  810bfc:	e1fffd17 	ldw	r7,-12(fp)
  810c00:	0812cd00 	call	812cd0 <alt_alarm_start>
  810c04:	1004403a 	cmpge	r2,r2,zero
  810c08:	1000041e 	bne	r2,zero,810c1c <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  810c0c:	e0fffd17 	ldw	r3,-12(fp)
  810c10:	00a00034 	movhi	r2,32768
  810c14:	10bfffc4 	addi	r2,r2,-1
  810c18:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  810c1c:	e037883a 	mov	sp,fp
  810c20:	dfc00117 	ldw	ra,4(sp)
  810c24:	df000017 	ldw	fp,0(sp)
  810c28:	dec00204 	addi	sp,sp,8
  810c2c:	f800283a 	ret

00810c30 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  810c30:	defff204 	addi	sp,sp,-56
  810c34:	dfc00d15 	stw	ra,52(sp)
  810c38:	df000c15 	stw	fp,48(sp)
  810c3c:	df000c04 	addi	fp,sp,48
  810c40:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  810c44:	e0bfff17 	ldw	r2,-4(fp)
  810c48:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
  810c4c:	e0bffd17 	ldw	r2,-12(fp)
  810c50:	10800017 	ldw	r2,0(r2)
  810c54:	e0bffc15 	stw	r2,-16(fp)
  810c58:	00000006 	br	810c5c <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  810c5c:	e0bffc17 	ldw	r2,-16(fp)
  810c60:	10800104 	addi	r2,r2,4
  810c64:	10800037 	ldwio	r2,0(r2)
  810c68:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  810c6c:	e0bffb17 	ldw	r2,-20(fp)
  810c70:	1080c00c 	andi	r2,r2,768
  810c74:	1005003a 	cmpeq	r2,r2,zero
  810c78:	1000991e 	bne	r2,zero,810ee0 <altera_avalon_jtag_uart_irq+0x2b0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  810c7c:	e0bffb17 	ldw	r2,-20(fp)
  810c80:	1080400c 	andi	r2,r2,256
  810c84:	1005003a 	cmpeq	r2,r2,zero
  810c88:	1000481e 	bne	r2,zero,810dac <altera_avalon_jtag_uart_irq+0x17c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  810c8c:	00800074 	movhi	r2,1
  810c90:	e0bffa15 	stw	r2,-24(fp)
  810c94:	00000006 	br	810c98 <altera_avalon_jtag_uart_irq+0x68>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810c98:	e0bffd17 	ldw	r2,-12(fp)
  810c9c:	10800d17 	ldw	r2,52(r2)
  810ca0:	10800044 	addi	r2,r2,1
  810ca4:	1081ffcc 	andi	r2,r2,2047
  810ca8:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
  810cac:	e0bffd17 	ldw	r2,-12(fp)
  810cb0:	10c00e17 	ldw	r3,56(r2)
  810cb4:	e0bff917 	ldw	r2,-28(fp)
  810cb8:	18802826 	beq	r3,r2,810d5c <altera_avalon_jtag_uart_irq+0x12c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  810cbc:	e0bffc17 	ldw	r2,-16(fp)
  810cc0:	10800037 	ldwio	r2,0(r2)
  810cc4:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  810cc8:	e0bffa17 	ldw	r2,-24(fp)
  810ccc:	10a0000c 	andi	r2,r2,32768
  810cd0:	1005003a 	cmpeq	r2,r2,zero
  810cd4:	1000211e 	bne	r2,zero,810d5c <altera_avalon_jtag_uart_irq+0x12c>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  810cd8:	e0bffd17 	ldw	r2,-12(fp)
  810cdc:	10c00d17 	ldw	r3,52(r2)
  810ce0:	e0bffa17 	ldw	r2,-24(fp)
  810ce4:	1009883a 	mov	r4,r2
  810ce8:	e0bffd17 	ldw	r2,-12(fp)
  810cec:	1885883a 	add	r2,r3,r2
  810cf0:	10801104 	addi	r2,r2,68
  810cf4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810cf8:	e0bffd17 	ldw	r2,-12(fp)
  810cfc:	10800d17 	ldw	r2,52(r2)
  810d00:	10800044 	addi	r2,r2,1
  810d04:	10c1ffcc 	andi	r3,r2,2047
  810d08:	e0bffd17 	ldw	r2,-12(fp)
  810d0c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
  810d10:	e0bffd17 	ldw	r2,-12(fp)
  810d14:	10800c17 	ldw	r2,48(r2)
  810d18:	e0bff615 	stw	r2,-40(fp)
  810d1c:	00800044 	movi	r2,1
  810d20:	e0bff70d 	sth	r2,-36(fp)
  810d24:	00800044 	movi	r2,1
  810d28:	e0bff785 	stb	r2,-34(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  810d2c:	00802074 	movhi	r2,129
  810d30:	109fa244 	addi	r2,r2,32393
  810d34:	10800003 	ldbu	r2,0(r2)
  810d38:	10803fcc 	andi	r2,r2,255
  810d3c:	1005003a 	cmpeq	r2,r2,zero
  810d40:	103fd51e 	bne	r2,zero,810c98 <altera_avalon_jtag_uart_irq+0x68>
  {
    OSFlagPost (group, flags, opt, &err);
  810d44:	e17ff70b 	ldhu	r5,-36(fp)
  810d48:	e1bff783 	ldbu	r6,-34(fp)
  810d4c:	e1fffe04 	addi	r7,fp,-8
  810d50:	e13ff617 	ldw	r4,-40(fp)
  810d54:	080b39c0 	call	80b39c <OSFlagPost>
    return err;
  810d58:	003fcf06 	br	810c98 <altera_avalon_jtag_uart_irq+0x68>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  810d5c:	e0bffa17 	ldw	r2,-24(fp)
  810d60:	10bfffec 	andhi	r2,r2,65535
  810d64:	1005003a 	cmpeq	r2,r2,zero
  810d68:	1000101e 	bne	r2,zero,810dac <altera_avalon_jtag_uart_irq+0x17c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  810d6c:	e0bffd17 	ldw	r2,-12(fp)
  810d70:	10c00817 	ldw	r3,32(r2)
  810d74:	00bfff84 	movi	r2,-2
  810d78:	1886703a 	and	r3,r3,r2
  810d7c:	e0bffd17 	ldw	r2,-12(fp)
  810d80:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  810d84:	e0bffc17 	ldw	r2,-16(fp)
  810d88:	11000104 	addi	r4,r2,4
  810d8c:	e0bffd17 	ldw	r2,-12(fp)
  810d90:	10800817 	ldw	r2,32(r2)
  810d94:	1007883a 	mov	r3,r2
  810d98:	2005883a 	mov	r2,r4
  810d9c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  810da0:	e0bffc17 	ldw	r2,-16(fp)
  810da4:	10800104 	addi	r2,r2,4
  810da8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  810dac:	e0bffb17 	ldw	r2,-20(fp)
  810db0:	1080800c 	andi	r2,r2,512
  810db4:	1005003a 	cmpeq	r2,r2,zero
  810db8:	103fa81e 	bne	r2,zero,810c5c <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  810dbc:	e0bffb17 	ldw	r2,-20(fp)
  810dc0:	10bfffec 	andhi	r2,r2,65535
  810dc4:	1004d43a 	srli	r2,r2,16
  810dc8:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  810dcc:	00002706 	br	810e6c <altera_avalon_jtag_uart_irq+0x23c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  810dd0:	e13ffc17 	ldw	r4,-16(fp)
  810dd4:	e0bffd17 	ldw	r2,-12(fp)
  810dd8:	10c01017 	ldw	r3,64(r2)
  810ddc:	e0bffd17 	ldw	r2,-12(fp)
  810de0:	1885883a 	add	r2,r3,r2
  810de4:	10821104 	addi	r2,r2,2116
  810de8:	10800003 	ldbu	r2,0(r2)
  810dec:	10c03fcc 	andi	r3,r2,255
  810df0:	18c0201c 	xori	r3,r3,128
  810df4:	18ffe004 	addi	r3,r3,-128
  810df8:	2005883a 	mov	r2,r4
  810dfc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810e00:	e0bffd17 	ldw	r2,-12(fp)
  810e04:	10801017 	ldw	r2,64(r2)
  810e08:	10800044 	addi	r2,r2,1
  810e0c:	10c1ffcc 	andi	r3,r2,2047
  810e10:	e0bffd17 	ldw	r2,-12(fp)
  810e14:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
  810e18:	e0bffd17 	ldw	r2,-12(fp)
  810e1c:	10800c17 	ldw	r2,48(r2)
  810e20:	e0bff415 	stw	r2,-48(fp)
  810e24:	00800084 	movi	r2,2
  810e28:	e0bff50d 	sth	r2,-44(fp)
  810e2c:	00800044 	movi	r2,1
  810e30:	e0bff585 	stb	r2,-42(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  810e34:	00802074 	movhi	r2,129
  810e38:	109fa244 	addi	r2,r2,32393
  810e3c:	10800003 	ldbu	r2,0(r2)
  810e40:	10803fcc 	andi	r2,r2,255
  810e44:	1005003a 	cmpeq	r2,r2,zero
  810e48:	1000051e 	bne	r2,zero,810e60 <altera_avalon_jtag_uart_irq+0x230>
  {
    OSFlagPost (group, flags, opt, &err);
  810e4c:	e17ff50b 	ldhu	r5,-44(fp)
  810e50:	e1bff583 	ldbu	r6,-42(fp)
  810e54:	e1fffe44 	addi	r7,fp,-7
  810e58:	e13ff417 	ldw	r4,-48(fp)
  810e5c:	080b39c0 	call	80b39c <OSFlagPost>

        space--;
  810e60:	e0bff817 	ldw	r2,-32(fp)
  810e64:	10bfffc4 	addi	r2,r2,-1
  810e68:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  810e6c:	e0bff817 	ldw	r2,-32(fp)
  810e70:	1005003a 	cmpeq	r2,r2,zero
  810e74:	1000051e 	bne	r2,zero,810e8c <altera_avalon_jtag_uart_irq+0x25c>
  810e78:	e0bffd17 	ldw	r2,-12(fp)
  810e7c:	10c01017 	ldw	r3,64(r2)
  810e80:	e0bffd17 	ldw	r2,-12(fp)
  810e84:	10800f17 	ldw	r2,60(r2)
  810e88:	18bfd11e 	bne	r3,r2,810dd0 <altera_avalon_jtag_uart_irq+0x1a0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  810e8c:	e0bff817 	ldw	r2,-32(fp)
  810e90:	1005003a 	cmpeq	r2,r2,zero
  810e94:	103f711e 	bne	r2,zero,810c5c <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  810e98:	e0bffd17 	ldw	r2,-12(fp)
  810e9c:	10c00817 	ldw	r3,32(r2)
  810ea0:	00bfff44 	movi	r2,-3
  810ea4:	1886703a 	and	r3,r3,r2
  810ea8:	e0bffd17 	ldw	r2,-12(fp)
  810eac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  810eb0:	e0bffd17 	ldw	r2,-12(fp)
  810eb4:	10800017 	ldw	r2,0(r2)
  810eb8:	11000104 	addi	r4,r2,4
  810ebc:	e0bffd17 	ldw	r2,-12(fp)
  810ec0:	10800817 	ldw	r2,32(r2)
  810ec4:	1007883a 	mov	r3,r2
  810ec8:	2005883a 	mov	r2,r4
  810ecc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  810ed0:	e0bffc17 	ldw	r2,-16(fp)
  810ed4:	10800104 	addi	r2,r2,4
  810ed8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  810edc:	003f5f06 	br	810c5c <altera_avalon_jtag_uart_irq+0x2c>
}
  810ee0:	e037883a 	mov	sp,fp
  810ee4:	dfc00117 	ldw	ra,4(sp)
  810ee8:	df000017 	ldw	fp,0(sp)
  810eec:	dec00204 	addi	sp,sp,8
  810ef0:	f800283a 	ret

00810ef4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  810ef4:	defff804 	addi	sp,sp,-32
  810ef8:	dfc00715 	stw	ra,28(sp)
  810efc:	df000615 	stw	fp,24(sp)
  810f00:	df000604 	addi	fp,sp,24
  810f04:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  810f08:	e0bfff17 	ldw	r2,-4(fp)
  810f0c:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  810f10:	e0bffd17 	ldw	r2,-12(fp)
  810f14:	10800017 	ldw	r2,0(r2)
  810f18:	10800104 	addi	r2,r2,4
  810f1c:	10800037 	ldwio	r2,0(r2)
  810f20:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  810f24:	e0bffc17 	ldw	r2,-16(fp)
  810f28:	1081000c 	andi	r2,r2,1024
  810f2c:	1005003a 	cmpeq	r2,r2,zero
  810f30:	10000c1e 	bne	r2,zero,810f64 <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  810f34:	e0bffd17 	ldw	r2,-12(fp)
  810f38:	10800017 	ldw	r2,0(r2)
  810f3c:	11000104 	addi	r4,r2,4
  810f40:	e0bffd17 	ldw	r2,-12(fp)
  810f44:	10800817 	ldw	r2,32(r2)
  810f48:	10810014 	ori	r2,r2,1024
  810f4c:	1007883a 	mov	r3,r2
  810f50:	2005883a 	mov	r2,r4
  810f54:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  810f58:	e0bffd17 	ldw	r2,-12(fp)
  810f5c:	10000915 	stw	zero,36(r2)
  810f60:	00002106 	br	810fe8 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  810f64:	e0bffd17 	ldw	r2,-12(fp)
  810f68:	10c00917 	ldw	r3,36(r2)
  810f6c:	00a00034 	movhi	r2,32768
  810f70:	10bfff04 	addi	r2,r2,-4
  810f74:	10c01c36 	bltu	r2,r3,810fe8 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
  810f78:	e0bffd17 	ldw	r2,-12(fp)
  810f7c:	10800917 	ldw	r2,36(r2)
  810f80:	10c00044 	addi	r3,r2,1
  810f84:	e0bffd17 	ldw	r2,-12(fp)
  810f88:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
  810f8c:	e0bffd17 	ldw	r2,-12(fp)
  810f90:	10c00917 	ldw	r3,36(r2)
  810f94:	e0bffd17 	ldw	r2,-12(fp)
  810f98:	10800117 	ldw	r2,4(r2)
  810f9c:	18801236 	bltu	r3,r2,810fe8 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
  810fa0:	e0bffd17 	ldw	r2,-12(fp)
  810fa4:	10800c17 	ldw	r2,48(r2)
  810fa8:	e0bffa15 	stw	r2,-24(fp)
  810fac:	00800104 	movi	r2,4
  810fb0:	e0bffb0d 	sth	r2,-20(fp)
  810fb4:	00800044 	movi	r2,1
  810fb8:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  810fbc:	00802074 	movhi	r2,129
  810fc0:	109fa244 	addi	r2,r2,32393
  810fc4:	10800003 	ldbu	r2,0(r2)
  810fc8:	10803fcc 	andi	r2,r2,255
  810fcc:	1005003a 	cmpeq	r2,r2,zero
  810fd0:	1000051e 	bne	r2,zero,810fe8 <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
  810fd4:	e17ffb0b 	ldhu	r5,-20(fp)
  810fd8:	e1bffb83 	ldbu	r6,-18(fp)
  810fdc:	e1fffe04 	addi	r7,fp,-8
  810fe0:	e13ffa17 	ldw	r4,-24(fp)
  810fe4:	080b39c0 	call	80b39c <OSFlagPost>
  810fe8:	00802074 	movhi	r2,129
  810fec:	109fb604 	addi	r2,r2,32472
  810ff0:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
  810ff4:	e037883a 	mov	sp,fp
  810ff8:	dfc00117 	ldw	ra,4(sp)
  810ffc:	df000017 	ldw	fp,0(sp)
  811000:	dec00204 	addi	sp,sp,8
  811004:	f800283a 	ret

00811008 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  811008:	defffc04 	addi	sp,sp,-16
  81100c:	df000315 	stw	fp,12(sp)
  811010:	df000304 	addi	fp,sp,12
  811014:	e13ffd15 	stw	r4,-12(fp)
  811018:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  81101c:	00000706 	br	81103c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  811020:	e0bffe17 	ldw	r2,-8(fp)
  811024:	1090000c 	andi	r2,r2,16384
  811028:	1005003a 	cmpeq	r2,r2,zero
  81102c:	1000031e 	bne	r2,zero,81103c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  811030:	00bffd44 	movi	r2,-11
  811034:	e0bfff15 	stw	r2,-4(fp)
  811038:	00000b06 	br	811068 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  81103c:	e0bffd17 	ldw	r2,-12(fp)
  811040:	10c01017 	ldw	r3,64(r2)
  811044:	e0bffd17 	ldw	r2,-12(fp)
  811048:	10800f17 	ldw	r2,60(r2)
  81104c:	18800526 	beq	r3,r2,811064 <altera_avalon_jtag_uart_close+0x5c>
  811050:	e0bffd17 	ldw	r2,-12(fp)
  811054:	10c00917 	ldw	r3,36(r2)
  811058:	e0bffd17 	ldw	r2,-12(fp)
  81105c:	10800117 	ldw	r2,4(r2)
  811060:	18bfef36 	bltu	r3,r2,811020 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  811064:	e03fff15 	stw	zero,-4(fp)
  811068:	e0bfff17 	ldw	r2,-4(fp)
}
  81106c:	e037883a 	mov	sp,fp
  811070:	df000017 	ldw	fp,0(sp)
  811074:	dec00104 	addi	sp,sp,4
  811078:	f800283a 	ret

0081107c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  81107c:	defff804 	addi	sp,sp,-32
  811080:	df000715 	stw	fp,28(sp)
  811084:	df000704 	addi	fp,sp,28
  811088:	e13ffb15 	stw	r4,-20(fp)
  81108c:	e17ffc15 	stw	r5,-16(fp)
  811090:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  811094:	00bff9c4 	movi	r2,-25
  811098:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  81109c:	e0bffc17 	ldw	r2,-16(fp)
  8110a0:	e0bfff15 	stw	r2,-4(fp)
  8110a4:	e0ffff17 	ldw	r3,-4(fp)
  8110a8:	189a8060 	cmpeqi	r2,r3,27137
  8110ac:	1000041e 	bne	r2,zero,8110c0 <altera_avalon_jtag_uart_ioctl+0x44>
  8110b0:	e0ffff17 	ldw	r3,-4(fp)
  8110b4:	189a80a0 	cmpeqi	r2,r3,27138
  8110b8:	10001b1e 	bne	r2,zero,811128 <altera_avalon_jtag_uart_ioctl+0xac>
  8110bc:	00002706 	br	81115c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  8110c0:	e0bffb17 	ldw	r2,-20(fp)
  8110c4:	10c00117 	ldw	r3,4(r2)
  8110c8:	00a00034 	movhi	r2,32768
  8110cc:	10bfffc4 	addi	r2,r2,-1
  8110d0:	18802226 	beq	r3,r2,81115c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  8110d4:	e0bffd17 	ldw	r2,-12(fp)
  8110d8:	10800017 	ldw	r2,0(r2)
  8110dc:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  8110e0:	e0bff917 	ldw	r2,-28(fp)
  8110e4:	10800090 	cmplti	r2,r2,2
  8110e8:	1000071e 	bne	r2,zero,811108 <altera_avalon_jtag_uart_ioctl+0x8c>
  8110ec:	e0fff917 	ldw	r3,-28(fp)
  8110f0:	00a00034 	movhi	r2,32768
  8110f4:	10bfffc4 	addi	r2,r2,-1
  8110f8:	18800326 	beq	r3,r2,811108 <altera_avalon_jtag_uart_ioctl+0x8c>
  8110fc:	e0bff917 	ldw	r2,-28(fp)
  811100:	e0bffe15 	stw	r2,-8(fp)
  811104:	00000306 	br	811114 <altera_avalon_jtag_uart_ioctl+0x98>
  811108:	00e00034 	movhi	r3,32768
  81110c:	18ffff84 	addi	r3,r3,-2
  811110:	e0fffe15 	stw	r3,-8(fp)
  811114:	e0bffb17 	ldw	r2,-20(fp)
  811118:	e0fffe17 	ldw	r3,-8(fp)
  81111c:	10c00115 	stw	r3,4(r2)
      rc = 0;
  811120:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  811124:	00000d06 	br	81115c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  811128:	e0bffb17 	ldw	r2,-20(fp)
  81112c:	10c00117 	ldw	r3,4(r2)
  811130:	00a00034 	movhi	r2,32768
  811134:	10bfffc4 	addi	r2,r2,-1
  811138:	18800826 	beq	r3,r2,81115c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  81113c:	e13ffd17 	ldw	r4,-12(fp)
  811140:	e0bffb17 	ldw	r2,-20(fp)
  811144:	10c00917 	ldw	r3,36(r2)
  811148:	e0bffb17 	ldw	r2,-20(fp)
  81114c:	10800117 	ldw	r2,4(r2)
  811150:	1885803a 	cmpltu	r2,r3,r2
  811154:	20800015 	stw	r2,0(r4)
      rc = 0;
  811158:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  81115c:	e0bffa17 	ldw	r2,-24(fp)
}
  811160:	e037883a 	mov	sp,fp
  811164:	df000017 	ldw	fp,0(sp)
  811168:	dec00104 	addi	sp,sp,4
  81116c:	f800283a 	ret

00811170 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  811170:	deffeb04 	addi	sp,sp,-84
  811174:	dfc01415 	stw	ra,80(sp)
  811178:	df001315 	stw	fp,76(sp)
  81117c:	df001304 	addi	fp,sp,76
  811180:	e13ffb15 	stw	r4,-20(fp)
  811184:	e17ffc15 	stw	r5,-16(fp)
  811188:	e1bffd15 	stw	r6,-12(fp)
  81118c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  811190:	e0bffc17 	ldw	r2,-16(fp)
  811194:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
  811198:	e0bffb17 	ldw	r2,-20(fp)
  81119c:	10800a17 	ldw	r2,40(r2)
  8111a0:	e0bff315 	stw	r2,-52(fp)
  8111a4:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  8111a8:	e17ff40b 	ldhu	r5,-48(fp)
  8111ac:	e1bffa44 	addi	r6,fp,-23
  8111b0:	e13ff317 	ldw	r4,-52(fp)
  8111b4:	080dc2c0 	call	80dc2c <OSSemPend>

  while (space > 0)
  8111b8:	00006406 	br	81134c <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  8111bc:	e0bffb17 	ldw	r2,-20(fp)
  8111c0:	10800d17 	ldw	r2,52(r2)
  8111c4:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
  8111c8:	e0bffb17 	ldw	r2,-20(fp)
  8111cc:	10800e17 	ldw	r2,56(r2)
  8111d0:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
  8111d4:	e0fff617 	ldw	r3,-40(fp)
  8111d8:	e0bff517 	ldw	r2,-44(fp)
  8111dc:	18800536 	bltu	r3,r2,8111f4 <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
  8111e0:	e0bff617 	ldw	r2,-40(fp)
  8111e4:	e0fff517 	ldw	r3,-44(fp)
  8111e8:	10c5c83a 	sub	r2,r2,r3
  8111ec:	e0bff715 	stw	r2,-36(fp)
  8111f0:	00000406 	br	811204 <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  8111f4:	00820004 	movi	r2,2048
  8111f8:	e0fff517 	ldw	r3,-44(fp)
  8111fc:	10c5c83a 	sub	r2,r2,r3
  811200:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
  811204:	e0bff717 	ldw	r2,-36(fp)
  811208:	1005003a 	cmpeq	r2,r2,zero
  81120c:	10001f1e 	bne	r2,zero,81128c <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
  811210:	e0fffd17 	ldw	r3,-12(fp)
  811214:	e0bff717 	ldw	r2,-36(fp)
  811218:	1880022e 	bgeu	r3,r2,811224 <altera_avalon_jtag_uart_read+0xb4>
        n = space;
  81121c:	e0bffd17 	ldw	r2,-12(fp)
  811220:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  811224:	e0bffb17 	ldw	r2,-20(fp)
  811228:	10c01104 	addi	r3,r2,68
  81122c:	e0bff517 	ldw	r2,-44(fp)
  811230:	1887883a 	add	r3,r3,r2
  811234:	e0bff917 	ldw	r2,-28(fp)
  811238:	1009883a 	mov	r4,r2
  81123c:	180b883a 	mov	r5,r3
  811240:	e1bff717 	ldw	r6,-36(fp)
  811244:	08054bc0 	call	8054bc <memcpy>
      ptr   += n;
  811248:	e0fff717 	ldw	r3,-36(fp)
  81124c:	e0bff917 	ldw	r2,-28(fp)
  811250:	10c5883a 	add	r2,r2,r3
  811254:	e0bff915 	stw	r2,-28(fp)
      space -= n;
  811258:	e0fffd17 	ldw	r3,-12(fp)
  81125c:	e0bff717 	ldw	r2,-36(fp)
  811260:	1885c83a 	sub	r2,r3,r2
  811264:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811268:	e0fff517 	ldw	r3,-44(fp)
  81126c:	e0bff717 	ldw	r2,-36(fp)
  811270:	1885883a 	add	r2,r3,r2
  811274:	10c1ffcc 	andi	r3,r2,2047
  811278:	e0bffb17 	ldw	r2,-20(fp)
  81127c:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
  811280:	e0bffd17 	ldw	r2,-12(fp)
  811284:	10800048 	cmpgei	r2,r2,1
  811288:	103fcc1e 	bne	r2,zero,8111bc <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
  81128c:	e0fff917 	ldw	r3,-28(fp)
  811290:	e0bffc17 	ldw	r2,-16(fp)
  811294:	1880301e 	bne	r3,r2,811358 <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  811298:	e0bffe17 	ldw	r2,-8(fp)
  81129c:	1090000c 	andi	r2,r2,16384
  8112a0:	1004c03a 	cmpne	r2,r2,zero
  8112a4:	10002c1e 	bne	r2,zero,811358 <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
  8112a8:	00802074 	movhi	r2,129
  8112ac:	109fa244 	addi	r2,r2,32393
  8112b0:	10800003 	ldbu	r2,0(r2)
  8112b4:	10803fcc 	andi	r2,r2,255
  8112b8:	10800058 	cmpnei	r2,r2,1
  8112bc:	1000161e 	bne	r2,zero,811318 <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
  8112c0:	e0bffb17 	ldw	r2,-20(fp)
  8112c4:	10800c17 	ldw	r2,48(r2)
  8112c8:	e0bff015 	stw	r2,-64(fp)
  8112cc:	00800144 	movi	r2,5
  8112d0:	e0bff10d 	sth	r2,-60(fp)
  8112d4:	00bfe0c4 	movi	r2,-125
  8112d8:	e0bff185 	stb	r2,-58(fp)
  8112dc:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  8112e0:	00802074 	movhi	r2,129
  8112e4:	109fa244 	addi	r2,r2,32393
  8112e8:	10800003 	ldbu	r2,0(r2)
  8112ec:	10803fcc 	andi	r2,r2,255
  8112f0:	1005003a 	cmpeq	r2,r2,zero
  8112f4:	1000111e 	bne	r2,zero,81133c <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  8112f8:	e17ff10b 	ldhu	r5,-60(fp)
  8112fc:	e1bff183 	ldbu	r6,-58(fp)
  811300:	e1fff20b 	ldhu	r7,-56(fp)
  811304:	e0bffa04 	addi	r2,fp,-24
  811308:	d8800015 	stw	r2,0(sp)
  81130c:	e13ff017 	ldw	r4,-64(fp)
  811310:	080acf00 	call	80acf0 <OSFlagPend>
    return err;
  811314:	00000906 	br	81133c <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  811318:	e0bffb17 	ldw	r2,-20(fp)
  81131c:	10c00d17 	ldw	r3,52(r2)
  811320:	e0bff617 	ldw	r2,-40(fp)
  811324:	1880051e 	bne	r3,r2,81133c <altera_avalon_jtag_uart_read+0x1cc>
  811328:	e0bffb17 	ldw	r2,-20(fp)
  81132c:	10c00917 	ldw	r3,36(r2)
  811330:	e0bffb17 	ldw	r2,-20(fp)
  811334:	10800117 	ldw	r2,4(r2)
  811338:	18bff736 	bltu	r3,r2,811318 <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  81133c:	e0bffb17 	ldw	r2,-20(fp)
  811340:	10c00d17 	ldw	r3,52(r2)
  811344:	e0bff617 	ldw	r2,-40(fp)
  811348:	18800326 	beq	r3,r2,811358 <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  81134c:	e0bffd17 	ldw	r2,-12(fp)
  811350:	10800048 	cmpgei	r2,r2,1
  811354:	103f991e 	bne	r2,zero,8111bc <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
  811358:	e0bffb17 	ldw	r2,-20(fp)
  81135c:	11000a17 	ldw	r4,40(r2)
  811360:	080e0240 	call	80e024 <OSSemPost>

  if (ptr != buffer)
  811364:	e0fff917 	ldw	r3,-28(fp)
  811368:	e0bffc17 	ldw	r2,-16(fp)
  81136c:	18801926 	beq	r3,r2,8113d4 <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811370:	0005303a 	rdctl	r2,status
  811374:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811378:	e0ffef17 	ldw	r3,-68(fp)
  81137c:	00bfff84 	movi	r2,-2
  811380:	1884703a 	and	r2,r3,r2
  811384:	1001703a 	wrctl	status,r2
  
  return context;
  811388:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  81138c:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  811390:	e0bffb17 	ldw	r2,-20(fp)
  811394:	10800817 	ldw	r2,32(r2)
  811398:	10c00054 	ori	r3,r2,1
  81139c:	e0bffb17 	ldw	r2,-20(fp)
  8113a0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8113a4:	e0bffb17 	ldw	r2,-20(fp)
  8113a8:	10800017 	ldw	r2,0(r2)
  8113ac:	11000104 	addi	r4,r2,4
  8113b0:	e0bffb17 	ldw	r2,-20(fp)
  8113b4:	10800817 	ldw	r2,32(r2)
  8113b8:	1007883a 	mov	r3,r2
  8113bc:	2005883a 	mov	r2,r4
  8113c0:	10c00035 	stwio	r3,0(r2)
  8113c4:	e0bff817 	ldw	r2,-32(fp)
  8113c8:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8113cc:	e0bfee17 	ldw	r2,-72(fp)
  8113d0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  8113d4:	e0fff917 	ldw	r3,-28(fp)
  8113d8:	e0bffc17 	ldw	r2,-16(fp)
  8113dc:	18800526 	beq	r3,r2,8113f4 <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
  8113e0:	e0fff917 	ldw	r3,-28(fp)
  8113e4:	e0bffc17 	ldw	r2,-16(fp)
  8113e8:	1887c83a 	sub	r3,r3,r2
  8113ec:	e0ffff15 	stw	r3,-4(fp)
  8113f0:	00000906 	br	811418 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
  8113f4:	e0bffe17 	ldw	r2,-8(fp)
  8113f8:	1090000c 	andi	r2,r2,16384
  8113fc:	1005003a 	cmpeq	r2,r2,zero
  811400:	1000031e 	bne	r2,zero,811410 <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
  811404:	00bffd44 	movi	r2,-11
  811408:	e0bfff15 	stw	r2,-4(fp)
  81140c:	00000206 	br	811418 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
  811410:	00bffec4 	movi	r2,-5
  811414:	e0bfff15 	stw	r2,-4(fp)
  811418:	e0bfff17 	ldw	r2,-4(fp)
}
  81141c:	e037883a 	mov	sp,fp
  811420:	dfc00117 	ldw	ra,4(sp)
  811424:	df000017 	ldw	fp,0(sp)
  811428:	dec00204 	addi	sp,sp,8
  81142c:	f800283a 	ret

00811430 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  811430:	deffeb04 	addi	sp,sp,-84
  811434:	dfc01415 	stw	ra,80(sp)
  811438:	df001315 	stw	fp,76(sp)
  81143c:	df001304 	addi	fp,sp,76
  811440:	e13ffb15 	stw	r4,-20(fp)
  811444:	e17ffc15 	stw	r5,-16(fp)
  811448:	e1bffd15 	stw	r6,-12(fp)
  81144c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  811450:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  811454:	e0bffc17 	ldw	r2,-16(fp)
  811458:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
  81145c:	e0bffb17 	ldw	r2,-20(fp)
  811460:	10800b17 	ldw	r2,44(r2)
  811464:	e0bff315 	stw	r2,-52(fp)
  811468:	e03ff40d 	sth	zero,-48(fp)
  81146c:	e17ff40b 	ldhu	r5,-48(fp)
  811470:	e1bffa04 	addi	r6,fp,-24
  811474:	e13ff317 	ldw	r4,-52(fp)
  811478:	080dc2c0 	call	80dc2c <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  81147c:	00003a06 	br	811568 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  811480:	e0bffb17 	ldw	r2,-20(fp)
  811484:	10800f17 	ldw	r2,60(r2)
  811488:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  81148c:	e0bffb17 	ldw	r2,-20(fp)
  811490:	10801017 	ldw	r2,64(r2)
  811494:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
  811498:	e0fff917 	ldw	r3,-28(fp)
  81149c:	e0bff817 	ldw	r2,-32(fp)
  8114a0:	1880062e 	bgeu	r3,r2,8114bc <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
  8114a4:	e0fff817 	ldw	r3,-32(fp)
  8114a8:	e0bff917 	ldw	r2,-28(fp)
  8114ac:	1885c83a 	sub	r2,r3,r2
  8114b0:	10bfffc4 	addi	r2,r2,-1
  8114b4:	e0bff715 	stw	r2,-36(fp)
  8114b8:	00000c06 	br	8114ec <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
  8114bc:	e0bff817 	ldw	r2,-32(fp)
  8114c0:	1005003a 	cmpeq	r2,r2,zero
  8114c4:	1000051e 	bne	r2,zero,8114dc <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  8114c8:	00820004 	movi	r2,2048
  8114cc:	e0fff917 	ldw	r3,-28(fp)
  8114d0:	10c5c83a 	sub	r2,r2,r3
  8114d4:	e0bff715 	stw	r2,-36(fp)
  8114d8:	00000406 	br	8114ec <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  8114dc:	0081ffc4 	movi	r2,2047
  8114e0:	e0fff917 	ldw	r3,-28(fp)
  8114e4:	10c5c83a 	sub	r2,r2,r3
  8114e8:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
  8114ec:	e0bff717 	ldw	r2,-36(fp)
  8114f0:	1005003a 	cmpeq	r2,r2,zero
  8114f4:	10001f1e 	bne	r2,zero,811574 <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
  8114f8:	e0fffd17 	ldw	r3,-12(fp)
  8114fc:	e0bff717 	ldw	r2,-36(fp)
  811500:	1880022e 	bgeu	r3,r2,81150c <altera_avalon_jtag_uart_write+0xdc>
        n = count;
  811504:	e0bffd17 	ldw	r2,-12(fp)
  811508:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  81150c:	e0bffb17 	ldw	r2,-20(fp)
  811510:	10c21104 	addi	r3,r2,2116
  811514:	e0bff917 	ldw	r2,-28(fp)
  811518:	1885883a 	add	r2,r3,r2
  81151c:	e0fffc17 	ldw	r3,-16(fp)
  811520:	1009883a 	mov	r4,r2
  811524:	180b883a 	mov	r5,r3
  811528:	e1bff717 	ldw	r6,-36(fp)
  81152c:	08054bc0 	call	8054bc <memcpy>
      ptr   += n;
  811530:	e0fff717 	ldw	r3,-36(fp)
  811534:	e0bffc17 	ldw	r2,-16(fp)
  811538:	10c5883a 	add	r2,r2,r3
  81153c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  811540:	e0fffd17 	ldw	r3,-12(fp)
  811544:	e0bff717 	ldw	r2,-36(fp)
  811548:	1885c83a 	sub	r2,r3,r2
  81154c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811550:	e0fff917 	ldw	r3,-28(fp)
  811554:	e0bff717 	ldw	r2,-36(fp)
  811558:	1885883a 	add	r2,r3,r2
  81155c:	10c1ffcc 	andi	r3,r2,2047
  811560:	e0bffb17 	ldw	r2,-20(fp)
  811564:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  811568:	e0bffd17 	ldw	r2,-12(fp)
  81156c:	10800048 	cmpgei	r2,r2,1
  811570:	103fc31e 	bne	r2,zero,811480 <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811574:	0005303a 	rdctl	r2,status
  811578:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81157c:	e0fff217 	ldw	r3,-56(fp)
  811580:	00bfff84 	movi	r2,-2
  811584:	1884703a 	and	r2,r3,r2
  811588:	1001703a 	wrctl	status,r2
  
  return context;
  81158c:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  811590:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  811594:	e0bffb17 	ldw	r2,-20(fp)
  811598:	10800817 	ldw	r2,32(r2)
  81159c:	10c00094 	ori	r3,r2,2
  8115a0:	e0bffb17 	ldw	r2,-20(fp)
  8115a4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8115a8:	e0bffb17 	ldw	r2,-20(fp)
  8115ac:	10800017 	ldw	r2,0(r2)
  8115b0:	11000104 	addi	r4,r2,4
  8115b4:	e0bffb17 	ldw	r2,-20(fp)
  8115b8:	10800817 	ldw	r2,32(r2)
  8115bc:	1007883a 	mov	r3,r2
  8115c0:	2005883a 	mov	r2,r4
  8115c4:	10c00035 	stwio	r3,0(r2)
  8115c8:	e0bff617 	ldw	r2,-40(fp)
  8115cc:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8115d0:	e0bff117 	ldw	r2,-60(fp)
  8115d4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  8115d8:	e0bffd17 	ldw	r2,-12(fp)
  8115dc:	10800050 	cmplti	r2,r2,1
  8115e0:	10002d1e 	bne	r2,zero,811698 <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
  8115e4:	e0bffe17 	ldw	r2,-8(fp)
  8115e8:	1090000c 	andi	r2,r2,16384
  8115ec:	1004c03a 	cmpne	r2,r2,zero
  8115f0:	10002c1e 	bne	r2,zero,8116a4 <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
  8115f4:	00802074 	movhi	r2,129
  8115f8:	109fa244 	addi	r2,r2,32393
  8115fc:	10800003 	ldbu	r2,0(r2)
  811600:	10803fcc 	andi	r2,r2,255
  811604:	10800058 	cmpnei	r2,r2,1
  811608:	1000161e 	bne	r2,zero,811664 <altera_avalon_jtag_uart_write+0x234>
         * When running in a multi-threaded mode, we pend on the write event
         * flag set or the timeout flag in the isr. This avoids wasting CPU
         * cycles waiting in this thread, when we could be doing something
         * more profitable elsewhere.
         */
        ALT_FLAG_PEND (sp->events,
  81160c:	e0bffb17 	ldw	r2,-20(fp)
  811610:	10800c17 	ldw	r2,48(r2)
  811614:	e0bfee15 	stw	r2,-72(fp)
  811618:	00800184 	movi	r2,6
  81161c:	e0bfef0d 	sth	r2,-68(fp)
  811620:	00bfe0c4 	movi	r2,-125
  811624:	e0bfef85 	stb	r2,-66(fp)
  811628:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  81162c:	00802074 	movhi	r2,129
  811630:	109fa244 	addi	r2,r2,32393
  811634:	10800003 	ldbu	r2,0(r2)
  811638:	10803fcc 	andi	r2,r2,255
  81163c:	1005003a 	cmpeq	r2,r2,zero
  811640:	1000111e 	bne	r2,zero,811688 <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  811644:	e17fef0b 	ldhu	r5,-68(fp)
  811648:	e1bfef83 	ldbu	r6,-66(fp)
  81164c:	e1fff00b 	ldhu	r7,-64(fp)
  811650:	e0bffa44 	addi	r2,fp,-23
  811654:	d8800015 	stw	r2,0(sp)
  811658:	e13fee17 	ldw	r4,-72(fp)
  81165c:	080acf00 	call	80acf0 <OSFlagPend>
    return err;
  811660:	00000906 	br	811688 <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  811664:	e0bffb17 	ldw	r2,-20(fp)
  811668:	10c01017 	ldw	r3,64(r2)
  81166c:	e0bff817 	ldw	r2,-32(fp)
  811670:	1880051e 	bne	r3,r2,811688 <altera_avalon_jtag_uart_write+0x258>
  811674:	e0bffb17 	ldw	r2,-20(fp)
  811678:	10c00917 	ldw	r3,36(r2)
  81167c:	e0bffb17 	ldw	r2,-20(fp)
  811680:	10800117 	ldw	r2,4(r2)
  811684:	18bff736 	bltu	r3,r2,811664 <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  811688:	e0bffb17 	ldw	r2,-20(fp)
  81168c:	10c01017 	ldw	r3,64(r2)
  811690:	e0bff817 	ldw	r2,-32(fp)
  811694:	18800326 	beq	r3,r2,8116a4 <altera_avalon_jtag_uart_write+0x274>
        break;
    }
  }
  while (count > 0);
  811698:	e0bffd17 	ldw	r2,-12(fp)
  81169c:	10800048 	cmpgei	r2,r2,1
  8116a0:	103fb11e 	bne	r2,zero,811568 <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
  8116a4:	e0bffb17 	ldw	r2,-20(fp)
  8116a8:	11000b17 	ldw	r4,44(r2)
  8116ac:	080e0240 	call	80e024 <OSSemPost>

  if (ptr != start)
  8116b0:	e0fffc17 	ldw	r3,-16(fp)
  8116b4:	e0bff517 	ldw	r2,-44(fp)
  8116b8:	18800526 	beq	r3,r2,8116d0 <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
  8116bc:	e0fffc17 	ldw	r3,-16(fp)
  8116c0:	e0bff517 	ldw	r2,-44(fp)
  8116c4:	1887c83a 	sub	r3,r3,r2
  8116c8:	e0ffff15 	stw	r3,-4(fp)
  8116cc:	00000906 	br	8116f4 <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
  8116d0:	e0bffe17 	ldw	r2,-8(fp)
  8116d4:	1090000c 	andi	r2,r2,16384
  8116d8:	1005003a 	cmpeq	r2,r2,zero
  8116dc:	1000031e 	bne	r2,zero,8116ec <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
  8116e0:	00bffd44 	movi	r2,-11
  8116e4:	e0bfff15 	stw	r2,-4(fp)
  8116e8:	00000206 	br	8116f4 <altera_avalon_jtag_uart_write+0x2c4>
  else
    return -EIO; /* Host not connected */
  8116ec:	00bffec4 	movi	r2,-5
  8116f0:	e0bfff15 	stw	r2,-4(fp)
  8116f4:	e0bfff17 	ldw	r2,-4(fp)
}
  8116f8:	e037883a 	mov	sp,fp
  8116fc:	dfc00117 	ldw	ra,4(sp)
  811700:	df000017 	ldw	fp,0(sp)
  811704:	dec00204 	addi	sp,sp,8
  811708:	f800283a 	ret

0081170c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  81170c:	defffa04 	addi	sp,sp,-24
  811710:	dfc00515 	stw	ra,20(sp)
  811714:	df000415 	stw	fp,16(sp)
  811718:	df000404 	addi	fp,sp,16
  81171c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  811720:	e0bfff17 	ldw	r2,-4(fp)
  811724:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  811728:	e0bfff17 	ldw	r2,-4(fp)
  81172c:	10800104 	addi	r2,r2,4
  811730:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811734:	0005303a 	rdctl	r2,status
  811738:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81173c:	e0fffd17 	ldw	r3,-12(fp)
  811740:	00bfff84 	movi	r2,-2
  811744:	1884703a 	and	r2,r3,r2
  811748:	1001703a 	wrctl	status,r2
  
  return context;
  81174c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  811750:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  811754:	08135a00 	call	8135a0 <alt_tick>
  811758:	e0bffe17 	ldw	r2,-8(fp)
  81175c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811760:	e0bffc17 	ldw	r2,-16(fp)
  811764:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  811768:	e037883a 	mov	sp,fp
  81176c:	dfc00117 	ldw	ra,4(sp)
  811770:	df000017 	ldw	fp,0(sp)
  811774:	dec00204 	addi	sp,sp,8
  811778:	f800283a 	ret

0081177c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  81177c:	defff804 	addi	sp,sp,-32
  811780:	dfc00715 	stw	ra,28(sp)
  811784:	df000615 	stw	fp,24(sp)
  811788:	df000604 	addi	fp,sp,24
  81178c:	e13ffc15 	stw	r4,-16(fp)
  811790:	e17ffd15 	stw	r5,-12(fp)
  811794:	e1bffe15 	stw	r6,-8(fp)
  811798:	e1ffff15 	stw	r7,-4(fp)
  81179c:	e0bfff17 	ldw	r2,-4(fp)
  8117a0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  8117a4:	00802074 	movhi	r2,129
  8117a8:	109fb604 	addi	r2,r2,32472
  8117ac:	10800017 	ldw	r2,0(r2)
  8117b0:	1004c03a 	cmpne	r2,r2,zero
  8117b4:	1000041e 	bne	r2,zero,8117c8 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  8117b8:	00c02074 	movhi	r3,129
  8117bc:	18dfb604 	addi	r3,r3,32472
  8117c0:	e0bffb17 	ldw	r2,-20(fp)
  8117c4:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  8117c8:	e0bffc17 	ldw	r2,-16(fp)
  8117cc:	10800104 	addi	r2,r2,4
  8117d0:	1007883a 	mov	r3,r2
  8117d4:	008001c4 	movi	r2,7
  8117d8:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  8117dc:	d8000015 	stw	zero,0(sp)
  8117e0:	e13ffd17 	ldw	r4,-12(fp)
  8117e4:	e17ffe17 	ldw	r5,-8(fp)
  8117e8:	01802074 	movhi	r6,129
  8117ec:	3185c304 	addi	r6,r6,5900
  8117f0:	e1fffc17 	ldw	r7,-16(fp)
  8117f4:	08072a00 	call	8072a0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  8117f8:	e037883a 	mov	sp,fp
  8117fc:	dfc00117 	ldw	ra,4(sp)
  811800:	df000017 	ldw	fp,0(sp)
  811804:	dec00204 	addi	sp,sp,8
  811808:	f800283a 	ret

0081180c <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
  81180c:	defffc04 	addi	sp,sp,-16
  811810:	dfc00315 	stw	ra,12(sp)
  811814:	df000215 	stw	fp,8(sp)
  811818:	df000204 	addi	fp,sp,8
  81181c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
  811820:	e13fff17 	ldw	r4,-4(fp)
  811824:	01402074 	movhi	r5,129
  811828:	29589304 	addi	r5,r5,25164
  81182c:	08130440 	call	813044 <alt_find_dev>
  811830:	e0bffe15 	stw	r2,-8(fp)
  return dev;
  811834:	e0bffe17 	ldw	r2,-8(fp)
}
  811838:	e037883a 	mov	sp,fp
  81183c:	dfc00117 	ldw	ra,4(sp)
  811840:	df000017 	ldw	fp,0(sp)
  811844:	dec00204 	addi	sp,sp,8
  811848:	f800283a 	ret

0081184c <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
  81184c:	defffd04 	addi	sp,sp,-12
  811850:	df000215 	stw	fp,8(sp)
  811854:	df000204 	addi	fp,sp,8
  811858:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  81185c:	e0bfff17 	ldw	r2,-4(fp)
  811860:	10800a17 	ldw	r2,40(r2)
  811864:	10800037 	ldwio	r2,0(r2)
  811868:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
  81186c:	e0bffe17 	ldw	r2,-8(fp)
  811870:	10800054 	ori	r2,r2,1
  811874:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  811878:	e0bfff17 	ldw	r2,-4(fp)
  81187c:	10800a17 	ldw	r2,40(r2)
  811880:	e0fffe17 	ldw	r3,-8(fp)
  811884:	10c00035 	stwio	r3,0(r2)
}
  811888:	e037883a 	mov	sp,fp
  81188c:	df000017 	ldw	fp,0(sp)
  811890:	dec00104 	addi	sp,sp,4
  811894:	f800283a 	ret

00811898 <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
  811898:	defffd04 	addi	sp,sp,-12
  81189c:	df000215 	stw	fp,8(sp)
  8118a0:	df000204 	addi	fp,sp,8
  8118a4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  8118a8:	e0bfff17 	ldw	r2,-4(fp)
  8118ac:	10800a17 	ldw	r2,40(r2)
  8118b0:	10800037 	ldwio	r2,0(r2)
  8118b4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
  8118b8:	e0fffe17 	ldw	r3,-8(fp)
  8118bc:	00bfff84 	movi	r2,-2
  8118c0:	1884703a 	and	r2,r3,r2
  8118c4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  8118c8:	e0bfff17 	ldw	r2,-4(fp)
  8118cc:	10800a17 	ldw	r2,40(r2)
  8118d0:	e0fffe17 	ldw	r3,-8(fp)
  8118d4:	10c00035 	stwio	r3,0(r2)
}
  8118d8:	e037883a 	mov	sp,fp
  8118dc:	df000017 	ldw	fp,0(sp)
  8118e0:	dec00104 	addi	sp,sp,4
  8118e4:	f800283a 	ret

008118e8 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
  8118e8:	defffd04 	addi	sp,sp,-12
  8118ec:	df000215 	stw	fp,8(sp)
  8118f0:	df000204 	addi	fp,sp,8
  8118f4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  8118f8:	e0bfff17 	ldw	r2,-4(fp)
  8118fc:	10800a17 	ldw	r2,40(r2)
  811900:	10800037 	ldwio	r2,0(r2)
  811904:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
  811908:	e0bffe17 	ldw	r2,-8(fp)
  81190c:	10800094 	ori	r2,r2,2
  811910:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  811914:	e0bfff17 	ldw	r2,-4(fp)
  811918:	10800a17 	ldw	r2,40(r2)
  81191c:	e0fffe17 	ldw	r3,-8(fp)
  811920:	10c00035 	stwio	r3,0(r2)
}
  811924:	e037883a 	mov	sp,fp
  811928:	df000017 	ldw	fp,0(sp)
  81192c:	dec00104 	addi	sp,sp,4
  811930:	f800283a 	ret

00811934 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
  811934:	defffd04 	addi	sp,sp,-12
  811938:	df000215 	stw	fp,8(sp)
  81193c:	df000204 	addi	fp,sp,8
  811940:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  811944:	e0bfff17 	ldw	r2,-4(fp)
  811948:	10800a17 	ldw	r2,40(r2)
  81194c:	10800037 	ldwio	r2,0(r2)
  811950:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
  811954:	e0fffe17 	ldw	r3,-8(fp)
  811958:	00bfff44 	movi	r2,-3
  81195c:	1884703a 	and	r2,r3,r2
  811960:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  811964:	e0bfff17 	ldw	r2,-4(fp)
  811968:	10800a17 	ldw	r2,40(r2)
  81196c:	e0fffe17 	ldw	r3,-8(fp)
  811970:	10c00035 	stwio	r3,0(r2)
}
  811974:	e037883a 	mov	sp,fp
  811978:	df000017 	ldw	fp,0(sp)
  81197c:	dec00104 	addi	sp,sp,4
  811980:	f800283a 	ret

00811984 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
  811984:	defffd04 	addi	sp,sp,-12
  811988:	df000215 	stw	fp,8(sp)
  81198c:	df000204 	addi	fp,sp,8
  811990:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  811994:	e0bfff17 	ldw	r2,-4(fp)
  811998:	10800a17 	ldw	r2,40(r2)
  81199c:	10800037 	ldwio	r2,0(r2)
  8119a0:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
  8119a4:	e0bffe17 	ldw	r2,-8(fp)
  8119a8:	1080400c 	andi	r2,r2,256
  8119ac:	1004c03a 	cmpne	r2,r2,zero
}
  8119b0:	e037883a 	mov	sp,fp
  8119b4:	df000017 	ldw	fp,0(sp)
  8119b8:	dec00104 	addi	sp,sp,4
  8119bc:	f800283a 	ret

008119c0 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
  8119c0:	defffd04 	addi	sp,sp,-12
  8119c4:	df000215 	stw	fp,8(sp)
  8119c8:	df000204 	addi	fp,sp,8
  8119cc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  8119d0:	e0bfff17 	ldw	r2,-4(fp)
  8119d4:	10800a17 	ldw	r2,40(r2)
  8119d8:	10800037 	ldwio	r2,0(r2)
  8119dc:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
  8119e0:	e0bffe17 	ldw	r2,-8(fp)
  8119e4:	1080800c 	andi	r2,r2,512
  8119e8:	1004c03a 	cmpne	r2,r2,zero
}
  8119ec:	e037883a 	mov	sp,fp
  8119f0:	df000017 	ldw	fp,0(sp)
  8119f4:	dec00104 	addi	sp,sp,4
  8119f8:	f800283a 	ret

008119fc <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
  8119fc:	defffd04 	addi	sp,sp,-12
  811a00:	df000215 	stw	fp,8(sp)
  811a04:	df000204 	addi	fp,sp,8
  811a08:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  811a0c:	e0bfff17 	ldw	r2,-4(fp)
  811a10:	10800a17 	ldw	r2,40(r2)
  811a14:	10800037 	ldwio	r2,0(r2)
  811a18:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
  811a1c:	e0bffe17 	ldw	r2,-8(fp)
  811a20:	10800114 	ori	r2,r2,4
  811a24:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
  811a28:	e0bffe17 	ldw	r2,-8(fp)
  811a2c:	10800214 	ori	r2,r2,8
  811a30:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  811a34:	e0bfff17 	ldw	r2,-4(fp)
  811a38:	10800a17 	ldw	r2,40(r2)
  811a3c:	e0fffe17 	ldw	r3,-8(fp)
  811a40:	10c00035 	stwio	r3,0(r2)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
  811a44:	e0fffe17 	ldw	r3,-8(fp)
  811a48:	00bffec4 	movi	r2,-5
  811a4c:	1884703a 	and	r2,r3,r2
  811a50:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
  811a54:	e0fffe17 	ldw	r3,-8(fp)
  811a58:	00bffdc4 	movi	r2,-9
  811a5c:	1884703a 	and	r2,r3,r2
  811a60:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  811a64:	e0bfff17 	ldw	r2,-4(fp)
  811a68:	10800a17 	ldw	r2,40(r2)
  811a6c:	e0fffe17 	ldw	r3,-8(fp)
  811a70:	10c00035 	stwio	r3,0(r2)
}
  811a74:	e037883a 	mov	sp,fp
  811a78:	df000017 	ldw	fp,0(sp)
  811a7c:	dec00104 	addi	sp,sp,4
  811a80:	f800283a 	ret

00811a84 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
  811a84:	defffb04 	addi	sp,sp,-20
  811a88:	df000415 	stw	fp,16(sp)
  811a8c:	df000404 	addi	fp,sp,16
  811a90:	e13ffd15 	stw	r4,-12(fp)
  811a94:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  811a98:	e0bffd17 	ldw	r2,-12(fp)
  811a9c:	10800a17 	ldw	r2,40(r2)
  811aa0:	10800104 	addi	r2,r2,4
  811aa4:	10800037 	ldwio	r2,0(r2)
  811aa8:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  811aac:	e0bffe17 	ldw	r2,-8(fp)
  811ab0:	1004c03a 	cmpne	r2,r2,zero
  811ab4:	1000051e 	bne	r2,zero,811acc <alt_up_audio_read_fifo_avail+0x48>
  811ab8:	e0bffc17 	ldw	r2,-16(fp)
  811abc:	10bfc00c 	andi	r2,r2,65280
  811ac0:	1004d23a 	srli	r2,r2,8
  811ac4:	e0bfff15 	stw	r2,-4(fp)
  811ac8:	00000306 	br	811ad8 <alt_up_audio_read_fifo_avail+0x54>
  811acc:	e0bffc17 	ldw	r2,-16(fp)
  811ad0:	10803fcc 	andi	r2,r2,255
  811ad4:	e0bfff15 	stw	r2,-4(fp)
  811ad8:	e0bfff17 	ldw	r2,-4(fp)
  811adc:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
  811ae0:	e0bffc17 	ldw	r2,-16(fp)
}
  811ae4:	e037883a 	mov	sp,fp
  811ae8:	df000017 	ldw	fp,0(sp)
  811aec:	dec00104 	addi	sp,sp,4
  811af0:	f800283a 	ret

00811af4 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  811af4:	defff904 	addi	sp,sp,-28
  811af8:	dfc00615 	stw	ra,24(sp)
  811afc:	df000515 	stw	fp,20(sp)
  811b00:	df000504 	addi	fp,sp,20
  811b04:	e13ffc15 	stw	r4,-16(fp)
  811b08:	e17ffd15 	stw	r5,-12(fp)
  811b0c:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
  811b10:	e13ffc17 	ldw	r4,-16(fp)
  811b14:	01400044 	movi	r5,1
  811b18:	0811a840 	call	811a84 <alt_up_audio_read_fifo_avail>
  811b1c:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
  811b20:	e0bffb17 	ldw	r2,-20(fp)
  811b24:	10801868 	cmpgeui	r2,r2,97
  811b28:	1000021e 	bne	r2,zero,811b34 <alt_up_audio_record_r+0x40>
		return 0;
  811b2c:	e03fff15 	stw	zero,-4(fp)
  811b30:	00000606 	br	811b4c <alt_up_audio_record_r+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  811b34:	e13ffc17 	ldw	r4,-16(fp)
  811b38:	e17ffd17 	ldw	r5,-12(fp)
  811b3c:	e1bffe17 	ldw	r6,-8(fp)
  811b40:	01c00044 	movi	r7,1
  811b44:	0811d280 	call	811d28 <alt_up_audio_read_fifo>
  811b48:	e0bfff15 	stw	r2,-4(fp)
  811b4c:	e0bfff17 	ldw	r2,-4(fp)
}
  811b50:	e037883a 	mov	sp,fp
  811b54:	dfc00117 	ldw	ra,4(sp)
  811b58:	df000017 	ldw	fp,0(sp)
  811b5c:	dec00204 	addi	sp,sp,8
  811b60:	f800283a 	ret

00811b64 <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  811b64:	defff904 	addi	sp,sp,-28
  811b68:	dfc00615 	stw	ra,24(sp)
  811b6c:	df000515 	stw	fp,20(sp)
  811b70:	df000504 	addi	fp,sp,20
  811b74:	e13ffc15 	stw	r4,-16(fp)
  811b78:	e17ffd15 	stw	r5,-12(fp)
  811b7c:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
  811b80:	e13ffc17 	ldw	r4,-16(fp)
  811b84:	000b883a 	mov	r5,zero
  811b88:	0811a840 	call	811a84 <alt_up_audio_read_fifo_avail>
  811b8c:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
  811b90:	e0bffb17 	ldw	r2,-20(fp)
  811b94:	10801868 	cmpgeui	r2,r2,97
  811b98:	1000021e 	bne	r2,zero,811ba4 <alt_up_audio_record_l+0x40>
		return 0;
  811b9c:	e03fff15 	stw	zero,-4(fp)
  811ba0:	00000606 	br	811bbc <alt_up_audio_record_l+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  811ba4:	e13ffc17 	ldw	r4,-16(fp)
  811ba8:	e17ffd17 	ldw	r5,-12(fp)
  811bac:	e1bffe17 	ldw	r6,-8(fp)
  811bb0:	000f883a 	mov	r7,zero
  811bb4:	0811d280 	call	811d28 <alt_up_audio_read_fifo>
  811bb8:	e0bfff15 	stw	r2,-4(fp)
  811bbc:	e0bfff17 	ldw	r2,-4(fp)
}
  811bc0:	e037883a 	mov	sp,fp
  811bc4:	dfc00117 	ldw	ra,4(sp)
  811bc8:	df000017 	ldw	fp,0(sp)
  811bcc:	dec00204 	addi	sp,sp,8
  811bd0:	f800283a 	ret

00811bd4 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
  811bd4:	defffb04 	addi	sp,sp,-20
  811bd8:	df000415 	stw	fp,16(sp)
  811bdc:	df000404 	addi	fp,sp,16
  811be0:	e13ffd15 	stw	r4,-12(fp)
  811be4:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  811be8:	e0bffd17 	ldw	r2,-12(fp)
  811bec:	10800a17 	ldw	r2,40(r2)
  811bf0:	10800104 	addi	r2,r2,4
  811bf4:	10800037 	ldwio	r2,0(r2)
  811bf8:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  811bfc:	e0bffe17 	ldw	r2,-8(fp)
  811c00:	1004c03a 	cmpne	r2,r2,zero
  811c04:	1000051e 	bne	r2,zero,811c1c <alt_up_audio_write_fifo_space+0x48>
  811c08:	e0bffc17 	ldw	r2,-16(fp)
  811c0c:	10bfc02c 	andhi	r2,r2,65280
  811c10:	1004d63a 	srli	r2,r2,24
  811c14:	e0bfff15 	stw	r2,-4(fp)
  811c18:	00000406 	br	811c2c <alt_up_audio_write_fifo_space+0x58>
  811c1c:	e0bffc17 	ldw	r2,-16(fp)
  811c20:	10803fec 	andhi	r2,r2,255
  811c24:	1004d43a 	srli	r2,r2,16
  811c28:	e0bfff15 	stw	r2,-4(fp)
  811c2c:	e0bfff17 	ldw	r2,-4(fp)
  811c30:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
  811c34:	e0bffc17 	ldw	r2,-16(fp)
}
  811c38:	e037883a 	mov	sp,fp
  811c3c:	df000017 	ldw	fp,0(sp)
  811c40:	dec00104 	addi	sp,sp,4
  811c44:	f800283a 	ret

00811c48 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  811c48:	defff904 	addi	sp,sp,-28
  811c4c:	dfc00615 	stw	ra,24(sp)
  811c50:	df000515 	stw	fp,20(sp)
  811c54:	df000504 	addi	fp,sp,20
  811c58:	e13ffc15 	stw	r4,-16(fp)
  811c5c:	e17ffd15 	stw	r5,-12(fp)
  811c60:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
  811c64:	e13ffc17 	ldw	r4,-16(fp)
  811c68:	01400044 	movi	r5,1
  811c6c:	0811bd40 	call	811bd4 <alt_up_audio_write_fifo_space>
  811c70:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
  811c74:	e0bffb17 	ldw	r2,-20(fp)
  811c78:	10801868 	cmpgeui	r2,r2,97
  811c7c:	1000021e 	bne	r2,zero,811c88 <alt_up_audio_play_r+0x40>
		return 0;
  811c80:	e03fff15 	stw	zero,-4(fp)
  811c84:	00000606 	br	811ca0 <alt_up_audio_play_r+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  811c88:	e13ffc17 	ldw	r4,-16(fp)
  811c8c:	e17ffd17 	ldw	r5,-12(fp)
  811c90:	e1bffe17 	ldw	r6,-8(fp)
  811c94:	01c00044 	movi	r7,1
  811c98:	0811e2c0 	call	811e2c <alt_up_audio_write_fifo>
  811c9c:	e0bfff15 	stw	r2,-4(fp)
  811ca0:	e0bfff17 	ldw	r2,-4(fp)
}
  811ca4:	e037883a 	mov	sp,fp
  811ca8:	dfc00117 	ldw	ra,4(sp)
  811cac:	df000017 	ldw	fp,0(sp)
  811cb0:	dec00204 	addi	sp,sp,8
  811cb4:	f800283a 	ret

00811cb8 <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  811cb8:	defff904 	addi	sp,sp,-28
  811cbc:	dfc00615 	stw	ra,24(sp)
  811cc0:	df000515 	stw	fp,20(sp)
  811cc4:	df000504 	addi	fp,sp,20
  811cc8:	e13ffc15 	stw	r4,-16(fp)
  811ccc:	e17ffd15 	stw	r5,-12(fp)
  811cd0:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
  811cd4:	e13ffc17 	ldw	r4,-16(fp)
  811cd8:	000b883a 	mov	r5,zero
  811cdc:	0811bd40 	call	811bd4 <alt_up_audio_write_fifo_space>
  811ce0:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
  811ce4:	e0bffb17 	ldw	r2,-20(fp)
  811ce8:	10801868 	cmpgeui	r2,r2,97
  811cec:	1000021e 	bne	r2,zero,811cf8 <alt_up_audio_play_l+0x40>
		return 0;
  811cf0:	e03fff15 	stw	zero,-4(fp)
  811cf4:	00000606 	br	811d10 <alt_up_audio_play_l+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  811cf8:	e13ffc17 	ldw	r4,-16(fp)
  811cfc:	e17ffd17 	ldw	r5,-12(fp)
  811d00:	e1bffe17 	ldw	r6,-8(fp)
  811d04:	000f883a 	mov	r7,zero
  811d08:	0811e2c0 	call	811e2c <alt_up_audio_write_fifo>
  811d0c:	e0bfff15 	stw	r2,-4(fp)
  811d10:	e0bfff17 	ldw	r2,-4(fp)
}
  811d14:	e037883a 	mov	sp,fp
  811d18:	dfc00117 	ldw	ra,4(sp)
  811d1c:	df000017 	ldw	fp,0(sp)
  811d20:	dec00204 	addi	sp,sp,8
  811d24:	f800283a 	ret

00811d28 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  811d28:	defff604 	addi	sp,sp,-40
  811d2c:	df000915 	stw	fp,36(sp)
  811d30:	df000904 	addi	fp,sp,36
  811d34:	e13ff915 	stw	r4,-28(fp)
  811d38:	e17ffa15 	stw	r5,-24(fp)
  811d3c:	e1bffb15 	stw	r6,-20(fp)
  811d40:	e1fffc15 	stw	r7,-16(fp)
	unsigned int fifospace;
	int count = 0;
  811d44:	e03ff715 	stw	zero,-36(fp)
	while ( count < len ) 
  811d48:	00003006 	br	811e0c <alt_up_audio_read_fifo+0xe4>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  811d4c:	e0bff917 	ldw	r2,-28(fp)
  811d50:	10800a17 	ldw	r2,40(r2)
  811d54:	10800104 	addi	r2,r2,4
  811d58:	10800037 	ldwio	r2,0(r2)
  811d5c:	e0bff815 	stw	r2,-32(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  811d60:	e0bffc17 	ldw	r2,-16(fp)
  811d64:	1004c03a 	cmpne	r2,r2,zero
  811d68:	1000051e 	bne	r2,zero,811d80 <alt_up_audio_read_fifo+0x58>
  811d6c:	e0bff817 	ldw	r2,-32(fp)
  811d70:	10bfc00c 	andi	r2,r2,65280
  811d74:	1004d23a 	srli	r2,r2,8
  811d78:	e0bfff15 	stw	r2,-4(fp)
  811d7c:	00000306 	br	811d8c <alt_up_audio_read_fifo+0x64>
  811d80:	e0bff817 	ldw	r2,-32(fp)
  811d84:	10803fcc 	andi	r2,r2,255
  811d88:	e0bfff15 	stw	r2,-4(fp)
  811d8c:	e0bfff17 	ldw	r2,-4(fp)
  811d90:	e0bff815 	stw	r2,-32(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
  811d94:	e0bff817 	ldw	r2,-32(fp)
  811d98:	1005003a 	cmpeq	r2,r2,zero
  811d9c:	10001e1e 	bne	r2,zero,811e18 <alt_up_audio_read_fifo+0xf0>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
  811da0:	e0bff717 	ldw	r2,-36(fp)
  811da4:	1085883a 	add	r2,r2,r2
  811da8:	1085883a 	add	r2,r2,r2
  811dac:	1007883a 	mov	r3,r2
  811db0:	e0bffa17 	ldw	r2,-24(fp)
  811db4:	1887883a 	add	r3,r3,r2
  811db8:	e0fffe15 	stw	r3,-8(fp)
  811dbc:	e0bffc17 	ldw	r2,-16(fp)
  811dc0:	1004c03a 	cmpne	r2,r2,zero
  811dc4:	1000061e 	bne	r2,zero,811de0 <alt_up_audio_read_fifo+0xb8>
  811dc8:	e0bff917 	ldw	r2,-28(fp)
  811dcc:	10800a17 	ldw	r2,40(r2)
  811dd0:	10800204 	addi	r2,r2,8
  811dd4:	10800037 	ldwio	r2,0(r2)
  811dd8:	e0bffd15 	stw	r2,-12(fp)
  811ddc:	00000506 	br	811df4 <alt_up_audio_read_fifo+0xcc>
  811de0:	e0bff917 	ldw	r2,-28(fp)
  811de4:	10800a17 	ldw	r2,40(r2)
  811de8:	10800304 	addi	r2,r2,12
  811dec:	10800037 	ldwio	r2,0(r2)
  811df0:	e0bffd15 	stw	r2,-12(fp)
  811df4:	e0fffd17 	ldw	r3,-12(fp)
  811df8:	e0bffe17 	ldw	r2,-8(fp)
  811dfc:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
  811e00:	e0bff717 	ldw	r2,-36(fp)
  811e04:	10800044 	addi	r2,r2,1
  811e08:	e0bff715 	stw	r2,-36(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  811e0c:	e0fff717 	ldw	r3,-36(fp)
  811e10:	e0bffb17 	ldw	r2,-20(fp)
  811e14:	18bfcd16 	blt	r3,r2,811d4c <alt_up_audio_read_fifo+0x24>
		{
			// no more data to read
			break;
		}
	}
	return count;
  811e18:	e0bff717 	ldw	r2,-36(fp)
}
  811e1c:	e037883a 	mov	sp,fp
  811e20:	df000017 	ldw	fp,0(sp)
  811e24:	dec00104 	addi	sp,sp,4
  811e28:	f800283a 	ret

00811e2c <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  811e2c:	defff804 	addi	sp,sp,-32
  811e30:	df000715 	stw	fp,28(sp)
  811e34:	df000704 	addi	fp,sp,28
  811e38:	e13ffb15 	stw	r4,-20(fp)
  811e3c:	e17ffc15 	stw	r5,-16(fp)
  811e40:	e1bffd15 	stw	r6,-12(fp)
  811e44:	e1fffe15 	stw	r7,-8(fp)
	unsigned int fifospace;
	int count = 0;
  811e48:	e03ff915 	stw	zero,-28(fp)
	while ( count < len ) 
  811e4c:	00003a06 	br	811f38 <alt_up_audio_write_fifo+0x10c>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  811e50:	e0bffb17 	ldw	r2,-20(fp)
  811e54:	10800a17 	ldw	r2,40(r2)
  811e58:	10800104 	addi	r2,r2,4
  811e5c:	10800037 	ldwio	r2,0(r2)
  811e60:	e0bffa15 	stw	r2,-24(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  811e64:	e0bffe17 	ldw	r2,-8(fp)
  811e68:	1004c03a 	cmpne	r2,r2,zero
  811e6c:	1000051e 	bne	r2,zero,811e84 <alt_up_audio_write_fifo+0x58>
  811e70:	e0bffa17 	ldw	r2,-24(fp)
  811e74:	10bfc02c 	andhi	r2,r2,65280
  811e78:	1004d63a 	srli	r2,r2,24
  811e7c:	e0bfff15 	stw	r2,-4(fp)
  811e80:	00000406 	br	811e94 <alt_up_audio_write_fifo+0x68>
  811e84:	e0bffa17 	ldw	r2,-24(fp)
  811e88:	10803fec 	andhi	r2,r2,255
  811e8c:	1004d43a 	srli	r2,r2,16
  811e90:	e0bfff15 	stw	r2,-4(fp)
  811e94:	e0bfff17 	ldw	r2,-4(fp)
  811e98:	e0bffa15 	stw	r2,-24(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
  811e9c:	e0bffa17 	ldw	r2,-24(fp)
  811ea0:	1005003a 	cmpeq	r2,r2,zero
  811ea4:	1000271e 	bne	r2,zero,811f44 <alt_up_audio_write_fifo+0x118>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
  811ea8:	e0bffe17 	ldw	r2,-8(fp)
  811eac:	1004c03a 	cmpne	r2,r2,zero
  811eb0:	1000111e 	bne	r2,zero,811ef8 <alt_up_audio_write_fifo+0xcc>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
  811eb4:	e0bffb17 	ldw	r2,-20(fp)
  811eb8:	10800a17 	ldw	r2,40(r2)
  811ebc:	11000204 	addi	r4,r2,8
  811ec0:	e0bff917 	ldw	r2,-28(fp)
  811ec4:	1085883a 	add	r2,r2,r2
  811ec8:	1085883a 	add	r2,r2,r2
  811ecc:	1007883a 	mov	r3,r2
  811ed0:	e0bffc17 	ldw	r2,-16(fp)
  811ed4:	1885883a 	add	r2,r3,r2
  811ed8:	10800017 	ldw	r2,0(r2)
  811edc:	1007883a 	mov	r3,r2
  811ee0:	e0bff917 	ldw	r2,-28(fp)
  811ee4:	10800044 	addi	r2,r2,1
  811ee8:	e0bff915 	stw	r2,-28(fp)
  811eec:	2005883a 	mov	r2,r4
  811ef0:	10c00035 	stwio	r3,0(r2)
  811ef4:	00001006 	br	811f38 <alt_up_audio_write_fifo+0x10c>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
  811ef8:	e0bffb17 	ldw	r2,-20(fp)
  811efc:	10800a17 	ldw	r2,40(r2)
  811f00:	11000304 	addi	r4,r2,12
  811f04:	e0bff917 	ldw	r2,-28(fp)
  811f08:	1085883a 	add	r2,r2,r2
  811f0c:	1085883a 	add	r2,r2,r2
  811f10:	1007883a 	mov	r3,r2
  811f14:	e0bffc17 	ldw	r2,-16(fp)
  811f18:	1885883a 	add	r2,r3,r2
  811f1c:	10800017 	ldw	r2,0(r2)
  811f20:	1007883a 	mov	r3,r2
  811f24:	e0bff917 	ldw	r2,-28(fp)
  811f28:	10800044 	addi	r2,r2,1
  811f2c:	e0bff915 	stw	r2,-28(fp)
  811f30:	2005883a 	mov	r2,r4
  811f34:	10c00035 	stwio	r3,0(r2)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  811f38:	e0fff917 	ldw	r3,-28(fp)
  811f3c:	e0bffd17 	ldw	r2,-12(fp)
  811f40:	18bfc316 	blt	r3,r2,811e50 <alt_up_audio_write_fifo+0x24>
		{
			// no more space to write
			break;
		}
	}
	return count;
  811f44:	e0bff917 	ldw	r2,-28(fp)
}
  811f48:	e037883a 	mov	sp,fp
  811f4c:	df000017 	ldw	fp,0(sp)
  811f50:	dec00104 	addi	sp,sp,4
  811f54:	f800283a 	ret

00811f58 <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
  811f58:	defffc04 	addi	sp,sp,-16
  811f5c:	df000315 	stw	fp,12(sp)
  811f60:	df000304 	addi	fp,sp,12
  811f64:	e13ffd15 	stw	r4,-12(fp)
  811f68:	e17ffe15 	stw	r5,-8(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
  811f6c:	e0bffe17 	ldw	r2,-8(fp)
  811f70:	1004c03a 	cmpne	r2,r2,zero
  811f74:	1000061e 	bne	r2,zero,811f90 <alt_up_audio_read_fifo_head+0x38>
  811f78:	e0bffd17 	ldw	r2,-12(fp)
  811f7c:	10800a17 	ldw	r2,40(r2)
  811f80:	10800204 	addi	r2,r2,8
  811f84:	10800037 	ldwio	r2,0(r2)
  811f88:	e0bfff15 	stw	r2,-4(fp)
  811f8c:	00000506 	br	811fa4 <alt_up_audio_read_fifo_head+0x4c>
  811f90:	e0bffd17 	ldw	r2,-12(fp)
  811f94:	10800a17 	ldw	r2,40(r2)
  811f98:	10800304 	addi	r2,r2,12
  811f9c:	10800037 	ldwio	r2,0(r2)
  811fa0:	e0bfff15 	stw	r2,-4(fp)
  811fa4:	e0bfff17 	ldw	r2,-4(fp)
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
}
  811fa8:	e037883a 	mov	sp,fp
  811fac:	df000017 	ldw	fp,0(sp)
  811fb0:	dec00104 	addi	sp,sp,4
  811fb4:	f800283a 	ret

00811fb8 <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
  811fb8:	defffc04 	addi	sp,sp,-16
  811fbc:	df000315 	stw	fp,12(sp)
  811fc0:	df000304 	addi	fp,sp,12
  811fc4:	e13ffd15 	stw	r4,-12(fp)
  811fc8:	e17ffe15 	stw	r5,-8(fp)
  811fcc:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
  811fd0:	e0bfff17 	ldw	r2,-4(fp)
  811fd4:	1004c03a 	cmpne	r2,r2,zero
  811fd8:	1000061e 	bne	r2,zero,811ff4 <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
  811fdc:	e0bffd17 	ldw	r2,-12(fp)
  811fe0:	10800a17 	ldw	r2,40(r2)
  811fe4:	10800204 	addi	r2,r2,8
  811fe8:	e0fffe17 	ldw	r3,-8(fp)
  811fec:	10c00035 	stwio	r3,0(r2)
  811ff0:	00000506 	br	812008 <alt_up_audio_write_fifo_head+0x50>
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
  811ff4:	e0bffd17 	ldw	r2,-12(fp)
  811ff8:	10800a17 	ldw	r2,40(r2)
  811ffc:	10800304 	addi	r2,r2,12
  812000:	e0fffe17 	ldw	r3,-8(fp)
  812004:	10c00035 	stwio	r3,0(r2)
}
  812008:	e037883a 	mov	sp,fp
  81200c:	df000017 	ldw	fp,0(sp)
  812010:	dec00104 	addi	sp,sp,4
  812014:	f800283a 	ret

00812018 <alt_up_av_config_open_dev>:

#include "altera_up_avalon_audio_and_video_config.h"
#include "altera_up_avalon_audio_and_video_config_regs.h"

alt_up_av_config_dev* alt_up_av_config_open_dev(const char* name)
{
  812018:	defffc04 	addi	sp,sp,-16
  81201c:	dfc00315 	stw	ra,12(sp)
  812020:	df000215 	stw	fp,8(sp)
  812024:	df000204 	addi	fp,sp,8
  812028:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_av_config_dev *dev = (alt_up_av_config_dev*)alt_find_dev(name, &alt_dev_list);
  81202c:	e13fff17 	ldw	r4,-4(fp)
  812030:	01402074 	movhi	r5,129
  812034:	29589304 	addi	r5,r5,25164
  812038:	08130440 	call	813044 <alt_find_dev>
  81203c:	e0bffe15 	stw	r2,-8(fp)
  dev->type = (IORD_ALT_UP_AV_CONFIG_STATUS(dev->base) & ALT_UP_AV_CONFIG_STATUS_CFG_MSK) >> ALT_UP_AV_CONFIG_STATUS_CFG_OFST;
  812040:	e0bffe17 	ldw	r2,-8(fp)
  812044:	10800a17 	ldw	r2,40(r2)
  812048:	10800104 	addi	r2,r2,4
  81204c:	10800037 	ldwio	r2,0(r2)
  812050:	10803fec 	andhi	r2,r2,255
  812054:	1005d43a 	srai	r2,r2,16
  812058:	1007883a 	mov	r3,r2
  81205c:	e0bffe17 	ldw	r2,-8(fp)
  812060:	10c00b15 	stw	r3,44(r2)

  return dev;
  812064:	e0bffe17 	ldw	r2,-8(fp)
}
  812068:	e037883a 	mov	sp,fp
  81206c:	dfc00117 	ldw	ra,4(sp)
  812070:	df000017 	ldw	fp,0(sp)
  812074:	dec00204 	addi	sp,sp,8
  812078:	f800283a 	ret

0081207c <alt_up_av_config_write_data>:
 * @param data --  the data to be sent
 *
 * @return 0 for success
 **/
int alt_up_av_config_write_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  81207c:	defffc04 	addi	sp,sp,-16
  812080:	df000315 	stw	fp,12(sp)
  812084:	df000304 	addi	fp,sp,12
  812088:	e13ffd15 	stw	r4,-12(fp)
  81208c:	e17ffe15 	stw	r5,-8(fp)
  812090:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  812094:	e0bffd17 	ldw	r2,-12(fp)
  812098:	10800a17 	ldw	r2,40(r2)
  81209c:	11000204 	addi	r4,r2,8
  8120a0:	e0bffe17 	ldw	r2,-8(fp)
  8120a4:	10c03fcc 	andi	r3,r2,255
  8120a8:	2005883a 	mov	r2,r4
  8120ac:	10c00035 	stwio	r3,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_AV_CONFIG_DATA(av_config->base, data & ALT_UP_AV_CONFIG_DATA_VALID_MSK); 
  8120b0:	e0bffd17 	ldw	r2,-12(fp)
  8120b4:	10800a17 	ldw	r2,40(r2)
  8120b8:	11000304 	addi	r4,r2,12
  8120bc:	e0bfff17 	ldw	r2,-4(fp)
  8120c0:	10ffffcc 	andi	r3,r2,65535
  8120c4:	2005883a 	mov	r2,r4
  8120c8:	10c00035 	stwio	r3,0(r2)

	return 0;
  8120cc:	0005883a 	mov	r2,zero
}
  8120d0:	e037883a 	mov	sp,fp
  8120d4:	df000017 	ldw	fp,0(sp)
  8120d8:	dec00104 	addi	sp,sp,4
  8120dc:	f800283a 	ret

008120e0 <alt_up_av_config_read_data>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_av_config_read_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 * data)
{
  8120e0:	defffa04 	addi	sp,sp,-24
  8120e4:	dfc00515 	stw	ra,20(sp)
  8120e8:	df000415 	stw	fp,16(sp)
  8120ec:	df000404 	addi	fp,sp,16
  8120f0:	e13ffc15 	stw	r4,-16(fp)
  8120f4:	e17ffd15 	stw	r5,-12(fp)
  8120f8:	e1bffe15 	stw	r6,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  8120fc:	e0bffc17 	ldw	r2,-16(fp)
  812100:	10800a17 	ldw	r2,40(r2)
  812104:	11000204 	addi	r4,r2,8
  812108:	e0bffd17 	ldw	r2,-12(fp)
  81210c:	10c03fcc 	andi	r3,r2,255
  812110:	2005883a 	mov	r2,r4
  812114:	10c00035 	stwio	r3,0(r2)

	// write data to the device Data register
	*(data) = IORD_ALT_UP_AV_CONFIG_DATA(av_config->base); 
  812118:	e0bffc17 	ldw	r2,-16(fp)
  81211c:	10800a17 	ldw	r2,40(r2)
  812120:	10800304 	addi	r2,r2,12
  812124:	10800037 	ldwio	r2,0(r2)
  812128:	1007883a 	mov	r3,r2
  81212c:	e0bffe17 	ldw	r2,-8(fp)
  812130:	10c00015 	stw	r3,0(r2)

	// check acknowledge is 0
	if (alt_up_av_config_read_acknowledge(av_config))
  812134:	e13ffc17 	ldw	r4,-16(fp)
  812138:	081220c0 	call	81220c <alt_up_av_config_read_acknowledge>
  81213c:	1005003a 	cmpeq	r2,r2,zero
  812140:	1000031e 	bne	r2,zero,812150 <alt_up_av_config_read_data+0x70>
		return -1;
  812144:	00bfffc4 	movi	r2,-1
  812148:	e0bfff15 	stw	r2,-4(fp)
  81214c:	00000106 	br	812154 <alt_up_av_config_read_data+0x74>

	return 0;
  812150:	e03fff15 	stw	zero,-4(fp)
  812154:	e0bfff17 	ldw	r2,-4(fp)
}
  812158:	e037883a 	mov	sp,fp
  81215c:	dfc00117 	ldw	ra,4(sp)
  812160:	df000017 	ldw	fp,0(sp)
  812164:	dec00204 	addi	sp,sp,8
  812168:	f800283a 	ret

0081216c <alt_up_av_config_reset>:

int alt_up_av_config_reset(alt_up_av_config_dev *av_config)
{
  81216c:	defffe04 	addi	sp,sp,-8
  812170:	df000115 	stw	fp,4(sp)
  812174:	df000104 	addi	fp,sp,4
  812178:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RESET(av_config->base);
  81217c:	e0bfff17 	ldw	r2,-4(fp)
  812180:	10800a17 	ldw	r2,40(r2)
  812184:	1007883a 	mov	r3,r2
  812188:	00800044 	movi	r2,1
  81218c:	18800025 	stbio	r2,0(r3)
	return 0;
  812190:	0005883a 	mov	r2,zero
}
  812194:	e037883a 	mov	sp,fp
  812198:	df000017 	ldw	fp,0(sp)
  81219c:	dec00104 	addi	sp,sp,4
  8121a0:	f800283a 	ret

008121a4 <alt_up_av_config_enable_interrupt>:

int alt_up_av_config_enable_interrupt(alt_up_av_config_dev *av_config)
{
  8121a4:	defffe04 	addi	sp,sp,-8
  8121a8:	df000115 	stw	fp,4(sp)
  8121ac:	df000104 	addi	fp,sp,4
  8121b0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_ENABLE(av_config->base);
  8121b4:	e0bfff17 	ldw	r2,-4(fp)
  8121b8:	10800a17 	ldw	r2,40(r2)
  8121bc:	1007883a 	mov	r3,r2
  8121c0:	00800084 	movi	r2,2
  8121c4:	18800025 	stbio	r2,0(r3)
	return 0;
  8121c8:	0005883a 	mov	r2,zero
}
  8121cc:	e037883a 	mov	sp,fp
  8121d0:	df000017 	ldw	fp,0(sp)
  8121d4:	dec00104 	addi	sp,sp,4
  8121d8:	f800283a 	ret

008121dc <alt_up_av_config_disable_interrupt>:

int alt_up_av_config_disable_interrupt(alt_up_av_config_dev *av_config)
{
  8121dc:	defffe04 	addi	sp,sp,-8
  8121e0:	df000115 	stw	fp,4(sp)
  8121e4:	df000104 	addi	fp,sp,4
  8121e8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_DISABLE(av_config->base);
  8121ec:	e0bfff17 	ldw	r2,-4(fp)
  8121f0:	10800a17 	ldw	r2,40(r2)
  8121f4:	10000025 	stbio	zero,0(r2)
	return 0;
  8121f8:	0005883a 	mov	r2,zero
}
  8121fc:	e037883a 	mov	sp,fp
  812200:	df000017 	ldw	fp,0(sp)
  812204:	dec00104 	addi	sp,sp,4
  812208:	f800283a 	ret

0081220c <alt_up_av_config_read_acknowledge>:

int alt_up_av_config_read_acknowledge(alt_up_av_config_dev *av_config)
{
  81220c:	defffd04 	addi	sp,sp,-12
  812210:	df000215 	stw	fp,8(sp)
  812214:	df000204 	addi	fp,sp,8
  812218:	e13ffe15 	stw	r4,-8(fp)
	if ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST)
  81221c:	e0bffe17 	ldw	r2,-8(fp)
  812220:	10800a17 	ldw	r2,40(r2)
  812224:	10800104 	addi	r2,r2,4
  812228:	10800037 	ldwio	r2,0(r2)
  81222c:	1080008c 	andi	r2,r2,2
  812230:	1005d07a 	srai	r2,r2,1
  812234:	1005003a 	cmpeq	r2,r2,zero
  812238:	1000071e 	bne	r2,zero,812258 <alt_up_av_config_read_acknowledge+0x4c>
		return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_ACK_MSK) >> ALT_UP_AV_CONFIG_STATUS_ACK_OFST);
  81223c:	e0bffe17 	ldw	r2,-8(fp)
  812240:	10800a17 	ldw	r2,40(r2)
  812244:	10800104 	addi	r2,r2,4
  812248:	10800037 	ldwio	r2,0(r2)
  81224c:	1080004c 	andi	r2,r2,1
  812250:	e0bfff15 	stw	r2,-4(fp)
  812254:	00000206 	br	812260 <alt_up_av_config_read_acknowledge+0x54>
	return -1;
  812258:	00bfffc4 	movi	r2,-1
  81225c:	e0bfff15 	stw	r2,-4(fp)
  812260:	e0bfff17 	ldw	r2,-4(fp)
}
  812264:	e037883a 	mov	sp,fp
  812268:	df000017 	ldw	fp,0(sp)
  81226c:	dec00104 	addi	sp,sp,4
  812270:	f800283a 	ret

00812274 <alt_up_av_config_read_ready>:

int alt_up_av_config_read_ready(alt_up_av_config_dev *av_config)
{
  812274:	defffe04 	addi	sp,sp,-8
  812278:	df000115 	stw	fp,4(sp)
  81227c:	df000104 	addi	fp,sp,4
  812280:	e13fff15 	stw	r4,-4(fp)
	return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST);
  812284:	e0bfff17 	ldw	r2,-4(fp)
  812288:	10800a17 	ldw	r2,40(r2)
  81228c:	10800104 	addi	r2,r2,4
  812290:	10800037 	ldwio	r2,0(r2)
  812294:	1080008c 	andi	r2,r2,2
  812298:	1005d07a 	srai	r2,r2,1
}
  81229c:	e037883a 	mov	sp,fp
  8122a0:	df000017 	ldw	fp,0(sp)
  8122a4:	dec00104 	addi	sp,sp,4
  8122a8:	f800283a 	ret

008122ac <alt_up_av_config_write_audio_cfg_register>:

int alt_up_av_config_write_audio_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  8122ac:	defff904 	addi	sp,sp,-28
  8122b0:	dfc00615 	stw	ra,24(sp)
  8122b4:	df000515 	stw	fp,20(sp)
  8122b8:	df000504 	addi	fp,sp,20
  8122bc:	e13ffc15 	stw	r4,-16(fp)
  8122c0:	e17ffd15 	stw	r5,-12(fp)
  8122c4:	e1bffe15 	stw	r6,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_AUDIO_ONLY_CONFIG && av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  8122c8:	e0bffc17 	ldw	r2,-16(fp)
  8122cc:	10800b17 	ldw	r2,44(r2)
  8122d0:	10800060 	cmpeqi	r2,r2,1
  8122d4:	10000f1e 	bne	r2,zero,812314 <alt_up_av_config_write_audio_cfg_register+0x68>
  8122d8:	e0bffc17 	ldw	r2,-16(fp)
  8122dc:	10800b17 	ldw	r2,44(r2)
  8122e0:	108000a0 	cmpeqi	r2,r2,2
  8122e4:	10000b1e 	bne	r2,zero,812314 <alt_up_av_config_write_audio_cfg_register+0x68>
  8122e8:	e0bffc17 	ldw	r2,-16(fp)
  8122ec:	10800b17 	ldw	r2,44(r2)
  8122f0:	108000e0 	cmpeqi	r2,r2,3
  8122f4:	1000071e 	bne	r2,zero,812314 <alt_up_av_config_write_audio_cfg_register+0x68>
  8122f8:	e0bffc17 	ldw	r2,-16(fp)
  8122fc:	10800b17 	ldw	r2,44(r2)
  812300:	10800120 	cmpeqi	r2,r2,4
  812304:	1000031e 	bne	r2,zero,812314 <alt_up_av_config_write_audio_cfg_register+0x68>
		return -EINVAL;
  812308:	00bffa84 	movi	r2,-22
  81230c:	e0bfff15 	stw	r2,-4(fp)
  812310:	00000b06 	br	812340 <alt_up_av_config_write_audio_cfg_register+0x94>

	// set the audio device to be configured in the Control register
	SELECTED_ON_BOARD_DEVICE device = AUDIO_DEVICE;
  812314:	e03ffb15 	stw	zero,-20(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, device);
  812318:	e0bffc17 	ldw	r2,-16(fp)
  81231c:	10800a17 	ldw	r2,40(r2)
  812320:	10800084 	addi	r2,r2,2
  812324:	e0fffb17 	ldw	r3,-20(fp)
  812328:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_write_data(av_config, addr, data);
  81232c:	e13ffc17 	ldw	r4,-16(fp)
  812330:	e17ffd17 	ldw	r5,-12(fp)
  812334:	e1bffe17 	ldw	r6,-8(fp)
  812338:	081207c0 	call	81207c <alt_up_av_config_write_data>
  81233c:	e0bfff15 	stw	r2,-4(fp)
  812340:	e0bfff17 	ldw	r2,-4(fp)
}
  812344:	e037883a 	mov	sp,fp
  812348:	dfc00117 	ldw	ra,4(sp)
  81234c:	df000017 	ldw	fp,0(sp)
  812350:	dec00204 	addi	sp,sp,8
  812354:	f800283a 	ret

00812358 <alt_up_av_config_read_video_cfg_register>:

int alt_up_av_config_read_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data, SELECTED_ON_BOARD_DEVICE video_port)
{
  812358:	defff904 	addi	sp,sp,-28
  81235c:	dfc00615 	stw	ra,24(sp)
  812360:	df000515 	stw	fp,20(sp)
  812364:	df000504 	addi	fp,sp,20
  812368:	e13ffb15 	stw	r4,-20(fp)
  81236c:	e17ffc15 	stw	r5,-16(fp)
  812370:	e1bffd15 	stw	r6,-12(fp)
  812374:	e1fffe15 	stw	r7,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  812378:	e0bffb17 	ldw	r2,-20(fp)
  81237c:	10800b17 	ldw	r2,44(r2)
  812380:	108000a0 	cmpeqi	r2,r2,2
  812384:	10000b1e 	bne	r2,zero,8123b4 <alt_up_av_config_read_video_cfg_register+0x5c>
  812388:	e0bffb17 	ldw	r2,-20(fp)
  81238c:	10800b17 	ldw	r2,44(r2)
  812390:	108000e0 	cmpeqi	r2,r2,3
  812394:	1000071e 	bne	r2,zero,8123b4 <alt_up_av_config_read_video_cfg_register+0x5c>
  812398:	e0bffb17 	ldw	r2,-20(fp)
  81239c:	10800b17 	ldw	r2,44(r2)
  8123a0:	10800120 	cmpeqi	r2,r2,4
  8123a4:	1000031e 	bne	r2,zero,8123b4 <alt_up_av_config_read_video_cfg_register+0x5c>
		return -EINVAL;
  8123a8:	00bffa84 	movi	r2,-22
  8123ac:	e0bfff15 	stw	r2,-4(fp)
  8123b0:	00002106 	br	812438 <alt_up_av_config_read_video_cfg_register+0xe0>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
  8123b4:	e0bffb17 	ldw	r2,-20(fp)
  8123b8:	10800b17 	ldw	r2,44(r2)
  8123bc:	108000a0 	cmpeqi	r2,r2,2
  8123c0:	1000041e 	bne	r2,zero,8123d4 <alt_up_av_config_read_video_cfg_register+0x7c>
  8123c4:	e0bffb17 	ldw	r2,-20(fp)
  8123c8:	10800b17 	ldw	r2,44(r2)
  8123cc:	10800118 	cmpnei	r2,r2,4
  8123d0:	1000061e 	bne	r2,zero,8123ec <alt_up_av_config_read_video_cfg_register+0x94>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
  8123d4:	e0bffe17 	ldw	r2,-8(fp)
  8123d8:	10800060 	cmpeqi	r2,r2,1
  8123dc:	10000c1e 	bne	r2,zero,812410 <alt_up_av_config_read_video_cfg_register+0xb8>
			return -EINVAL;
  8123e0:	00bffa84 	movi	r2,-22
  8123e4:	e0bfff15 	stw	r2,-4(fp)
  8123e8:	00001306 	br	812438 <alt_up_av_config_read_video_cfg_register+0xe0>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
  8123ec:	e0bffe17 	ldw	r2,-8(fp)
  8123f0:	10800060 	cmpeqi	r2,r2,1
  8123f4:	1000061e 	bne	r2,zero,812410 <alt_up_av_config_read_video_cfg_register+0xb8>
  8123f8:	e0bffe17 	ldw	r2,-8(fp)
  8123fc:	108000a0 	cmpeqi	r2,r2,2
  812400:	1000031e 	bne	r2,zero,812410 <alt_up_av_config_read_video_cfg_register+0xb8>
			return -EINVAL;
  812404:	00bffa84 	movi	r2,-22
  812408:	e0bfff15 	stw	r2,-4(fp)
  81240c:	00000a06 	br	812438 <alt_up_av_config_read_video_cfg_register+0xe0>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
  812410:	e0bffb17 	ldw	r2,-20(fp)
  812414:	10800a17 	ldw	r2,40(r2)
  812418:	10800084 	addi	r2,r2,2
  81241c:	e0fffe17 	ldw	r3,-8(fp)
  812420:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_read_data(av_config, addr, data);
  812424:	e13ffb17 	ldw	r4,-20(fp)
  812428:	e17ffc17 	ldw	r5,-16(fp)
  81242c:	e1bffd17 	ldw	r6,-12(fp)
  812430:	08120e00 	call	8120e0 <alt_up_av_config_read_data>
  812434:	e0bfff15 	stw	r2,-4(fp)
  812438:	e0bfff17 	ldw	r2,-4(fp)
}
  81243c:	e037883a 	mov	sp,fp
  812440:	dfc00117 	ldw	ra,4(sp)
  812444:	df000017 	ldw	fp,0(sp)
  812448:	dec00204 	addi	sp,sp,8
  81244c:	f800283a 	ret

00812450 <alt_up_av_config_write_video_cfg_register>:

int alt_up_av_config_write_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data, SELECTED_ON_BOARD_DEVICE video_port)
{
  812450:	defff904 	addi	sp,sp,-28
  812454:	dfc00615 	stw	ra,24(sp)
  812458:	df000515 	stw	fp,20(sp)
  81245c:	df000504 	addi	fp,sp,20
  812460:	e13ffb15 	stw	r4,-20(fp)
  812464:	e17ffc15 	stw	r5,-16(fp)
  812468:	e1bffd15 	stw	r6,-12(fp)
  81246c:	e1fffe15 	stw	r7,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  812470:	e0bffb17 	ldw	r2,-20(fp)
  812474:	10800b17 	ldw	r2,44(r2)
  812478:	108000a0 	cmpeqi	r2,r2,2
  81247c:	10000b1e 	bne	r2,zero,8124ac <alt_up_av_config_write_video_cfg_register+0x5c>
  812480:	e0bffb17 	ldw	r2,-20(fp)
  812484:	10800b17 	ldw	r2,44(r2)
  812488:	108000e0 	cmpeqi	r2,r2,3
  81248c:	1000071e 	bne	r2,zero,8124ac <alt_up_av_config_write_video_cfg_register+0x5c>
  812490:	e0bffb17 	ldw	r2,-20(fp)
  812494:	10800b17 	ldw	r2,44(r2)
  812498:	10800120 	cmpeqi	r2,r2,4
  81249c:	1000031e 	bne	r2,zero,8124ac <alt_up_av_config_write_video_cfg_register+0x5c>
		return -EINVAL;
  8124a0:	00bffa84 	movi	r2,-22
  8124a4:	e0bfff15 	stw	r2,-4(fp)
  8124a8:	00002106 	br	812530 <alt_up_av_config_write_video_cfg_register+0xe0>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
  8124ac:	e0bffb17 	ldw	r2,-20(fp)
  8124b0:	10800b17 	ldw	r2,44(r2)
  8124b4:	108000a0 	cmpeqi	r2,r2,2
  8124b8:	1000041e 	bne	r2,zero,8124cc <alt_up_av_config_write_video_cfg_register+0x7c>
  8124bc:	e0bffb17 	ldw	r2,-20(fp)
  8124c0:	10800b17 	ldw	r2,44(r2)
  8124c4:	10800118 	cmpnei	r2,r2,4
  8124c8:	1000061e 	bne	r2,zero,8124e4 <alt_up_av_config_write_video_cfg_register+0x94>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
  8124cc:	e0bffe17 	ldw	r2,-8(fp)
  8124d0:	10800060 	cmpeqi	r2,r2,1
  8124d4:	10000c1e 	bne	r2,zero,812508 <alt_up_av_config_write_video_cfg_register+0xb8>
			return -EINVAL;
  8124d8:	00bffa84 	movi	r2,-22
  8124dc:	e0bfff15 	stw	r2,-4(fp)
  8124e0:	00001306 	br	812530 <alt_up_av_config_write_video_cfg_register+0xe0>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
  8124e4:	e0bffe17 	ldw	r2,-8(fp)
  8124e8:	10800060 	cmpeqi	r2,r2,1
  8124ec:	1000061e 	bne	r2,zero,812508 <alt_up_av_config_write_video_cfg_register+0xb8>
  8124f0:	e0bffe17 	ldw	r2,-8(fp)
  8124f4:	108000a0 	cmpeqi	r2,r2,2
  8124f8:	1000031e 	bne	r2,zero,812508 <alt_up_av_config_write_video_cfg_register+0xb8>
			return -EINVAL;
  8124fc:	00bffa84 	movi	r2,-22
  812500:	e0bfff15 	stw	r2,-4(fp)
  812504:	00000a06 	br	812530 <alt_up_av_config_write_video_cfg_register+0xe0>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
  812508:	e0bffb17 	ldw	r2,-20(fp)
  81250c:	10800a17 	ldw	r2,40(r2)
  812510:	10800084 	addi	r2,r2,2
  812514:	e0fffe17 	ldw	r3,-8(fp)
  812518:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_write_data(av_config, addr, data);
  81251c:	e13ffb17 	ldw	r4,-20(fp)
  812520:	e17ffc17 	ldw	r5,-16(fp)
  812524:	e1bffd17 	ldw	r6,-12(fp)
  812528:	081207c0 	call	81207c <alt_up_av_config_write_data>
  81252c:	e0bfff15 	stw	r2,-4(fp)
  812530:	e0bfff17 	ldw	r2,-4(fp)
}
  812534:	e037883a 	mov	sp,fp
  812538:	dfc00117 	ldw	ra,4(sp)
  81253c:	df000017 	ldw	fp,0(sp)
  812540:	dec00204 	addi	sp,sp,8
  812544:	f800283a 	ret

00812548 <alt_up_av_config_read_DC2_cfg_register>:

int alt_up_av_config_read_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  812548:	defffa04 	addi	sp,sp,-24
  81254c:	dfc00515 	stw	ra,20(sp)
  812550:	df000415 	stw	fp,16(sp)
  812554:	df000404 	addi	fp,sp,16
  812558:	e13ffc15 	stw	r4,-16(fp)
  81255c:	e17ffd15 	stw	r5,-12(fp)
  812560:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
  812564:	e0bffc17 	ldw	r2,-16(fp)
  812568:	10800b17 	ldw	r2,44(r2)
  81256c:	10800220 	cmpeqi	r2,r2,8
  812570:	1000031e 	bne	r2,zero,812580 <alt_up_av_config_read_DC2_cfg_register+0x38>
		return -EINVAL;
  812574:	00bffa84 	movi	r2,-22
  812578:	e0bfff15 	stw	r2,-4(fp)
  81257c:	00000506 	br	812594 <alt_up_av_config_read_DC2_cfg_register+0x4c>

	return alt_up_av_config_read_data(av_config, addr, data);
  812580:	e13ffc17 	ldw	r4,-16(fp)
  812584:	e17ffd17 	ldw	r5,-12(fp)
  812588:	e1bffe17 	ldw	r6,-8(fp)
  81258c:	08120e00 	call	8120e0 <alt_up_av_config_read_data>
  812590:	e0bfff15 	stw	r2,-4(fp)
  812594:	e0bfff17 	ldw	r2,-4(fp)
}
  812598:	e037883a 	mov	sp,fp
  81259c:	dfc00117 	ldw	ra,4(sp)
  8125a0:	df000017 	ldw	fp,0(sp)
  8125a4:	dec00204 	addi	sp,sp,8
  8125a8:	f800283a 	ret

008125ac <alt_up_av_config_write_DC2_cfg_register>:

int alt_up_av_config_write_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  8125ac:	defffa04 	addi	sp,sp,-24
  8125b0:	dfc00515 	stw	ra,20(sp)
  8125b4:	df000415 	stw	fp,16(sp)
  8125b8:	df000404 	addi	fp,sp,16
  8125bc:	e13ffc15 	stw	r4,-16(fp)
  8125c0:	e17ffd15 	stw	r5,-12(fp)
  8125c4:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
  8125c8:	e0bffc17 	ldw	r2,-16(fp)
  8125cc:	10800b17 	ldw	r2,44(r2)
  8125d0:	10800220 	cmpeqi	r2,r2,8
  8125d4:	1000031e 	bne	r2,zero,8125e4 <alt_up_av_config_write_DC2_cfg_register+0x38>
		return -EINVAL;
  8125d8:	00bffa84 	movi	r2,-22
  8125dc:	e0bfff15 	stw	r2,-4(fp)
  8125e0:	00000506 	br	8125f8 <alt_up_av_config_write_DC2_cfg_register+0x4c>

	return alt_up_av_config_write_data(av_config, addr, data);
  8125e4:	e13ffc17 	ldw	r4,-16(fp)
  8125e8:	e17ffd17 	ldw	r5,-12(fp)
  8125ec:	e1bffe17 	ldw	r6,-8(fp)
  8125f0:	081207c0 	call	81207c <alt_up_av_config_write_data>
  8125f4:	e0bfff15 	stw	r2,-4(fp)
  8125f8:	e0bfff17 	ldw	r2,-4(fp)
}
  8125fc:	e037883a 	mov	sp,fp
  812600:	dfc00117 	ldw	ra,4(sp)
  812604:	df000017 	ldw	fp,0(sp)
  812608:	dec00204 	addi	sp,sp,8
  81260c:	f800283a 	ret

00812610 <alt_up_av_config_read_D5M_cfg_register>:

int alt_up_av_config_read_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  812610:	defffa04 	addi	sp,sp,-24
  812614:	dfc00515 	stw	ra,20(sp)
  812618:	df000415 	stw	fp,16(sp)
  81261c:	df000404 	addi	fp,sp,16
  812620:	e13ffc15 	stw	r4,-16(fp)
  812624:	e17ffd15 	stw	r5,-12(fp)
  812628:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
  81262c:	e0bffc17 	ldw	r2,-16(fp)
  812630:	10800b17 	ldw	r2,44(r2)
  812634:	10800260 	cmpeqi	r2,r2,9
  812638:	1000031e 	bne	r2,zero,812648 <alt_up_av_config_read_D5M_cfg_register+0x38>
		return -EINVAL;
  81263c:	00bffa84 	movi	r2,-22
  812640:	e0bfff15 	stw	r2,-4(fp)
  812644:	00000506 	br	81265c <alt_up_av_config_read_D5M_cfg_register+0x4c>
	
	return alt_up_av_config_read_data(av_config, addr, data);
  812648:	e13ffc17 	ldw	r4,-16(fp)
  81264c:	e17ffd17 	ldw	r5,-12(fp)
  812650:	e1bffe17 	ldw	r6,-8(fp)
  812654:	08120e00 	call	8120e0 <alt_up_av_config_read_data>
  812658:	e0bfff15 	stw	r2,-4(fp)
  81265c:	e0bfff17 	ldw	r2,-4(fp)
}
  812660:	e037883a 	mov	sp,fp
  812664:	dfc00117 	ldw	ra,4(sp)
  812668:	df000017 	ldw	fp,0(sp)
  81266c:	dec00204 	addi	sp,sp,8
  812670:	f800283a 	ret

00812674 <alt_up_av_config_write_D5M_cfg_register>:

int alt_up_av_config_write_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  812674:	defffa04 	addi	sp,sp,-24
  812678:	dfc00515 	stw	ra,20(sp)
  81267c:	df000415 	stw	fp,16(sp)
  812680:	df000404 	addi	fp,sp,16
  812684:	e13ffc15 	stw	r4,-16(fp)
  812688:	e17ffd15 	stw	r5,-12(fp)
  81268c:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
  812690:	e0bffc17 	ldw	r2,-16(fp)
  812694:	10800b17 	ldw	r2,44(r2)
  812698:	10800260 	cmpeqi	r2,r2,9
  81269c:	1000031e 	bne	r2,zero,8126ac <alt_up_av_config_write_D5M_cfg_register+0x38>
		return -EINVAL;
  8126a0:	00bffa84 	movi	r2,-22
  8126a4:	e0bfff15 	stw	r2,-4(fp)
  8126a8:	00000506 	br	8126c0 <alt_up_av_config_write_D5M_cfg_register+0x4c>
	
	return alt_up_av_config_write_data(av_config, addr, data);
  8126ac:	e13ffc17 	ldw	r4,-16(fp)
  8126b0:	e17ffd17 	ldw	r5,-12(fp)
  8126b4:	e1bffe17 	ldw	r6,-8(fp)
  8126b8:	081207c0 	call	81207c <alt_up_av_config_write_data>
  8126bc:	e0bfff15 	stw	r2,-4(fp)
  8126c0:	e0bfff17 	ldw	r2,-4(fp)
}
  8126c4:	e037883a 	mov	sp,fp
  8126c8:	dfc00117 	ldw	ra,4(sp)
  8126cc:	df000017 	ldw	fp,0(sp)
  8126d0:	dec00204 	addi	sp,sp,8
  8126d4:	f800283a 	ret

008126d8 <alt_up_av_config_read_LTM_cfg_register>:

int alt_up_av_config_read_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  8126d8:	defffa04 	addi	sp,sp,-24
  8126dc:	dfc00515 	stw	ra,20(sp)
  8126e0:	df000415 	stw	fp,16(sp)
  8126e4:	df000404 	addi	fp,sp,16
  8126e8:	e13ffc15 	stw	r4,-16(fp)
  8126ec:	e17ffd15 	stw	r5,-12(fp)
  8126f0:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
  8126f4:	e0bffc17 	ldw	r2,-16(fp)
  8126f8:	10800b17 	ldw	r2,44(r2)
  8126fc:	108002a0 	cmpeqi	r2,r2,10
  812700:	1000031e 	bne	r2,zero,812710 <alt_up_av_config_read_LTM_cfg_register+0x38>
		return -EINVAL;
  812704:	00bffa84 	movi	r2,-22
  812708:	e0bfff15 	stw	r2,-4(fp)
  81270c:	00000506 	br	812724 <alt_up_av_config_read_LTM_cfg_register+0x4c>

	return alt_up_av_config_read_data(av_config, addr, data);
  812710:	e13ffc17 	ldw	r4,-16(fp)
  812714:	e17ffd17 	ldw	r5,-12(fp)
  812718:	e1bffe17 	ldw	r6,-8(fp)
  81271c:	08120e00 	call	8120e0 <alt_up_av_config_read_data>
  812720:	e0bfff15 	stw	r2,-4(fp)
  812724:	e0bfff17 	ldw	r2,-4(fp)
}
  812728:	e037883a 	mov	sp,fp
  81272c:	dfc00117 	ldw	ra,4(sp)
  812730:	df000017 	ldw	fp,0(sp)
  812734:	dec00204 	addi	sp,sp,8
  812738:	f800283a 	ret

0081273c <alt_up_av_config_write_LTM_cfg_register>:

int alt_up_av_config_write_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  81273c:	defffa04 	addi	sp,sp,-24
  812740:	dfc00515 	stw	ra,20(sp)
  812744:	df000415 	stw	fp,16(sp)
  812748:	df000404 	addi	fp,sp,16
  81274c:	e13ffc15 	stw	r4,-16(fp)
  812750:	e17ffd15 	stw	r5,-12(fp)
  812754:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
  812758:	e0bffc17 	ldw	r2,-16(fp)
  81275c:	10800b17 	ldw	r2,44(r2)
  812760:	108002a0 	cmpeqi	r2,r2,10
  812764:	1000031e 	bne	r2,zero,812774 <alt_up_av_config_write_LTM_cfg_register+0x38>
		return -EINVAL;
  812768:	00bffa84 	movi	r2,-22
  81276c:	e0bfff15 	stw	r2,-4(fp)
  812770:	00000506 	br	812788 <alt_up_av_config_write_LTM_cfg_register+0x4c>

	return alt_up_av_config_write_data(av_config, addr, data);
  812774:	e13ffc17 	ldw	r4,-16(fp)
  812778:	e17ffd17 	ldw	r5,-12(fp)
  81277c:	e1bffe17 	ldw	r6,-8(fp)
  812780:	081207c0 	call	81207c <alt_up_av_config_write_data>
  812784:	e0bfff15 	stw	r2,-4(fp)
  812788:	e0bfff17 	ldw	r2,-4(fp)
}
  81278c:	e037883a 	mov	sp,fp
  812790:	dfc00117 	ldw	ra,4(sp)
  812794:	df000017 	ldw	fp,0(sp)
  812798:	dec00204 	addi	sp,sp,8
  81279c:	f800283a 	ret

008127a0 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
  8127a0:	defffc04 	addi	sp,sp,-16
  8127a4:	df000315 	stw	fp,12(sp)
  8127a8:	df000304 	addi	fp,sp,12
  8127ac:	e13ffe15 	stw	r4,-8(fp)
  8127b0:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
  8127b4:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
  8127b8:	e0bfff17 	ldw	r2,-4(fp)
  8127bc:	1004c03a 	cmpne	r2,r2,zero
  8127c0:	1000061e 	bne	r2,zero,8127dc <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
  8127c4:	e0bffe17 	ldw	r2,-8(fp)
  8127c8:	1007883a 	mov	r3,r2
  8127cc:	e0bffd03 	ldbu	r2,-12(fp)
  8127d0:	10c4b03a 	or	r2,r2,r3
  8127d4:	e0bffd05 	stb	r2,-12(fp)
  8127d8:	00000806 	br	8127fc <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
  8127dc:	e0bffe17 	ldw	r2,-8(fp)
  8127e0:	1007883a 	mov	r3,r2
  8127e4:	e0bffd03 	ldbu	r2,-12(fp)
  8127e8:	10c4b03a 	or	r2,r2,r3
  8127ec:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
  8127f0:	e0bffd03 	ldbu	r2,-12(fp)
  8127f4:	10801014 	ori	r2,r2,64
  8127f8:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
  8127fc:	e0fffd03 	ldbu	r3,-12(fp)
  812800:	00bfe004 	movi	r2,-128
  812804:	1884b03a 	or	r2,r3,r2
  812808:	10803fcc 	andi	r2,r2,255
}
  81280c:	e037883a 	mov	sp,fp
  812810:	df000017 	ldw	fp,0(sp)
  812814:	dec00104 	addi	sp,sp,4
  812818:	f800283a 	ret

0081281c <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
  81281c:	defffd04 	addi	sp,sp,-12
  812820:	df000215 	stw	fp,8(sp)
  812824:	df000204 	addi	fp,sp,8
  812828:	e13ffe15 	stw	r4,-8(fp)
  81282c:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
  812830:	e0bffe17 	ldw	r2,-8(fp)
  812834:	10800a17 	ldw	r2,40(r2)
  812838:	e0ffff03 	ldbu	r3,-4(fp)
  81283c:	10c00025 	stbio	r3,0(r2)
}
  812840:	e037883a 	mov	sp,fp
  812844:	df000017 	ldw	fp,0(sp)
  812848:	dec00104 	addi	sp,sp,4
  81284c:	f800283a 	ret

00812850 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
  812850:	defffe04 	addi	sp,sp,-8
  812854:	df000115 	stw	fp,4(sp)
  812858:	df000104 	addi	fp,sp,4
  81285c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
  812860:	e0bfff17 	ldw	r2,-4(fp)
  812864:	10800a17 	ldw	r2,40(r2)
  812868:	1007883a 	mov	r3,r2
  81286c:	00800044 	movi	r2,1
  812870:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
  812874:	e037883a 	mov	sp,fp
  812878:	df000017 	ldw	fp,0(sp)
  81287c:	dec00104 	addi	sp,sp,4
  812880:	f800283a 	ret

00812884 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
  812884:	defffc04 	addi	sp,sp,-16
  812888:	dfc00315 	stw	ra,12(sp)
  81288c:	df000215 	stw	fp,8(sp)
  812890:	df000204 	addi	fp,sp,8
  812894:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
  812898:	e13fff17 	ldw	r4,-4(fp)
  81289c:	01402074 	movhi	r5,129
  8128a0:	29589304 	addi	r5,r5,25164
  8128a4:	08130440 	call	813044 <alt_find_dev>
  8128a8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  8128ac:	e0bffe17 	ldw	r2,-8(fp)
}
  8128b0:	e037883a 	mov	sp,fp
  8128b4:	dfc00117 	ldw	ra,4(sp)
  8128b8:	df000017 	ldw	fp,0(sp)
  8128bc:	dec00204 	addi	sp,sp,8
  8128c0:	f800283a 	ret

008128c4 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
  8128c4:	defffb04 	addi	sp,sp,-20
  8128c8:	df000415 	stw	fp,16(sp)
  8128cc:	df000404 	addi	fp,sp,16
  8128d0:	e13ffd15 	stw	r4,-12(fp)
  8128d4:	e17ffe15 	stw	r5,-8(fp)
  8128d8:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
  8128dc:	e03ffc15 	stw	zero,-16(fp)
  8128e0:	00000f06 	br	812920 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
  8128e4:	e0bffd17 	ldw	r2,-12(fp)
  8128e8:	10800a17 	ldw	r2,40(r2)
  8128ec:	11000044 	addi	r4,r2,1
  8128f0:	e0fffc17 	ldw	r3,-16(fp)
  8128f4:	e0bffe17 	ldw	r2,-8(fp)
  8128f8:	1885883a 	add	r2,r3,r2
  8128fc:	10800003 	ldbu	r2,0(r2)
  812900:	10c03fcc 	andi	r3,r2,255
  812904:	18c0201c 	xori	r3,r3,128
  812908:	18ffe004 	addi	r3,r3,-128
  81290c:	2005883a 	mov	r2,r4
  812910:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
  812914:	e0bffc17 	ldw	r2,-16(fp)
  812918:	10800044 	addi	r2,r2,1
  81291c:	e0bffc15 	stw	r2,-16(fp)
  812920:	e0fffc17 	ldw	r3,-16(fp)
  812924:	e0bfff17 	ldw	r2,-4(fp)
  812928:	18bfee36 	bltu	r3,r2,8128e4 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
  81292c:	e037883a 	mov	sp,fp
  812930:	df000017 	ldw	fp,0(sp)
  812934:	dec00104 	addi	sp,sp,4
  812938:	f800283a 	ret

0081293c <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
  81293c:	defffd04 	addi	sp,sp,-12
  812940:	df000215 	stw	fp,8(sp)
  812944:	df000204 	addi	fp,sp,8
  812948:	e13ffe15 	stw	r4,-8(fp)
  81294c:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
  812950:	00000d06 	br	812988 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
  812954:	e0bffe17 	ldw	r2,-8(fp)
  812958:	10800a17 	ldw	r2,40(r2)
  81295c:	11000044 	addi	r4,r2,1
  812960:	e0bfff17 	ldw	r2,-4(fp)
  812964:	10800003 	ldbu	r2,0(r2)
  812968:	10c03fcc 	andi	r3,r2,255
  81296c:	18c0201c 	xori	r3,r3,128
  812970:	18ffe004 	addi	r3,r3,-128
  812974:	2005883a 	mov	r2,r4
  812978:	10c00025 	stbio	r3,0(r2)
		++ptr;
  81297c:	e0bfff17 	ldw	r2,-4(fp)
  812980:	10800044 	addi	r2,r2,1
  812984:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
  812988:	e0bfff17 	ldw	r2,-4(fp)
  81298c:	10800003 	ldbu	r2,0(r2)
  812990:	10803fcc 	andi	r2,r2,255
  812994:	1080201c 	xori	r2,r2,128
  812998:	10bfe004 	addi	r2,r2,-128
  81299c:	1004c03a 	cmpne	r2,r2,zero
  8129a0:	103fec1e 	bne	r2,zero,812954 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
  8129a4:	e037883a 	mov	sp,fp
  8129a8:	df000017 	ldw	fp,0(sp)
  8129ac:	dec00104 	addi	sp,sp,4
  8129b0:	f800283a 	ret

008129b4 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
  8129b4:	defffb04 	addi	sp,sp,-20
  8129b8:	dfc00415 	stw	ra,16(sp)
  8129bc:	df000315 	stw	fp,12(sp)
  8129c0:	df000304 	addi	fp,sp,12
  8129c4:	e13ffd15 	stw	r4,-12(fp)
  8129c8:	e17ffe15 	stw	r5,-8(fp)
  8129cc:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
  8129d0:	e0bffd17 	ldw	r2,-12(fp)
  8129d4:	10800017 	ldw	r2,0(r2)
  8129d8:	1009883a 	mov	r4,r2
  8129dc:	e1bfff17 	ldw	r6,-4(fp)
  8129e0:	e17ffe17 	ldw	r5,-8(fp)
  8129e4:	08128c40 	call	8128c4 <alt_up_character_lcd_write>
	return 0;
  8129e8:	0005883a 	mov	r2,zero
}
  8129ec:	e037883a 	mov	sp,fp
  8129f0:	dfc00117 	ldw	ra,4(sp)
  8129f4:	df000017 	ldw	fp,0(sp)
  8129f8:	dec00204 	addi	sp,sp,8
  8129fc:	f800283a 	ret

00812a00 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
  812a00:	defff904 	addi	sp,sp,-28
  812a04:	dfc00615 	stw	ra,24(sp)
  812a08:	df000515 	stw	fp,20(sp)
  812a0c:	df000504 	addi	fp,sp,20
  812a10:	e13ffc15 	stw	r4,-16(fp)
  812a14:	e17ffd15 	stw	r5,-12(fp)
  812a18:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
  812a1c:	e0bffd17 	ldw	r2,-12(fp)
  812a20:	10800a28 	cmpgeui	r2,r2,40
  812a24:	1000031e 	bne	r2,zero,812a34 <alt_up_character_lcd_set_cursor_pos+0x34>
  812a28:	e0bffe17 	ldw	r2,-8(fp)
  812a2c:	108000b0 	cmpltui	r2,r2,2
  812a30:	1000031e 	bne	r2,zero,812a40 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
  812a34:	00bfffc4 	movi	r2,-1
  812a38:	e0bfff15 	stw	r2,-4(fp)
  812a3c:	00000806 	br	812a60 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  812a40:	e13ffd17 	ldw	r4,-12(fp)
  812a44:	e17ffe17 	ldw	r5,-8(fp)
  812a48:	08127a00 	call	8127a0 <get_DDRAM_addr>
  812a4c:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
  812a50:	e17ffb03 	ldbu	r5,-20(fp)
  812a54:	e13ffc17 	ldw	r4,-16(fp)
  812a58:	081281c0 	call	81281c <alt_up_character_lcd_send_cmd>
	return 0;
  812a5c:	e03fff15 	stw	zero,-4(fp)
  812a60:	e0bfff17 	ldw	r2,-4(fp)
}
  812a64:	e037883a 	mov	sp,fp
  812a68:	dfc00117 	ldw	ra,4(sp)
  812a6c:	df000017 	ldw	fp,0(sp)
  812a70:	dec00204 	addi	sp,sp,8
  812a74:	f800283a 	ret

00812a78 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  812a78:	defff904 	addi	sp,sp,-28
  812a7c:	dfc00615 	stw	ra,24(sp)
  812a80:	df000515 	stw	fp,20(sp)
  812a84:	df000504 	addi	fp,sp,20
  812a88:	e13ffc15 	stw	r4,-16(fp)
  812a8c:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  812a90:	e0bffd17 	ldw	r2,-12(fp)
  812a94:	1005003a 	cmpeq	r2,r2,zero
  812a98:	10001e1e 	bne	r2,zero,812b14 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
  812a9c:	e0bffd17 	ldw	r2,-12(fp)
  812aa0:	10800050 	cmplti	r2,r2,1
  812aa4:	1000031e 	bne	r2,zero,812ab4 <alt_up_character_lcd_shift_cursor+0x3c>
  812aa8:	00800504 	movi	r2,20
  812aac:	e0bfff05 	stb	r2,-4(fp)
  812ab0:	00000206 	br	812abc <alt_up_character_lcd_shift_cursor+0x44>
  812ab4:	00c00404 	movi	r3,16
  812ab8:	e0ffff05 	stb	r3,-4(fp)
  812abc:	e0bfff03 	ldbu	r2,-4(fp)
  812ac0:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  812ac4:	e0fffd17 	ldw	r3,-12(fp)
  812ac8:	e0fffe15 	stw	r3,-8(fp)
  812acc:	e0fffe17 	ldw	r3,-8(fp)
  812ad0:	1804403a 	cmpge	r2,r3,zero
  812ad4:	1000031e 	bne	r2,zero,812ae4 <alt_up_character_lcd_shift_cursor+0x6c>
  812ad8:	e0bffe17 	ldw	r2,-8(fp)
  812adc:	0085c83a 	sub	r2,zero,r2
  812ae0:	e0bffe15 	stw	r2,-8(fp)
  812ae4:	e0fffe17 	ldw	r3,-8(fp)
  812ae8:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  812aec:	00000306 	br	812afc <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  812af0:	e17ffb43 	ldbu	r5,-19(fp)
  812af4:	e13ffc17 	ldw	r4,-16(fp)
  812af8:	081281c0 	call	81281c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  812afc:	e0bffb03 	ldbu	r2,-20(fp)
  812b00:	10bfffc4 	addi	r2,r2,-1
  812b04:	e0bffb05 	stb	r2,-20(fp)
  812b08:	e0bffb03 	ldbu	r2,-20(fp)
  812b0c:	10803fd8 	cmpnei	r2,r2,255
  812b10:	103ff71e 	bne	r2,zero,812af0 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  812b14:	e037883a 	mov	sp,fp
  812b18:	dfc00117 	ldw	ra,4(sp)
  812b1c:	df000017 	ldw	fp,0(sp)
  812b20:	dec00204 	addi	sp,sp,8
  812b24:	f800283a 	ret

00812b28 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  812b28:	defff904 	addi	sp,sp,-28
  812b2c:	dfc00615 	stw	ra,24(sp)
  812b30:	df000515 	stw	fp,20(sp)
  812b34:	df000504 	addi	fp,sp,20
  812b38:	e13ffc15 	stw	r4,-16(fp)
  812b3c:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  812b40:	e0bffd17 	ldw	r2,-12(fp)
  812b44:	1005003a 	cmpeq	r2,r2,zero
  812b48:	10001e1e 	bne	r2,zero,812bc4 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
  812b4c:	e0bffd17 	ldw	r2,-12(fp)
  812b50:	10800050 	cmplti	r2,r2,1
  812b54:	1000031e 	bne	r2,zero,812b64 <alt_up_character_lcd_shift_display+0x3c>
  812b58:	00800704 	movi	r2,28
  812b5c:	e0bfff05 	stb	r2,-4(fp)
  812b60:	00000206 	br	812b6c <alt_up_character_lcd_shift_display+0x44>
  812b64:	00c00604 	movi	r3,24
  812b68:	e0ffff05 	stb	r3,-4(fp)
  812b6c:	e0bfff03 	ldbu	r2,-4(fp)
  812b70:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  812b74:	e0fffd17 	ldw	r3,-12(fp)
  812b78:	e0fffe15 	stw	r3,-8(fp)
  812b7c:	e0fffe17 	ldw	r3,-8(fp)
  812b80:	1804403a 	cmpge	r2,r3,zero
  812b84:	1000031e 	bne	r2,zero,812b94 <alt_up_character_lcd_shift_display+0x6c>
  812b88:	e0bffe17 	ldw	r2,-8(fp)
  812b8c:	0085c83a 	sub	r2,zero,r2
  812b90:	e0bffe15 	stw	r2,-8(fp)
  812b94:	e0fffe17 	ldw	r3,-8(fp)
  812b98:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  812b9c:	00000306 	br	812bac <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  812ba0:	e17ffb43 	ldbu	r5,-19(fp)
  812ba4:	e13ffc17 	ldw	r4,-16(fp)
  812ba8:	081281c0 	call	81281c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  812bac:	e0bffb03 	ldbu	r2,-20(fp)
  812bb0:	10bfffc4 	addi	r2,r2,-1
  812bb4:	e0bffb05 	stb	r2,-20(fp)
  812bb8:	e0bffb03 	ldbu	r2,-20(fp)
  812bbc:	10803fd8 	cmpnei	r2,r2,255
  812bc0:	103ff71e 	bne	r2,zero,812ba0 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  812bc4:	e037883a 	mov	sp,fp
  812bc8:	dfc00117 	ldw	ra,4(sp)
  812bcc:	df000017 	ldw	fp,0(sp)
  812bd0:	dec00204 	addi	sp,sp,8
  812bd4:	f800283a 	ret

00812bd8 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
  812bd8:	defff904 	addi	sp,sp,-28
  812bdc:	dfc00615 	stw	ra,24(sp)
  812be0:	df000515 	stw	fp,20(sp)
  812be4:	df000504 	addi	fp,sp,20
  812be8:	e13ffc15 	stw	r4,-16(fp)
  812bec:	e17ffd15 	stw	r5,-12(fp)
  812bf0:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
  812bf4:	e0bffd17 	ldw	r2,-12(fp)
  812bf8:	10800a28 	cmpgeui	r2,r2,40
  812bfc:	1000031e 	bne	r2,zero,812c0c <alt_up_character_lcd_erase_pos+0x34>
  812c00:	e0bffe17 	ldw	r2,-8(fp)
  812c04:	108000b0 	cmpltui	r2,r2,2
  812c08:	1000031e 	bne	r2,zero,812c18 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
  812c0c:	00bfffc4 	movi	r2,-1
  812c10:	e0bfff15 	stw	r2,-4(fp)
  812c14:	00000e06 	br	812c50 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  812c18:	e13ffd17 	ldw	r4,-12(fp)
  812c1c:	e17ffe17 	ldw	r5,-8(fp)
  812c20:	08127a00 	call	8127a0 <get_DDRAM_addr>
  812c24:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
  812c28:	e17ffb03 	ldbu	r5,-20(fp)
  812c2c:	e13ffc17 	ldw	r4,-16(fp)
  812c30:	081281c0 	call	81281c <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	// NEM Bug Fix. Next loc sends | to the LCD instead of erase
	// Changed to send a simple space. Not really erase but good enough
	//IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, ' ');
  812c34:	e0bffc17 	ldw	r2,-16(fp)
  812c38:	10800a17 	ldw	r2,40(r2)
  812c3c:	10800044 	addi	r2,r2,1
  812c40:	1007883a 	mov	r3,r2
  812c44:	00800804 	movi	r2,32
  812c48:	18800025 	stbio	r2,0(r3)
	// END NEM Bug Fixs
	return 0;
  812c4c:	e03fff15 	stw	zero,-4(fp)
  812c50:	e0bfff17 	ldw	r2,-4(fp)
}
  812c54:	e037883a 	mov	sp,fp
  812c58:	dfc00117 	ldw	ra,4(sp)
  812c5c:	df000017 	ldw	fp,0(sp)
  812c60:	dec00204 	addi	sp,sp,8
  812c64:	f800283a 	ret

00812c68 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
  812c68:	defffd04 	addi	sp,sp,-12
  812c6c:	dfc00215 	stw	ra,8(sp)
  812c70:	df000115 	stw	fp,4(sp)
  812c74:	df000104 	addi	fp,sp,4
  812c78:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
  812c7c:	e13fff17 	ldw	r4,-4(fp)
  812c80:	01400304 	movi	r5,12
  812c84:	081281c0 	call	81281c <alt_up_character_lcd_send_cmd>
}
  812c88:	e037883a 	mov	sp,fp
  812c8c:	dfc00117 	ldw	ra,4(sp)
  812c90:	df000017 	ldw	fp,0(sp)
  812c94:	dec00204 	addi	sp,sp,8
  812c98:	f800283a 	ret

00812c9c <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
  812c9c:	defffd04 	addi	sp,sp,-12
  812ca0:	dfc00215 	stw	ra,8(sp)
  812ca4:	df000115 	stw	fp,4(sp)
  812ca8:	df000104 	addi	fp,sp,4
  812cac:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
  812cb0:	e13fff17 	ldw	r4,-4(fp)
  812cb4:	014003c4 	movi	r5,15
  812cb8:	081281c0 	call	81281c <alt_up_character_lcd_send_cmd>
}
  812cbc:	e037883a 	mov	sp,fp
  812cc0:	dfc00117 	ldw	ra,4(sp)
  812cc4:	df000017 	ldw	fp,0(sp)
  812cc8:	dec00204 	addi	sp,sp,8
  812ccc:	f800283a 	ret

00812cd0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  812cd0:	defff404 	addi	sp,sp,-48
  812cd4:	df000b15 	stw	fp,44(sp)
  812cd8:	df000b04 	addi	fp,sp,44
  812cdc:	e13ffb15 	stw	r4,-20(fp)
  812ce0:	e17ffc15 	stw	r5,-16(fp)
  812ce4:	e1bffd15 	stw	r6,-12(fp)
  812ce8:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  812cec:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  812cf0:	00802074 	movhi	r2,129
  812cf4:	109fb604 	addi	r2,r2,32472
  812cf8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  812cfc:	1005003a 	cmpeq	r2,r2,zero
  812d00:	1000411e 	bne	r2,zero,812e08 <alt_alarm_start+0x138>
  {
    if (alarm)
  812d04:	e0bffb17 	ldw	r2,-20(fp)
  812d08:	1005003a 	cmpeq	r2,r2,zero
  812d0c:	10003b1e 	bne	r2,zero,812dfc <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  812d10:	e0fffb17 	ldw	r3,-20(fp)
  812d14:	e0bffd17 	ldw	r2,-12(fp)
  812d18:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  812d1c:	e0fffb17 	ldw	r3,-20(fp)
  812d20:	e0bffe17 	ldw	r2,-8(fp)
  812d24:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812d28:	0005303a 	rdctl	r2,status
  812d2c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812d30:	e0fff817 	ldw	r3,-32(fp)
  812d34:	00bfff84 	movi	r2,-2
  812d38:	1884703a 	and	r2,r3,r2
  812d3c:	1001703a 	wrctl	status,r2
  
  return context;
  812d40:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  812d44:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  812d48:	00802074 	movhi	r2,129
  812d4c:	109fb704 	addi	r2,r2,32476
  812d50:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  812d54:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  812d58:	e0fffc17 	ldw	r3,-16(fp)
  812d5c:	e0bff917 	ldw	r2,-28(fp)
  812d60:	1885883a 	add	r2,r3,r2
  812d64:	10c00044 	addi	r3,r2,1
  812d68:	e0bffb17 	ldw	r2,-20(fp)
  812d6c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  812d70:	e0bffb17 	ldw	r2,-20(fp)
  812d74:	10c00217 	ldw	r3,8(r2)
  812d78:	e0bff917 	ldw	r2,-28(fp)
  812d7c:	1880042e 	bgeu	r3,r2,812d90 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  812d80:	e0fffb17 	ldw	r3,-20(fp)
  812d84:	00800044 	movi	r2,1
  812d88:	18800405 	stb	r2,16(r3)
  812d8c:	00000206 	br	812d98 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  812d90:	e0bffb17 	ldw	r2,-20(fp)
  812d94:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  812d98:	e0fffb17 	ldw	r3,-20(fp)
  812d9c:	00802074 	movhi	r2,129
  812da0:	1098b804 	addi	r2,r2,25312
  812da4:	e0bff615 	stw	r2,-40(fp)
  812da8:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  812dac:	e0fff717 	ldw	r3,-36(fp)
  812db0:	e0bff617 	ldw	r2,-40(fp)
  812db4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  812db8:	e0bff617 	ldw	r2,-40(fp)
  812dbc:	10c00017 	ldw	r3,0(r2)
  812dc0:	e0bff717 	ldw	r2,-36(fp)
  812dc4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  812dc8:	e0bff617 	ldw	r2,-40(fp)
  812dcc:	10c00017 	ldw	r3,0(r2)
  812dd0:	e0bff717 	ldw	r2,-36(fp)
  812dd4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  812dd8:	e0fff617 	ldw	r3,-40(fp)
  812ddc:	e0bff717 	ldw	r2,-36(fp)
  812de0:	18800015 	stw	r2,0(r3)
  812de4:	e0bffa17 	ldw	r2,-24(fp)
  812de8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812dec:	e0bff517 	ldw	r2,-44(fp)
  812df0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  812df4:	e03fff15 	stw	zero,-4(fp)
  812df8:	00000506 	br	812e10 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  812dfc:	00bffa84 	movi	r2,-22
  812e00:	e0bfff15 	stw	r2,-4(fp)
  812e04:	00000206 	br	812e10 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  812e08:	00bfde84 	movi	r2,-134
  812e0c:	e0bfff15 	stw	r2,-4(fp)
  812e10:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  812e14:	e037883a 	mov	sp,fp
  812e18:	df000017 	ldw	fp,0(sp)
  812e1c:	dec00104 	addi	sp,sp,4
  812e20:	f800283a 	ret

00812e24 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  812e24:	defffe04 	addi	sp,sp,-8
  812e28:	df000115 	stw	fp,4(sp)
  812e2c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  812e30:	e03fff15 	stw	zero,-4(fp)
  812e34:	00000506 	br	812e4c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  812e38:	e0bfff17 	ldw	r2,-4(fp)
  812e3c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  812e40:	e0bfff17 	ldw	r2,-4(fp)
  812e44:	10800804 	addi	r2,r2,32
  812e48:	e0bfff15 	stw	r2,-4(fp)
  812e4c:	e0bfff17 	ldw	r2,-4(fp)
  812e50:	10820030 	cmpltui	r2,r2,2048
  812e54:	103ff81e 	bne	r2,zero,812e38 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  812e58:	e037883a 	mov	sp,fp
  812e5c:	df000017 	ldw	fp,0(sp)
  812e60:	dec00104 	addi	sp,sp,4
  812e64:	f800283a 	ret

00812e68 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  812e68:	defff904 	addi	sp,sp,-28
  812e6c:	dfc00615 	stw	ra,24(sp)
  812e70:	df000515 	stw	fp,20(sp)
  812e74:	df000504 	addi	fp,sp,20
  812e78:	e13ffd15 	stw	r4,-12(fp)
  812e7c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  812e80:	e0bffd17 	ldw	r2,-12(fp)
  812e84:	1005003a 	cmpeq	r2,r2,zero
  812e88:	1000041e 	bne	r2,zero,812e9c <alt_dev_llist_insert+0x34>
  812e8c:	e0bffd17 	ldw	r2,-12(fp)
  812e90:	10800217 	ldw	r2,8(r2)
  812e94:	1004c03a 	cmpne	r2,r2,zero
  812e98:	1000071e 	bne	r2,zero,812eb8 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  812e9c:	0812f1c0 	call	812f1c <alt_get_errno>
  812ea0:	1007883a 	mov	r3,r2
  812ea4:	00800584 	movi	r2,22
  812ea8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  812eac:	00bffa84 	movi	r2,-22
  812eb0:	e0bfff15 	stw	r2,-4(fp)
  812eb4:	00001306 	br	812f04 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  812eb8:	e0fffd17 	ldw	r3,-12(fp)
  812ebc:	e0bffe17 	ldw	r2,-8(fp)
  812ec0:	e0bffb15 	stw	r2,-20(fp)
  812ec4:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  812ec8:	e0fffc17 	ldw	r3,-16(fp)
  812ecc:	e0bffb17 	ldw	r2,-20(fp)
  812ed0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  812ed4:	e0bffb17 	ldw	r2,-20(fp)
  812ed8:	10c00017 	ldw	r3,0(r2)
  812edc:	e0bffc17 	ldw	r2,-16(fp)
  812ee0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  812ee4:	e0bffb17 	ldw	r2,-20(fp)
  812ee8:	10c00017 	ldw	r3,0(r2)
  812eec:	e0bffc17 	ldw	r2,-16(fp)
  812ef0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  812ef4:	e0fffb17 	ldw	r3,-20(fp)
  812ef8:	e0bffc17 	ldw	r2,-16(fp)
  812efc:	18800015 	stw	r2,0(r3)

  return 0;  
  812f00:	e03fff15 	stw	zero,-4(fp)
  812f04:	e0bfff17 	ldw	r2,-4(fp)
}
  812f08:	e037883a 	mov	sp,fp
  812f0c:	dfc00117 	ldw	ra,4(sp)
  812f10:	df000017 	ldw	fp,0(sp)
  812f14:	dec00204 	addi	sp,sp,8
  812f18:	f800283a 	ret

00812f1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812f1c:	defffd04 	addi	sp,sp,-12
  812f20:	dfc00215 	stw	ra,8(sp)
  812f24:	df000115 	stw	fp,4(sp)
  812f28:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  812f2c:	00802074 	movhi	r2,129
  812f30:	10989604 	addi	r2,r2,25176
  812f34:	10800017 	ldw	r2,0(r2)
  812f38:	1005003a 	cmpeq	r2,r2,zero
  812f3c:	1000061e 	bne	r2,zero,812f58 <alt_get_errno+0x3c>
  812f40:	00802074 	movhi	r2,129
  812f44:	10989604 	addi	r2,r2,25176
  812f48:	10800017 	ldw	r2,0(r2)
  812f4c:	103ee83a 	callr	r2
  812f50:	e0bfff15 	stw	r2,-4(fp)
  812f54:	00000306 	br	812f64 <alt_get_errno+0x48>
  812f58:	00802074 	movhi	r2,129
  812f5c:	109f9804 	addi	r2,r2,32352
  812f60:	e0bfff15 	stw	r2,-4(fp)
  812f64:	e0bfff17 	ldw	r2,-4(fp)
}
  812f68:	e037883a 	mov	sp,fp
  812f6c:	dfc00117 	ldw	ra,4(sp)
  812f70:	df000017 	ldw	fp,0(sp)
  812f74:	dec00204 	addi	sp,sp,8
  812f78:	f800283a 	ret

00812f7c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  812f7c:	defffd04 	addi	sp,sp,-12
  812f80:	dfc00215 	stw	ra,8(sp)
  812f84:	df000115 	stw	fp,4(sp)
  812f88:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  812f8c:	00bfff04 	movi	r2,-4
  812f90:	00c02074 	movhi	r3,129
  812f94:	18d0f004 	addi	r3,r3,17344
  812f98:	1885883a 	add	r2,r3,r2
  812f9c:	e0bfff15 	stw	r2,-4(fp)
  812fa0:	00000606 	br	812fbc <_do_ctors+0x40>
        (*ctor) (); 
  812fa4:	e0bfff17 	ldw	r2,-4(fp)
  812fa8:	10800017 	ldw	r2,0(r2)
  812fac:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  812fb0:	e0bfff17 	ldw	r2,-4(fp)
  812fb4:	10bfff04 	addi	r2,r2,-4
  812fb8:	e0bfff15 	stw	r2,-4(fp)
  812fbc:	e0ffff17 	ldw	r3,-4(fp)
  812fc0:	00802074 	movhi	r2,129
  812fc4:	1090ef04 	addi	r2,r2,17340
  812fc8:	18bff62e 	bgeu	r3,r2,812fa4 <_do_ctors+0x28>
        (*ctor) (); 
}
  812fcc:	e037883a 	mov	sp,fp
  812fd0:	dfc00117 	ldw	ra,4(sp)
  812fd4:	df000017 	ldw	fp,0(sp)
  812fd8:	dec00204 	addi	sp,sp,8
  812fdc:	f800283a 	ret

00812fe0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  812fe0:	defffd04 	addi	sp,sp,-12
  812fe4:	dfc00215 	stw	ra,8(sp)
  812fe8:	df000115 	stw	fp,4(sp)
  812fec:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  812ff0:	00bfff04 	movi	r2,-4
  812ff4:	00c02074 	movhi	r3,129
  812ff8:	18d0f004 	addi	r3,r3,17344
  812ffc:	1885883a 	add	r2,r3,r2
  813000:	e0bfff15 	stw	r2,-4(fp)
  813004:	00000606 	br	813020 <_do_dtors+0x40>
        (*dtor) (); 
  813008:	e0bfff17 	ldw	r2,-4(fp)
  81300c:	10800017 	ldw	r2,0(r2)
  813010:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  813014:	e0bfff17 	ldw	r2,-4(fp)
  813018:	10bfff04 	addi	r2,r2,-4
  81301c:	e0bfff15 	stw	r2,-4(fp)
  813020:	e0ffff17 	ldw	r3,-4(fp)
  813024:	00802074 	movhi	r2,129
  813028:	1090f004 	addi	r2,r2,17344
  81302c:	18bff62e 	bgeu	r3,r2,813008 <_do_dtors+0x28>
        (*dtor) (); 
}
  813030:	e037883a 	mov	sp,fp
  813034:	dfc00117 	ldw	ra,4(sp)
  813038:	df000017 	ldw	fp,0(sp)
  81303c:	dec00204 	addi	sp,sp,8
  813040:	f800283a 	ret

00813044 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  813044:	defff904 	addi	sp,sp,-28
  813048:	dfc00615 	stw	ra,24(sp)
  81304c:	df000515 	stw	fp,20(sp)
  813050:	df000504 	addi	fp,sp,20
  813054:	e13ffd15 	stw	r4,-12(fp)
  813058:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  81305c:	e0bffe17 	ldw	r2,-8(fp)
  813060:	10800017 	ldw	r2,0(r2)
  813064:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  813068:	e13ffd17 	ldw	r4,-12(fp)
  81306c:	08047880 	call	804788 <strlen>
  813070:	10800044 	addi	r2,r2,1
  813074:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  813078:	00000d06 	br	8130b0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  81307c:	e0bffc17 	ldw	r2,-16(fp)
  813080:	11000217 	ldw	r4,8(r2)
  813084:	e1bffb17 	ldw	r6,-20(fp)
  813088:	e17ffd17 	ldw	r5,-12(fp)
  81308c:	0813ea80 	call	813ea8 <memcmp>
  813090:	1004c03a 	cmpne	r2,r2,zero
  813094:	1000031e 	bne	r2,zero,8130a4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  813098:	e0bffc17 	ldw	r2,-16(fp)
  81309c:	e0bfff15 	stw	r2,-4(fp)
  8130a0:	00000706 	br	8130c0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  8130a4:	e0bffc17 	ldw	r2,-16(fp)
  8130a8:	10800017 	ldw	r2,0(r2)
  8130ac:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8130b0:	e0fffe17 	ldw	r3,-8(fp)
  8130b4:	e0bffc17 	ldw	r2,-16(fp)
  8130b8:	10fff01e 	bne	r2,r3,81307c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  8130bc:	e03fff15 	stw	zero,-4(fp)
  8130c0:	e0bfff17 	ldw	r2,-4(fp)
}
  8130c4:	e037883a 	mov	sp,fp
  8130c8:	dfc00117 	ldw	ra,4(sp)
  8130cc:	df000017 	ldw	fp,0(sp)
  8130d0:	dec00204 	addi	sp,sp,8
  8130d4:	f800283a 	ret

008130d8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  8130d8:	defffe04 	addi	sp,sp,-8
  8130dc:	dfc00115 	stw	ra,4(sp)
  8130e0:	df000015 	stw	fp,0(sp)
  8130e4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  8130e8:	0009883a 	mov	r4,zero
  8130ec:	01440004 	movi	r5,4096
  8130f0:	0813dcc0 	call	813dcc <alt_icache_flush>
#endif
}
  8130f4:	e037883a 	mov	sp,fp
  8130f8:	dfc00117 	ldw	ra,4(sp)
  8130fc:	df000017 	ldw	fp,0(sp)
  813100:	dec00204 	addi	sp,sp,8
  813104:	f800283a 	ret

00813108 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  813108:	defff904 	addi	sp,sp,-28
  81310c:	dfc00615 	stw	ra,24(sp)
  813110:	df000515 	stw	fp,20(sp)
  813114:	df000504 	addi	fp,sp,20
  813118:	e13ffc15 	stw	r4,-16(fp)
  81311c:	e17ffd15 	stw	r5,-12(fp)
  813120:	e1bffe15 	stw	r6,-8(fp)
  813124:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  813128:	e13ffd17 	ldw	r4,-12(fp)
  81312c:	e17ffe17 	ldw	r5,-8(fp)
  813130:	e1bfff17 	ldw	r6,-4(fp)
  813134:	08133200 	call	813320 <open>
  813138:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  81313c:	e0bffb17 	ldw	r2,-20(fp)
  813140:	1004803a 	cmplt	r2,r2,zero
  813144:	10001c1e 	bne	r2,zero,8131b8 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  813148:	e0bffb17 	ldw	r2,-20(fp)
  81314c:	00c02074 	movhi	r3,129
  813150:	18d3ee04 	addi	r3,r3,20408
  813154:	10800324 	muli	r2,r2,12
  813158:	10c5883a 	add	r2,r2,r3
  81315c:	10c00017 	ldw	r3,0(r2)
  813160:	e0bffc17 	ldw	r2,-16(fp)
  813164:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  813168:	e0bffb17 	ldw	r2,-20(fp)
  81316c:	00c02074 	movhi	r3,129
  813170:	18d3ee04 	addi	r3,r3,20408
  813174:	10800324 	muli	r2,r2,12
  813178:	10c5883a 	add	r2,r2,r3
  81317c:	10800104 	addi	r2,r2,4
  813180:	10c00017 	ldw	r3,0(r2)
  813184:	e0bffc17 	ldw	r2,-16(fp)
  813188:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  81318c:	e0bffb17 	ldw	r2,-20(fp)
  813190:	00c02074 	movhi	r3,129
  813194:	18d3ee04 	addi	r3,r3,20408
  813198:	10800324 	muli	r2,r2,12
  81319c:	10c5883a 	add	r2,r2,r3
  8131a0:	10800204 	addi	r2,r2,8
  8131a4:	10c00017 	ldw	r3,0(r2)
  8131a8:	e0bffc17 	ldw	r2,-16(fp)
  8131ac:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  8131b0:	e13ffb17 	ldw	r4,-20(fp)
  8131b4:	0807b100 	call	807b10 <alt_release_fd>
  }
} 
  8131b8:	e037883a 	mov	sp,fp
  8131bc:	dfc00117 	ldw	ra,4(sp)
  8131c0:	df000017 	ldw	fp,0(sp)
  8131c4:	dec00204 	addi	sp,sp,8
  8131c8:	f800283a 	ret

008131cc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  8131cc:	defffb04 	addi	sp,sp,-20
  8131d0:	dfc00415 	stw	ra,16(sp)
  8131d4:	df000315 	stw	fp,12(sp)
  8131d8:	df000304 	addi	fp,sp,12
  8131dc:	e13ffd15 	stw	r4,-12(fp)
  8131e0:	e17ffe15 	stw	r5,-8(fp)
  8131e4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  8131e8:	01002074 	movhi	r4,129
  8131ec:	2113f104 	addi	r4,r4,20420
  8131f0:	e17ffd17 	ldw	r5,-12(fp)
  8131f4:	01800044 	movi	r6,1
  8131f8:	01c07fc4 	movi	r7,511
  8131fc:	08131080 	call	813108 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  813200:	01002074 	movhi	r4,129
  813204:	2113ee04 	addi	r4,r4,20408
  813208:	e17ffe17 	ldw	r5,-8(fp)
  81320c:	000d883a 	mov	r6,zero
  813210:	01c07fc4 	movi	r7,511
  813214:	08131080 	call	813108 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  813218:	01002074 	movhi	r4,129
  81321c:	2113f404 	addi	r4,r4,20432
  813220:	e17fff17 	ldw	r5,-4(fp)
  813224:	01800044 	movi	r6,1
  813228:	01c07fc4 	movi	r7,511
  81322c:	08131080 	call	813108 <alt_open_fd>
}  
  813230:	e037883a 	mov	sp,fp
  813234:	dfc00117 	ldw	ra,4(sp)
  813238:	df000017 	ldw	fp,0(sp)
  81323c:	dec00204 	addi	sp,sp,8
  813240:	f800283a 	ret

00813244 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  813244:	defffc04 	addi	sp,sp,-16
  813248:	df000315 	stw	fp,12(sp)
  81324c:	df000304 	addi	fp,sp,12
  813250:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  813254:	e0bffe17 	ldw	r2,-8(fp)
  813258:	10800217 	ldw	r2,8(r2)
  81325c:	10d00034 	orhi	r3,r2,16384
  813260:	e0bffe17 	ldw	r2,-8(fp)
  813264:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  813268:	e03ffd15 	stw	zero,-12(fp)
  81326c:	00002006 	br	8132f0 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  813270:	e0bffd17 	ldw	r2,-12(fp)
  813274:	00c02074 	movhi	r3,129
  813278:	18d3ee04 	addi	r3,r3,20408
  81327c:	10800324 	muli	r2,r2,12
  813280:	10c5883a 	add	r2,r2,r3
  813284:	10c00017 	ldw	r3,0(r2)
  813288:	e0bffe17 	ldw	r2,-8(fp)
  81328c:	10800017 	ldw	r2,0(r2)
  813290:	1880141e 	bne	r3,r2,8132e4 <alt_file_locked+0xa0>
  813294:	e0bffd17 	ldw	r2,-12(fp)
  813298:	00c02074 	movhi	r3,129
  81329c:	18d3ee04 	addi	r3,r3,20408
  8132a0:	10800324 	muli	r2,r2,12
  8132a4:	10c5883a 	add	r2,r2,r3
  8132a8:	10800204 	addi	r2,r2,8
  8132ac:	10800017 	ldw	r2,0(r2)
  8132b0:	1004403a 	cmpge	r2,r2,zero
  8132b4:	10000b1e 	bne	r2,zero,8132e4 <alt_file_locked+0xa0>
  8132b8:	e0bffd17 	ldw	r2,-12(fp)
  8132bc:	10800324 	muli	r2,r2,12
  8132c0:	1007883a 	mov	r3,r2
  8132c4:	00802074 	movhi	r2,129
  8132c8:	1093ee04 	addi	r2,r2,20408
  8132cc:	1887883a 	add	r3,r3,r2
  8132d0:	e0bffe17 	ldw	r2,-8(fp)
  8132d4:	18800326 	beq	r3,r2,8132e4 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  8132d8:	00bffcc4 	movi	r2,-13
  8132dc:	e0bfff15 	stw	r2,-4(fp)
  8132e0:	00000a06 	br	81330c <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8132e4:	e0bffd17 	ldw	r2,-12(fp)
  8132e8:	10800044 	addi	r2,r2,1
  8132ec:	e0bffd15 	stw	r2,-12(fp)
  8132f0:	00802074 	movhi	r2,129
  8132f4:	10989504 	addi	r2,r2,25172
  8132f8:	10800017 	ldw	r2,0(r2)
  8132fc:	1007883a 	mov	r3,r2
  813300:	e0bffd17 	ldw	r2,-12(fp)
  813304:	18bfda2e 	bgeu	r3,r2,813270 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  813308:	e03fff15 	stw	zero,-4(fp)
  81330c:	e0bfff17 	ldw	r2,-4(fp)
}
  813310:	e037883a 	mov	sp,fp
  813314:	df000017 	ldw	fp,0(sp)
  813318:	dec00104 	addi	sp,sp,4
  81331c:	f800283a 	ret

00813320 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  813320:	defff404 	addi	sp,sp,-48
  813324:	dfc00b15 	stw	ra,44(sp)
  813328:	df000a15 	stw	fp,40(sp)
  81332c:	df000a04 	addi	fp,sp,40
  813330:	e13ffb15 	stw	r4,-20(fp)
  813334:	e17ffc15 	stw	r5,-16(fp)
  813338:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  81333c:	00bfffc4 	movi	r2,-1
  813340:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  813344:	00bffb44 	movi	r2,-19
  813348:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  81334c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  813350:	e13ffb17 	ldw	r4,-20(fp)
  813354:	01402074 	movhi	r5,129
  813358:	29589304 	addi	r5,r5,25164
  81335c:	08130440 	call	813044 <alt_find_dev>
  813360:	e0bffa15 	stw	r2,-24(fp)
  813364:	e0bffa17 	ldw	r2,-24(fp)
  813368:	1004c03a 	cmpne	r2,r2,zero
  81336c:	1000051e 	bne	r2,zero,813384 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  813370:	e13ffb17 	ldw	r4,-20(fp)
  813374:	0813bb80 	call	813bb8 <alt_find_file>
  813378:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  81337c:	00800044 	movi	r2,1
  813380:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  813384:	e0bffa17 	ldw	r2,-24(fp)
  813388:	1005003a 	cmpeq	r2,r2,zero
  81338c:	1000301e 	bne	r2,zero,813450 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  813390:	e13ffa17 	ldw	r4,-24(fp)
  813394:	0813cd80 	call	813cd8 <alt_get_fd>
  813398:	e0bff815 	stw	r2,-32(fp)
  81339c:	e0bff817 	ldw	r2,-32(fp)
  8133a0:	1004403a 	cmpge	r2,r2,zero
  8133a4:	1000031e 	bne	r2,zero,8133b4 <open+0x94>
    {
      status = index;
  8133a8:	e0bff817 	ldw	r2,-32(fp)
  8133ac:	e0bff715 	stw	r2,-36(fp)
  8133b0:	00002906 	br	813458 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  8133b4:	e0bff817 	ldw	r2,-32(fp)
  8133b8:	10800324 	muli	r2,r2,12
  8133bc:	1007883a 	mov	r3,r2
  8133c0:	00802074 	movhi	r2,129
  8133c4:	1093ee04 	addi	r2,r2,20408
  8133c8:	1885883a 	add	r2,r3,r2
  8133cc:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  8133d0:	e0fffc17 	ldw	r3,-16(fp)
  8133d4:	00900034 	movhi	r2,16384
  8133d8:	10bfffc4 	addi	r2,r2,-1
  8133dc:	1886703a 	and	r3,r3,r2
  8133e0:	e0bff917 	ldw	r2,-28(fp)
  8133e4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  8133e8:	e0bff617 	ldw	r2,-40(fp)
  8133ec:	1004c03a 	cmpne	r2,r2,zero
  8133f0:	1000061e 	bne	r2,zero,81340c <open+0xec>
  8133f4:	e13ff917 	ldw	r4,-28(fp)
  8133f8:	08132440 	call	813244 <alt_file_locked>
  8133fc:	e0bff715 	stw	r2,-36(fp)
  813400:	e0bff717 	ldw	r2,-36(fp)
  813404:	1004803a 	cmplt	r2,r2,zero
  813408:	1000131e 	bne	r2,zero,813458 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  81340c:	e0bffa17 	ldw	r2,-24(fp)
  813410:	10800317 	ldw	r2,12(r2)
  813414:	1005003a 	cmpeq	r2,r2,zero
  813418:	1000091e 	bne	r2,zero,813440 <open+0x120>
  81341c:	e0bffa17 	ldw	r2,-24(fp)
  813420:	10800317 	ldw	r2,12(r2)
  813424:	e13ff917 	ldw	r4,-28(fp)
  813428:	e17ffb17 	ldw	r5,-20(fp)
  81342c:	e1bffc17 	ldw	r6,-16(fp)
  813430:	e1fffd17 	ldw	r7,-12(fp)
  813434:	103ee83a 	callr	r2
  813438:	e0bfff15 	stw	r2,-4(fp)
  81343c:	00000106 	br	813444 <open+0x124>
  813440:	e03fff15 	stw	zero,-4(fp)
  813444:	e0bfff17 	ldw	r2,-4(fp)
  813448:	e0bff715 	stw	r2,-36(fp)
  81344c:	00000206 	br	813458 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  813450:	00bffb44 	movi	r2,-19
  813454:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  813458:	e0bff717 	ldw	r2,-36(fp)
  81345c:	1004403a 	cmpge	r2,r2,zero
  813460:	1000091e 	bne	r2,zero,813488 <open+0x168>
  {
    alt_release_fd (index);  
  813464:	e13ff817 	ldw	r4,-32(fp)
  813468:	0807b100 	call	807b10 <alt_release_fd>
    ALT_ERRNO = -status;
  81346c:	08134a80 	call	8134a8 <alt_get_errno>
  813470:	e0fff717 	ldw	r3,-36(fp)
  813474:	00c7c83a 	sub	r3,zero,r3
  813478:	10c00015 	stw	r3,0(r2)
    return -1;
  81347c:	00bfffc4 	movi	r2,-1
  813480:	e0bffe15 	stw	r2,-8(fp)
  813484:	00000206 	br	813490 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  813488:	e0bff817 	ldw	r2,-32(fp)
  81348c:	e0bffe15 	stw	r2,-8(fp)
  813490:	e0bffe17 	ldw	r2,-8(fp)
}
  813494:	e037883a 	mov	sp,fp
  813498:	dfc00117 	ldw	ra,4(sp)
  81349c:	df000017 	ldw	fp,0(sp)
  8134a0:	dec00204 	addi	sp,sp,8
  8134a4:	f800283a 	ret

008134a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8134a8:	defffd04 	addi	sp,sp,-12
  8134ac:	dfc00215 	stw	ra,8(sp)
  8134b0:	df000115 	stw	fp,4(sp)
  8134b4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8134b8:	00802074 	movhi	r2,129
  8134bc:	10989604 	addi	r2,r2,25176
  8134c0:	10800017 	ldw	r2,0(r2)
  8134c4:	1005003a 	cmpeq	r2,r2,zero
  8134c8:	1000061e 	bne	r2,zero,8134e4 <alt_get_errno+0x3c>
  8134cc:	00802074 	movhi	r2,129
  8134d0:	10989604 	addi	r2,r2,25176
  8134d4:	10800017 	ldw	r2,0(r2)
  8134d8:	103ee83a 	callr	r2
  8134dc:	e0bfff15 	stw	r2,-4(fp)
  8134e0:	00000306 	br	8134f0 <alt_get_errno+0x48>
  8134e4:	00802074 	movhi	r2,129
  8134e8:	109f9804 	addi	r2,r2,32352
  8134ec:	e0bfff15 	stw	r2,-4(fp)
  8134f0:	e0bfff17 	ldw	r2,-4(fp)
}
  8134f4:	e037883a 	mov	sp,fp
  8134f8:	dfc00117 	ldw	ra,4(sp)
  8134fc:	df000017 	ldw	fp,0(sp)
  813500:	dec00204 	addi	sp,sp,8
  813504:	f800283a 	ret

00813508 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  813508:	defffa04 	addi	sp,sp,-24
  81350c:	df000515 	stw	fp,20(sp)
  813510:	df000504 	addi	fp,sp,20
  813514:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813518:	0005303a 	rdctl	r2,status
  81351c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813520:	e0fffd17 	ldw	r3,-12(fp)
  813524:	00bfff84 	movi	r2,-2
  813528:	1884703a 	and	r2,r3,r2
  81352c:	1001703a 	wrctl	status,r2
  
  return context;
  813530:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  813534:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  813538:	e0bfff17 	ldw	r2,-4(fp)
  81353c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  813540:	e0bffc17 	ldw	r2,-16(fp)
  813544:	10c00017 	ldw	r3,0(r2)
  813548:	e0bffc17 	ldw	r2,-16(fp)
  81354c:	10800117 	ldw	r2,4(r2)
  813550:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  813554:	e0bffc17 	ldw	r2,-16(fp)
  813558:	10c00117 	ldw	r3,4(r2)
  81355c:	e0bffc17 	ldw	r2,-16(fp)
  813560:	10800017 	ldw	r2,0(r2)
  813564:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  813568:	e0fffc17 	ldw	r3,-16(fp)
  81356c:	e0bffc17 	ldw	r2,-16(fp)
  813570:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  813574:	e0fffc17 	ldw	r3,-16(fp)
  813578:	e0bffc17 	ldw	r2,-16(fp)
  81357c:	18800015 	stw	r2,0(r3)
  813580:	e0bffe17 	ldw	r2,-8(fp)
  813584:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813588:	e0bffb17 	ldw	r2,-20(fp)
  81358c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  813590:	e037883a 	mov	sp,fp
  813594:	df000017 	ldw	fp,0(sp)
  813598:	dec00104 	addi	sp,sp,4
  81359c:	f800283a 	ret

008135a0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  8135a0:	defffb04 	addi	sp,sp,-20
  8135a4:	dfc00415 	stw	ra,16(sp)
  8135a8:	df000315 	stw	fp,12(sp)
  8135ac:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  8135b0:	d0a02c17 	ldw	r2,-32592(gp)
  8135b4:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  8135b8:	d0a72b17 	ldw	r2,-25428(gp)
  8135bc:	10800044 	addi	r2,r2,1
  8135c0:	d0a72b15 	stw	r2,-25428(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8135c4:	00003106 	br	81368c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  8135c8:	e0bffe17 	ldw	r2,-8(fp)
  8135cc:	10800017 	ldw	r2,0(r2)
  8135d0:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  8135d4:	e0bffe17 	ldw	r2,-8(fp)
  8135d8:	10800403 	ldbu	r2,16(r2)
  8135dc:	10803fcc 	andi	r2,r2,255
  8135e0:	1005003a 	cmpeq	r2,r2,zero
  8135e4:	1000051e 	bne	r2,zero,8135fc <alt_tick+0x5c>
  8135e8:	d0a72b17 	ldw	r2,-25428(gp)
  8135ec:	1004c03a 	cmpne	r2,r2,zero
  8135f0:	1000021e 	bne	r2,zero,8135fc <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  8135f4:	e0bffe17 	ldw	r2,-8(fp)
  8135f8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  8135fc:	e0bffe17 	ldw	r2,-8(fp)
  813600:	10c00217 	ldw	r3,8(r2)
  813604:	d0a72b17 	ldw	r2,-25428(gp)
  813608:	10c01e36 	bltu	r2,r3,813684 <alt_tick+0xe4>
  81360c:	e0bffe17 	ldw	r2,-8(fp)
  813610:	10800403 	ldbu	r2,16(r2)
  813614:	10803fcc 	andi	r2,r2,255
  813618:	1004c03a 	cmpne	r2,r2,zero
  81361c:	1000191e 	bne	r2,zero,813684 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  813620:	e0bffe17 	ldw	r2,-8(fp)
  813624:	10c00317 	ldw	r3,12(r2)
  813628:	e0bffe17 	ldw	r2,-8(fp)
  81362c:	11000517 	ldw	r4,20(r2)
  813630:	183ee83a 	callr	r3
  813634:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  813638:	e0bffd17 	ldw	r2,-12(fp)
  81363c:	1004c03a 	cmpne	r2,r2,zero
  813640:	1000031e 	bne	r2,zero,813650 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  813644:	e13ffe17 	ldw	r4,-8(fp)
  813648:	08135080 	call	813508 <alt_alarm_stop>
  81364c:	00000d06 	br	813684 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  813650:	e0bffe17 	ldw	r2,-8(fp)
  813654:	10c00217 	ldw	r3,8(r2)
  813658:	e0bffd17 	ldw	r2,-12(fp)
  81365c:	1887883a 	add	r3,r3,r2
  813660:	e0bffe17 	ldw	r2,-8(fp)
  813664:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  813668:	e0bffe17 	ldw	r2,-8(fp)
  81366c:	10c00217 	ldw	r3,8(r2)
  813670:	d0a72b17 	ldw	r2,-25428(gp)
  813674:	1880032e 	bgeu	r3,r2,813684 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  813678:	e0fffe17 	ldw	r3,-8(fp)
  81367c:	00800044 	movi	r2,1
  813680:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  813684:	e0bfff17 	ldw	r2,-4(fp)
  813688:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  81368c:	d0e02c04 	addi	r3,gp,-32592
  813690:	e0bffe17 	ldw	r2,-8(fp)
  813694:	10ffcc1e 	bne	r2,r3,8135c8 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  813698:	0808e100 	call	808e10 <OSTimeTick>
}
  81369c:	e037883a 	mov	sp,fp
  8136a0:	dfc00117 	ldw	ra,4(sp)
  8136a4:	df000017 	ldw	fp,0(sp)
  8136a8:	dec00204 	addi	sp,sp,8
  8136ac:	f800283a 	ret

008136b0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  8136b0:	deffff04 	addi	sp,sp,-4
  8136b4:	df000015 	stw	fp,0(sp)
  8136b8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  8136bc:	000170fa 	wrctl	ienable,zero
}
  8136c0:	e037883a 	mov	sp,fp
  8136c4:	df000017 	ldw	fp,0(sp)
  8136c8:	dec00104 	addi	sp,sp,4
  8136cc:	f800283a 	ret

008136d0 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
  8136d0:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
  8136d4:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
  8136d8:	d1272517 	ldw	r4,-25452(gp)

      stw ra,  0(sp)
  8136dc:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
  8136e0:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
  8136e4:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
  8136e8:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
  8136ec:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
  8136f0:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
  8136f4:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
  8136f8:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
  8136fc:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
  813700:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
  813704:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
  813708:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  81370c:	0813af00 	call	813af0 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
  813710:	d1272017 	ldw	r4,-25472(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
  813714:	d1671807 	ldb	r5,-25504(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
  813718:	d1272515 	stw	r4,-25452(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
  81371c:	d1671845 	stb	r5,-25503(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
  813720:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
  813724:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
  813728:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
  81372c:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
  813730:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
  813734:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
  813738:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
  81373c:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
  813740:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
  813744:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
  813748:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
  81374c:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
  813750:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
  813754:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
  813758:	f800283a 	ret

0081375c <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
  81375c:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
  813760:	047fff84 	movi	r17,-2
      and   r18, r18, r17
  813764:	9464703a 	and	r18,r18,r17
      wrctl status, r18
  813768:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  81376c:	0813af00 	call	813af0 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
  813770:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
  813774:	d4a71645 	stb	r18,-25511(gp)

      /*
       * start execution of the new task.
       */

      br 9b
  813778:	003fe506 	br	813710 <OSCtxSw+0x40>

0081377c <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
  81377c:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
  813780:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
  813784:	10800054 	ori	r2,r2,1
      wrctl status, r2
  813788:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
  81378c:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
  813790:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
  813794:	dec00204 	addi	sp,sp,8

      callr r2
  813798:	103ee83a 	callr	r2

      nop
  81379c:	0001883a 	nop

008137a0 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
  8137a0:	defff704 	addi	sp,sp,-36
  8137a4:	dfc00815 	stw	ra,32(sp)
  8137a8:	df000715 	stw	fp,28(sp)
  8137ac:	df000704 	addi	fp,sp,28
  8137b0:	e13ffc15 	stw	r4,-16(fp)
  8137b4:	e17ffd15 	stw	r5,-12(fp)
  8137b8:	e1bffe15 	stw	r6,-8(fp)
  8137bc:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
  8137c0:	e0bffe17 	ldw	r2,-8(fp)
  8137c4:	1007883a 	mov	r3,r2
  8137c8:	00bfff04 	movi	r2,-4
  8137cc:	1884703a 	and	r2,r3,r2
  8137d0:	10bf0004 	addi	r2,r2,-1024
  8137d4:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
  8137d8:	e0bff917 	ldw	r2,-28(fp)
  8137dc:	10000015 	stw	zero,0(r2)
  8137e0:	e0bff917 	ldw	r2,-28(fp)
  8137e4:	10c0bb04 	addi	r3,r2,748
  8137e8:	e0bff917 	ldw	r2,-28(fp)
  8137ec:	10c00115 	stw	r3,4(r2)
  8137f0:	e0bff917 	ldw	r2,-28(fp)
  8137f4:	1080bb04 	addi	r2,r2,748
  8137f8:	10c01704 	addi	r3,r2,92
  8137fc:	e0bff917 	ldw	r2,-28(fp)
  813800:	10c00215 	stw	r3,8(r2)
  813804:	e0bff917 	ldw	r2,-28(fp)
  813808:	1080bb04 	addi	r2,r2,748
  81380c:	10c02e04 	addi	r3,r2,184
  813810:	e0bff917 	ldw	r2,-28(fp)
  813814:	10c00315 	stw	r3,12(r2)
  813818:	e0bff917 	ldw	r2,-28(fp)
  81381c:	10000415 	stw	zero,16(r2)
  813820:	e0bff917 	ldw	r2,-28(fp)
  813824:	10800504 	addi	r2,r2,20
  813828:	1009883a 	mov	r4,r2
  81382c:	01800644 	movi	r6,25
  813830:	000b883a 	mov	r5,zero
  813834:	0806a200 	call	806a20 <memset>
  813838:	e0bff917 	ldw	r2,-28(fp)
  81383c:	10000c15 	stw	zero,48(r2)
  813840:	e0fff917 	ldw	r3,-28(fp)
  813844:	00802074 	movhi	r2,129
  813848:	1091e104 	addi	r2,r2,18308
  81384c:	18800d15 	stw	r2,52(r3)
  813850:	e0bff917 	ldw	r2,-28(fp)
  813854:	10000e15 	stw	zero,56(r2)
  813858:	e0bff917 	ldw	r2,-28(fp)
  81385c:	10000f15 	stw	zero,60(r2)
  813860:	e0bff917 	ldw	r2,-28(fp)
  813864:	10001015 	stw	zero,64(r2)
  813868:	e0bff917 	ldw	r2,-28(fp)
  81386c:	10001115 	stw	zero,68(r2)
  813870:	e0bff917 	ldw	r2,-28(fp)
  813874:	10001215 	stw	zero,72(r2)
  813878:	e0bff917 	ldw	r2,-28(fp)
  81387c:	10001315 	stw	zero,76(r2)
  813880:	e0bff917 	ldw	r2,-28(fp)
  813884:	10001415 	stw	zero,80(r2)
  813888:	e0bff917 	ldw	r2,-28(fp)
  81388c:	10001515 	stw	zero,84(r2)
  813890:	e0bff917 	ldw	r2,-28(fp)
  813894:	10001615 	stw	zero,88(r2)
  813898:	e0bff917 	ldw	r2,-28(fp)
  81389c:	10001715 	stw	zero,92(r2)
  8138a0:	e0bff917 	ldw	r2,-28(fp)
  8138a4:	10001805 	stb	zero,96(r2)
  8138a8:	e0bff917 	ldw	r2,-28(fp)
  8138ac:	10801f04 	addi	r2,r2,124
  8138b0:	10000015 	stw	zero,0(r2)
  8138b4:	10000115 	stw	zero,4(r2)
  8138b8:	10000215 	stw	zero,8(r2)
  8138bc:	10000315 	stw	zero,12(r2)
  8138c0:	10000415 	stw	zero,16(r2)
  8138c4:	10000515 	stw	zero,20(r2)
  8138c8:	10000615 	stw	zero,24(r2)
  8138cc:	10000715 	stw	zero,28(r2)
  8138d0:	10000815 	stw	zero,32(r2)
  8138d4:	e0bff917 	ldw	r2,-28(fp)
  8138d8:	10002815 	stw	zero,160(r2)
  8138dc:	e0fff917 	ldw	r3,-28(fp)
  8138e0:	00800044 	movi	r2,1
  8138e4:	18802915 	stw	r2,164(r3)
  8138e8:	18002a15 	stw	zero,168(r3)
  8138ec:	e0fff917 	ldw	r3,-28(fp)
  8138f0:	008cc384 	movi	r2,13070
  8138f4:	18802b0d 	sth	r2,172(r3)
  8138f8:	e0fff917 	ldw	r3,-28(fp)
  8138fc:	00aaf344 	movi	r2,-21555
  813900:	18802b8d 	sth	r2,174(r3)
  813904:	e0fff917 	ldw	r3,-28(fp)
  813908:	00848d04 	movi	r2,4660
  81390c:	18802c0d 	sth	r2,176(r3)
  813910:	e0fff917 	ldw	r3,-28(fp)
  813914:	00b99b44 	movi	r2,-6547
  813918:	18802c8d 	sth	r2,178(r3)
  81391c:	e0fff917 	ldw	r3,-28(fp)
  813920:	00b7bb04 	movi	r2,-8468
  813924:	18802d0d 	sth	r2,180(r3)
  813928:	e0fff917 	ldw	r3,-28(fp)
  81392c:	00800144 	movi	r2,5
  813930:	18802d8d 	sth	r2,182(r3)
  813934:	e0fff917 	ldw	r3,-28(fp)
  813938:	008002c4 	movi	r2,11
  81393c:	18802e0d 	sth	r2,184(r3)
  813940:	e0bff917 	ldw	r2,-28(fp)
  813944:	10002f15 	stw	zero,188(r2)
  813948:	e0bff917 	ldw	r2,-28(fp)
  81394c:	10003015 	stw	zero,192(r2)
  813950:	e0bff917 	ldw	r2,-28(fp)
  813954:	10003115 	stw	zero,196(r2)
  813958:	e0bff917 	ldw	r2,-28(fp)
  81395c:	10003215 	stw	zero,200(r2)
  813960:	e0bff917 	ldw	r2,-28(fp)
  813964:	10003315 	stw	zero,204(r2)
  813968:	e0bff917 	ldw	r2,-28(fp)
  81396c:	10003415 	stw	zero,208(r2)
  813970:	e0bff917 	ldw	r2,-28(fp)
  813974:	10003e15 	stw	zero,248(r2)
  813978:	e0bff917 	ldw	r2,-28(fp)
  81397c:	10003f15 	stw	zero,252(r2)
  813980:	e0bff917 	ldw	r2,-28(fp)
  813984:	10004015 	stw	zero,256(r2)
  813988:	e0bff917 	ldw	r2,-28(fp)
  81398c:	10004115 	stw	zero,260(r2)
  813990:	e0bff917 	ldw	r2,-28(fp)
  813994:	10004215 	stw	zero,264(r2)
  813998:	e0bff917 	ldw	r2,-28(fp)
  81399c:	10004315 	stw	zero,268(r2)
  8139a0:	e0bff917 	ldw	r2,-28(fp)
  8139a4:	10004415 	stw	zero,272(r2)
  8139a8:	e0bff917 	ldw	r2,-28(fp)
  8139ac:	10004515 	stw	zero,276(r2)
  8139b0:	e0bff917 	ldw	r2,-28(fp)
  8139b4:	10004615 	stw	zero,280(r2)
  8139b8:	e0bff917 	ldw	r2,-28(fp)
  8139bc:	10004715 	stw	zero,284(r2)
  8139c0:	e0bff917 	ldw	r2,-28(fp)
  8139c4:	10003505 	stb	zero,212(r2)
  8139c8:	e0bff917 	ldw	r2,-28(fp)
  8139cc:	10003705 	stb	zero,220(r2)
  8139d0:	e0bff917 	ldw	r2,-28(fp)
  8139d4:	10003d15 	stw	zero,244(r2)
  8139d8:	e0bff917 	ldw	r2,-28(fp)
  8139dc:	10005215 	stw	zero,328(r2)
  8139e0:	e0bff917 	ldw	r2,-28(fp)
  8139e4:	10005315 	stw	zero,332(r2)
  8139e8:	e0bff917 	ldw	r2,-28(fp)
  8139ec:	10005415 	stw	zero,336(r2)
  8139f0:	e0bff917 	ldw	r2,-28(fp)
  8139f4:	10005515 	stw	zero,340(r2)
  8139f8:	e0bff917 	ldw	r2,-28(fp)
  8139fc:	1000b515 	stw	zero,724(r2)
  813a00:	e0bff917 	ldw	r2,-28(fp)
  813a04:	10007515 	stw	zero,468(r2)
  813a08:	e0bff917 	ldw	r2,-28(fp)
  813a0c:	1000b715 	stw	zero,732(r2)
  813a10:	e0bff917 	ldw	r2,-28(fp)
  813a14:	1000b815 	stw	zero,736(r2)
  813a18:	e0bff917 	ldw	r2,-28(fp)
  813a1c:	1000b915 	stw	zero,740(r2)
  813a20:	e0bff917 	ldw	r2,-28(fp)
  813a24:	1000ba15 	stw	zero,744(r2)
  813a28:	e0bff917 	ldw	r2,-28(fp)
  813a2c:	1080bb04 	addi	r2,r2,748
  813a30:	1009883a 	mov	r4,r2
  813a34:	01804504 	movi	r6,276
  813a38:	000b883a 	mov	r5,zero
  813a3c:	0806a200 	call	806a20 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
  813a40:	e0bff917 	ldw	r2,-28(fp)
  813a44:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
  813a48:	e0bffb17 	ldw	r2,-20(fp)
  813a4c:	10bff304 	addi	r2,r2,-52
  813a50:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
  813a54:	e0bffa17 	ldw	r2,-24(fp)
  813a58:	10c00c04 	addi	r3,r2,48
  813a5c:	e0bffc17 	ldw	r2,-16(fp)
  813a60:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
  813a64:	e0bffa17 	ldw	r2,-24(fp)
  813a68:	10c00b04 	addi	r3,r2,44
  813a6c:	e0bffd17 	ldw	r2,-12(fp)
  813a70:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
  813a74:	e0bffa17 	ldw	r2,-24(fp)
  813a78:	10c00a04 	addi	r3,r2,40
  813a7c:	e0bff917 	ldw	r2,-28(fp)
  813a80:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
  813a84:	00802074 	movhi	r2,129
  813a88:	108ddf04 	addi	r2,r2,14204
  813a8c:	10c00104 	addi	r3,r2,4
  813a90:	e0bffa17 	ldw	r2,-24(fp)
  813a94:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
  813a98:	e0bffa17 	ldw	r2,-24(fp)
}
  813a9c:	e037883a 	mov	sp,fp
  813aa0:	dfc00117 	ldw	ra,4(sp)
  813aa4:	df000017 	ldw	fp,0(sp)
  813aa8:	dec00204 	addi	sp,sp,8
  813aac:	f800283a 	ret

00813ab0 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
  813ab0:	defffe04 	addi	sp,sp,-8
  813ab4:	df000115 	stw	fp,4(sp)
  813ab8:	df000104 	addi	fp,sp,4
  813abc:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
  813ac0:	e037883a 	mov	sp,fp
  813ac4:	df000017 	ldw	fp,0(sp)
  813ac8:	dec00104 	addi	sp,sp,4
  813acc:	f800283a 	ret

00813ad0 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
  813ad0:	defffe04 	addi	sp,sp,-8
  813ad4:	df000115 	stw	fp,4(sp)
  813ad8:	df000104 	addi	fp,sp,4
  813adc:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
  813ae0:	e037883a 	mov	sp,fp
  813ae4:	df000017 	ldw	fp,0(sp)
  813ae8:	dec00104 	addi	sp,sp,4
  813aec:	f800283a 	ret

00813af0 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
  813af0:	deffff04 	addi	sp,sp,-4
  813af4:	df000015 	stw	fp,0(sp)
  813af8:	d839883a 	mov	fp,sp
}
  813afc:	e037883a 	mov	sp,fp
  813b00:	df000017 	ldw	fp,0(sp)
  813b04:	dec00104 	addi	sp,sp,4
  813b08:	f800283a 	ret

00813b0c <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
  813b0c:	deffff04 	addi	sp,sp,-4
  813b10:	df000015 	stw	fp,0(sp)
  813b14:	d839883a 	mov	fp,sp
}
  813b18:	e037883a 	mov	sp,fp
  813b1c:	df000017 	ldw	fp,0(sp)
  813b20:	dec00104 	addi	sp,sp,4
  813b24:	f800283a 	ret

00813b28 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
  813b28:	deffff04 	addi	sp,sp,-4
  813b2c:	df000015 	stw	fp,0(sp)
  813b30:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
  813b34:	e037883a 	mov	sp,fp
  813b38:	df000017 	ldw	fp,0(sp)
  813b3c:	dec00104 	addi	sp,sp,4
  813b40:	f800283a 	ret

00813b44 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
  813b44:	deffff04 	addi	sp,sp,-4
  813b48:	df000015 	stw	fp,0(sp)
  813b4c:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
  813b50:	e037883a 	mov	sp,fp
  813b54:	df000017 	ldw	fp,0(sp)
  813b58:	dec00104 	addi	sp,sp,4
  813b5c:	f800283a 	ret

00813b60 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
  813b60:	deffff04 	addi	sp,sp,-4
  813b64:	df000015 	stw	fp,0(sp)
  813b68:	d839883a 	mov	fp,sp
}
  813b6c:	e037883a 	mov	sp,fp
  813b70:	df000017 	ldw	fp,0(sp)
  813b74:	dec00104 	addi	sp,sp,4
  813b78:	f800283a 	ret

00813b7c <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
  813b7c:	deffff04 	addi	sp,sp,-4
  813b80:	df000015 	stw	fp,0(sp)
  813b84:	d839883a 	mov	fp,sp
}
  813b88:	e037883a 	mov	sp,fp
  813b8c:	df000017 	ldw	fp,0(sp)
  813b90:	dec00104 	addi	sp,sp,4
  813b94:	f800283a 	ret

00813b98 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
  813b98:	defffe04 	addi	sp,sp,-8
  813b9c:	df000115 	stw	fp,4(sp)
  813ba0:	df000104 	addi	fp,sp,4
  813ba4:	e13fff15 	stw	r4,-4(fp)
}
  813ba8:	e037883a 	mov	sp,fp
  813bac:	df000017 	ldw	fp,0(sp)
  813bb0:	dec00104 	addi	sp,sp,4
  813bb4:	f800283a 	ret

00813bb8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  813bb8:	defffa04 	addi	sp,sp,-24
  813bbc:	dfc00515 	stw	ra,20(sp)
  813bc0:	df000415 	stw	fp,16(sp)
  813bc4:	df000404 	addi	fp,sp,16
  813bc8:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  813bcc:	00802074 	movhi	r2,129
  813bd0:	10989104 	addi	r2,r2,25156
  813bd4:	10800017 	ldw	r2,0(r2)
  813bd8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  813bdc:	00003306 	br	813cac <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  813be0:	e0bffd17 	ldw	r2,-12(fp)
  813be4:	11000217 	ldw	r4,8(r2)
  813be8:	08047880 	call	804788 <strlen>
  813bec:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  813bf0:	e0bffd17 	ldw	r2,-12(fp)
  813bf4:	10c00217 	ldw	r3,8(r2)
  813bf8:	e0bffc17 	ldw	r2,-16(fp)
  813bfc:	1885883a 	add	r2,r3,r2
  813c00:	10bfffc4 	addi	r2,r2,-1
  813c04:	10800003 	ldbu	r2,0(r2)
  813c08:	10803fcc 	andi	r2,r2,255
  813c0c:	1080201c 	xori	r2,r2,128
  813c10:	10bfe004 	addi	r2,r2,-128
  813c14:	10800bd8 	cmpnei	r2,r2,47
  813c18:	1000031e 	bne	r2,zero,813c28 <alt_find_file+0x70>
    {
      len -= 1;
  813c1c:	e0bffc17 	ldw	r2,-16(fp)
  813c20:	10bfffc4 	addi	r2,r2,-1
  813c24:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  813c28:	e0bffc17 	ldw	r2,-16(fp)
  813c2c:	1007883a 	mov	r3,r2
  813c30:	e0bffe17 	ldw	r2,-8(fp)
  813c34:	1885883a 	add	r2,r3,r2
  813c38:	10800003 	ldbu	r2,0(r2)
  813c3c:	10803fcc 	andi	r2,r2,255
  813c40:	1080201c 	xori	r2,r2,128
  813c44:	10bfe004 	addi	r2,r2,-128
  813c48:	10800be0 	cmpeqi	r2,r2,47
  813c4c:	10000a1e 	bne	r2,zero,813c78 <alt_find_file+0xc0>
  813c50:	e0bffc17 	ldw	r2,-16(fp)
  813c54:	1007883a 	mov	r3,r2
  813c58:	e0bffe17 	ldw	r2,-8(fp)
  813c5c:	1885883a 	add	r2,r3,r2
  813c60:	10800003 	ldbu	r2,0(r2)
  813c64:	10803fcc 	andi	r2,r2,255
  813c68:	1080201c 	xori	r2,r2,128
  813c6c:	10bfe004 	addi	r2,r2,-128
  813c70:	1004c03a 	cmpne	r2,r2,zero
  813c74:	10000a1e 	bne	r2,zero,813ca0 <alt_find_file+0xe8>
  813c78:	e0bffd17 	ldw	r2,-12(fp)
  813c7c:	11000217 	ldw	r4,8(r2)
  813c80:	e1bffc17 	ldw	r6,-16(fp)
  813c84:	e17ffe17 	ldw	r5,-8(fp)
  813c88:	0813ea80 	call	813ea8 <memcmp>
  813c8c:	1004c03a 	cmpne	r2,r2,zero
  813c90:	1000031e 	bne	r2,zero,813ca0 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  813c94:	e0bffd17 	ldw	r2,-12(fp)
  813c98:	e0bfff15 	stw	r2,-4(fp)
  813c9c:	00000806 	br	813cc0 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  813ca0:	e0bffd17 	ldw	r2,-12(fp)
  813ca4:	10800017 	ldw	r2,0(r2)
  813ca8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  813cac:	00c02074 	movhi	r3,129
  813cb0:	18d89104 	addi	r3,r3,25156
  813cb4:	e0bffd17 	ldw	r2,-12(fp)
  813cb8:	10ffc91e 	bne	r2,r3,813be0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  813cbc:	e03fff15 	stw	zero,-4(fp)
  813cc0:	e0bfff17 	ldw	r2,-4(fp)
}
  813cc4:	e037883a 	mov	sp,fp
  813cc8:	dfc00117 	ldw	ra,4(sp)
  813ccc:	df000017 	ldw	fp,0(sp)
  813cd0:	dec00204 	addi	sp,sp,8
  813cd4:	f800283a 	ret

00813cd8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  813cd8:	defff804 	addi	sp,sp,-32
  813cdc:	dfc00715 	stw	ra,28(sp)
  813ce0:	df000615 	stw	fp,24(sp)
  813ce4:	df000604 	addi	fp,sp,24
  813ce8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  813cec:	00bffa04 	movi	r2,-24
  813cf0:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
  813cf4:	00802074 	movhi	r2,129
  813cf8:	109f9904 	addi	r2,r2,32356
  813cfc:	10800017 	ldw	r2,0(r2)
  813d00:	e0bffa15 	stw	r2,-24(fp)
  813d04:	e03ffb0d 	sth	zero,-20(fp)
  813d08:	e17ffb0b 	ldhu	r5,-20(fp)
  813d0c:	e1bffe04 	addi	r6,fp,-8
  813d10:	e13ffa17 	ldw	r4,-24(fp)
  813d14:	080dc2c0 	call	80dc2c <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  813d18:	e03ffd15 	stw	zero,-12(fp)
  813d1c:	00001e06 	br	813d98 <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
  813d20:	e0bffd17 	ldw	r2,-12(fp)
  813d24:	00c02074 	movhi	r3,129
  813d28:	18d3ee04 	addi	r3,r3,20408
  813d2c:	10800324 	muli	r2,r2,12
  813d30:	10c5883a 	add	r2,r2,r3
  813d34:	10800017 	ldw	r2,0(r2)
  813d38:	1004c03a 	cmpne	r2,r2,zero
  813d3c:	1000131e 	bne	r2,zero,813d8c <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
  813d40:	e0bffd17 	ldw	r2,-12(fp)
  813d44:	00c02074 	movhi	r3,129
  813d48:	18d3ee04 	addi	r3,r3,20408
  813d4c:	10800324 	muli	r2,r2,12
  813d50:	10c7883a 	add	r3,r2,r3
  813d54:	e0bfff17 	ldw	r2,-4(fp)
  813d58:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  813d5c:	00802074 	movhi	r2,129
  813d60:	10989504 	addi	r2,r2,25172
  813d64:	10c00017 	ldw	r3,0(r2)
  813d68:	e0bffd17 	ldw	r2,-12(fp)
  813d6c:	1880040e 	bge	r3,r2,813d80 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
  813d70:	00c02074 	movhi	r3,129
  813d74:	18d89504 	addi	r3,r3,25172
  813d78:	e0bffd17 	ldw	r2,-12(fp)
  813d7c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  813d80:	e0bffd17 	ldw	r2,-12(fp)
  813d84:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
  813d88:	00000606 	br	813da4 <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  813d8c:	e0bffd17 	ldw	r2,-12(fp)
  813d90:	10800044 	addi	r2,r2,1
  813d94:	e0bffd15 	stw	r2,-12(fp)
  813d98:	e0bffd17 	ldw	r2,-12(fp)
  813d9c:	10800810 	cmplti	r2,r2,32
  813da0:	103fdf1e 	bne	r2,zero,813d20 <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
  813da4:	00802074 	movhi	r2,129
  813da8:	109f9904 	addi	r2,r2,32356
  813dac:	11000017 	ldw	r4,0(r2)
  813db0:	080e0240 	call	80e024 <OSSemPost>

  return rc;
  813db4:	e0bffc17 	ldw	r2,-16(fp)
}
  813db8:	e037883a 	mov	sp,fp
  813dbc:	dfc00117 	ldw	ra,4(sp)
  813dc0:	df000017 	ldw	fp,0(sp)
  813dc4:	dec00204 	addi	sp,sp,8
  813dc8:	f800283a 	ret

00813dcc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  813dcc:	defffb04 	addi	sp,sp,-20
  813dd0:	df000415 	stw	fp,16(sp)
  813dd4:	df000404 	addi	fp,sp,16
  813dd8:	e13ffe15 	stw	r4,-8(fp)
  813ddc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  813de0:	e0bfff17 	ldw	r2,-4(fp)
  813de4:	10840070 	cmpltui	r2,r2,4097
  813de8:	1000021e 	bne	r2,zero,813df4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  813dec:	00840004 	movi	r2,4096
  813df0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  813df4:	e0fffe17 	ldw	r3,-8(fp)
  813df8:	e0bfff17 	ldw	r2,-4(fp)
  813dfc:	1885883a 	add	r2,r3,r2
  813e00:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  813e04:	e0bffe17 	ldw	r2,-8(fp)
  813e08:	e0bffd15 	stw	r2,-12(fp)
  813e0c:	00000506 	br	813e24 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  813e10:	e0bffd17 	ldw	r2,-12(fp)
  813e14:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  813e18:	e0bffd17 	ldw	r2,-12(fp)
  813e1c:	10800804 	addi	r2,r2,32
  813e20:	e0bffd15 	stw	r2,-12(fp)
  813e24:	e0fffd17 	ldw	r3,-12(fp)
  813e28:	e0bffc17 	ldw	r2,-16(fp)
  813e2c:	18bff836 	bltu	r3,r2,813e10 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  813e30:	e0bffe17 	ldw	r2,-8(fp)
  813e34:	108007cc 	andi	r2,r2,31
  813e38:	1005003a 	cmpeq	r2,r2,zero
  813e3c:	1000021e 	bne	r2,zero,813e48 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  813e40:	e0bffd17 	ldw	r2,-12(fp)
  813e44:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  813e48:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  813e4c:	e037883a 	mov	sp,fp
  813e50:	df000017 	ldw	fp,0(sp)
  813e54:	dec00104 	addi	sp,sp,4
  813e58:	f800283a 	ret

00813e5c <atexit>:
  813e5c:	200b883a 	mov	r5,r4
  813e60:	000d883a 	mov	r6,zero
  813e64:	0009883a 	mov	r4,zero
  813e68:	000f883a 	mov	r7,zero
  813e6c:	0813f1c1 	jmpi	813f1c <__register_exitproc>

00813e70 <exit>:
  813e70:	defffe04 	addi	sp,sp,-8
  813e74:	000b883a 	mov	r5,zero
  813e78:	dc000015 	stw	r16,0(sp)
  813e7c:	dfc00115 	stw	ra,4(sp)
  813e80:	2021883a 	mov	r16,r4
  813e84:	08140540 	call	814054 <__call_exitprocs>
  813e88:	00802074 	movhi	r2,129
  813e8c:	10988e04 	addi	r2,r2,25144
  813e90:	11000017 	ldw	r4,0(r2)
  813e94:	20800f17 	ldw	r2,60(r4)
  813e98:	10000126 	beq	r2,zero,813ea0 <exit+0x30>
  813e9c:	103ee83a 	callr	r2
  813ea0:	8009883a 	mov	r4,r16
  813ea4:	08143900 	call	814390 <_exit>

00813ea8 <memcmp>:
  813ea8:	00c000c4 	movi	r3,3
  813eac:	1980032e 	bgeu	r3,r6,813ebc <memcmp+0x14>
  813eb0:	2144b03a 	or	r2,r4,r5
  813eb4:	10c4703a 	and	r2,r2,r3
  813eb8:	10000f26 	beq	r2,zero,813ef8 <memcmp+0x50>
  813ebc:	31ffffc4 	addi	r7,r6,-1
  813ec0:	3000061e 	bne	r6,zero,813edc <memcmp+0x34>
  813ec4:	00000a06 	br	813ef0 <memcmp+0x48>
  813ec8:	39ffffc4 	addi	r7,r7,-1
  813ecc:	00bfffc4 	movi	r2,-1
  813ed0:	21000044 	addi	r4,r4,1
  813ed4:	29400044 	addi	r5,r5,1
  813ed8:	38800526 	beq	r7,r2,813ef0 <memcmp+0x48>
  813edc:	20c00003 	ldbu	r3,0(r4)
  813ee0:	28800003 	ldbu	r2,0(r5)
  813ee4:	18bff826 	beq	r3,r2,813ec8 <memcmp+0x20>
  813ee8:	1885c83a 	sub	r2,r3,r2
  813eec:	f800283a 	ret
  813ef0:	0005883a 	mov	r2,zero
  813ef4:	f800283a 	ret
  813ef8:	180f883a 	mov	r7,r3
  813efc:	20c00017 	ldw	r3,0(r4)
  813f00:	28800017 	ldw	r2,0(r5)
  813f04:	18bfed1e 	bne	r3,r2,813ebc <memcmp+0x14>
  813f08:	31bfff04 	addi	r6,r6,-4
  813f0c:	21000104 	addi	r4,r4,4
  813f10:	29400104 	addi	r5,r5,4
  813f14:	39bff936 	bltu	r7,r6,813efc <memcmp+0x54>
  813f18:	003fe806 	br	813ebc <memcmp+0x14>

00813f1c <__register_exitproc>:
  813f1c:	defffa04 	addi	sp,sp,-24
  813f20:	00802074 	movhi	r2,129
  813f24:	10988e04 	addi	r2,r2,25144
  813f28:	dc000015 	stw	r16,0(sp)
  813f2c:	14000017 	ldw	r16,0(r2)
  813f30:	dd000415 	stw	r20,16(sp)
  813f34:	2829883a 	mov	r20,r5
  813f38:	81405217 	ldw	r5,328(r16)
  813f3c:	dcc00315 	stw	r19,12(sp)
  813f40:	dc800215 	stw	r18,8(sp)
  813f44:	dc400115 	stw	r17,4(sp)
  813f48:	dfc00515 	stw	ra,20(sp)
  813f4c:	2023883a 	mov	r17,r4
  813f50:	3027883a 	mov	r19,r6
  813f54:	3825883a 	mov	r18,r7
  813f58:	28002526 	beq	r5,zero,813ff0 <__register_exitproc+0xd4>
  813f5c:	29000117 	ldw	r4,4(r5)
  813f60:	008007c4 	movi	r2,31
  813f64:	11002716 	blt	r2,r4,814004 <__register_exitproc+0xe8>
  813f68:	8800101e 	bne	r17,zero,813fac <__register_exitproc+0x90>
  813f6c:	2105883a 	add	r2,r4,r4
  813f70:	1085883a 	add	r2,r2,r2
  813f74:	20c00044 	addi	r3,r4,1
  813f78:	1145883a 	add	r2,r2,r5
  813f7c:	0009883a 	mov	r4,zero
  813f80:	15000215 	stw	r20,8(r2)
  813f84:	28c00115 	stw	r3,4(r5)
  813f88:	2005883a 	mov	r2,r4
  813f8c:	dfc00517 	ldw	ra,20(sp)
  813f90:	dd000417 	ldw	r20,16(sp)
  813f94:	dcc00317 	ldw	r19,12(sp)
  813f98:	dc800217 	ldw	r18,8(sp)
  813f9c:	dc400117 	ldw	r17,4(sp)
  813fa0:	dc000017 	ldw	r16,0(sp)
  813fa4:	dec00604 	addi	sp,sp,24
  813fa8:	f800283a 	ret
  813fac:	29802204 	addi	r6,r5,136
  813fb0:	00800044 	movi	r2,1
  813fb4:	110e983a 	sll	r7,r2,r4
  813fb8:	30c04017 	ldw	r3,256(r6)
  813fbc:	2105883a 	add	r2,r4,r4
  813fc0:	1085883a 	add	r2,r2,r2
  813fc4:	1185883a 	add	r2,r2,r6
  813fc8:	19c6b03a 	or	r3,r3,r7
  813fcc:	14802015 	stw	r18,128(r2)
  813fd0:	14c00015 	stw	r19,0(r2)
  813fd4:	00800084 	movi	r2,2
  813fd8:	30c04015 	stw	r3,256(r6)
  813fdc:	88bfe31e 	bne	r17,r2,813f6c <__register_exitproc+0x50>
  813fe0:	30804117 	ldw	r2,260(r6)
  813fe4:	11c4b03a 	or	r2,r2,r7
  813fe8:	30804115 	stw	r2,260(r6)
  813fec:	003fdf06 	br	813f6c <__register_exitproc+0x50>
  813ff0:	008020b4 	movhi	r2,130
  813ff4:	10bc8b04 	addi	r2,r2,-3540
  813ff8:	100b883a 	mov	r5,r2
  813ffc:	80805215 	stw	r2,328(r16)
  814000:	003fd606 	br	813f5c <__register_exitproc+0x40>
  814004:	00800034 	movhi	r2,0
  814008:	10800004 	addi	r2,r2,0
  81400c:	1000021e 	bne	r2,zero,814018 <__register_exitproc+0xfc>
  814010:	013fffc4 	movi	r4,-1
  814014:	003fdc06 	br	813f88 <__register_exitproc+0x6c>
  814018:	01006404 	movi	r4,400
  81401c:	103ee83a 	callr	r2
  814020:	1007883a 	mov	r3,r2
  814024:	103ffa26 	beq	r2,zero,814010 <__register_exitproc+0xf4>
  814028:	80805217 	ldw	r2,328(r16)
  81402c:	180b883a 	mov	r5,r3
  814030:	18000115 	stw	zero,4(r3)
  814034:	18800015 	stw	r2,0(r3)
  814038:	80c05215 	stw	r3,328(r16)
  81403c:	18006215 	stw	zero,392(r3)
  814040:	18006315 	stw	zero,396(r3)
  814044:	0009883a 	mov	r4,zero
  814048:	883fc826 	beq	r17,zero,813f6c <__register_exitproc+0x50>
  81404c:	003fd706 	br	813fac <__register_exitproc+0x90>

00814050 <register_fini>:
  814050:	f800283a 	ret

00814054 <__call_exitprocs>:
  814054:	00802074 	movhi	r2,129
  814058:	10988e04 	addi	r2,r2,25144
  81405c:	10800017 	ldw	r2,0(r2)
  814060:	defff304 	addi	sp,sp,-52
  814064:	df000b15 	stw	fp,44(sp)
  814068:	d8800115 	stw	r2,4(sp)
  81406c:	00800034 	movhi	r2,0
  814070:	10800004 	addi	r2,r2,0
  814074:	1005003a 	cmpeq	r2,r2,zero
  814078:	d8800215 	stw	r2,8(sp)
  81407c:	d8800117 	ldw	r2,4(sp)
  814080:	dd400815 	stw	r21,32(sp)
  814084:	dd000715 	stw	r20,28(sp)
  814088:	10805204 	addi	r2,r2,328
  81408c:	dfc00c15 	stw	ra,48(sp)
  814090:	ddc00a15 	stw	r23,40(sp)
  814094:	dd800915 	stw	r22,36(sp)
  814098:	dcc00615 	stw	r19,24(sp)
  81409c:	dc800515 	stw	r18,20(sp)
  8140a0:	dc400415 	stw	r17,16(sp)
  8140a4:	dc000315 	stw	r16,12(sp)
  8140a8:	282b883a 	mov	r21,r5
  8140ac:	2039883a 	mov	fp,r4
  8140b0:	d8800015 	stw	r2,0(sp)
  8140b4:	2829003a 	cmpeq	r20,r5,zero
  8140b8:	d8800117 	ldw	r2,4(sp)
  8140bc:	14405217 	ldw	r17,328(r2)
  8140c0:	88001026 	beq	r17,zero,814104 <__call_exitprocs+0xb0>
  8140c4:	ddc00017 	ldw	r23,0(sp)
  8140c8:	88800117 	ldw	r2,4(r17)
  8140cc:	8c802204 	addi	r18,r17,136
  8140d0:	143fffc4 	addi	r16,r2,-1
  8140d4:	80000916 	blt	r16,zero,8140fc <__call_exitprocs+0xa8>
  8140d8:	05bfffc4 	movi	r22,-1
  8140dc:	a000151e 	bne	r20,zero,814134 <__call_exitprocs+0xe0>
  8140e0:	8409883a 	add	r4,r16,r16
  8140e4:	2105883a 	add	r2,r4,r4
  8140e8:	1485883a 	add	r2,r2,r18
  8140ec:	10c02017 	ldw	r3,128(r2)
  8140f0:	a8c01126 	beq	r21,r3,814138 <__call_exitprocs+0xe4>
  8140f4:	843fffc4 	addi	r16,r16,-1
  8140f8:	85bff81e 	bne	r16,r22,8140dc <__call_exitprocs+0x88>
  8140fc:	d8800217 	ldw	r2,8(sp)
  814100:	10003126 	beq	r2,zero,8141c8 <__call_exitprocs+0x174>
  814104:	dfc00c17 	ldw	ra,48(sp)
  814108:	df000b17 	ldw	fp,44(sp)
  81410c:	ddc00a17 	ldw	r23,40(sp)
  814110:	dd800917 	ldw	r22,36(sp)
  814114:	dd400817 	ldw	r21,32(sp)
  814118:	dd000717 	ldw	r20,28(sp)
  81411c:	dcc00617 	ldw	r19,24(sp)
  814120:	dc800517 	ldw	r18,20(sp)
  814124:	dc400417 	ldw	r17,16(sp)
  814128:	dc000317 	ldw	r16,12(sp)
  81412c:	dec00d04 	addi	sp,sp,52
  814130:	f800283a 	ret
  814134:	8409883a 	add	r4,r16,r16
  814138:	88c00117 	ldw	r3,4(r17)
  81413c:	2105883a 	add	r2,r4,r4
  814140:	1445883a 	add	r2,r2,r17
  814144:	18ffffc4 	addi	r3,r3,-1
  814148:	11800217 	ldw	r6,8(r2)
  81414c:	1c001526 	beq	r3,r16,8141a4 <__call_exitprocs+0x150>
  814150:	10000215 	stw	zero,8(r2)
  814154:	303fe726 	beq	r6,zero,8140f4 <__call_exitprocs+0xa0>
  814158:	00c00044 	movi	r3,1
  81415c:	1c06983a 	sll	r3,r3,r16
  814160:	90804017 	ldw	r2,256(r18)
  814164:	8cc00117 	ldw	r19,4(r17)
  814168:	1884703a 	and	r2,r3,r2
  81416c:	10001426 	beq	r2,zero,8141c0 <__call_exitprocs+0x16c>
  814170:	90804117 	ldw	r2,260(r18)
  814174:	1884703a 	and	r2,r3,r2
  814178:	10000c1e 	bne	r2,zero,8141ac <__call_exitprocs+0x158>
  81417c:	2105883a 	add	r2,r4,r4
  814180:	1485883a 	add	r2,r2,r18
  814184:	11400017 	ldw	r5,0(r2)
  814188:	e009883a 	mov	r4,fp
  81418c:	303ee83a 	callr	r6
  814190:	88800117 	ldw	r2,4(r17)
  814194:	98bfc81e 	bne	r19,r2,8140b8 <__call_exitprocs+0x64>
  814198:	b8800017 	ldw	r2,0(r23)
  81419c:	147fd526 	beq	r2,r17,8140f4 <__call_exitprocs+0xa0>
  8141a0:	003fc506 	br	8140b8 <__call_exitprocs+0x64>
  8141a4:	8c000115 	stw	r16,4(r17)
  8141a8:	003fea06 	br	814154 <__call_exitprocs+0x100>
  8141ac:	2105883a 	add	r2,r4,r4
  8141b0:	1485883a 	add	r2,r2,r18
  8141b4:	11000017 	ldw	r4,0(r2)
  8141b8:	303ee83a 	callr	r6
  8141bc:	003ff406 	br	814190 <__call_exitprocs+0x13c>
  8141c0:	303ee83a 	callr	r6
  8141c4:	003ff206 	br	814190 <__call_exitprocs+0x13c>
  8141c8:	88800117 	ldw	r2,4(r17)
  8141cc:	1000081e 	bne	r2,zero,8141f0 <__call_exitprocs+0x19c>
  8141d0:	89000017 	ldw	r4,0(r17)
  8141d4:	20000726 	beq	r4,zero,8141f4 <__call_exitprocs+0x1a0>
  8141d8:	b9000015 	stw	r4,0(r23)
  8141dc:	8809883a 	mov	r4,r17
  8141e0:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
  8141e4:	bc400017 	ldw	r17,0(r23)
  8141e8:	883fb71e 	bne	r17,zero,8140c8 <__call_exitprocs+0x74>
  8141ec:	003fc506 	br	814104 <__call_exitprocs+0xb0>
  8141f0:	89000017 	ldw	r4,0(r17)
  8141f4:	882f883a 	mov	r23,r17
  8141f8:	2023883a 	mov	r17,r4
  8141fc:	883fb21e 	bne	r17,zero,8140c8 <__call_exitprocs+0x74>
  814200:	003fc006 	br	814104 <__call_exitprocs+0xb0>

00814204 <udivmodsi4>:
  814204:	29001b2e 	bgeu	r5,r4,814274 <udivmodsi4+0x70>
  814208:	28001a16 	blt	r5,zero,814274 <udivmodsi4+0x70>
  81420c:	00800044 	movi	r2,1
  814210:	0007883a 	mov	r3,zero
  814214:	01c007c4 	movi	r7,31
  814218:	00000306 	br	814228 <udivmodsi4+0x24>
  81421c:	19c01326 	beq	r3,r7,81426c <udivmodsi4+0x68>
  814220:	18c00044 	addi	r3,r3,1
  814224:	28000416 	blt	r5,zero,814238 <udivmodsi4+0x34>
  814228:	294b883a 	add	r5,r5,r5
  81422c:	1085883a 	add	r2,r2,r2
  814230:	293ffa36 	bltu	r5,r4,81421c <udivmodsi4+0x18>
  814234:	10000d26 	beq	r2,zero,81426c <udivmodsi4+0x68>
  814238:	0007883a 	mov	r3,zero
  81423c:	21400236 	bltu	r4,r5,814248 <udivmodsi4+0x44>
  814240:	2149c83a 	sub	r4,r4,r5
  814244:	1886b03a 	or	r3,r3,r2
  814248:	1004d07a 	srli	r2,r2,1
  81424c:	280ad07a 	srli	r5,r5,1
  814250:	103ffa1e 	bne	r2,zero,81423c <udivmodsi4+0x38>
  814254:	30000226 	beq	r6,zero,814260 <udivmodsi4+0x5c>
  814258:	2005883a 	mov	r2,r4
  81425c:	f800283a 	ret
  814260:	1809883a 	mov	r4,r3
  814264:	2005883a 	mov	r2,r4
  814268:	f800283a 	ret
  81426c:	0007883a 	mov	r3,zero
  814270:	003ff806 	br	814254 <udivmodsi4+0x50>
  814274:	00800044 	movi	r2,1
  814278:	0007883a 	mov	r3,zero
  81427c:	003fef06 	br	81423c <udivmodsi4+0x38>

00814280 <__divsi3>:
  814280:	defffe04 	addi	sp,sp,-8
  814284:	dc000015 	stw	r16,0(sp)
  814288:	dfc00115 	stw	ra,4(sp)
  81428c:	0021883a 	mov	r16,zero
  814290:	20000c16 	blt	r4,zero,8142c4 <__divsi3+0x44>
  814294:	000d883a 	mov	r6,zero
  814298:	28000e16 	blt	r5,zero,8142d4 <__divsi3+0x54>
  81429c:	08142040 	call	814204 <udivmodsi4>
  8142a0:	1007883a 	mov	r3,r2
  8142a4:	8005003a 	cmpeq	r2,r16,zero
  8142a8:	1000011e 	bne	r2,zero,8142b0 <__divsi3+0x30>
  8142ac:	00c7c83a 	sub	r3,zero,r3
  8142b0:	1805883a 	mov	r2,r3
  8142b4:	dfc00117 	ldw	ra,4(sp)
  8142b8:	dc000017 	ldw	r16,0(sp)
  8142bc:	dec00204 	addi	sp,sp,8
  8142c0:	f800283a 	ret
  8142c4:	0109c83a 	sub	r4,zero,r4
  8142c8:	04000044 	movi	r16,1
  8142cc:	000d883a 	mov	r6,zero
  8142d0:	283ff20e 	bge	r5,zero,81429c <__divsi3+0x1c>
  8142d4:	014bc83a 	sub	r5,zero,r5
  8142d8:	8021003a 	cmpeq	r16,r16,zero
  8142dc:	003fef06 	br	81429c <__divsi3+0x1c>

008142e0 <__modsi3>:
  8142e0:	deffff04 	addi	sp,sp,-4
  8142e4:	dfc00015 	stw	ra,0(sp)
  8142e8:	01800044 	movi	r6,1
  8142ec:	2807883a 	mov	r3,r5
  8142f0:	20000416 	blt	r4,zero,814304 <__modsi3+0x24>
  8142f4:	28000c16 	blt	r5,zero,814328 <__modsi3+0x48>
  8142f8:	dfc00017 	ldw	ra,0(sp)
  8142fc:	dec00104 	addi	sp,sp,4
  814300:	08142041 	jmpi	814204 <udivmodsi4>
  814304:	0109c83a 	sub	r4,zero,r4
  814308:	28000b16 	blt	r5,zero,814338 <__modsi3+0x58>
  81430c:	180b883a 	mov	r5,r3
  814310:	01800044 	movi	r6,1
  814314:	08142040 	call	814204 <udivmodsi4>
  814318:	0085c83a 	sub	r2,zero,r2
  81431c:	dfc00017 	ldw	ra,0(sp)
  814320:	dec00104 	addi	sp,sp,4
  814324:	f800283a 	ret
  814328:	014bc83a 	sub	r5,zero,r5
  81432c:	dfc00017 	ldw	ra,0(sp)
  814330:	dec00104 	addi	sp,sp,4
  814334:	08142041 	jmpi	814204 <udivmodsi4>
  814338:	0147c83a 	sub	r3,zero,r5
  81433c:	003ff306 	br	81430c <__modsi3+0x2c>

00814340 <__udivsi3>:
  814340:	000d883a 	mov	r6,zero
  814344:	08142041 	jmpi	814204 <udivmodsi4>

00814348 <__umodsi3>:
  814348:	01800044 	movi	r6,1
  81434c:	08142041 	jmpi	814204 <udivmodsi4>

00814350 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  814350:	defffd04 	addi	sp,sp,-12
  814354:	df000215 	stw	fp,8(sp)
  814358:	df000204 	addi	fp,sp,8
  81435c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  814360:	e0bfff17 	ldw	r2,-4(fp)
  814364:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  814368:	e0bffe17 	ldw	r2,-8(fp)
  81436c:	1005003a 	cmpeq	r2,r2,zero
  814370:	1000021e 	bne	r2,zero,81437c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  814374:	002af070 	cmpltui	zero,zero,43969
  814378:	00000106 	br	814380 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  81437c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  814380:	e037883a 	mov	sp,fp
  814384:	df000017 	ldw	fp,0(sp)
  814388:	dec00104 	addi	sp,sp,4
  81438c:	f800283a 	ret

00814390 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  814390:	defffd04 	addi	sp,sp,-12
  814394:	dfc00215 	stw	ra,8(sp)
  814398:	df000115 	stw	fp,4(sp)
  81439c:	df000104 	addi	fp,sp,4
  8143a0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  8143a4:	00802074 	movhi	r2,129
  8143a8:	109fa244 	addi	r2,r2,32393
  8143ac:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  8143b0:	e13fff17 	ldw	r4,-4(fp)
  8143b4:	08143500 	call	814350 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  8143b8:	003fff06 	br	8143b8 <_exit+0x28>
  8143bc:	00814050 	cmplti	r2,zero,1281
