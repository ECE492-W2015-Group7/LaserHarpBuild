
Synth5.elf:     file format elf32-littlenios2
Synth5.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001a0

Program Header:
    LOAD off    0x00001020 vaddr 0x01104020 paddr 0x00800000 align 2**12
         filesz 0x000001a0 memsz 0x000001a0 flags r-x
    LOAD off    0x000021a0 vaddr 0x008001a0 paddr 0x008001a0 align 2**12
         filesz 0x00014460 memsz 0x00014460 flags r-x
    LOAD off    0x00016600 vaddr 0x00814600 paddr 0x00816160 align 2**12
         filesz 0x00001b60 memsz 0x00001b60 flags rw-
    LOAD off    0x00018cc0 vaddr 0x00817cc0 paddr 0x00817cc0 align 2**12
         filesz 0x00000000 memsz 0x00007570 flags rw-
    LOAD off    0x00019000 vaddr 0x01104000 paddr 0x01104000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01104000  01104000  00019000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  01104020  00800000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00014098  008001a0  008001a0  000021a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003c8  00814238  00814238  00016238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b60  00814600  00816160  00016600  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00007570  00817cc0  00817cc0  00018cc0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00019020  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000f58  00000000  00000000  00019048  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000028c9  00000000  00000000  00019fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002fee1  00000000  00000000  0001c869  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009bb9  00000000  00000000  0004c74a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001b83a  00000000  00000000  00056303  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002a88  00000000  00000000  00071b40  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000024b4  00000000  00000000  000745c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00008fed  00000000  00000000  00076a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0007fa6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000878  00000000  00000000  0007faa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  00085639  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0008563f  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0008564b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0008564c  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0008564d  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00085651  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00085655  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00085659  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00085664  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0008566f  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  0008567a  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000039  00000000  00000000  00085687  2**0
                  CONTENTS, READONLY
 29 .jdi          00005269  00000000  00000000  000856c0  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0007a628  00000000  00000000  0008a929  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01104000 l    d  .entry	00000000 .entry
01104020 l    d  .exceptions	00000000 .exceptions
008001a0 l    d  .text	00000000 .text
00814238 l    d  .rodata	00000000 .rodata
00814600 l    d  .rwdata	00000000 .rwdata
00817cc0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001e8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 MidiDriver.c
00817cc0 l     O .bss	00000008 VOICE_TABLE
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 sf_round.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_pow.c
008142f4 l     O .rodata	00000010 bp
00814304 l     O .rodata	00000010 dp_l
00814314 l     O .rodata	00000010 dp_h
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
00814324 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 fp-bit.c
008027fc l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00802e9c l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
00814600 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00805f98 l     F .text	00000058 std
008060a4 l     F .text	00000008 __fp_lock
008060ac l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
0080706c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
008070cc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
008071cc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
008072ec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
008073cc l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00807528 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
00807770 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
008160d4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00807a0c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
008160d8 l     O .rwdata	00000004 lockid
00817ce8 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
008160dc l     O .rwdata	00000004 lockid
00817cf0 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00809444 l     F .text	00000044 OS_InitMisc
00809488 l     F .text	0000006c OS_InitRdyList
008095ec l     F .text	000000e0 OS_InitTCBList
00809368 l     F .text	000000dc OS_InitEventList
008094f4 l     F .text	0000007c OS_InitTaskIdle
00809570 l     F .text	0000007c OS_InitTaskStat
00809860 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0080b780 l     F .text	00000110 OS_FlagTaskRdy
0080b4d8 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00814fb0 l     O .rwdata	0000106c jtag_uart_0
0081601c l     O .rwdata	00000030 audio_and_video_config_0
0081604c l     O .rwdata	00000030 audio_0
0081607c l     O .rwdata	0000002c character_lcd_0
008100d8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
008108e8 l     F .text	000002c8 altera_avalon_jtag_uart_irq
00810bb0 l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
008113c8 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio_and_video_config.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00812bd4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00812dc0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
008130bc l     F .text	000000dc alt_file_locked
00813320 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00813ec8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 lib2-divmod.c
0081407c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
008141c8 l     F .text	00000040 alt_sim_halt
00811e24 g     F .text	00000038 alt_up_av_config_reset
008122c8 g     F .text	00000064 alt_up_av_config_read_D5M_cfg_register
0081612a g     O .rwdata	00000002 OSTaskNameSize
00806e10 g     F .text	00000070 _isatty_r
00811e94 g     F .text	00000030 alt_up_av_config_disable_interrupt
00807588 g     F .text	000000c8 alt_main
00804660 g     F .text	000000a0 _puts_r
0081efa0 g     O .bss	00000100 alt_irq
0080236c g     F .text	00000018 fabs
00806e80 g     F .text	00000078 _lseek_r
0080c074 g     F .text	000000d0 OS_MemInit
008103c8 g     F .text	00000060 altera_avalon_fifo_write_almostfull
00816160 g       *ABS*	00000000 __flash_rwdata_start
0080ffb4 g     F .text	00000064 OSTimeSet
008124d4 g     F .text	00000034 alt_up_character_lcd_send_cmd
008039bc g     F .text	00000088 __eqdf2
00807fc0 g     F .text	000006b4 OSEventPendMulti
0081173c g     F .text	00000070 alt_up_audio_read_fifo_avail
0081f230 g       *ABS*	00000000 __alt_heap_start
00811f64 g     F .text	000000ac alt_up_av_config_write_audio_cfg_register
00813928 g     F .text	00000020 OSTaskCreateHook
00817d7c g     O .bss	00002000 task1_stk
00816102 g     O .rwdata	00000002 OSMboxEn
008117ac g     F .text	00000070 alt_up_audio_record_r
008086c8 g     F .text	0000007c OSIntEnter
00806a4c g     F .text	00000068 __sseek
00806000 g     F .text	000000a4 __sinit
00816112 g     O .rwdata	00000002 OSQEn
00806100 g     F .text	00000068 __sfmoreglue
00807c7c g     F .text	000000d0 __malloc_unlock
00813984 g     F .text	0000001c OSTaskStatHook
00817cf8 g     O .bss	00000001 OSLockNesting
00802c94 g     F .text	00000174 __divsf3
00816150 g     O .rwdata	00000002 OSDataSize
00817cf9 g     O .bss	00000001 OSRunning
008116b4 g     F .text	00000088 alt_up_audio_reset_audio_core
008054e8 g     F .text	000000e0 memmove
008139bc g     F .text	0000001c OSInitHookBegin
00810110 g     F .text	000000bc altera_avalon_fifo_init
00816148 g     O .rwdata	00000002 OSTmrSize
008060f0 g     F .text	00000010 _cleanup
00810488 g     F .text	00000064 altera_avalon_fifo_write_fifo
00802e08 g     F .text	00000094 __fixsfsi
00817cfc g     O .bss	00000004 OSIdleCtr
00803acc g     F .text	00000088 __gtdf2
008135f4 g       .text	00000000 OSStartTsk
00804650 g     F .text	00000010 __errno
00812458 g     F .text	0000007c get_DDRAM_addr
00809b94 g     F .text	000002e0 OS_TCBInit
01104000 g     F .entry	0000001c __reset
00810648 g     F .text	00000028 altera_avalon_fifo_read_backpressure
0081614e g     O .rwdata	00000002 OSTmrWheelTblSize
00800000 g       *ABS*	00000000 __flash_exceptions_start
008160ee g     O .rwdata	00000002 OSEventSize
00817d00 g     O .bss	00000001 OSPrioHighRdy
00806d9c g     F .text	00000074 _fstat_r
00813948 g     F .text	00000020 OSTaskDelHook
00817cd4 g     O .bss	00000004 errno
008135d4 g       .text	00000000 OSStartHighRdy
0080e788 g     F .text	00000200 OSTaskCreateExt
0080aff4 g     F .text	00000068 OSFlagPendGetFlagsRdy
0081612e g     O .rwdata	00000002 OSTaskStatStkSize
00811678 g     F .text	0000003c alt_up_audio_write_interrupt_pending
00804110 g     F .text	0000002c __make_fp
0080a000 g     F .text	00000334 OSFlagAccept
0080c7ac g     F .text	000000c8 OSQFlush
0080c144 g     F .text	00000154 OSQAccept
00817ce0 g     O .bss	00000004 alt_argv
0081e0a8 g       *ABS*	00000000 _gp
008029e0 g     F .text	00000070 __subsf3
0080e5b4 g     F .text	000001d4 OSTaskCreate
0080e040 g     F .text	00000574 OSTaskChangePrio
00817cf4 g     O .bss	00000004 alt_heapsem
00810300 g     F .text	00000068 altera_avalon_fifo_clear_event
00809e74 g     F .text	0000018c OSDebugInit
0080e988 g     F .text	0000040c OSTaskDel
00800508 g     F .text	00000088 processNote
00814e30 g     O .rwdata	00000180 alt_fd_list
0081bd7c g     O .bss	00000370 OSFlagTbl
00809144 g     F .text	000000b8 OS_EventTaskRemove
00812cfc g     F .text	00000094 alt_find_dev
00805448 g     F .text	000000a0 memcpy
00816118 g     O .rwdata	00000002 OSRdyTblSize
0081266c g     F .text	0000004c alt_up_character_lcd_write_fd
008060e4 g     F .text	0000000c _cleanup_r
00803c64 g     F .text	000000f8 __floatsidf
00812e84 g     F .text	00000078 alt_io_redirect
00803b54 g     F .text	00000088 __ltdf2
00814238 g       *ABS*	00000000 __DTOR_END__
00804700 g     F .text	00000014 puts
00807d4c g     F .text	00000130 OSEventNameGet
008160fc g     O .rwdata	00000002 OSFlagMax
00808744 g     F .text	00000100 OSIntExit
00816136 g     O .rwdata	00000002 OSTCBSize
00811c10 g     F .text	00000060 alt_up_audio_read_fifo_head
00800468 g     F .text	000000a0 turnOffVoice
00817d01 g     O .bss	00000001 OSPrioCur
00810e2c g     F .text	000002c0 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
01104000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
008141b8 g     F .text	00000008 __udivsi3
00800880 g     F .text	0000009c roundf
0080722c g     F .text	000000c0 isatty
0081611c g     O .rwdata	00000002 OSStkWidth
00816110 g     O .rwdata	00000002 OSPtrSize
008160f0 g     O .rwdata	00000002 OSEventTblSize
00813548 g       .text	00000000 OSCtxSw
00813c44 g     F .text	00000090 alt_icache_flush
00817cc8 g     O .bss	00000004 __malloc_top_pad
00817d04 g     O .bss	00000004 OSTCBList
00817cd8 g     O .bss	00000004 alt_fd_list_lock
00811d98 g     F .text	0000008c alt_up_av_config_read_data
00804788 g     F .text	0000049c __sfvwrite_r
0081c0ec g     O .bss	00000c30 OSMemTbl
00817d08 g     O .bss	00000001 OSTickStepState
00805bbc g     F .text	00000070 _sbrk_r
00816114 g     O .rwdata	00000002 OSQMax
0081cd1c g     O .bss	00000800 OSTaskStatStk
0080bc5c g     F .text	0000010c OSMemNameGet
008160f4 g     O .rwdata	00000002 OSFlagEn
00806ef8 g     F .text	00000078 _read_r
0081613a g     O .rwdata	00000002 OSTimeTickHookEn
0080cd10 g     F .text	00000180 OSQPost
0080b890 g     F .text	000000ac OS_FlagUnlink
008160cc g     O .rwdata	00000004 alt_max_fd
00809720 g     F .text	0000006c OS_MemCopy
00811c70 g     F .text	00000060 alt_up_audio_write_fifo_head
0080978c g     F .text	000000d4 OS_Sched
00804450 g     F .text	00000138 __unpack_d
00806c78 g     F .text	00000110 _fclose_r
0080bb58 g     F .text	00000104 OSMemGet
0080f0bc g     F .text	000001c4 OSTaskNameSet
00805f64 g     F .text	00000034 fflush
00817ccc g     O .bss	00000004 __malloc_max_sbrked_mem
00817d0c g     O .bss	00000004 OSCtxSwCtr
008139a0 g     F .text	0000001c OSTimeTickHook
00812efc g     F .text	000001c0 alt_irq_register
008160fe g     O .rwdata	00000002 OSFlagNameSize
008091fc g     F .text	00000104 OS_EventTaskRemoveMulti
0080332c g     F .text	00000074 __adddf3
00808ff0 g     F .text	00000154 OS_EventTaskWaitMulti
00816116 g     O .rwdata	00000002 OSQSize
00807438 g     F .text	000000f0 lseek
0080d8ec g     F .text	0000027c OSSemPend
008160a8 g     O .rwdata	00000004 __fdlib_version
008160b0 g     O .rwdata	00000004 _global_impure_ptr
008055c8 g     F .text	000005f4 _realloc_r
00816100 g     O .rwdata	00000002 OSLowestPrio
0081f230 g       *ABS*	00000000 __bss_end
00813a10 g     F .text	00000020 OSTCBInitHook
00816146 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00813418 g     F .text	00000110 alt_tick
008160e8 g     O .rwdata	00000002 OSEventEn
00816142 g     O .rwdata	00000002 OSTmrCfgNameSize
008114c4 g     F .text	00000040 alt_up_audio_open_dev
008060cc g     F .text	00000018 __fp_lock_all
0080b69c g     F .text	000000e4 OS_FlagInit
00811900 g     F .text	00000070 alt_up_audio_play_r
00813380 g     F .text	00000098 alt_alarm_stop
00816124 g     O .rwdata	00000002 OSTaskIdleStkSize
00817d48 g     O .bss	00000004 alt_irq_active
0080d478 g     F .text	000000c0 OSSemAccept
0080be88 g     F .text	000000f0 OSMemPut
0080b93c g     F .text	0000021c OSMemCreate
00817d10 g     O .bss	00000004 OSIdleCtrMax
011040ec g     F .exceptions	000000d4 alt_irq_handler
00814e08 g     O .rwdata	00000028 alt_dev_null
00816138 g     O .rwdata	00000002 OSTicksPerSec
008023e8 g     F .text	00000210 rint
00804048 g     F .text	000000c8 __unpack_f
00812954 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
00813548 g       .text	00000000 OSIntCtxSw
00812adc g     F .text	00000044 alt_dcache_flush_all
00810368 g     F .text	00000060 altera_avalon_fifo_write_ienable
00817d14 g     O .bss	00000004 OSTCBFreeList
00816160 g       *ABS*	00000000 __ram_rwdata_end
0080db68 g     F .text	0000017c OSSemPendAbort
00810270 g     F .text	0000002c altera_avalon_fifo_read_almostempty
008160c4 g     O .rwdata	00000008 alt_dev_list
008078ec g     F .text	00000120 write
0081613c g     O .rwdata	00000002 OSVersionNbr
00814600 g       *ABS*	00000000 __ram_rodata_end
0080037c g     F .text	000000ec turnOnVoice
008070f8 g     F .text	000000d4 fstat
00803bdc g     F .text	00000088 __ledf2
008160e4 g     O .rwdata	00000004 OSEndiannessTest
008141c0 g     F .text	00000008 __umodsi3
008160f6 g     O .rwdata	00000002 OSFlagGrpSize
0081f230 g       *ABS*	00000000 end
00803ee8 g     F .text	00000160 __pack_f
008107b8 g     F .text	00000130 altera_avalon_jtag_uart_init
00809a04 g     F .text	000000c8 OS_TaskStat
0081029c g     F .text	0000003c altera_avalon_fifo_read_event
00814234 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0081143c g     F .text	00000088 alt_avalon_timer_sc_init
00803e68 g     F .text	00000080 __clzsi2
008110ec g     F .text	000002dc altera_avalon_jtag_uart_write
00805ff0 g     F .text	00000004 __sfp_lock_acquire
0081055c g     F .text	00000058 altera_avalon_fifo_read_fifo
00805364 g     F .text	000000e4 memchr
008096cc g     F .text	00000054 OS_MemClr
0081257c g     F .text	00000078 alt_up_character_lcd_write
00813618 g     F .text	00000310 OSTaskStkInit
00800590 g     F .text	000001e0 task1
00806384 g     F .text	00000314 _free_r
00808d4c g     F .text	00000194 OS_EventTaskRdy
00813ecc g     F .text	000001b0 __call_exitprocs
00817d18 g     O .bss	00000001 OSCPUUsage
008160b8 g     O .rwdata	00000004 __malloc_sbrk_base
008001a0 g     F .text	0000004c _start
00800770 g     F .text	00000064 task2
00817d4c g     O .bss	00000004 _alt_tick_rate
0080c874 g     F .text	00000320 OSQPend
0080fa80 g     F .text	0000014c OSTimeDly
00811ae4 g     F .text	0000012c alt_up_audio_write_fifo
00811d34 g     F .text	00000064 alt_up_av_config_write_data
00817d50 g     O .bss	00000004 _alt_nticks
00807650 g     F .text	00000120 read
0081004c g     F .text	0000008c alt_sys_init
008127e0 g     F .text	000000b0 alt_up_character_lcd_shift_display
008119e0 g     F .text	00000104 alt_up_audio_read_fifo
00813d94 g     F .text	00000134 __register_exitproc
00817d19 g     O .bss	00000001 OSTaskCtr
008123f4 g     F .text	00000064 alt_up_av_config_write_LTM_cfg_register
008115ec g     F .text	00000050 alt_up_audio_disable_write_interrupt
0080fbcc g     F .text	00000174 OSTimeDlyHMSM
00812890 g     F .text	00000090 alt_up_character_lcd_erase_pos
00800da4 g     F .text	00001300 __ieee754_pow
00810cc4 g     F .text	00000074 altera_avalon_jtag_uart_close
0080091c g     F .text	00000488 pow
00814600 g       *ABS*	00000000 __ram_rwdata_start
00814238 g       *ABS*	00000000 __ram_rodata_start
00817d54 g     O .bss	00000028 __malloc_current_mallinfo
008160ea g     O .rwdata	00000002 OSEventMax
0080dce4 g     F .text	00000128 OSSemPost
008088d0 g     F .text	000000e4 OSSchedUnlock
00810670 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00813b50 g     F .text	000000f4 alt_get_fd
00817d1c g     O .bss	00000004 OSMemFreeList
00808a24 g     F .text	000000ac OSStatInit
0080b404 g     F .text	000000d4 OSFlagQuery
00804588 g     F .text	000000c8 __fpcmp_parts_d
00816120 g     O .rwdata	00000002 OSTaskCreateExtEn
00806c08 g     F .text	00000070 _close_r
008115a0 g     F .text	0000004c alt_up_audio_enable_write_interrupt
00800338 g     F .text	00000044 endVoice
00813d20 g     F .text	00000074 memcmp
00808d30 g     F .text	0000001c OS_Dummy
00810720 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0081f230 g       *ABS*	00000000 __alt_stack_base
00810768 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00805c2c g     F .text	0000013c __swsetup_r
0081d51c g     O .bss	000001e0 OSQTbl
008101cc g     F .text	0000003c altera_avalon_fifo_read_status
00803764 g     F .text	00000258 __divdf3
00811550 g     F .text	00000050 alt_up_audio_disable_read_interrupt
00806168 g     F .text	000000f0 __sfp
00814a00 g     O .rwdata	00000408 __malloc_av_
00805ffc g     F .text	00000004 __sinit_lock_release
00817d20 g     O .bss	00000004 OSTCBHighRdy
008033a0 g     F .text	000003c4 __muldf3
00806b30 g     F .text	00000060 __sread
00814334 g     O .rodata	00000010 __thenan_sf
0081061c g     F .text	0000002c altera_avalon_fifo_read_other_info
00817d24 g     O .bss	00000004 OSQFreeList
00813a30 g     F .text	00000120 alt_find_file
00812b20 g     F .text	000000b4 alt_dev_llist_insert
00807b74 g     F .text	00000108 __malloc_lock
00807830 g     F .text	000000bc sbrk
008002ec g     F .text	0000004c startVoice
00807e7c g     F .text	00000144 OSEventNameSet
00805d68 g     F .text	000001fc _fflush_r
00817d28 g     O .bss	00000001 OSRdyGrp
00817cc0 g       *ABS*	00000000 __bss_start
008069ac g     F .text	00000098 memset
008007d4 g     F .text	000000ac main
0081188c g     F .text	00000074 alt_up_audio_write_fifo_space
00817ce4 g     O .bss	00000004 alt_envp
00817cd0 g     O .bss	00000004 __malloc_max_total_mem
008106c8 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
008102d8 g     F .text	00000028 altera_avalon_fifo_read_level
00814480 g     O .rodata	00000100 OSUnMapTbl
0081611a g     O .rwdata	00000002 OSSemEn
00812730 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
0080b05c g     F .text	000003a8 OSFlagPost
00806a44 g     F .text	00000008 __sclose
008023d0 g     F .text	00000008 matherr
01000000 g       *ABS*	00000000 __alt_heap_limit
00806d88 g     F .text	00000014 fclose
00808ee0 g     F .text	00000110 OS_EventTaskWait
00819d7c g     O .bss	00002000 task2_stk
00803d5c g     F .text	00000074 __truncdfsf2
00809acc g     F .text	000000c8 OS_TaskStatStkChk
0081f0a0 g     O .bss	00000190 _atexit0
0080ed94 g     F .text	00000170 OSTaskDelReq
00804c24 g     F .text	00000740 _malloc_r
008160d0 g     O .rwdata	00000004 alt_errno
008089b4 g     F .text	00000070 OSStart
00807b18 g     F .text	0000005c __env_unlock
00806760 g     F .text	000000b8 _fwalk
0080f280 g     F .text	00000218 OSTaskResume
0080bf78 g     F .text	000000fc OSMemQuery
0081612c g     O .rwdata	00000002 OSTaskStatEn
00816106 g     O .rwdata	00000002 OSMemMax
0080ce90 g     F .text	00000188 OSQPostFront
008140f8 g     F .text	00000060 __divsi3
00817d29 g     O .bss	00000003 OSRdyTbl
008160e0 g     O .rwdata	00000002 OSDebugEn
00814344 g     O .rodata	00000014 __thenan_df
0081253c g     F .text	00000040 alt_up_character_lcd_open_dev
00806258 g     F .text	0000012c _malloc_trim_r
00814238 g       *ABS*	00000000 __CTOR_END__
00802ab4 g     F .text	000001e0 __mulsf3
00802384 g     F .text	0000001c finite
008160f8 g     O .rwdata	00000002 OSFlagNodeSize
00816140 g     O .rwdata	00000002 OSTmrCfgMax
00812508 g     F .text	00000034 alt_up_character_lcd_init
0080c298 g     F .text	00000214 OSQCreate
0080ef04 g     F .text	000001b8 OSTaskNameGet
00814238 g       *ABS*	00000000 __flash_rodata_start
0080d018 g     F .text	00000234 OSQPostOpt
00808ad0 g     F .text	00000240 OSTimeTick
00816128 g     O .rwdata	00000002 OSTaskMax
00814238 g       *ABS*	00000000 __DTOR_LIST__
0080d538 g     F .text	00000114 OSSemCreate
0081614c g     O .rwdata	00000002 OSTmrWheelSize
008027d8 g     F .text	00000024 copysign
00803a44 g     F .text	00000088 __nedf2
00816122 g     O .rwdata	00000002 OSTaskDelEn
01080000 g       *ABS*	00000000 __alt_mem_sram_0
00811cd0 g     F .text	00000064 alt_up_av_config_open_dev
0080de0c g     F .text	00000130 OSSemQuery
0080c4ac g     F .text	00000300 OSQDel
0080cb94 g     F .text	0000017c OSQPendAbort
00810018 g     F .text	00000034 alt_irq_init
008077d0 g     F .text	00000060 alt_release_fd
00812920 g     F .text	00000034 alt_up_character_lcd_cursor_off
00814358 g     O .rodata	00000100 __clz_tab
00813cd4 g     F .text	00000014 atexit
008001ec g     F .text	000000ac midiNote2midiFreq
00806b90 g     F .text	00000078 _write_r
00811f2c g     F .text	00000038 alt_up_av_config_read_ready
00808844 g     F .text	0000008c OSSchedLock
0080a334 g     F .text	0000013c OSFlagCreate
008160ac g     O .rwdata	00000004 _impure_ptr
00817cdc g     O .bss	00000004 alt_argc
008025f8 g     F .text	000001e0 scalbn
00812c98 g     F .text	00000064 _do_dtors
008160f2 g     O .rwdata	00000002 OSEventMultiEn
0080a470 g     F .text	000002a8 OSFlagDel
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00817d2c g     O .bss	00000004 OSEventFreeList
01104020 g       .exceptions	00000000 alt_irq_entry
0080a9b0 g     F .text	00000644 OSFlagPend
0081613e g     O .rwdata	00000002 OSTmrEn
008060b4 g     F .text	00000018 __fp_unlock_all
008160bc g     O .rwdata	00000008 alt_fs_list
008098d0 g     F .text	00000080 OS_StrCopy
0081181c g     F .text	00000070 alt_up_audio_record_l
00816108 g     O .rwdata	00000002 OSMemNameSize
008023d8 g     F .text	00000010 nan
008139d8 g     F .text	0000001c OSInitHookEnd
01104020 g       *ABS*	00000000 __ram_exceptions_start
00816134 g     O .rwdata	00000002 OSTCBPrioTblMax
008020a4 g     F .text	000002c8 __ieee754_sqrt
00816130 g     O .rwdata	00000002 OSTaskStatStkChkEn
00811e5c g     F .text	00000038 alt_up_av_config_enable_interrupt
008105b4 g     F .text	00000068 altera_avalon_fifo_write_other_info
00816104 g     O .rwdata	00000002 OSMemEn
0081610e g     O .rwdata	00000002 OSMutexEn
00811ec4 g     F .text	00000068 alt_up_av_config_read_acknowledge
00812264 g     F .text	00000064 alt_up_av_config_write_DC2_cfg_register
00816160 g       *ABS*	00000000 _edata
0081f230 g       *ABS*	00000000 _end
00817d30 g     O .bss	00000001 OSIntNesting
011041c0 g       *ABS*	00000000 __ram_exceptions_end
00810d38 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0080fd40 g     F .text	00000210 OSTimeDlyResume
0080a85c g     F .text	00000154 OSFlagNameSet
00811970 g     F .text	00000070 alt_up_audio_play_l
0080f498 g     F .text	000001fc OSTaskStkChk
0081610a g     O .rwdata	00000002 OSMemSize
00806ab4 g     F .text	0000007c __swrite
008160b4 g     O .rwdata	00000004 __malloc_trim_threshold
00813528 g     F .text	00000020 altera_nios2_qsys_irq_init
00817d34 g     O .bss	00000004 OSTCBCur
00813ce8 g     F .text	00000038 exit
0081610c g     O .rwdata	00000002 OSMemTblSize
00806698 g     F .text	000000c8 _fwalk_reent
00812390 g     F .text	00000064 alt_up_av_config_read_LTM_cfg_register
00814158 g     F .text	00000060 __modsi3
00810208 g     F .text	0000003c altera_avalon_fifo_read_ienable
01000000 g       *ABS*	00000000 __alt_data_end
01104020 g     F .exceptions	00000000 alt_exception
00805ff4 g     F .text	00000004 __sfp_lock_release
00808674 g     F .text	00000054 OSInit
0080f8c0 g     F .text	00000144 OSTaskQuery
008125f4 g     F .text	00000078 alt_up_character_lcd_string
0080d3cc g     F .text	000000ac OS_QInit
00809950 g     F .text	00000058 OS_StrLen
0080bd68 g     F .text	00000120 OSMemNameSet
00816126 g     O .rwdata	00000002 OSTaskProfileEn
00817d38 g     O .bss	00000004 OSTime
0081d6fc g     O .bss	00000800 OSTaskIdleStk
00814208 g     F .text	0000002c _exit
008023a0 g     F .text	00000030 __isnand
00812988 g     F .text	00000154 alt_alarm_start
0080a718 g     F .text	00000144 OSFlagNameGet
0080ff50 g     F .text	00000064 OSTimeGet
00803dd0 g     F .text	00000098 __muldi3
00810244 g     F .text	0000002c altera_avalon_fifo_read_almostfull
00806818 g     F .text	00000194 __smakebuf_r
00804714 g     F .text	00000074 strlen
00813968 g     F .text	0000001c OSTaskSwHook
00813198 g     F .text	00000188 open
0081defc g     O .bss	00000b40 OSEventTbl
008104ec g     F .text	00000070 altera_avalon_read_fifo
0081ea3c g     O .bss	00000510 OSTCBTbl
0080df3c g     F .text	00000104 OSSemSet
00812010 g     F .text	000000f8 alt_up_av_config_read_video_cfg_register
00812d90 g     F .text	00000030 alt_icache_flush_all
008126b8 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
00816154 g     O .rwdata	00000004 alt_priority_mask
00800298 g     F .text	00000054 midiFreq2sampleFreq
0080d64c g     F .text	000002a0 OSSemDel
00817d3c g     O .bss	00000004 OSFlagFreeList
008160ec g     O .rwdata	00000002 OSEventNameSize
00817d40 g     O .bss	00000001 OSStatRdy
0081232c g     F .text	00000064 alt_up_av_config_write_D5M_cfg_register
0081ef4c g     O .bss	00000054 OSTCBPrioTbl
00807a6c g     F .text	000000ac __env_lock
00816132 g     O .rwdata	00000002 OSTaskSwHookEn
008032ac g     F .text	00000080 __subdf3
00810428 g     F .text	00000060 altera_avalon_fifo_write_almostempty
00816158 g     O .rwdata	00000008 alt_alarm_list
008160fa g     O .rwdata	00000002 OSFlagWidth
00812c34 g     F .text	00000064 _do_ctors
00806f70 g     F .text	000000fc close
00802a50 g     F .text	00000064 __addsf3
00817cec g     O .bss	00000004 alt_envsem
00817d44 g     O .bss	00000004 OSIdleCtrRun
00808d10 g     F .text	00000020 OSVersion
00816144 g     O .rwdata	00000002 OSTmrCfgWheelSize
0080734c g     F .text	00000080 alt_load
00811504 g     F .text	0000004c alt_up_audio_enable_read_interrupt
0080fa04 g     F .text	0000007c OS_TaskStkClr
00812108 g     F .text	000000f8 alt_up_av_config_write_video_cfg_register
0080413c g     F .text	00000314 __pack_d
0081611e g     O .rwdata	00000002 OSTaskCreateEn
00809300 g     F .text	00000068 OS_EventWaitListInit
008139f4 g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
00805ff8 g     F .text	00000004 __sinit_lock_acquire
0080f694 g     F .text	0000022c OSTaskSuspend
00812200 g     F .text	00000064 alt_up_av_config_read_DC2_cfg_register
008099a8 g     F .text	0000005c OS_TaskIdle
0081614a g     O .rwdata	00000002 OSTmrTblSize
0081163c g     F .text	0000003c alt_up_audio_read_interrupt_pending
0080d24c g     F .text	00000180 OSQQuery



Disassembly of section .entry:

01104000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1104000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1104004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1104008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 110400c:	00bffd16 	blt	zero,r2,1104004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1104010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
 1104014:	08406814 	ori	at,at,416
    jmp r1
 1104018:	0800683a 	jmp	at
 110401c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>

Disassembly of section .exceptions:

01104020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1104020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1104024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1104028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 110402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1104030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1104034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1104038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 110403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1104040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1104044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1104048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 110404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1104050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1104054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1104058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 110405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1104060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1104064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1104068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 110406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1104070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1104074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1104078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 110407c:	10000326 	beq	r2,zero,110408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1104080:	20000226 	beq	r4,zero,110408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1104084:	11040ec0 	call	11040ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1104088:	00000306 	br	1104098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 110408c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1104090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1104094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1104098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 110409c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 11040a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 11040a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 11040a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 11040ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 11040b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 11040b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 11040b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 11040bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 11040c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 11040c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 11040c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 11040cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 11040d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 11040d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 11040d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 11040dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 11040e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 11040e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 11040e8:	ef80083a 	eret

011040ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 11040ec:	defff904 	addi	sp,sp,-28
 11040f0:	dfc00615 	stw	ra,24(sp)
 11040f4:	df000515 	stw	fp,20(sp)
 11040f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 11040fc:	08086c80 	call	8086c8 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1104100:	0005313a 	rdctl	r2,ipending
 1104104:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1104108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 110410c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 1104110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1104114:	00800044 	movi	r2,1
 1104118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 110411c:	e0ffff17 	ldw	r3,-4(fp)
 1104120:	e0bffe17 	ldw	r2,-8(fp)
 1104124:	1884703a 	and	r2,r3,r2
 1104128:	1005003a 	cmpeq	r2,r2,zero
 110412c:	1000171e 	bne	r2,zero,110418c <alt_irq_handler+0xa0>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 1104130:	e0bffd17 	ldw	r2,-12(fp)
 1104134:	00c020b4 	movhi	r3,130
 1104138:	18fbe804 	addi	r3,r3,-4192
 110413c:	100490fa 	slli	r2,r2,3
 1104140:	10c5883a 	add	r2,r2,r3
 1104144:	11800017 	ldw	r6,0(r2)
 1104148:	e0bffd17 	ldw	r2,-12(fp)
 110414c:	00c020b4 	movhi	r3,130
 1104150:	18fbe804 	addi	r3,r3,-4192
 1104154:	100490fa 	slli	r2,r2,3
 1104158:	10c5883a 	add	r2,r2,r3
 110415c:	10800104 	addi	r2,r2,4
 1104160:	11000017 	ldw	r4,0(r2)
 1104164:	e17ffd17 	ldw	r5,-12(fp)
 1104168:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110416c:	0005313a 	rdctl	r2,ipending
 1104170:	e0bffb15 	stw	r2,-20(fp)

  return active;
 1104174:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1104178:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 110417c:	e0bfff17 	ldw	r2,-4(fp)
 1104180:	1004c03a 	cmpne	r2,r2,zero
 1104184:	103fe21e 	bne	r2,zero,1104110 <alt_irq_handler+0x24>
 1104188:	00000706 	br	11041a8 <alt_irq_handler+0xbc>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 110418c:	e0bffe17 	ldw	r2,-8(fp)
 1104190:	1085883a 	add	r2,r2,r2
 1104194:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1104198:	e0bffd17 	ldw	r2,-12(fp)
 110419c:	10800044 	addi	r2,r2,1
 11041a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 11041a4:	003fdd06 	br	110411c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 11041a8:	08087440 	call	808744 <OSIntExit>
}
 11041ac:	e037883a 	mov	sp,fp
 11041b0:	dfc00117 	ldw	ra,4(sp)
 11041b4:	df000017 	ldw	fp,0(sp)
 11041b8:	dec00204 	addi	sp,sp,8
 11041bc:	f800283a 	ret

Disassembly of section .text:

008001a0 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  8001a0:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  8001a4:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001a8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001ac:	00bffd16 	blt	zero,r2,8001a4 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001b0:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001b4:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001b8:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001bc:	d6b82a14 	ori	gp,gp,57512
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001c0:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001c4:	109f3014 	ori	r2,r2,31936

    movhi r3, %hi(__bss_end)
  8001c8:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001cc:	18fc8c14 	ori	r3,r3,62000

    beq r2, r3, 1f
  8001d0:	10c00326 	beq	r2,r3,8001e0 <_start+0x40>

0:
    stw zero, (r2)
  8001d4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001d8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001dc:	10fffd36 	bltu	r2,r3,8001d4 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001e0:	080734c0 	call	80734c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001e4:	08075880 	call	807588 <alt_main>

008001e8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001e8:	003fff06 	br	8001e8 <alt_after_alt_main>

008001ec <midiNote2midiFreq>:
static struct voice VOICE_TABLE[TOTAL_VOICES];

/**
 * This will calculate the frequency of the midi note
 */
float midiNote2midiFreq(double midiNote) {
  8001ec:	defffc04 	addi	sp,sp,-16
  8001f0:	dfc00315 	stw	ra,12(sp)
  8001f4:	df000215 	stw	fp,8(sp)
  8001f8:	df000204 	addi	fp,sp,8
  8001fc:	e13ffe15 	stw	r4,-8(fp)
  800200:	e17fff15 	stw	r5,-4(fp)
	return (FREQ_BASE * pow(2, (midiNote / 12)));
  800204:	e13ffe17 	ldw	r4,-8(fp)
  800208:	e17fff17 	ldw	r5,-4(fp)
  80020c:	000d883a 	mov	r6,zero
  800210:	01d00a34 	movhi	r7,16424
  800214:	08037640 	call	803764 <__divdf3>
  800218:	1009883a 	mov	r4,r2
  80021c:	180b883a 	mov	r5,r3
  800220:	2005883a 	mov	r2,r4
  800224:	2807883a 	mov	r3,r5
  800228:	0009883a 	mov	r4,zero
  80022c:	01500034 	movhi	r5,16384
  800230:	100d883a 	mov	r6,r2
  800234:	180f883a 	mov	r7,r3
  800238:	080091c0 	call	80091c <pow>
  80023c:	1009883a 	mov	r4,r2
  800240:	180b883a 	mov	r5,r3
  800244:	2005883a 	mov	r2,r4
  800248:	2807883a 	mov	r3,r5
  80024c:	1009883a 	mov	r4,r2
  800250:	180b883a 	mov	r5,r3
  800254:	019430b4 	movhi	r6,20674
  800258:	31964e44 	addi	r6,r6,22841
  80025c:	01d00834 	movhi	r7,16416
  800260:	39d68084 	addi	r7,r7,23042
  800264:	08033a00 	call	8033a0 <__muldf3>
  800268:	1009883a 	mov	r4,r2
  80026c:	180b883a 	mov	r5,r3
  800270:	2005883a 	mov	r2,r4
  800274:	2807883a 	mov	r3,r5
  800278:	1009883a 	mov	r4,r2
  80027c:	180b883a 	mov	r5,r3
  800280:	0803d5c0 	call	803d5c <__truncdfsf2>
}
  800284:	e037883a 	mov	sp,fp
  800288:	dfc00117 	ldw	ra,4(sp)
  80028c:	df000017 	ldw	fp,0(sp)
  800290:	dec00204 	addi	sp,sp,8
  800294:	f800283a 	ret

00800298 <midiFreq2sampleFreq>:

/**
 * This will calculate the sampling frequency used to sample the SINE LUT
 */
float midiFreq2sampleFreq(float midiFreq) {
  800298:	defffc04 	addi	sp,sp,-16
  80029c:	dfc00315 	stw	ra,12(sp)
  8002a0:	df000215 	stw	fp,8(sp)
  8002a4:	df000204 	addi	fp,sp,8
  8002a8:	e13fff15 	stw	r4,-4(fp)

	float sampleFreq = (midiFreq / SAMPLE_RATE) * NUMBER_OF_POINTS_IN_WAVE_LUT * BITSHIFT_COMPENSATION;
  8002ac:	e13fff17 	ldw	r4,-4(fp)
  8002b0:	0151beb4 	movhi	r5,18170
  8002b4:	0802c940 	call	802c94 <__divsf3>
  8002b8:	1009883a 	mov	r4,r2
  8002bc:	01516034 	movhi	r5,17792
  8002c0:	0802ab40 	call	802ab4 <__mulsf3>
  8002c4:	1009883a 	mov	r4,r2
  8002c8:	01506034 	movhi	r5,16768
  8002cc:	0802ab40 	call	802ab4 <__mulsf3>
  8002d0:	e0bffe15 	stw	r2,-8(fp)

	return sampleFreq;
  8002d4:	e0bffe17 	ldw	r2,-8(fp)

}
  8002d8:	e037883a 	mov	sp,fp
  8002dc:	dfc00117 	ldw	ra,4(sp)
  8002e0:	df000017 	ldw	fp,0(sp)
  8002e4:	dec00204 	addi	sp,sp,8
  8002e8:	f800283a 	ret

008002ec <startVoice>:

/**Tested!*/
void startVoice(int voiceNum, int sampleRate){
  8002ec:	defffc04 	addi	sp,sp,-16
  8002f0:	df000315 	stw	fp,12(sp)
  8002f4:	df000304 	addi	fp,sp,12
  8002f8:	e13ffe15 	stw	r4,-8(fp)
  8002fc:	e17fff15 	stw	r5,-4(fp)
	int * voiceAddr;
	switch (voiceNum) {
  800300:	e0bffe17 	ldw	r2,-8(fp)
  800304:	1005003a 	cmpeq	r2,r2,zero
  800308:	1000011e 	bne	r2,zero,800310 <startVoice+0x24>
  80030c:	00000306 	br	80031c <startVoice+0x30>
	case 0:
		voiceAddr = SYNTHESIZER_0_BASE;
  800310:	00804474 	movhi	r2,273
  800314:	10a42a04 	addi	r2,r2,-28504
  800318:	e0bffd15 	stw	r2,-12(fp)
		break;
	default:
		//return;
		break;
	}
	*voiceAddr = sampleRate;
  80031c:	e0fffd17 	ldw	r3,-12(fp)
  800320:	e0bfff17 	ldw	r2,-4(fp)
  800324:	18800015 	stw	r2,0(r3)

}
  800328:	e037883a 	mov	sp,fp
  80032c:	df000017 	ldw	fp,0(sp)
  800330:	dec00104 	addi	sp,sp,4
  800334:	f800283a 	ret

00800338 <endVoice>:


/**Tested!*/
void endVoice(int voiceNum){
  800338:	defffd04 	addi	sp,sp,-12
  80033c:	df000215 	stw	fp,8(sp)
  800340:	df000204 	addi	fp,sp,8
  800344:	e13fff15 	stw	r4,-4(fp)
	int * voiceAddr;
	switch (voiceNum) {
  800348:	e0bfff17 	ldw	r2,-4(fp)
  80034c:	1005003a 	cmpeq	r2,r2,zero
  800350:	1000011e 	bne	r2,zero,800358 <endVoice+0x20>
  800354:	00000306 	br	800364 <endVoice+0x2c>
	case 0:
		voiceAddr = SYNTHESIZER_0_BASE;
  800358:	00804474 	movhi	r2,273
  80035c:	10a42a04 	addi	r2,r2,-28504
  800360:	e0bffe15 	stw	r2,-8(fp)
		break;
	default:
		//return;
		break;
	}
	*voiceAddr = 0;
  800364:	e0bffe17 	ldw	r2,-8(fp)
  800368:	10000015 	stw	zero,0(r2)

}
  80036c:	e037883a 	mov	sp,fp
  800370:	df000017 	ldw	fp,0(sp)
  800374:	dec00104 	addi	sp,sp,4
  800378:	f800283a 	ret

0080037c <turnOnVoice>:
 * If it finds an unused (off) note, it will use that voice
 * If all the voices are used, it does nothing
 *
 * it returns the index
 */
void turnOnVoice(int noteNum) {
  80037c:	defffa04 	addi	sp,sp,-24
  800380:	dfc00515 	stw	ra,20(sp)
  800384:	df000415 	stw	fp,16(sp)
  800388:	df000404 	addi	fp,sp,16
  80038c:	e13fff15 	stw	r4,-4(fp)

	int index = 0;
  800390:	e03ffe15 	stw	zero,-8(fp)
	float midiFreq= 0;
  800394:	e03ffd15 	stw	zero,-12(fp)
	float sampleFreq = 0;
  800398:	e03ffc15 	stw	zero,-16(fp)

	for (index = 0; index < TOTAL_VOICES; index++) {
  80039c:	e03ffe15 	stw	zero,-8(fp)
  8003a0:	00002906 	br	800448 <turnOnVoice+0xcc>
		if (NOTE_OFF == VOICE_TABLE[index].status) {
  8003a4:	e0bffe17 	ldw	r2,-8(fp)
  8003a8:	100690fa 	slli	r3,r2,3
  8003ac:	d0a70604 	addi	r2,gp,-25576
  8003b0:	1885883a 	add	r2,r3,r2
  8003b4:	10800017 	ldw	r2,0(r2)
  8003b8:	1004c03a 	cmpne	r2,r2,zero
  8003bc:	10001f1e 	bne	r2,zero,80043c <turnOnVoice+0xc0>
			VOICE_TABLE[index].note = noteNum;
  8003c0:	e0bffe17 	ldw	r2,-8(fp)
  8003c4:	100690fa 	slli	r3,r2,3
  8003c8:	00802074 	movhi	r2,129
  8003cc:	109f3104 	addi	r2,r2,31940
  8003d0:	1887883a 	add	r3,r3,r2
  8003d4:	e0bfff17 	ldw	r2,-4(fp)
  8003d8:	18800015 	stw	r2,0(r3)
			VOICE_TABLE[index].status = NOTE_ON;
  8003dc:	e0bffe17 	ldw	r2,-8(fp)
  8003e0:	100690fa 	slli	r3,r2,3
  8003e4:	d0a70604 	addi	r2,gp,-25576
  8003e8:	1887883a 	add	r3,r3,r2
  8003ec:	00800044 	movi	r2,1
  8003f0:	18800015 	stw	r2,0(r3)


			midiFreq = midiNote2midiFreq(noteNum);
  8003f4:	e13fff17 	ldw	r4,-4(fp)
  8003f8:	0803c640 	call	803c64 <__floatsidf>
  8003fc:	100b883a 	mov	r5,r2
  800400:	180d883a 	mov	r6,r3
  800404:	2809883a 	mov	r4,r5
  800408:	300b883a 	mov	r5,r6
  80040c:	08001ec0 	call	8001ec <midiNote2midiFreq>
  800410:	e0bffd15 	stw	r2,-12(fp)
			sampleFreq = midiFreq2sampleFreq(midiFreq);
  800414:	e13ffd17 	ldw	r4,-12(fp)
  800418:	08002980 	call	800298 <midiFreq2sampleFreq>
  80041c:	e0bffc15 	stw	r2,-16(fp)
			startVoice(index, (int) roundf(sampleFreq));
  800420:	e13ffc17 	ldw	r4,-16(fp)
  800424:	08008800 	call	800880 <roundf>
  800428:	1009883a 	mov	r4,r2
  80042c:	0802e080 	call	802e08 <__fixsfsi>
  800430:	100b883a 	mov	r5,r2
  800434:	e13ffe17 	ldw	r4,-8(fp)
  800438:	08002ec0 	call	8002ec <startVoice>

	int index = 0;
	float midiFreq= 0;
	float sampleFreq = 0;

	for (index = 0; index < TOTAL_VOICES; index++) {
  80043c:	e0bffe17 	ldw	r2,-8(fp)
  800440:	10800044 	addi	r2,r2,1
  800444:	e0bffe15 	stw	r2,-8(fp)
  800448:	e0bffe17 	ldw	r2,-8(fp)
  80044c:	10800050 	cmplti	r2,r2,1
  800450:	103fd41e 	bne	r2,zero,8003a4 <turnOnVoice+0x28>
			sampleFreq = midiFreq2sampleFreq(midiFreq);
			startVoice(index, (int) roundf(sampleFreq));
		}
	}

}
  800454:	e037883a 	mov	sp,fp
  800458:	dfc00117 	ldw	ra,4(sp)
  80045c:	df000017 	ldw	fp,0(sp)
  800460:	dec00204 	addi	sp,sp,8
  800464:	f800283a 	ret

00800468 <turnOffVoice>:
/**
 * This Iterate through the voice/note table and look for a note to turn off
 * If it finds a specific note, it will reset the note to an off state
 * If it doesn't find it, it does nothing
 */
void turnOffVoice(int noteNum) {
  800468:	defffc04 	addi	sp,sp,-16
  80046c:	dfc00315 	stw	ra,12(sp)
  800470:	df000215 	stw	fp,8(sp)
  800474:	df000204 	addi	fp,sp,8
  800478:	e13fff15 	stw	r4,-4(fp)

	int index = 0;
  80047c:	e03ffe15 	stw	zero,-8(fp)

	for (index = 0; index < TOTAL_VOICES; index++) {
  800480:	e03ffe15 	stw	zero,-8(fp)
  800484:	00001806 	br	8004e8 <turnOffVoice+0x80>
		if (noteNum == VOICE_TABLE[index].note) {
  800488:	e0bffe17 	ldw	r2,-8(fp)
  80048c:	100690fa 	slli	r3,r2,3
  800490:	00802074 	movhi	r2,129
  800494:	109f3104 	addi	r2,r2,31940
  800498:	1885883a 	add	r2,r3,r2
  80049c:	10c00017 	ldw	r3,0(r2)
  8004a0:	e0bfff17 	ldw	r2,-4(fp)
  8004a4:	18800d1e 	bne	r3,r2,8004dc <turnOffVoice+0x74>
			VOICE_TABLE[index].note = EMPTY_NOTE;
  8004a8:	e0bffe17 	ldw	r2,-8(fp)
  8004ac:	100690fa 	slli	r3,r2,3
  8004b0:	00802074 	movhi	r2,129
  8004b4:	109f3104 	addi	r2,r2,31940
  8004b8:	1885883a 	add	r2,r3,r2
  8004bc:	10000015 	stw	zero,0(r2)
			VOICE_TABLE[index].status = NOTE_OFF;
  8004c0:	e0bffe17 	ldw	r2,-8(fp)
  8004c4:	100690fa 	slli	r3,r2,3
  8004c8:	d0a70604 	addi	r2,gp,-25576
  8004cc:	1885883a 	add	r2,r3,r2
  8004d0:	10000015 	stw	zero,0(r2)
			endVoice(index);
  8004d4:	e13ffe17 	ldw	r4,-8(fp)
  8004d8:	08003380 	call	800338 <endVoice>
 */
void turnOffVoice(int noteNum) {

	int index = 0;

	for (index = 0; index < TOTAL_VOICES; index++) {
  8004dc:	e0bffe17 	ldw	r2,-8(fp)
  8004e0:	10800044 	addi	r2,r2,1
  8004e4:	e0bffe15 	stw	r2,-8(fp)
  8004e8:	e0bffe17 	ldw	r2,-8(fp)
  8004ec:	10800050 	cmplti	r2,r2,1
  8004f0:	103fe51e 	bne	r2,zero,800488 <turnOffVoice+0x20>
			VOICE_TABLE[index].note = EMPTY_NOTE;
			VOICE_TABLE[index].status = NOTE_OFF;
			endVoice(index);
		}
	}
}
  8004f4:	e037883a 	mov	sp,fp
  8004f8:	dfc00117 	ldw	ra,4(sp)
  8004fc:	df000017 	ldw	fp,0(sp)
  800500:	dec00204 	addi	sp,sp,8
  800504:	f800283a 	ret

00800508 <processNote>:
/*This is the API for the midiDriver*
 * It requires the status of the note
 * the pitch (midi note numbeR)
 * and the velocity (velocity of 0 will result in note off
 */
void processNote(int noteStatus, int pitch, int velocity) {
  800508:	defff804 	addi	sp,sp,-32
  80050c:	dfc00715 	stw	ra,28(sp)
  800510:	df000615 	stw	fp,24(sp)
  800514:	df000604 	addi	fp,sp,24
  800518:	e13ffd15 	stw	r4,-12(fp)
  80051c:	e17ffe15 	stw	r5,-8(fp)
  800520:	e1bfff15 	stw	r6,-4(fp)

	float midiFreq = 0;
  800524:	e03ffc15 	stw	zero,-16(fp)
	float sampleFreq = 0;
  800528:	e03ffb15 	stw	zero,-20(fp)
	int voiceNumber = 0;
  80052c:	e03ffa15 	stw	zero,-24(fp)


	if (velocity != 0) {
  800530:	e0bfff17 	ldw	r2,-4(fp)
  800534:	1005003a 	cmpeq	r2,r2,zero
  800538:	10000e1e 	bne	r2,zero,800574 <processNote+0x6c>
		midiFreq = midiNote2midiFreq(pitch);
  80053c:	e13ffe17 	ldw	r4,-8(fp)
  800540:	0803c640 	call	803c64 <__floatsidf>
  800544:	100b883a 	mov	r5,r2
  800548:	180d883a 	mov	r6,r3
  80054c:	2809883a 	mov	r4,r5
  800550:	300b883a 	mov	r5,r6
  800554:	08001ec0 	call	8001ec <midiNote2midiFreq>
  800558:	e0bffc15 	stw	r2,-16(fp)
		sampleFreq = midiFreq2sampleFreq(midiFreq);
  80055c:	e13ffc17 	ldw	r4,-16(fp)
  800560:	08002980 	call	800298 <midiFreq2sampleFreq>
  800564:	e0bffb15 	stw	r2,-20(fp)
		turnOnVoice(pitch);
  800568:	e13ffe17 	ldw	r4,-8(fp)
  80056c:	080037c0 	call	80037c <turnOnVoice>
  800570:	00000206 	br	80057c <processNote+0x74>
	} else {
		turnOffVoice(pitch);
  800574:	e13ffe17 	ldw	r4,-8(fp)
  800578:	08004680 	call	800468 <turnOffVoice>
	}

}
  80057c:	e037883a 	mov	sp,fp
  800580:	dfc00117 	ldw	ra,4(sp)
  800584:	df000017 	ldw	fp,0(sp)
  800588:	dec00204 	addi	sp,sp,8
  80058c:	f800283a 	ret

00800590 <task1>:

#define TASK1_PRIORITY      3
#define TASK2_PRIORITY      1

void task1(void* pdata)
{
  800590:	deff7604 	addi	sp,sp,-552
  800594:	dfc08915 	stw	ra,548(sp)
  800598:	df008815 	stw	fp,544(sp)
  80059c:	dc008715 	stw	r16,540(sp)
  8005a0:	df008704 	addi	fp,sp,540
  8005a4:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
    alt_up_audio_dev * audio_dev;
    alt_up_av_config_dev * audio_config_dev;

    unsigned int buffer[BUFFER_SIZE];
    int i = 0;
  8005a8:	e03f7b15 	stw	zero,-532(fp)

    audio_config_dev = alt_up_av_config_open_dev("/dev/audio_and_video_config_0");
  8005ac:	01002074 	movhi	r4,129
  8005b0:	21108e04 	addi	r4,r4,16952
  8005b4:	0811cd00 	call	811cd0 <alt_up_av_config_open_dev>
  8005b8:	e0bf7c15 	stw	r2,-528(fp)
    if ( audio_config_dev == NULL)
  8005bc:	e0bf7c17 	ldw	r2,-528(fp)
  8005c0:	1004c03a 	cmpne	r2,r2,zero
  8005c4:	1000041e 	bne	r2,zero,8005d8 <task1+0x48>
        printf("Error: could not open audio config device \n");
  8005c8:	01002074 	movhi	r4,129
  8005cc:	21109604 	addi	r4,r4,16984
  8005d0:	08047000 	call	804700 <puts>
  8005d4:	00000306 	br	8005e4 <task1+0x54>
    else
        printf("Opened audio config device \n");
  8005d8:	01002074 	movhi	r4,129
  8005dc:	2110a104 	addi	r4,r4,17028
  8005e0:	08047000 	call	804700 <puts>

    /* Open Devices */
    audio_dev = alt_up_audio_open_dev ("/dev/audio_0");
  8005e4:	01002074 	movhi	r4,129
  8005e8:	2110a804 	addi	r4,r4,17056
  8005ec:	08114c40 	call	8114c4 <alt_up_audio_open_dev>
  8005f0:	e0bf7d15 	stw	r2,-524(fp)
    if ( audio_dev == NULL)
  8005f4:	e0bf7d17 	ldw	r2,-524(fp)
  8005f8:	1004c03a 	cmpne	r2,r2,zero
  8005fc:	1000041e 	bne	r2,zero,800610 <task1+0x80>
        printf("Error: could not open audio device \n");
  800600:	01002074 	movhi	r4,129
  800604:	2110ac04 	addi	r4,r4,17072
  800608:	08047000 	call	804700 <puts>
  80060c:	00000306 	br	80061c <task1+0x8c>
    else
        printf("Opened audio device \n");
  800610:	01002074 	movhi	r4,129
  800614:	2110b504 	addi	r4,r4,17108
  800618:	08047000 	call	804700 <puts>

    /* Configure WM8731 */
    alt_up_av_config_reset(audio_config_dev);
  80061c:	e13f7c17 	ldw	r4,-528(fp)
  800620:	0811e240 	call	811e24 <alt_up_av_config_reset>
    alt_up_audio_reset_audio_core(audio_dev);
  800624:	e13f7d17 	ldw	r4,-524(fp)
  800628:	08116b40 	call	8116b4 <alt_up_audio_reset_audio_core>

    /* Write to configuration registers in the audio codec; see datasheet for what these values mean */
    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x0, 0x17);
  80062c:	e13f7c17 	ldw	r4,-528(fp)
  800630:	000b883a 	mov	r5,zero
  800634:	018005c4 	movi	r6,23
  800638:	0811f640 	call	811f64 <alt_up_av_config_write_audio_cfg_register>
    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x1, 0x17);
  80063c:	e13f7c17 	ldw	r4,-528(fp)
  800640:	01400044 	movi	r5,1
  800644:	018005c4 	movi	r6,23
  800648:	0811f640 	call	811f64 <alt_up_av_config_write_audio_cfg_register>
    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x2, 0x50);
  80064c:	e13f7c17 	ldw	r4,-528(fp)
  800650:	01400084 	movi	r5,2
  800654:	01801404 	movi	r6,80
  800658:	0811f640 	call	811f64 <alt_up_av_config_write_audio_cfg_register>
    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x3, 0x50);
  80065c:	e13f7c17 	ldw	r4,-528(fp)
  800660:	014000c4 	movi	r5,3
  800664:	01801404 	movi	r6,80
  800668:	0811f640 	call	811f64 <alt_up_av_config_write_audio_cfg_register>
    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x4, 0x15);
  80066c:	e13f7c17 	ldw	r4,-528(fp)
  800670:	01400104 	movi	r5,4
  800674:	01800544 	movi	r6,21
  800678:	0811f640 	call	811f64 <alt_up_av_config_write_audio_cfg_register>
    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x5, 0x06);
  80067c:	e13f7c17 	ldw	r4,-528(fp)
  800680:	01400144 	movi	r5,5
  800684:	01800184 	movi	r6,6
  800688:	0811f640 	call	811f64 <alt_up_av_config_write_audio_cfg_register>
    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x6, 0x00);
  80068c:	e13f7c17 	ldw	r4,-528(fp)
  800690:	01400184 	movi	r5,6
  800694:	000d883a 	mov	r6,zero
  800698:	0811f640 	call	811f64 <alt_up_av_config_write_audio_cfg_register>

	altera_avalon_fifo_init(FIFO_0_OUT_CSR_BASE, 0x0, 10, FIFO_0_OUT_CSR_FIFO_DEPTH-10);
  80069c:	01004474 	movhi	r4,273
  8006a0:	21240804 	addi	r4,r4,-28640
  8006a4:	000b883a 	mov	r5,zero
  8006a8:	01800284 	movi	r6,10
  8006ac:	01c01d84 	movi	r7,118
  8006b0:	08101100 	call	810110 <altera_avalon_fifo_init>

	unsigned int data;
	unsigned int level;
	altera_avalon_fifo_read_fifo(FIFO_0_OUT_BASE, FIFO_0_OUT_CSR_BASE);
  8006b4:	01004474 	movhi	r4,273
  8006b8:	21242404 	addi	r4,r4,-28528
  8006bc:	01404474 	movhi	r5,273
  8006c0:	29640804 	addi	r5,r5,-28640
  8006c4:	081055c0 	call	81055c <altera_avalon_fifo_read_fifo>
	while (1){
		level = altera_avalon_fifo_read_level(FIFO_0_OUT_CSR_BASE);
  8006c8:	01004474 	movhi	r4,273
  8006cc:	21240804 	addi	r4,r4,-28640
  8006d0:	08102d80 	call	8102d8 <altera_avalon_fifo_read_level>
  8006d4:	e0bf7915 	stw	r2,-540(fp)
		if (level>0){
  8006d8:	e0bf7917 	ldw	r2,-540(fp)
  8006dc:	1005003a 	cmpeq	r2,r2,zero
  8006e0:	1000181e 	bne	r2,zero,800744 <task1+0x1b4>
			for (i=0;i<level;i++){
  8006e4:	e03f7b15 	stw	zero,-532(fp)
  8006e8:	00001306 	br	800738 <task1+0x1a8>
				buffer[i]=altera_avalon_fifo_read_fifo(FIFO_0_OUT_BASE, FIFO_0_OUT_CSR_BASE)>>16 + 0x7fff;
  8006ec:	e43f7b17 	ldw	r16,-532(fp)
  8006f0:	01004474 	movhi	r4,273
  8006f4:	21242404 	addi	r4,r4,-28528
  8006f8:	01404474 	movhi	r5,273
  8006fc:	29640804 	addi	r5,r5,-28640
  800700:	081055c0 	call	81055c <altera_avalon_fifo_read_fifo>
  800704:	1007883a 	mov	r3,r2
  800708:	00a003d4 	movui	r2,32783
  80070c:	1885d83a 	sra	r2,r3,r2
  800710:	1007883a 	mov	r3,r2
  800714:	8405883a 	add	r2,r16,r16
  800718:	1085883a 	add	r2,r2,r2
  80071c:	e13f7904 	addi	r4,fp,-540
  800720:	1105883a 	add	r2,r2,r4
  800724:	10800604 	addi	r2,r2,24
  800728:	10c00015 	stw	r3,0(r2)
	unsigned int level;
	altera_avalon_fifo_read_fifo(FIFO_0_OUT_BASE, FIFO_0_OUT_CSR_BASE);
	while (1){
		level = altera_avalon_fifo_read_level(FIFO_0_OUT_CSR_BASE);
		if (level>0){
			for (i=0;i<level;i++){
  80072c:	e0bf7b17 	ldw	r2,-532(fp)
  800730:	10800044 	addi	r2,r2,1
  800734:	e0bf7b15 	stw	r2,-532(fp)
  800738:	e0ff7b17 	ldw	r3,-532(fp)
  80073c:	e0bf7917 	ldw	r2,-540(fp)
  800740:	18bfea36 	bltu	r3,r2,8006ec <task1+0x15c>
				buffer[i]=altera_avalon_fifo_read_fifo(FIFO_0_OUT_BASE, FIFO_0_OUT_CSR_BASE)>>16 + 0x7fff;
			}
		}


        alt_up_audio_write_fifo (audio_dev, buffer, level, ALT_UP_AUDIO_RIGHT);
  800744:	e1bf7917 	ldw	r6,-540(fp)
  800748:	e17f7f04 	addi	r5,fp,-516
  80074c:	e13f7d17 	ldw	r4,-524(fp)
  800750:	01c00044 	movi	r7,1
  800754:	0811ae40 	call	811ae4 <alt_up_audio_write_fifo>
        alt_up_audio_write_fifo (audio_dev, buffer, level, ALT_UP_AUDIO_LEFT);
  800758:	e1bf7917 	ldw	r6,-540(fp)
  80075c:	e17f7f04 	addi	r5,fp,-516
  800760:	e13f7d17 	ldw	r4,-524(fp)
  800764:	000f883a 	mov	r7,zero
  800768:	0811ae40 	call	811ae4 <alt_up_audio_write_fifo>



	}
  80076c:	003fd606 	br	8006c8 <task1+0x138>

00800770 <task2>:
}
void task2(void* pdata){
  800770:	defffc04 	addi	sp,sp,-16
  800774:	dfc00315 	stw	ra,12(sp)
  800778:	df000215 	stw	fp,8(sp)
  80077c:	df000204 	addi	fp,sp,8
  800780:	e13fff15 	stw	r4,-4(fp)

	int note = 48;
  800784:	00800c04 	movi	r2,48
  800788:	e0bffe15 	stw	r2,-8(fp)
	while(1){
		OSTimeDlyHMSM(0, 0, 0, 250);
  80078c:	0009883a 	mov	r4,zero
  800790:	000b883a 	mov	r5,zero
  800794:	000d883a 	mov	r6,zero
  800798:	01c03e84 	movi	r7,250
  80079c:	080fbcc0 	call	80fbcc <OSTimeDlyHMSM>
		turnOnVoice(note);
  8007a0:	e13ffe17 	ldw	r4,-8(fp)
  8007a4:	080037c0 	call	80037c <turnOnVoice>
		OSTimeDlyHMSM(0, 0,1 , 0);
  8007a8:	0009883a 	mov	r4,zero
  8007ac:	000b883a 	mov	r5,zero
  8007b0:	01800044 	movi	r6,1
  8007b4:	000f883a 	mov	r7,zero
  8007b8:	080fbcc0 	call	80fbcc <OSTimeDlyHMSM>
		turnOffVoice(note++);
  8007bc:	e13ffe17 	ldw	r4,-8(fp)
  8007c0:	e0bffe17 	ldw	r2,-8(fp)
  8007c4:	10800044 	addi	r2,r2,1
  8007c8:	e0bffe15 	stw	r2,-8(fp)
  8007cc:	08004680 	call	800468 <turnOffVoice>



	}
  8007d0:	003fee06 	br	80078c <task2+0x1c>

008007d4 <main>:




int main(void)
{
  8007d4:	defff904 	addi	sp,sp,-28
  8007d8:	dfc00615 	stw	ra,24(sp)
  8007dc:	df000515 	stw	fp,20(sp)
  8007e0:	df000504 	addi	fp,sp,20
	OSTaskCreateExt(task1,
  8007e4:	018020b4 	movhi	r6,130
  8007e8:	31a75e04 	addi	r6,r6,-25224
  8007ec:	008000c4 	movi	r2,3
  8007f0:	d8800015 	stw	r2,0(sp)
  8007f4:	00802074 	movhi	r2,129
  8007f8:	109f5f04 	addi	r2,r2,32124
  8007fc:	d8800115 	stw	r2,4(sp)
  800800:	00820004 	movi	r2,2048
  800804:	d8800215 	stw	r2,8(sp)
  800808:	d8000315 	stw	zero,12(sp)
  80080c:	d8000415 	stw	zero,16(sp)
  800810:	01002034 	movhi	r4,128
  800814:	21016404 	addi	r4,r4,1424
  800818:	000b883a 	mov	r5,zero
  80081c:	01c000c4 	movi	r7,3
  800820:	080e7880 	call	80e788 <OSTaskCreateExt>
					  task1_stk,
					  TASK_STACKSIZE,
					  NULL,
					  0);

  OSTaskCreateExt(task2,
  800824:	018020b4 	movhi	r6,130
  800828:	31af5e04 	addi	r6,r6,-17032
  80082c:	00800044 	movi	r2,1
  800830:	d8800015 	stw	r2,0(sp)
  800834:	008020b4 	movhi	r2,130
  800838:	10a75f04 	addi	r2,r2,-25220
  80083c:	d8800115 	stw	r2,4(sp)
  800840:	00820004 	movi	r2,2048
  800844:	d8800215 	stw	r2,8(sp)
  800848:	d8000315 	stw	zero,12(sp)
  80084c:	d8000415 	stw	zero,16(sp)
  800850:	01002034 	movhi	r4,128
  800854:	2101dc04 	addi	r4,r4,1904
  800858:	000b883a 	mov	r5,zero
  80085c:	01c00044 	movi	r7,1
  800860:	080e7880 	call	80e788 <OSTaskCreateExt>
                  TASK2_PRIORITY,
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
  OSStart();
  800864:	08089b40 	call	8089b4 <OSStart>
  return 0;
  800868:	0005883a 	mov	r2,zero
}
  80086c:	e037883a 	mov	sp,fp
  800870:	dfc00117 	ldw	ra,4(sp)
  800874:	df000017 	ldw	fp,0(sp)
  800878:	dec00204 	addi	sp,sp,8
  80087c:	f800283a 	ret

00800880 <roundf>:
  800880:	209fe02c 	andhi	r2,r4,32640
  800884:	1004d5fa 	srli	r2,r2,23
  800888:	deffff04 	addi	sp,sp,-4
  80088c:	00c00584 	movi	r3,22
  800890:	11bfe044 	addi	r6,r2,-127
  800894:	dfc00015 	stw	ra,0(sp)
  800898:	200f883a 	mov	r7,r4
  80089c:	19801016 	blt	r3,r6,8008e0 <roundf+0x60>
  8008a0:	00802034 	movhi	r2,128
  8008a4:	10bfffc4 	addi	r2,r2,-1
  8008a8:	1189d83a 	sra	r4,r2,r6
  8008ac:	30001516 	blt	r6,zero,800904 <roundf+0x84>
  8008b0:	00801034 	movhi	r2,64
  8008b4:	1185d83a 	sra	r2,r2,r6
  8008b8:	0106303a 	nor	r3,zero,r4
  8008bc:	3908703a 	and	r4,r7,r4
  8008c0:	3885883a 	add	r2,r7,r2
  8008c4:	10c6703a 	and	r3,r2,r3
  8008c8:	20000126 	beq	r4,zero,8008d0 <roundf+0x50>
  8008cc:	180f883a 	mov	r7,r3
  8008d0:	3805883a 	mov	r2,r7
  8008d4:	dfc00017 	ldw	ra,0(sp)
  8008d8:	dec00104 	addi	sp,sp,4
  8008dc:	f800283a 	ret
  8008e0:	00802004 	movi	r2,128
  8008e4:	200b883a 	mov	r5,r4
  8008e8:	30bff91e 	bne	r6,r2,8008d0 <roundf+0x50>
  8008ec:	0802a500 	call	802a50 <__addsf3>
  8008f0:	100f883a 	mov	r7,r2
  8008f4:	3805883a 	mov	r2,r7
  8008f8:	dfc00017 	ldw	ra,0(sp)
  8008fc:	dec00104 	addi	sp,sp,4
  800900:	f800283a 	ret
  800904:	00bfffc4 	movi	r2,-1
  800908:	38e0002c 	andhi	r3,r7,32768
  80090c:	30bfef1e 	bne	r6,r2,8008cc <roundf+0x4c>
  800910:	18cfe034 	orhi	r3,r3,16256
  800914:	180f883a 	mov	r7,r3
  800918:	003fed06 	br	8008d0 <roundf+0x50>

0080091c <pow>:
  80091c:	deffee04 	addi	sp,sp,-72
  800920:	ddc01015 	stw	r23,64(sp)
  800924:	05c02074 	movhi	r23,129
  800928:	bdd82a04 	addi	r23,r23,24744
  80092c:	dd800f15 	stw	r22,60(sp)
  800930:	dd400e15 	stw	r21,56(sp)
  800934:	dd000d15 	stw	r20,52(sp)
  800938:	dcc00c15 	stw	r19,48(sp)
  80093c:	dc800b15 	stw	r18,44(sp)
  800940:	dc400a15 	stw	r17,40(sp)
  800944:	dc000915 	stw	r16,36(sp)
  800948:	2029883a 	mov	r20,r4
  80094c:	dfc01115 	stw	ra,68(sp)
  800950:	3025883a 	mov	r18,r6
  800954:	282b883a 	mov	r21,r5
  800958:	3827883a 	mov	r19,r7
  80095c:	0800da40 	call	800da4 <__ieee754_pow>
  800960:	b9000017 	ldw	r4,0(r23)
  800964:	05bfffc4 	movi	r22,-1
  800968:	1021883a 	mov	r16,r2
  80096c:	1823883a 	mov	r17,r3
  800970:	25800426 	beq	r4,r22,800984 <pow+0x68>
  800974:	9009883a 	mov	r4,r18
  800978:	980b883a 	mov	r5,r19
  80097c:	08023a00 	call	8023a0 <__isnand>
  800980:	10000d26 	beq	r2,zero,8009b8 <pow+0x9c>
  800984:	8005883a 	mov	r2,r16
  800988:	8807883a 	mov	r3,r17
  80098c:	dfc01117 	ldw	ra,68(sp)
  800990:	ddc01017 	ldw	r23,64(sp)
  800994:	dd800f17 	ldw	r22,60(sp)
  800998:	dd400e17 	ldw	r21,56(sp)
  80099c:	dd000d17 	ldw	r20,52(sp)
  8009a0:	dcc00c17 	ldw	r19,48(sp)
  8009a4:	dc800b17 	ldw	r18,44(sp)
  8009a8:	dc400a17 	ldw	r17,40(sp)
  8009ac:	dc000917 	ldw	r16,36(sp)
  8009b0:	dec01204 	addi	sp,sp,72
  8009b4:	f800283a 	ret
  8009b8:	a009883a 	mov	r4,r20
  8009bc:	a80b883a 	mov	r5,r21
  8009c0:	08023a00 	call	8023a0 <__isnand>
  8009c4:	1000151e 	bne	r2,zero,800a1c <pow+0x100>
  8009c8:	000d883a 	mov	r6,zero
  8009cc:	000f883a 	mov	r7,zero
  8009d0:	a009883a 	mov	r4,r20
  8009d4:	a80b883a 	mov	r5,r21
  8009d8:	08039bc0 	call	8039bc <__eqdf2>
  8009dc:	1000541e 	bne	r2,zero,800b30 <pow+0x214>
  8009e0:	000d883a 	mov	r6,zero
  8009e4:	000f883a 	mov	r7,zero
  8009e8:	9009883a 	mov	r4,r18
  8009ec:	980b883a 	mov	r5,r19
  8009f0:	08039bc0 	call	8039bc <__eqdf2>
  8009f4:	10002c1e 	bne	r2,zero,800aa8 <pow+0x18c>
  8009f8:	b8800017 	ldw	r2,0(r23)
  8009fc:	d8000615 	stw	zero,24(sp)
  800a00:	d8000715 	stw	zero,28(sp)
  800a04:	10001226 	beq	r2,zero,800a50 <pow+0x134>
  800a08:	008ffc34 	movhi	r2,16368
  800a0c:	d8800715 	stw	r2,28(sp)
  800a10:	dc000617 	ldw	r16,24(sp)
  800a14:	dc400717 	ldw	r17,28(sp)
  800a18:	003fda06 	br	800984 <pow+0x68>
  800a1c:	000d883a 	mov	r6,zero
  800a20:	000f883a 	mov	r7,zero
  800a24:	9009883a 	mov	r4,r18
  800a28:	980b883a 	mov	r5,r19
  800a2c:	08039bc0 	call	8039bc <__eqdf2>
  800a30:	103fd41e 	bne	r2,zero,800984 <pow+0x68>
  800a34:	b8c00017 	ldw	r3,0(r23)
  800a38:	010ffc34 	movhi	r4,16368
  800a3c:	d8000615 	stw	zero,24(sp)
  800a40:	d9000715 	stw	r4,28(sp)
  800a44:	1d801526 	beq	r3,r22,800a9c <pow+0x180>
  800a48:	00800084 	movi	r2,2
  800a4c:	18801326 	beq	r3,r2,800a9c <pow+0x180>
  800a50:	00802074 	movhi	r2,129
  800a54:	1090bb04 	addi	r2,r2,17132
  800a58:	00c00044 	movi	r3,1
  800a5c:	d809883a 	mov	r4,sp
  800a60:	dcc00515 	stw	r19,20(sp)
  800a64:	dd400315 	stw	r21,12(sp)
  800a68:	d8800115 	stw	r2,4(sp)
  800a6c:	d8c00015 	stw	r3,0(sp)
  800a70:	dc800415 	stw	r18,16(sp)
  800a74:	dd000215 	stw	r20,8(sp)
  800a78:	d8000815 	stw	zero,32(sp)
  800a7c:	08023d00 	call	8023d0 <matherr>
  800a80:	10002726 	beq	r2,zero,800b20 <pow+0x204>
  800a84:	d8800817 	ldw	r2,32(sp)
  800a88:	103fe126 	beq	r2,zero,800a10 <pow+0xf4>
  800a8c:	08046500 	call	804650 <__errno>
  800a90:	d8c00817 	ldw	r3,32(sp)
  800a94:	10c00015 	stw	r3,0(r2)
  800a98:	003fdd06 	br	800a10 <pow+0xf4>
  800a9c:	d9000715 	stw	r4,28(sp)
  800aa0:	d8000615 	stw	zero,24(sp)
  800aa4:	003fda06 	br	800a10 <pow+0xf4>
  800aa8:	9009883a 	mov	r4,r18
  800aac:	980b883a 	mov	r5,r19
  800ab0:	08023840 	call	802384 <finite>
  800ab4:	103fb326 	beq	r2,zero,800984 <pow+0x68>
  800ab8:	000d883a 	mov	r6,zero
  800abc:	000f883a 	mov	r7,zero
  800ac0:	9009883a 	mov	r4,r18
  800ac4:	980b883a 	mov	r5,r19
  800ac8:	0803b540 	call	803b54 <__ltdf2>
  800acc:	103fad0e 	bge	r2,zero,800984 <pow+0x68>
  800ad0:	b9000017 	ldw	r4,0(r23)
  800ad4:	00800044 	movi	r2,1
  800ad8:	00c02074 	movhi	r3,129
  800adc:	18d0bb04 	addi	r3,r3,17132
  800ae0:	d8800015 	stw	r2,0(sp)
  800ae4:	d8c00115 	stw	r3,4(sp)
  800ae8:	dd400315 	stw	r21,12(sp)
  800aec:	dcc00515 	stw	r19,20(sp)
  800af0:	d8000815 	stw	zero,32(sp)
  800af4:	dd000215 	stw	r20,8(sp)
  800af8:	dc800415 	stw	r18,16(sp)
  800afc:	20005626 	beq	r4,zero,800c58 <pow+0x33c>
  800b00:	00bffc34 	movhi	r2,65520
  800b04:	d8800715 	stw	r2,28(sp)
  800b08:	00800084 	movi	r2,2
  800b0c:	d8000615 	stw	zero,24(sp)
  800b10:	20800326 	beq	r4,r2,800b20 <pow+0x204>
  800b14:	d809883a 	mov	r4,sp
  800b18:	08023d00 	call	8023d0 <matherr>
  800b1c:	103fd91e 	bne	r2,zero,800a84 <pow+0x168>
  800b20:	08046500 	call	804650 <__errno>
  800b24:	00c00844 	movi	r3,33
  800b28:	10c00015 	stw	r3,0(r2)
  800b2c:	003fd506 	br	800a84 <pow+0x168>
  800b30:	8009883a 	mov	r4,r16
  800b34:	880b883a 	mov	r5,r17
  800b38:	08023840 	call	802384 <finite>
  800b3c:	10002426 	beq	r2,zero,800bd0 <pow+0x2b4>
  800b40:	000d883a 	mov	r6,zero
  800b44:	000f883a 	mov	r7,zero
  800b48:	8009883a 	mov	r4,r16
  800b4c:	880b883a 	mov	r5,r17
  800b50:	08039bc0 	call	8039bc <__eqdf2>
  800b54:	103f8b1e 	bne	r2,zero,800984 <pow+0x68>
  800b58:	a009883a 	mov	r4,r20
  800b5c:	a80b883a 	mov	r5,r21
  800b60:	08023840 	call	802384 <finite>
  800b64:	103f8726 	beq	r2,zero,800984 <pow+0x68>
  800b68:	9009883a 	mov	r4,r18
  800b6c:	980b883a 	mov	r5,r19
  800b70:	08023840 	call	802384 <finite>
  800b74:	103f8326 	beq	r2,zero,800984 <pow+0x68>
  800b78:	b9000017 	ldw	r4,0(r23)
  800b7c:	00800104 	movi	r2,4
  800b80:	d8800015 	stw	r2,0(sp)
  800b84:	00c02074 	movhi	r3,129
  800b88:	18d0bb04 	addi	r3,r3,17132
  800b8c:	00800084 	movi	r2,2
  800b90:	d8c00115 	stw	r3,4(sp)
  800b94:	dd400315 	stw	r21,12(sp)
  800b98:	dcc00515 	stw	r19,20(sp)
  800b9c:	d8000815 	stw	zero,32(sp)
  800ba0:	dd000215 	stw	r20,8(sp)
  800ba4:	dc800415 	stw	r18,16(sp)
  800ba8:	d8000615 	stw	zero,24(sp)
  800bac:	d8000715 	stw	zero,28(sp)
  800bb0:	20800326 	beq	r4,r2,800bc0 <pow+0x2a4>
  800bb4:	d809883a 	mov	r4,sp
  800bb8:	08023d00 	call	8023d0 <matherr>
  800bbc:	103fb11e 	bne	r2,zero,800a84 <pow+0x168>
  800bc0:	08046500 	call	804650 <__errno>
  800bc4:	00c00884 	movi	r3,34
  800bc8:	10c00015 	stw	r3,0(r2)
  800bcc:	003fad06 	br	800a84 <pow+0x168>
  800bd0:	a009883a 	mov	r4,r20
  800bd4:	a80b883a 	mov	r5,r21
  800bd8:	08023840 	call	802384 <finite>
  800bdc:	103fd826 	beq	r2,zero,800b40 <pow+0x224>
  800be0:	9009883a 	mov	r4,r18
  800be4:	980b883a 	mov	r5,r19
  800be8:	08023840 	call	802384 <finite>
  800bec:	103fd426 	beq	r2,zero,800b40 <pow+0x224>
  800bf0:	880b883a 	mov	r5,r17
  800bf4:	8009883a 	mov	r4,r16
  800bf8:	08023a00 	call	8023a0 <__isnand>
  800bfc:	10001926 	beq	r2,zero,800c64 <pow+0x348>
  800c00:	bc000017 	ldw	r16,0(r23)
  800c04:	00800044 	movi	r2,1
  800c08:	00c02074 	movhi	r3,129
  800c0c:	18d0bb04 	addi	r3,r3,17132
  800c10:	d8800015 	stw	r2,0(sp)
  800c14:	d8c00115 	stw	r3,4(sp)
  800c18:	dd400315 	stw	r21,12(sp)
  800c1c:	dcc00515 	stw	r19,20(sp)
  800c20:	d8000815 	stw	zero,32(sp)
  800c24:	dd000215 	stw	r20,8(sp)
  800c28:	dc800415 	stw	r18,16(sp)
  800c2c:	80000a26 	beq	r16,zero,800c58 <pow+0x33c>
  800c30:	0009883a 	mov	r4,zero
  800c34:	000d883a 	mov	r6,zero
  800c38:	000b883a 	mov	r5,zero
  800c3c:	000f883a 	mov	r7,zero
  800c40:	08037640 	call	803764 <__divdf3>
  800c44:	d8800615 	stw	r2,24(sp)
  800c48:	00800084 	movi	r2,2
  800c4c:	d8c00715 	stw	r3,28(sp)
  800c50:	80bfb01e 	bne	r16,r2,800b14 <pow+0x1f8>
  800c54:	003fb206 	br	800b20 <pow+0x204>
  800c58:	d8000615 	stw	zero,24(sp)
  800c5c:	d8000715 	stw	zero,28(sp)
  800c60:	003fac06 	br	800b14 <pow+0x1f8>
  800c64:	b8800017 	ldw	r2,0(r23)
  800c68:	00c000c4 	movi	r3,3
  800c6c:	01002074 	movhi	r4,129
  800c70:	2110bb04 	addi	r4,r4,17132
  800c74:	d8c00015 	stw	r3,0(sp)
  800c78:	d9000115 	stw	r4,4(sp)
  800c7c:	d8000815 	stw	zero,32(sp)
  800c80:	dd000215 	stw	r20,8(sp)
  800c84:	dd400315 	stw	r21,12(sp)
  800c88:	dc800415 	stw	r18,16(sp)
  800c8c:	dcc00515 	stw	r19,20(sp)
  800c90:	1000251e 	bne	r2,zero,800d28 <pow+0x40c>
  800c94:	05b80034 	movhi	r22,57344
  800c98:	0091fc34 	movhi	r2,18416
  800c9c:	10bfffc4 	addi	r2,r2,-1
  800ca0:	000d883a 	mov	r6,zero
  800ca4:	000f883a 	mov	r7,zero
  800ca8:	a80b883a 	mov	r5,r21
  800cac:	a009883a 	mov	r4,r20
  800cb0:	d8800715 	stw	r2,28(sp)
  800cb4:	dd800615 	stw	r22,24(sp)
  800cb8:	0803b540 	call	803b54 <__ltdf2>
  800cbc:	103fbd0e 	bge	r2,zero,800bb4 <pow+0x298>
  800cc0:	0005883a 	mov	r2,zero
  800cc4:	00cff834 	movhi	r3,16352
  800cc8:	180f883a 	mov	r7,r3
  800ccc:	100d883a 	mov	r6,r2
  800cd0:	980b883a 	mov	r5,r19
  800cd4:	9009883a 	mov	r4,r18
  800cd8:	08033a00 	call	8033a0 <__muldf3>
  800cdc:	1009883a 	mov	r4,r2
  800ce0:	180b883a 	mov	r5,r3
  800ce4:	1021883a 	mov	r16,r2
  800ce8:	1823883a 	mov	r17,r3
  800cec:	08023e80 	call	8023e8 <rint>
  800cf0:	180f883a 	mov	r7,r3
  800cf4:	8009883a 	mov	r4,r16
  800cf8:	880b883a 	mov	r5,r17
  800cfc:	100d883a 	mov	r6,r2
  800d00:	0803a440 	call	803a44 <__nedf2>
  800d04:	10000426 	beq	r2,zero,800d18 <pow+0x3fc>
  800d08:	00b1fc34 	movhi	r2,51184
  800d0c:	10bfffc4 	addi	r2,r2,-1
  800d10:	dd800615 	stw	r22,24(sp)
  800d14:	d8800715 	stw	r2,28(sp)
  800d18:	b8c00017 	ldw	r3,0(r23)
  800d1c:	00800084 	movi	r2,2
  800d20:	18bfa41e 	bne	r3,r2,800bb4 <pow+0x298>
  800d24:	003fa606 	br	800bc0 <pow+0x2a4>
  800d28:	009ffc34 	movhi	r2,32752
  800d2c:	000d883a 	mov	r6,zero
  800d30:	000f883a 	mov	r7,zero
  800d34:	a80b883a 	mov	r5,r21
  800d38:	a009883a 	mov	r4,r20
  800d3c:	d8800715 	stw	r2,28(sp)
  800d40:	d8000615 	stw	zero,24(sp)
  800d44:	0803b540 	call	803b54 <__ltdf2>
  800d48:	103ff30e 	bge	r2,zero,800d18 <pow+0x3fc>
  800d4c:	0005883a 	mov	r2,zero
  800d50:	00cff834 	movhi	r3,16352
  800d54:	180f883a 	mov	r7,r3
  800d58:	100d883a 	mov	r6,r2
  800d5c:	980b883a 	mov	r5,r19
  800d60:	9009883a 	mov	r4,r18
  800d64:	08033a00 	call	8033a0 <__muldf3>
  800d68:	1009883a 	mov	r4,r2
  800d6c:	180b883a 	mov	r5,r3
  800d70:	1021883a 	mov	r16,r2
  800d74:	1823883a 	mov	r17,r3
  800d78:	08023e80 	call	8023e8 <rint>
  800d7c:	180f883a 	mov	r7,r3
  800d80:	8009883a 	mov	r4,r16
  800d84:	880b883a 	mov	r5,r17
  800d88:	100d883a 	mov	r6,r2
  800d8c:	0803a440 	call	803a44 <__nedf2>
  800d90:	103fe126 	beq	r2,zero,800d18 <pow+0x3fc>
  800d94:	00bffc34 	movhi	r2,65520
  800d98:	d8800715 	stw	r2,28(sp)
  800d9c:	d8000615 	stw	zero,24(sp)
  800da0:	003fdd06 	br	800d18 <pow+0x3fc>

00800da4 <__ieee754_pow>:
  800da4:	deffbb04 	addi	sp,sp,-276
  800da8:	3005883a 	mov	r2,r6
  800dac:	dd404015 	stw	r21,256(sp)
  800db0:	dd003f15 	stw	r20,252(sp)
  800db4:	d9802815 	stw	r6,160(sp)
  800db8:	2029883a 	mov	r20,r4
  800dbc:	282b883a 	mov	r21,r5
  800dc0:	3009883a 	mov	r4,r6
  800dc4:	380b883a 	mov	r5,r7
  800dc8:	01a00034 	movhi	r6,32768
  800dcc:	31bfffc4 	addi	r6,r6,-1
  800dd0:	dc003b15 	stw	r16,236(sp)
  800dd4:	29a0703a 	and	r16,r5,r6
  800dd8:	1404b03a 	or	r2,r2,r16
  800ddc:	dd804115 	stw	r22,260(sp)
  800de0:	dc403c15 	stw	r17,240(sp)
  800de4:	d9c02915 	stw	r7,164(sp)
  800de8:	382d883a 	mov	r22,r7
  800dec:	dfc04415 	stw	ra,272(sp)
  800df0:	200f883a 	mov	r7,r4
  800df4:	df004315 	stw	fp,268(sp)
  800df8:	ddc04215 	stw	r23,264(sp)
  800dfc:	dcc03e15 	stw	r19,248(sp)
  800e00:	dc803d15 	stw	r18,244(sp)
  800e04:	a023883a 	mov	r17,r20
  800e08:	2809883a 	mov	r4,r5
  800e0c:	10000826 	beq	r2,zero,800e30 <__ieee754_pow+0x8c>
  800e10:	a9a4703a 	and	r18,r21,r6
  800e14:	009ffc34 	movhi	r2,32752
  800e18:	a827883a 	mov	r19,r21
  800e1c:	1480180e 	bge	r2,r18,800e80 <__ieee754_pow+0xdc>
  800e20:	00b00434 	movhi	r2,49168
  800e24:	9085883a 	add	r2,r18,r2
  800e28:	8884b03a 	or	r2,r17,r2
  800e2c:	1000321e 	bne	r2,zero,800ef8 <__ieee754_pow+0x154>
  800e30:	0009883a 	mov	r4,zero
  800e34:	014ffc34 	movhi	r5,16368
  800e38:	d9002815 	stw	r4,160(sp)
  800e3c:	d9402915 	stw	r5,164(sp)
  800e40:	d9002817 	ldw	r4,160(sp)
  800e44:	d9402917 	ldw	r5,164(sp)
  800e48:	2005883a 	mov	r2,r4
  800e4c:	2807883a 	mov	r3,r5
  800e50:	dfc04417 	ldw	ra,272(sp)
  800e54:	df004317 	ldw	fp,268(sp)
  800e58:	ddc04217 	ldw	r23,264(sp)
  800e5c:	dd804117 	ldw	r22,260(sp)
  800e60:	dd404017 	ldw	r21,256(sp)
  800e64:	dd003f17 	ldw	r20,252(sp)
  800e68:	dcc03e17 	ldw	r19,248(sp)
  800e6c:	dc803d17 	ldw	r18,244(sp)
  800e70:	dc403c17 	ldw	r17,240(sp)
  800e74:	dc003b17 	ldw	r16,236(sp)
  800e78:	dec04504 	addi	sp,sp,276
  800e7c:	f800283a 	ret
  800e80:	90802b26 	beq	r18,r2,800f30 <__ieee754_pow+0x18c>
  800e84:	143fe616 	blt	r2,r16,800e20 <__ieee754_pow+0x7c>
  800e88:	80806126 	beq	r16,r2,801010 <__ieee754_pow+0x26c>
  800e8c:	982e403a 	cmpge	r23,r19,zero
  800e90:	b8004e26 	beq	r23,zero,800fcc <__ieee754_pow+0x228>
  800e94:	0039883a 	mov	fp,zero
  800e98:	3800281e 	bne	r7,zero,800f3c <__ieee754_pow+0x198>
  800e9c:	009ffc34 	movhi	r2,32752
  800ea0:	80804f26 	beq	r16,r2,800fe0 <__ieee754_pow+0x23c>
  800ea4:	008ffc34 	movhi	r2,16368
  800ea8:	80808226 	beq	r16,r2,8010b4 <__ieee754_pow+0x310>
  800eac:	00900034 	movhi	r2,16384
  800eb0:	20828426 	beq	r4,r2,8018c4 <__ieee754_pow+0xb20>
  800eb4:	008ff834 	movhi	r2,16352
  800eb8:	2080201e 	bne	r4,r2,800f3c <__ieee754_pow+0x198>
  800ebc:	98001f16 	blt	r19,zero,800f3c <__ieee754_pow+0x198>
  800ec0:	a80b883a 	mov	r5,r21
  800ec4:	a009883a 	mov	r4,r20
  800ec8:	dfc04417 	ldw	ra,272(sp)
  800ecc:	df004317 	ldw	fp,268(sp)
  800ed0:	ddc04217 	ldw	r23,264(sp)
  800ed4:	dd804117 	ldw	r22,260(sp)
  800ed8:	dd404017 	ldw	r21,256(sp)
  800edc:	dd003f17 	ldw	r20,252(sp)
  800ee0:	dcc03e17 	ldw	r19,248(sp)
  800ee4:	dc803d17 	ldw	r18,244(sp)
  800ee8:	dc403c17 	ldw	r17,240(sp)
  800eec:	dc003b17 	ldw	r16,236(sp)
  800ef0:	dec04504 	addi	sp,sp,276
  800ef4:	08020a41 	jmpi	8020a4 <__ieee754_sqrt>
  800ef8:	01002074 	movhi	r4,129
  800efc:	2110bc04 	addi	r4,r4,17136
  800f00:	dfc04417 	ldw	ra,272(sp)
  800f04:	df004317 	ldw	fp,268(sp)
  800f08:	ddc04217 	ldw	r23,264(sp)
  800f0c:	dd804117 	ldw	r22,260(sp)
  800f10:	dd404017 	ldw	r21,256(sp)
  800f14:	dd003f17 	ldw	r20,252(sp)
  800f18:	dcc03e17 	ldw	r19,248(sp)
  800f1c:	dc803d17 	ldw	r18,244(sp)
  800f20:	dc403c17 	ldw	r17,240(sp)
  800f24:	dc003b17 	ldw	r16,236(sp)
  800f28:	dec04504 	addi	sp,sp,276
  800f2c:	08023d81 	jmpi	8023d8 <nan>
  800f30:	a03fbb1e 	bne	r20,zero,800e20 <__ieee754_pow+0x7c>
  800f34:	003fd306 	br	800e84 <__ieee754_pow+0xe0>
  800f38:	0039883a 	mov	fp,zero
  800f3c:	a009883a 	mov	r4,r20
  800f40:	a80b883a 	mov	r5,r21
  800f44:	080236c0 	call	80236c <fabs>
  800f48:	1015883a 	mov	r10,r2
  800f4c:	1817883a 	mov	r11,r3
  800f50:	88001226 	beq	r17,zero,800f9c <__ieee754_pow+0x1f8>
  800f54:	9804d7fa 	srli	r2,r19,31
  800f58:	10bfffc4 	addi	r2,r2,-1
  800f5c:	1706b03a 	or	r3,r2,fp
  800f60:	d8802515 	stw	r2,148(sp)
  800f64:	18002c1e 	bne	r3,zero,801018 <__ieee754_pow+0x274>
  800f68:	a80f883a 	mov	r7,r21
  800f6c:	a009883a 	mov	r4,r20
  800f70:	a80b883a 	mov	r5,r21
  800f74:	a00d883a 	mov	r6,r20
  800f78:	08032ac0 	call	8032ac <__subdf3>
  800f7c:	1009883a 	mov	r4,r2
  800f80:	180b883a 	mov	r5,r3
  800f84:	100d883a 	mov	r6,r2
  800f88:	180f883a 	mov	r7,r3
  800f8c:	08037640 	call	803764 <__divdf3>
  800f90:	d8802815 	stw	r2,160(sp)
  800f94:	d8c02915 	stw	r3,164(sp)
  800f98:	003fa906 	br	800e40 <__ieee754_pow+0x9c>
  800f9c:	009ffc34 	movhi	r2,32752
  800fa0:	90800326 	beq	r18,r2,800fb0 <__ieee754_pow+0x20c>
  800fa4:	90000226 	beq	r18,zero,800fb0 <__ieee754_pow+0x20c>
  800fa8:	008ffc34 	movhi	r2,16368
  800fac:	90bfe91e 	bne	r18,r2,800f54 <__ieee754_pow+0x1b0>
  800fb0:	b0026316 	blt	r22,zero,801940 <__ieee754_pow+0xb9c>
  800fb4:	5011883a 	mov	r8,r10
  800fb8:	5813883a 	mov	r9,r11
  800fbc:	b8023126 	beq	r23,zero,801884 <__ieee754_pow+0xae0>
  800fc0:	da002815 	stw	r8,160(sp)
  800fc4:	da402915 	stw	r9,164(sp)
  800fc8:	003f9d06 	br	800e40 <__ieee754_pow+0x9c>
  800fcc:	0090d034 	movhi	r2,17216
  800fd0:	10bfffc4 	addi	r2,r2,-1
  800fd4:	1400270e 	bge	r2,r16,801074 <__ieee754_pow+0x2d0>
  800fd8:	07000084 	movi	fp,2
  800fdc:	003fae06 	br	800e98 <__ieee754_pow+0xf4>
  800fe0:	00b00434 	movhi	r2,49168
  800fe4:	9085883a 	add	r2,r18,r2
  800fe8:	8884b03a 	or	r2,r17,r2
  800fec:	103f9026 	beq	r2,zero,800e30 <__ieee754_pow+0x8c>
  800ff0:	008ffc34 	movhi	r2,16368
  800ff4:	10bfffc4 	addi	r2,r2,-1
  800ff8:	1482d00e 	bge	r2,r18,801b3c <__ieee754_pow+0xd98>
  800ffc:	b03f900e 	bge	r22,zero,800e40 <__ieee754_pow+0x9c>
  801000:	0005883a 	mov	r2,zero
  801004:	d8802815 	stw	r2,160(sp)
  801008:	d8802915 	stw	r2,164(sp)
  80100c:	003f8c06 	br	800e40 <__ieee754_pow+0x9c>
  801010:	383f9e26 	beq	r7,zero,800e8c <__ieee754_pow+0xe8>
  801014:	003f8206 	br	800e20 <__ieee754_pow+0x7c>
  801018:	00907834 	movhi	r2,16864
  80101c:	1400290e 	bge	r2,r16,8010c4 <__ieee754_pow+0x320>
  801020:	0090fc34 	movhi	r2,17392
  801024:	1402500e 	bge	r2,r16,801968 <__ieee754_pow+0xbc4>
  801028:	008ffc34 	movhi	r2,16368
  80102c:	10bfffc4 	addi	r2,r2,-1
  801030:	14800b0e 	bge	r2,r18,801060 <__ieee754_pow+0x2bc>
  801034:	05800b0e 	bge	zero,r22,801064 <__ieee754_pow+0x2c0>
  801038:	00a20034 	movhi	r2,34816
  80103c:	109d6704 	addi	r2,r2,30108
  801040:	00df8e34 	movhi	r3,32312
  801044:	18f90f04 	addi	r3,r3,-7108
  801048:	100d883a 	mov	r6,r2
  80104c:	180f883a 	mov	r7,r3
  801050:	1009883a 	mov	r4,r2
  801054:	180b883a 	mov	r5,r3
  801058:	08033a00 	call	8033a0 <__muldf3>
  80105c:	003fcc06 	br	800f90 <__ieee754_pow+0x1ec>
  801060:	b03ff516 	blt	r22,zero,801038 <__ieee754_pow+0x294>
  801064:	0007883a 	mov	r3,zero
  801068:	d8c02815 	stw	r3,160(sp)
  80106c:	d8c02915 	stw	r3,164(sp)
  801070:	003f7306 	br	800e40 <__ieee754_pow+0x9c>
  801074:	008ffc34 	movhi	r2,16368
  801078:	10bfffc4 	addi	r2,r2,-1
  80107c:	143f850e 	bge	r2,r16,800e94 <__ieee754_pow+0xf0>
  801080:	8005d53a 	srai	r2,r16,20
  801084:	01400504 	movi	r5,20
  801088:	10ff0044 	addi	r3,r2,-1023
  80108c:	28c3e10e 	bge	r5,r3,802014 <__ieee754_pow+0x1270>
  801090:	00800d04 	movi	r2,52
  801094:	10c5c83a 	sub	r2,r2,r3
  801098:	3886d83a 	srl	r3,r7,r2
  80109c:	1884983a 	sll	r2,r3,r2
  8010a0:	38bf7c1e 	bne	r7,r2,800e94 <__ieee754_pow+0xf0>
  8010a4:	18c0004c 	andi	r3,r3,1
  8010a8:	00800084 	movi	r2,2
  8010ac:	10f9c83a 	sub	fp,r2,r3
  8010b0:	003f7906 	br	800e98 <__ieee754_pow+0xf4>
  8010b4:	b0038516 	blt	r22,zero,801ecc <__ieee754_pow+0x1128>
  8010b8:	dd002815 	stw	r20,160(sp)
  8010bc:	dd402915 	stw	r21,164(sp)
  8010c0:	003f5f06 	br	800e40 <__ieee754_pow+0x9c>
  8010c4:	00800434 	movhi	r2,16
  8010c8:	10bfffc4 	addi	r2,r2,-1
  8010cc:	1482900e 	bge	r2,r18,801b10 <__ieee754_pow+0xd6c>
  8010d0:	000b883a 	mov	r5,zero
  8010d4:	9005d53a 	srai	r2,r18,20
  8010d8:	00c00434 	movhi	r3,16
  8010dc:	18ffffc4 	addi	r3,r3,-1
  8010e0:	90c8703a 	and	r4,r18,r3
  8010e4:	2887883a 	add	r3,r5,r2
  8010e8:	18bf0044 	addi	r2,r3,-1023
  8010ec:	d8800015 	stw	r2,0(sp)
  8010f0:	00800134 	movhi	r2,4
  8010f4:	10a62384 	addi	r2,r2,-26482
  8010f8:	250ffc34 	orhi	r20,r4,16368
  8010fc:	1101ee0e 	bge	r2,r4,8018b8 <__ieee754_pow+0xb14>
  801100:	00800334 	movhi	r2,12
  801104:	10ad9e44 	addi	r2,r2,-18823
  801108:	1101e716 	blt	r2,r4,8018a8 <__ieee754_pow+0xb04>
  80110c:	01000044 	movi	r4,1
  801110:	04000334 	movhi	r16,12
  801114:	200890fa 	slli	r4,r4,3
  801118:	da800115 	stw	r10,4(sp)
  80111c:	dd000215 	stw	r20,8(sp)
  801120:	d9002c15 	stw	r4,176(sp)
  801124:	d9402c17 	ldw	r5,176(sp)
  801128:	01002074 	movhi	r4,129
  80112c:	2110bd04 	addi	r4,r4,17140
  801130:	a02bd07a 	srai	r21,r20,1
  801134:	2909883a 	add	r4,r5,r4
  801138:	25800017 	ldw	r22,0(r4)
  80113c:	25c00117 	ldw	r23,4(r4)
  801140:	a00b883a 	mov	r5,r20
  801144:	5009883a 	mov	r4,r10
  801148:	b00d883a 	mov	r6,r22
  80114c:	b80f883a 	mov	r7,r23
  801150:	08032ac0 	call	8032ac <__subdf3>
  801154:	d9000117 	ldw	r4,4(sp)
  801158:	a00b883a 	mov	r5,r20
  80115c:	b00d883a 	mov	r6,r22
  801160:	b80f883a 	mov	r7,r23
  801164:	1025883a 	mov	r18,r2
  801168:	1827883a 	mov	r19,r3
  80116c:	080332c0 	call	80332c <__adddf3>
  801170:	0011883a 	mov	r8,zero
  801174:	024ffc34 	movhi	r9,16368
  801178:	480b883a 	mov	r5,r9
  80117c:	4009883a 	mov	r4,r8
  801180:	180f883a 	mov	r7,r3
  801184:	100d883a 	mov	r6,r2
  801188:	08037640 	call	803764 <__divdf3>
  80118c:	d8c02e15 	stw	r3,184(sp)
  801190:	d8800f15 	stw	r2,60(sp)
  801194:	d8802d15 	stw	r2,180(sp)
  801198:	d8802e17 	ldw	r2,184(sp)
  80119c:	d9800f17 	ldw	r6,60(sp)
  8011a0:	9009883a 	mov	r4,r18
  8011a4:	980b883a 	mov	r5,r19
  8011a8:	100f883a 	mov	r7,r2
  8011ac:	dc800b15 	stw	r18,44(sp)
  8011b0:	dcc00c15 	stw	r19,48(sp)
  8011b4:	d8801015 	stw	r2,64(sp)
  8011b8:	08033a00 	call	8033a0 <__muldf3>
  8011bc:	d8c03015 	stw	r3,192(sp)
  8011c0:	d9003017 	ldw	r4,192(sp)
  8011c4:	d8802f15 	stw	r2,188(sp)
  8011c8:	d8800315 	stw	r2,12(sp)
  8011cc:	ad480034 	orhi	r21,r21,8192
  8011d0:	0005883a 	mov	r2,zero
  8011d4:	ac2b883a 	add	r21,r21,r16
  8011d8:	000b883a 	mov	r5,zero
  8011dc:	1021883a 	mov	r16,r2
  8011e0:	2005883a 	mov	r2,r4
  8011e4:	800d883a 	mov	r6,r16
  8011e8:	a80f883a 	mov	r7,r21
  8011ec:	d9000415 	stw	r4,16(sp)
  8011f0:	d9002715 	stw	r4,156(sp)
  8011f4:	d9402615 	stw	r5,152(sp)
  8011f8:	d9401615 	stw	r5,88(sp)
  8011fc:	d9001715 	stw	r4,92(sp)
  801200:	100b883a 	mov	r5,r2
  801204:	0009883a 	mov	r4,zero
  801208:	08033a00 	call	8033a0 <__muldf3>
  80120c:	d9000b17 	ldw	r4,44(sp)
  801210:	980b883a 	mov	r5,r19
  801214:	180f883a 	mov	r7,r3
  801218:	100d883a 	mov	r6,r2
  80121c:	08032ac0 	call	8032ac <__subdf3>
  801220:	8009883a 	mov	r4,r16
  801224:	a80b883a 	mov	r5,r21
  801228:	b80f883a 	mov	r7,r23
  80122c:	b00d883a 	mov	r6,r22
  801230:	1021883a 	mov	r16,r2
  801234:	1823883a 	mov	r17,r3
  801238:	08032ac0 	call	8032ac <__subdf3>
  80123c:	d9000117 	ldw	r4,4(sp)
  801240:	a00b883a 	mov	r5,r20
  801244:	180f883a 	mov	r7,r3
  801248:	100d883a 	mov	r6,r2
  80124c:	08032ac0 	call	8032ac <__subdf3>
  801250:	d9001617 	ldw	r4,88(sp)
  801254:	d9402717 	ldw	r5,156(sp)
  801258:	180f883a 	mov	r7,r3
  80125c:	100d883a 	mov	r6,r2
  801260:	08033a00 	call	8033a0 <__muldf3>
  801264:	180f883a 	mov	r7,r3
  801268:	880b883a 	mov	r5,r17
  80126c:	8009883a 	mov	r4,r16
  801270:	100d883a 	mov	r6,r2
  801274:	08032ac0 	call	8032ac <__subdf3>
  801278:	d9000f17 	ldw	r4,60(sp)
  80127c:	d9402e17 	ldw	r5,184(sp)
  801280:	180f883a 	mov	r7,r3
  801284:	100d883a 	mov	r6,r2
  801288:	08033a00 	call	8033a0 <__muldf3>
  80128c:	d9000317 	ldw	r4,12(sp)
  801290:	d9403017 	ldw	r5,192(sp)
  801294:	d8803115 	stw	r2,196(sp)
  801298:	200d883a 	mov	r6,r4
  80129c:	280f883a 	mov	r7,r5
  8012a0:	d8c03215 	stw	r3,200(sp)
  8012a4:	08033a00 	call	8033a0 <__muldf3>
  8012a8:	1009883a 	mov	r4,r2
  8012ac:	180b883a 	mov	r5,r3
  8012b0:	100d883a 	mov	r6,r2
  8012b4:	180f883a 	mov	r7,r3
  8012b8:	1021883a 	mov	r16,r2
  8012bc:	1823883a 	mov	r17,r3
  8012c0:	08033a00 	call	8033a0 <__muldf3>
  8012c4:	02129174 	movhi	r8,19013
  8012c8:	4213bbc4 	addi	r8,r8,20207
  8012cc:	024ff2b4 	movhi	r9,16330
  8012d0:	4a5f8a04 	addi	r9,r9,32296
  8012d4:	480f883a 	mov	r7,r9
  8012d8:	8009883a 	mov	r4,r16
  8012dc:	880b883a 	mov	r5,r17
  8012e0:	400d883a 	mov	r6,r8
  8012e4:	1029883a 	mov	r20,r2
  8012e8:	182b883a 	mov	r21,r3
  8012ec:	08033a00 	call	8033a0 <__muldf3>
  8012f0:	0224f2b4 	movhi	r8,37834
  8012f4:	4236d944 	addi	r8,r8,-9371
  8012f8:	024ff3b4 	movhi	r9,16334
  8012fc:	4a619284 	addi	r9,r9,-31158
  801300:	480f883a 	mov	r7,r9
  801304:	400d883a 	mov	r6,r8
  801308:	180b883a 	mov	r5,r3
  80130c:	1009883a 	mov	r4,r2
  801310:	080332c0 	call	80332c <__adddf3>
  801314:	180f883a 	mov	r7,r3
  801318:	8009883a 	mov	r4,r16
  80131c:	880b883a 	mov	r5,r17
  801320:	100d883a 	mov	r6,r2
  801324:	08033a00 	call	8033a0 <__muldf3>
  801328:	022a4774 	movhi	r8,43293
  80132c:	42104044 	addi	r8,r8,16641
  801330:	024ff474 	movhi	r9,16337
  801334:	4a5d1804 	addi	r9,r9,29792
  801338:	480f883a 	mov	r7,r9
  80133c:	400d883a 	mov	r6,r8
  801340:	180b883a 	mov	r5,r3
  801344:	1009883a 	mov	r4,r2
  801348:	080332c0 	call	80332c <__adddf3>
  80134c:	180f883a 	mov	r7,r3
  801350:	8009883a 	mov	r4,r16
  801354:	880b883a 	mov	r5,r17
  801358:	100d883a 	mov	r6,r2
  80135c:	08033a00 	call	8033a0 <__muldf3>
  801360:	021463f4 	movhi	r8,20879
  801364:	42099344 	addi	r8,r8,9805
  801368:	024ff574 	movhi	r9,16341
  80136c:	4a555544 	addi	r9,r9,21845
  801370:	480f883a 	mov	r7,r9
  801374:	400d883a 	mov	r6,r8
  801378:	180b883a 	mov	r5,r3
  80137c:	1009883a 	mov	r4,r2
  801380:	080332c0 	call	80332c <__adddf3>
  801384:	180f883a 	mov	r7,r3
  801388:	8009883a 	mov	r4,r16
  80138c:	880b883a 	mov	r5,r17
  801390:	100d883a 	mov	r6,r2
  801394:	08033a00 	call	8033a0 <__muldf3>
  801398:	0236dc34 	movhi	r8,56176
  80139c:	422affc4 	addi	r8,r8,-21505
  8013a0:	024ff6f4 	movhi	r9,16347
  8013a4:	4a5b6d84 	addi	r9,r9,28086
  8013a8:	480f883a 	mov	r7,r9
  8013ac:	400d883a 	mov	r6,r8
  8013b0:	180b883a 	mov	r5,r3
  8013b4:	1009883a 	mov	r4,r2
  8013b8:	080332c0 	call	80332c <__adddf3>
  8013bc:	180f883a 	mov	r7,r3
  8013c0:	8009883a 	mov	r4,r16
  8013c4:	880b883a 	mov	r5,r17
  8013c8:	100d883a 	mov	r6,r2
  8013cc:	08033a00 	call	8033a0 <__muldf3>
  8013d0:	020cccf4 	movhi	r8,13107
  8013d4:	420cc0c4 	addi	r8,r8,13059
  8013d8:	024ff8f4 	movhi	r9,16355
  8013dc:	4a4cccc4 	addi	r9,r9,13107
  8013e0:	480f883a 	mov	r7,r9
  8013e4:	400d883a 	mov	r6,r8
  8013e8:	180b883a 	mov	r5,r3
  8013ec:	1009883a 	mov	r4,r2
  8013f0:	080332c0 	call	80332c <__adddf3>
  8013f4:	180f883a 	mov	r7,r3
  8013f8:	a80b883a 	mov	r5,r21
  8013fc:	a009883a 	mov	r4,r20
  801400:	100d883a 	mov	r6,r2
  801404:	08033a00 	call	8033a0 <__muldf3>
  801408:	d9000317 	ldw	r4,12(sp)
  80140c:	d9403017 	ldw	r5,192(sp)
  801410:	d9801617 	ldw	r6,88(sp)
  801414:	d9c02717 	ldw	r7,156(sp)
  801418:	1021883a 	mov	r16,r2
  80141c:	1823883a 	mov	r17,r3
  801420:	080332c0 	call	80332c <__adddf3>
  801424:	d9003117 	ldw	r4,196(sp)
  801428:	d9403217 	ldw	r5,200(sp)
  80142c:	180f883a 	mov	r7,r3
  801430:	100d883a 	mov	r6,r2
  801434:	d9001415 	stw	r4,80(sp)
  801438:	d9401515 	stw	r5,84(sp)
  80143c:	08033a00 	call	8033a0 <__muldf3>
  801440:	180f883a 	mov	r7,r3
  801444:	8009883a 	mov	r4,r16
  801448:	880b883a 	mov	r5,r17
  80144c:	100d883a 	mov	r6,r2
  801450:	080332c0 	call	80332c <__adddf3>
  801454:	d9001617 	ldw	r4,88(sp)
  801458:	d9402717 	ldw	r5,156(sp)
  80145c:	d8803315 	stw	r2,204(sp)
  801460:	200d883a 	mov	r6,r4
  801464:	280f883a 	mov	r7,r5
  801468:	d8c03415 	stw	r3,208(sp)
  80146c:	08033a00 	call	8033a0 <__muldf3>
  801470:	182f883a 	mov	r23,r3
  801474:	05500234 	movhi	r21,16392
  801478:	0029883a 	mov	r20,zero
  80147c:	b80b883a 	mov	r5,r23
  801480:	a00d883a 	mov	r6,r20
  801484:	a80f883a 	mov	r7,r21
  801488:	1009883a 	mov	r4,r2
  80148c:	d8800715 	stw	r2,28(sp)
  801490:	d8c00815 	stw	r3,32(sp)
  801494:	080332c0 	call	80332c <__adddf3>
  801498:	d9003317 	ldw	r4,204(sp)
  80149c:	d9403417 	ldw	r5,208(sp)
  8014a0:	180f883a 	mov	r7,r3
  8014a4:	100d883a 	mov	r6,r2
  8014a8:	d9000515 	stw	r4,20(sp)
  8014ac:	d9400615 	stw	r5,24(sp)
  8014b0:	080332c0 	call	80332c <__adddf3>
  8014b4:	d9001617 	ldw	r4,88(sp)
  8014b8:	d9402717 	ldw	r5,156(sp)
  8014bc:	0025883a 	mov	r18,zero
  8014c0:	900d883a 	mov	r6,r18
  8014c4:	180f883a 	mov	r7,r3
  8014c8:	1823883a 	mov	r17,r3
  8014cc:	08033a00 	call	8033a0 <__muldf3>
  8014d0:	d9001417 	ldw	r4,80(sp)
  8014d4:	d9403217 	ldw	r5,200(sp)
  8014d8:	880f883a 	mov	r7,r17
  8014dc:	900d883a 	mov	r6,r18
  8014e0:	d8803515 	stw	r2,212(sp)
  8014e4:	d8c03615 	stw	r3,216(sp)
  8014e8:	08033a00 	call	8033a0 <__muldf3>
  8014ec:	a80f883a 	mov	r7,r21
  8014f0:	880b883a 	mov	r5,r17
  8014f4:	000d883a 	mov	r6,zero
  8014f8:	9009883a 	mov	r4,r18
  8014fc:	1021883a 	mov	r16,r2
  801500:	1823883a 	mov	r17,r3
  801504:	08032ac0 	call	8032ac <__subdf3>
  801508:	d9800717 	ldw	r6,28(sp)
  80150c:	b80f883a 	mov	r7,r23
  801510:	180b883a 	mov	r5,r3
  801514:	1009883a 	mov	r4,r2
  801518:	08032ac0 	call	8032ac <__subdf3>
  80151c:	d9000517 	ldw	r4,20(sp)
  801520:	d9403417 	ldw	r5,208(sp)
  801524:	180f883a 	mov	r7,r3
  801528:	100d883a 	mov	r6,r2
  80152c:	08032ac0 	call	8032ac <__subdf3>
  801530:	d9000317 	ldw	r4,12(sp)
  801534:	d9403017 	ldw	r5,192(sp)
  801538:	180f883a 	mov	r7,r3
  80153c:	100d883a 	mov	r6,r2
  801540:	08033a00 	call	8033a0 <__muldf3>
  801544:	180f883a 	mov	r7,r3
  801548:	880b883a 	mov	r5,r17
  80154c:	8009883a 	mov	r4,r16
  801550:	100d883a 	mov	r6,r2
  801554:	080332c0 	call	80332c <__adddf3>
  801558:	102d883a 	mov	r22,r2
  80155c:	d9003617 	ldw	r4,216(sp)
  801560:	d8803517 	ldw	r2,212(sp)
  801564:	d9403617 	ldw	r5,216(sp)
  801568:	182f883a 	mov	r23,r3
  80156c:	b00d883a 	mov	r6,r22
  801570:	b80f883a 	mov	r7,r23
  801574:	d9000a15 	stw	r4,40(sp)
  801578:	1009883a 	mov	r4,r2
  80157c:	054ffbf4 	movhi	r21,16367
  801580:	ad71c244 	addi	r21,r21,-14583
  801584:	dd800d15 	stw	r22,52(sp)
  801588:	ddc00e15 	stw	r23,56(sp)
  80158c:	05380034 	movhi	r20,57344
  801590:	d8800915 	stw	r2,36(sp)
  801594:	080332c0 	call	80332c <__adddf3>
  801598:	180b883a 	mov	r5,r3
  80159c:	a00d883a 	mov	r6,r20
  8015a0:	a80f883a 	mov	r7,r21
  8015a4:	9009883a 	mov	r4,r18
  8015a8:	1823883a 	mov	r17,r3
  8015ac:	08033a00 	call	8033a0 <__muldf3>
  8015b0:	020516f4 	movhi	r8,5211
  8015b4:	42007d44 	addi	r8,r8,501
  8015b8:	026f8fb4 	movhi	r9,48702
  8015bc:	4a4bf804 	addi	r9,r9,12256
  8015c0:	480f883a 	mov	r7,r9
  8015c4:	400d883a 	mov	r6,r8
  8015c8:	880b883a 	mov	r5,r17
  8015cc:	9009883a 	mov	r4,r18
  8015d0:	d8803715 	stw	r2,220(sp)
  8015d4:	d8c03815 	stw	r3,224(sp)
  8015d8:	08033a00 	call	8033a0 <__muldf3>
  8015dc:	d9800917 	ldw	r6,36(sp)
  8015e0:	d9c03617 	ldw	r7,216(sp)
  8015e4:	880b883a 	mov	r5,r17
  8015e8:	9009883a 	mov	r4,r18
  8015ec:	1021883a 	mov	r16,r2
  8015f0:	1823883a 	mov	r17,r3
  8015f4:	08032ac0 	call	8032ac <__subdf3>
  8015f8:	d9000d17 	ldw	r4,52(sp)
  8015fc:	b80b883a 	mov	r5,r23
  801600:	180f883a 	mov	r7,r3
  801604:	100d883a 	mov	r6,r2
  801608:	08032ac0 	call	8032ac <__subdf3>
  80160c:	180b883a 	mov	r5,r3
  801610:	a80f883a 	mov	r7,r21
  801614:	01b70eb4 	movhi	r6,56378
  801618:	3180ff44 	addi	r6,r6,1021
  80161c:	1009883a 	mov	r4,r2
  801620:	08033a00 	call	8033a0 <__muldf3>
  801624:	180f883a 	mov	r7,r3
  801628:	880b883a 	mov	r5,r17
  80162c:	8009883a 	mov	r4,r16
  801630:	100d883a 	mov	r6,r2
  801634:	080332c0 	call	80332c <__adddf3>
  801638:	d9402c17 	ldw	r5,176(sp)
  80163c:	01002074 	movhi	r4,129
  801640:	2110c104 	addi	r4,r4,17156
  801644:	2909883a 	add	r4,r5,r4
  801648:	22400117 	ldw	r9,4(r4)
  80164c:	22000017 	ldw	r8,0(r4)
  801650:	180b883a 	mov	r5,r3
  801654:	480f883a 	mov	r7,r9
  801658:	400d883a 	mov	r6,r8
  80165c:	1009883a 	mov	r4,r2
  801660:	080332c0 	call	80332c <__adddf3>
  801664:	d9000017 	ldw	r4,0(sp)
  801668:	182f883a 	mov	r23,r3
  80166c:	102d883a 	mov	r22,r2
  801670:	0803c640 	call	803c64 <__floatsidf>
  801674:	d9402c17 	ldw	r5,176(sp)
  801678:	01002074 	movhi	r4,129
  80167c:	2110c504 	addi	r4,r4,17172
  801680:	b00d883a 	mov	r6,r22
  801684:	2911883a 	add	r8,r5,r4
  801688:	d9003717 	ldw	r4,220(sp)
  80168c:	d9403817 	ldw	r5,224(sp)
  801690:	45000017 	ldw	r20,0(r8)
  801694:	d9002315 	stw	r4,140(sp)
  801698:	d9003817 	ldw	r4,224(sp)
  80169c:	45400117 	ldw	r21,4(r8)
  8016a0:	b80f883a 	mov	r7,r23
  8016a4:	d9002415 	stw	r4,144(sp)
  8016a8:	d9002317 	ldw	r4,140(sp)
  8016ac:	1021883a 	mov	r16,r2
  8016b0:	1823883a 	mov	r17,r3
  8016b4:	dd802115 	stw	r22,132(sp)
  8016b8:	ddc02215 	stw	r23,136(sp)
  8016bc:	080332c0 	call	80332c <__adddf3>
  8016c0:	180b883a 	mov	r5,r3
  8016c4:	1009883a 	mov	r4,r2
  8016c8:	a00d883a 	mov	r6,r20
  8016cc:	a80f883a 	mov	r7,r21
  8016d0:	080332c0 	call	80332c <__adddf3>
  8016d4:	180f883a 	mov	r7,r3
  8016d8:	8009883a 	mov	r4,r16
  8016dc:	880b883a 	mov	r5,r17
  8016e0:	100d883a 	mov	r6,r2
  8016e4:	080332c0 	call	80332c <__adddf3>
  8016e8:	180b883a 	mov	r5,r3
  8016ec:	0009883a 	mov	r4,zero
  8016f0:	800d883a 	mov	r6,r16
  8016f4:	880f883a 	mov	r7,r17
  8016f8:	d9001b15 	stw	r4,108(sp)
  8016fc:	d8c01c15 	stw	r3,112(sp)
  801700:	08032ac0 	call	8032ac <__subdf3>
  801704:	180b883a 	mov	r5,r3
  801708:	a80f883a 	mov	r7,r21
  80170c:	1009883a 	mov	r4,r2
  801710:	a00d883a 	mov	r6,r20
  801714:	08032ac0 	call	8032ac <__subdf3>
  801718:	d9802317 	ldw	r6,140(sp)
  80171c:	d9c03817 	ldw	r7,224(sp)
  801720:	180b883a 	mov	r5,r3
  801724:	1009883a 	mov	r4,r2
  801728:	08032ac0 	call	8032ac <__subdf3>
  80172c:	d9002117 	ldw	r4,132(sp)
  801730:	1011883a 	mov	r8,r2
  801734:	1813883a 	mov	r9,r3
  801738:	b80b883a 	mov	r5,r23
  80173c:	480f883a 	mov	r7,r9
  801740:	400d883a 	mov	r6,r8
  801744:	08032ac0 	call	8032ac <__subdf3>
  801748:	1823883a 	mov	r17,r3
  80174c:	d8c02517 	ldw	r3,148(sp)
  801750:	1021883a 	mov	r16,r2
  801754:	e0bfffc4 	addi	r2,fp,-1
  801758:	1884b03a 	or	r2,r3,r2
  80175c:	1000731e 	bne	r2,zero,80192c <__ieee754_pow+0xb88>
  801760:	0009883a 	mov	r4,zero
  801764:	016ffc34 	movhi	r5,49136
  801768:	d9001915 	stw	r4,100(sp)
  80176c:	d9401a15 	stw	r5,104(sp)
  801770:	d9402917 	ldw	r5,164(sp)
  801774:	d9002817 	ldw	r4,160(sp)
  801778:	0029883a 	mov	r20,zero
  80177c:	a00d883a 	mov	r6,r20
  801780:	280f883a 	mov	r7,r5
  801784:	2827883a 	mov	r19,r5
  801788:	08032ac0 	call	8032ac <__subdf3>
  80178c:	d9001b17 	ldw	r4,108(sp)
  801790:	d9401c17 	ldw	r5,112(sp)
  801794:	180f883a 	mov	r7,r3
  801798:	100d883a 	mov	r6,r2
  80179c:	08033a00 	call	8033a0 <__muldf3>
  8017a0:	d9c02917 	ldw	r7,164(sp)
  8017a4:	d9802817 	ldw	r6,160(sp)
  8017a8:	880b883a 	mov	r5,r17
  8017ac:	8009883a 	mov	r4,r16
  8017b0:	1823883a 	mov	r17,r3
  8017b4:	1021883a 	mov	r16,r2
  8017b8:	08033a00 	call	8033a0 <__muldf3>
  8017bc:	180f883a 	mov	r7,r3
  8017c0:	880b883a 	mov	r5,r17
  8017c4:	8009883a 	mov	r4,r16
  8017c8:	100d883a 	mov	r6,r2
  8017cc:	080332c0 	call	80332c <__adddf3>
  8017d0:	d9401c17 	ldw	r5,112(sp)
  8017d4:	d9001b17 	ldw	r4,108(sp)
  8017d8:	a00d883a 	mov	r6,r20
  8017dc:	980f883a 	mov	r7,r19
  8017e0:	1029883a 	mov	r20,r2
  8017e4:	182b883a 	mov	r21,r3
  8017e8:	08033a00 	call	8033a0 <__muldf3>
  8017ec:	1025883a 	mov	r18,r2
  8017f0:	1827883a 	mov	r19,r3
  8017f4:	a009883a 	mov	r4,r20
  8017f8:	a80b883a 	mov	r5,r21
  8017fc:	900d883a 	mov	r6,r18
  801800:	980f883a 	mov	r7,r19
  801804:	dd001d15 	stw	r20,116(sp)
  801808:	dc801f15 	stw	r18,124(sp)
  80180c:	dd401e15 	stw	r21,120(sp)
  801810:	dcc02015 	stw	r19,128(sp)
  801814:	080332c0 	call	80332c <__adddf3>
  801818:	1823883a 	mov	r17,r3
  80181c:	01102434 	movhi	r4,16528
  801820:	213fffc4 	addi	r4,r4,-1
  801824:	1021883a 	mov	r16,r2
  801828:	182f883a 	mov	r23,r3
  80182c:	dc401815 	stw	r17,96(sp)
  801830:	100b883a 	mov	r5,r2
  801834:	20c02c0e 	bge	r4,r3,8018e8 <__ieee754_pow+0xb44>
  801838:	00afdc34 	movhi	r2,49008
  80183c:	1885883a 	add	r2,r3,r2
  801840:	2884b03a 	or	r2,r5,r2
  801844:	1001a626 	beq	r2,zero,801ee0 <__ieee754_pow+0x113c>
  801848:	04220034 	movhi	r16,34816
  80184c:	841d6704 	addi	r16,r16,30108
  801850:	045f8e34 	movhi	r17,32312
  801854:	8c790f04 	addi	r17,r17,-7108
  801858:	d9401a17 	ldw	r5,104(sp)
  80185c:	d9001917 	ldw	r4,100(sp)
  801860:	800d883a 	mov	r6,r16
  801864:	880f883a 	mov	r7,r17
  801868:	08033a00 	call	8033a0 <__muldf3>
  80186c:	180b883a 	mov	r5,r3
  801870:	800d883a 	mov	r6,r16
  801874:	880f883a 	mov	r7,r17
  801878:	1009883a 	mov	r4,r2
  80187c:	08033a00 	call	8033a0 <__muldf3>
  801880:	003dc306 	br	800f90 <__ieee754_pow+0x1ec>
  801884:	00b00434 	movhi	r2,49168
  801888:	9085883a 	add	r2,r18,r2
  80188c:	e084b03a 	or	r2,fp,r2
  801890:	1000af1e 	bne	r2,zero,801b50 <__ieee754_pow+0xdac>
  801894:	480f883a 	mov	r7,r9
  801898:	4009883a 	mov	r4,r8
  80189c:	480b883a 	mov	r5,r9
  8018a0:	400d883a 	mov	r6,r8
  8018a4:	003db406 	br	800f78 <__ieee754_pow+0x1d4>
  8018a8:	00bffc34 	movhi	r2,65520
  8018ac:	18ff0084 	addi	r3,r3,-1022
  8018b0:	a0a9883a 	add	r20,r20,r2
  8018b4:	d8c00015 	stw	r3,0(sp)
  8018b8:	0009883a 	mov	r4,zero
  8018bc:	04000234 	movhi	r16,8
  8018c0:	003e1406 	br	801114 <__ieee754_pow+0x370>
  8018c4:	a80f883a 	mov	r7,r21
  8018c8:	a009883a 	mov	r4,r20
  8018cc:	a80b883a 	mov	r5,r21
  8018d0:	a00d883a 	mov	r6,r20
  8018d4:	08033a00 	call	8033a0 <__muldf3>
  8018d8:	180b883a 	mov	r5,r3
  8018dc:	d8802815 	stw	r2,160(sp)
  8018e0:	d9402915 	stw	r5,164(sp)
  8018e4:	003d5606 	br	800e40 <__ieee754_pow+0x9c>
  8018e8:	d9001817 	ldw	r4,96(sp)
  8018ec:	00a00034 	movhi	r2,32768
  8018f0:	10bfffc4 	addi	r2,r2,-1
  8018f4:	00d02474 	movhi	r3,16529
  8018f8:	18f2ffc4 	addi	r3,r3,-13313
  8018fc:	20b8703a 	and	fp,r4,r2
  801900:	1f009d0e 	bge	r3,fp,801b78 <__ieee754_pow+0xdd4>
  801904:	008fdbf4 	movhi	r2,16239
  801908:	108d0004 	addi	r2,r2,13312
  80190c:	2085883a 	add	r2,r4,r2
  801910:	1144b03a 	or	r2,r2,r5
  801914:	1001c626 	beq	r2,zero,802030 <__ieee754_pow+0x128c>
  801918:	0430be74 	movhi	r16,49913
  80191c:	843cd644 	addi	r16,r16,-3239
  801920:	04406974 	movhi	r17,421
  801924:	8c5b87c4 	addi	r17,r17,28191
  801928:	003fcb06 	br	801858 <__ieee754_pow+0xab4>
  80192c:	0005883a 	mov	r2,zero
  801930:	00cffc34 	movhi	r3,16368
  801934:	d8801915 	stw	r2,100(sp)
  801938:	d8c01a15 	stw	r3,104(sp)
  80193c:	003f8c06 	br	801770 <__ieee754_pow+0x9cc>
  801940:	0005883a 	mov	r2,zero
  801944:	00cffc34 	movhi	r3,16368
  801948:	180b883a 	mov	r5,r3
  80194c:	580f883a 	mov	r7,r11
  801950:	1009883a 	mov	r4,r2
  801954:	500d883a 	mov	r6,r10
  801958:	08037640 	call	803764 <__divdf3>
  80195c:	1011883a 	mov	r8,r2
  801960:	1813883a 	mov	r9,r3
  801964:	003d9506 	br	800fbc <__ieee754_pow+0x218>
  801968:	008ffc34 	movhi	r2,16368
  80196c:	10bfff84 	addi	r2,r2,-2
  801970:	14bdbb0e 	bge	r2,r18,801060 <__ieee754_pow+0x2bc>
  801974:	008ffc34 	movhi	r2,16368
  801978:	14bdae16 	blt	r2,r18,801034 <__ieee754_pow+0x290>
  80197c:	580b883a 	mov	r5,r11
  801980:	5009883a 	mov	r4,r10
  801984:	000d883a 	mov	r6,zero
  801988:	100f883a 	mov	r7,r2
  80198c:	08032ac0 	call	8032ac <__subdf3>
  801990:	1021883a 	mov	r16,r2
  801994:	1823883a 	mov	r17,r3
  801998:	00980034 	movhi	r2,24576
  80199c:	00cffdf4 	movhi	r3,16375
  8019a0:	18c551c4 	addi	r3,r3,5447
  8019a4:	8009883a 	mov	r4,r16
  8019a8:	880b883a 	mov	r5,r17
  8019ac:	180f883a 	mov	r7,r3
  8019b0:	100d883a 	mov	r6,r2
  8019b4:	08033a00 	call	8033a0 <__muldf3>
  8019b8:	023e17b4 	movhi	r8,63582
  8019bc:	4237d104 	addi	r8,r8,-8380
  8019c0:	024f9574 	movhi	r9,15957
  8019c4:	4a6b82c4 	addi	r9,r9,-20981
  8019c8:	480f883a 	mov	r7,r9
  8019cc:	400d883a 	mov	r6,r8
  8019d0:	8009883a 	mov	r4,r16
  8019d4:	880b883a 	mov	r5,r17
  8019d8:	102d883a 	mov	r22,r2
  8019dc:	182f883a 	mov	r23,r3
  8019e0:	08033a00 	call	8033a0 <__muldf3>
  8019e4:	8009883a 	mov	r4,r16
  8019e8:	880b883a 	mov	r5,r17
  8019ec:	800d883a 	mov	r6,r16
  8019f0:	880f883a 	mov	r7,r17
  8019f4:	d8802a15 	stw	r2,168(sp)
  8019f8:	d8c02b15 	stw	r3,172(sp)
  8019fc:	08033a00 	call	8033a0 <__muldf3>
  801a00:	0011883a 	mov	r8,zero
  801a04:	026ff434 	movhi	r9,49104
  801a08:	480f883a 	mov	r7,r9
  801a0c:	8009883a 	mov	r4,r16
  801a10:	880b883a 	mov	r5,r17
  801a14:	400d883a 	mov	r6,r8
  801a18:	1029883a 	mov	r20,r2
  801a1c:	182b883a 	mov	r21,r3
  801a20:	08033a00 	call	8033a0 <__muldf3>
  801a24:	02155574 	movhi	r8,21845
  801a28:	42155544 	addi	r8,r8,21845
  801a2c:	024ff574 	movhi	r9,16341
  801a30:	4a555544 	addi	r9,r9,21845
  801a34:	480f883a 	mov	r7,r9
  801a38:	400d883a 	mov	r6,r8
  801a3c:	180b883a 	mov	r5,r3
  801a40:	1009883a 	mov	r4,r2
  801a44:	080332c0 	call	80332c <__adddf3>
  801a48:	180f883a 	mov	r7,r3
  801a4c:	8009883a 	mov	r4,r16
  801a50:	880b883a 	mov	r5,r17
  801a54:	100d883a 	mov	r6,r2
  801a58:	08033a00 	call	8033a0 <__muldf3>
  801a5c:	0011883a 	mov	r8,zero
  801a60:	024ff834 	movhi	r9,16352
  801a64:	480b883a 	mov	r5,r9
  801a68:	4009883a 	mov	r4,r8
  801a6c:	180f883a 	mov	r7,r3
  801a70:	100d883a 	mov	r6,r2
  801a74:	08032ac0 	call	8032ac <__subdf3>
  801a78:	180f883a 	mov	r7,r3
  801a7c:	a80b883a 	mov	r5,r21
  801a80:	a009883a 	mov	r4,r20
  801a84:	100d883a 	mov	r6,r2
  801a88:	08033a00 	call	8033a0 <__muldf3>
  801a8c:	02194b34 	movhi	r8,25900
  801a90:	4220bf84 	addi	r8,r8,-32002
  801a94:	026ffdf4 	movhi	r9,49143
  801a98:	4a4551c4 	addi	r9,r9,5447
  801a9c:	480f883a 	mov	r7,r9
  801aa0:	400d883a 	mov	r6,r8
  801aa4:	180b883a 	mov	r5,r3
  801aa8:	1009883a 	mov	r4,r2
  801aac:	08033a00 	call	8033a0 <__muldf3>
  801ab0:	d9402b17 	ldw	r5,172(sp)
  801ab4:	d9002a17 	ldw	r4,168(sp)
  801ab8:	180f883a 	mov	r7,r3
  801abc:	100d883a 	mov	r6,r2
  801ac0:	080332c0 	call	80332c <__adddf3>
  801ac4:	100d883a 	mov	r6,r2
  801ac8:	b009883a 	mov	r4,r22
  801acc:	b80b883a 	mov	r5,r23
  801ad0:	180f883a 	mov	r7,r3
  801ad4:	1021883a 	mov	r16,r2
  801ad8:	1823883a 	mov	r17,r3
  801adc:	080332c0 	call	80332c <__adddf3>
  801ae0:	180b883a 	mov	r5,r3
  801ae4:	0009883a 	mov	r4,zero
  801ae8:	b00d883a 	mov	r6,r22
  801aec:	b80f883a 	mov	r7,r23
  801af0:	d9001b15 	stw	r4,108(sp)
  801af4:	d8c01c15 	stw	r3,112(sp)
  801af8:	08032ac0 	call	8032ac <__subdf3>
  801afc:	1011883a 	mov	r8,r2
  801b00:	1813883a 	mov	r9,r3
  801b04:	8009883a 	mov	r4,r16
  801b08:	880b883a 	mov	r5,r17
  801b0c:	003f0b06 	br	80173c <__ieee754_pow+0x998>
  801b10:	0005883a 	mov	r2,zero
  801b14:	00d0d034 	movhi	r3,17216
  801b18:	580b883a 	mov	r5,r11
  801b1c:	5009883a 	mov	r4,r10
  801b20:	180f883a 	mov	r7,r3
  801b24:	100d883a 	mov	r6,r2
  801b28:	08033a00 	call	8033a0 <__muldf3>
  801b2c:	1015883a 	mov	r10,r2
  801b30:	1825883a 	mov	r18,r3
  801b34:	017ff2c4 	movi	r5,-53
  801b38:	003d6606 	br	8010d4 <__ieee754_pow+0x330>
  801b3c:	b03d300e 	bge	r22,zero,801000 <__ieee754_pow+0x25c>
  801b40:	d9402917 	ldw	r5,164(sp)
  801b44:	28e0003c 	xorhi	r3,r5,32768
  801b48:	d8c02915 	stw	r3,164(sp)
  801b4c:	003cbc06 	br	800e40 <__ieee754_pow+0x9c>
  801b50:	00800044 	movi	r2,1
  801b54:	e0bd1a1e 	bne	fp,r2,800fc0 <__ieee754_pow+0x21c>
  801b58:	48e0003c 	xorhi	r3,r9,32768
  801b5c:	da002815 	stw	r8,160(sp)
  801b60:	d8c02915 	stw	r3,164(sp)
  801b64:	003cb606 	br	800e40 <__ieee754_pow+0x9c>
  801b68:	d9001817 	ldw	r4,96(sp)
  801b6c:	00a00034 	movhi	r2,32768
  801b70:	10bfffc4 	addi	r2,r2,-1
  801b74:	20b8703a 	and	fp,r4,r2
  801b78:	008ff834 	movhi	r2,16352
  801b7c:	1700fc16 	blt	r2,fp,801f70 <__ieee754_pow+0x11cc>
  801b80:	0039883a 	mov	fp,zero
  801b84:	d8001315 	stw	zero,76(sp)
  801b88:	0025883a 	mov	r18,zero
  801b8c:	0005883a 	mov	r2,zero
  801b90:	00cff9b4 	movhi	r3,16358
  801b94:	18cb90c4 	addi	r3,r3,11843
  801b98:	9009883a 	mov	r4,r18
  801b9c:	b80b883a 	mov	r5,r23
  801ba0:	180f883a 	mov	r7,r3
  801ba4:	100d883a 	mov	r6,r2
  801ba8:	08033a00 	call	8033a0 <__muldf3>
  801bac:	d9c02017 	ldw	r7,128(sp)
  801bb0:	d9801f17 	ldw	r6,124(sp)
  801bb4:	9009883a 	mov	r4,r18
  801bb8:	b80b883a 	mov	r5,r23
  801bbc:	b823883a 	mov	r17,r23
  801bc0:	102d883a 	mov	r22,r2
  801bc4:	182f883a 	mov	r23,r3
  801bc8:	08032ac0 	call	8032ac <__subdf3>
  801bcc:	d9401e17 	ldw	r5,120(sp)
  801bd0:	d9001d17 	ldw	r4,116(sp)
  801bd4:	180f883a 	mov	r7,r3
  801bd8:	100d883a 	mov	r6,r2
  801bdc:	08032ac0 	call	8032ac <__subdf3>
  801be0:	023fbeb4 	movhi	r8,65274
  801be4:	420e7bc4 	addi	r8,r8,14831
  801be8:	024ff9b4 	movhi	r9,16358
  801bec:	4a4b9084 	addi	r9,r9,11842
  801bf0:	480f883a 	mov	r7,r9
  801bf4:	400d883a 	mov	r6,r8
  801bf8:	180b883a 	mov	r5,r3
  801bfc:	1009883a 	mov	r4,r2
  801c00:	08033a00 	call	8033a0 <__muldf3>
  801c04:	02032a34 	movhi	r8,3240
  801c08:	421b0e44 	addi	r8,r8,27705
  801c0c:	026f8834 	movhi	r9,48672
  801c10:	4a571844 	addi	r9,r9,23649
  801c14:	480f883a 	mov	r7,r9
  801c18:	400d883a 	mov	r6,r8
  801c1c:	9009883a 	mov	r4,r18
  801c20:	880b883a 	mov	r5,r17
  801c24:	1021883a 	mov	r16,r2
  801c28:	1823883a 	mov	r17,r3
  801c2c:	08033a00 	call	8033a0 <__muldf3>
  801c30:	180f883a 	mov	r7,r3
  801c34:	880b883a 	mov	r5,r17
  801c38:	8009883a 	mov	r4,r16
  801c3c:	100d883a 	mov	r6,r2
  801c40:	080332c0 	call	80332c <__adddf3>
  801c44:	100d883a 	mov	r6,r2
  801c48:	b009883a 	mov	r4,r22
  801c4c:	b80b883a 	mov	r5,r23
  801c50:	180f883a 	mov	r7,r3
  801c54:	1021883a 	mov	r16,r2
  801c58:	1823883a 	mov	r17,r3
  801c5c:	080332c0 	call	80332c <__adddf3>
  801c60:	1009883a 	mov	r4,r2
  801c64:	180b883a 	mov	r5,r3
  801c68:	b00d883a 	mov	r6,r22
  801c6c:	b80f883a 	mov	r7,r23
  801c70:	d8803915 	stw	r2,228(sp)
  801c74:	d8c03a15 	stw	r3,232(sp)
  801c78:	d8801115 	stw	r2,68(sp)
  801c7c:	d8c01215 	stw	r3,72(sp)
  801c80:	08032ac0 	call	8032ac <__subdf3>
  801c84:	180f883a 	mov	r7,r3
  801c88:	8009883a 	mov	r4,r16
  801c8c:	880b883a 	mov	r5,r17
  801c90:	100d883a 	mov	r6,r2
  801c94:	08032ac0 	call	8032ac <__subdf3>
  801c98:	d9001117 	ldw	r4,68(sp)
  801c9c:	d9403a17 	ldw	r5,232(sp)
  801ca0:	1029883a 	mov	r20,r2
  801ca4:	200d883a 	mov	r6,r4
  801ca8:	280f883a 	mov	r7,r5
  801cac:	182b883a 	mov	r21,r3
  801cb0:	08033a00 	call	8033a0 <__muldf3>
  801cb4:	1021883a 	mov	r16,r2
  801cb8:	1823883a 	mov	r17,r3
  801cbc:	009caff4 	movhi	r2,29375
  801cc0:	10a93404 	addi	r2,r2,-23344
  801cc4:	00cf99b4 	movhi	r3,15974
  801cc8:	18cdda44 	addi	r3,r3,14185
  801ccc:	8009883a 	mov	r4,r16
  801cd0:	880b883a 	mov	r5,r17
  801cd4:	180f883a 	mov	r7,r3
  801cd8:	100d883a 	mov	r6,r2
  801cdc:	08033a00 	call	8033a0 <__muldf3>
  801ce0:	023174b4 	movhi	r8,50642
  801ce4:	421afc44 	addi	r8,r8,27633
  801ce8:	024faf34 	movhi	r9,16060
  801cec:	4a6f5044 	addi	r9,r9,-17087
  801cf0:	480f883a 	mov	r7,r9
  801cf4:	400d883a 	mov	r6,r8
  801cf8:	180b883a 	mov	r5,r3
  801cfc:	1009883a 	mov	r4,r2
  801d00:	08032ac0 	call	8032ac <__subdf3>
  801d04:	180f883a 	mov	r7,r3
  801d08:	8009883a 	mov	r4,r16
  801d0c:	880b883a 	mov	r5,r17
  801d10:	100d883a 	mov	r6,r2
  801d14:	08033a00 	call	8033a0 <__muldf3>
  801d18:	022bc9b4 	movhi	r8,44838
  801d1c:	42378b04 	addi	r8,r8,-8660
  801d20:	024fc474 	movhi	r9,16145
  801d24:	4a559a84 	addi	r9,r9,22122
  801d28:	480f883a 	mov	r7,r9
  801d2c:	400d883a 	mov	r6,r8
  801d30:	180b883a 	mov	r5,r3
  801d34:	1009883a 	mov	r4,r2
  801d38:	080332c0 	call	80332c <__adddf3>
  801d3c:	180f883a 	mov	r7,r3
  801d40:	8009883a 	mov	r4,r16
  801d44:	880b883a 	mov	r5,r17
  801d48:	100d883a 	mov	r6,r2
  801d4c:	08033a00 	call	8033a0 <__muldf3>
  801d50:	0205aff4 	movhi	r8,5823
  801d54:	422f64c4 	addi	r8,r8,-17005
  801d58:	024fd9f4 	movhi	r9,16231
  801d5c:	4a705b04 	addi	r9,r9,-16020
  801d60:	480f883a 	mov	r7,r9
  801d64:	400d883a 	mov	r6,r8
  801d68:	180b883a 	mov	r5,r3
  801d6c:	1009883a 	mov	r4,r2
  801d70:	08032ac0 	call	8032ac <__subdf3>
  801d74:	180f883a 	mov	r7,r3
  801d78:	8009883a 	mov	r4,r16
  801d7c:	880b883a 	mov	r5,r17
  801d80:	100d883a 	mov	r6,r2
  801d84:	08033a00 	call	8033a0 <__muldf3>
  801d88:	02155574 	movhi	r8,21845
  801d8c:	42154f84 	addi	r8,r8,21822
  801d90:	024ff174 	movhi	r9,16325
  801d94:	4a555544 	addi	r9,r9,21845
  801d98:	480f883a 	mov	r7,r9
  801d9c:	400d883a 	mov	r6,r8
  801da0:	180b883a 	mov	r5,r3
  801da4:	1009883a 	mov	r4,r2
  801da8:	080332c0 	call	80332c <__adddf3>
  801dac:	180f883a 	mov	r7,r3
  801db0:	8009883a 	mov	r4,r16
  801db4:	880b883a 	mov	r5,r17
  801db8:	100d883a 	mov	r6,r2
  801dbc:	08033a00 	call	8033a0 <__muldf3>
  801dc0:	d9001117 	ldw	r4,68(sp)
  801dc4:	d9403a17 	ldw	r5,232(sp)
  801dc8:	180f883a 	mov	r7,r3
  801dcc:	100d883a 	mov	r6,r2
  801dd0:	08032ac0 	call	8032ac <__subdf3>
  801dd4:	d9001117 	ldw	r4,68(sp)
  801dd8:	d9403a17 	ldw	r5,232(sp)
  801ddc:	100d883a 	mov	r6,r2
  801de0:	180f883a 	mov	r7,r3
  801de4:	1021883a 	mov	r16,r2
  801de8:	1823883a 	mov	r17,r3
  801dec:	08033a00 	call	8033a0 <__muldf3>
  801df0:	0011883a 	mov	r8,zero
  801df4:	02500034 	movhi	r9,16384
  801df8:	480f883a 	mov	r7,r9
  801dfc:	400d883a 	mov	r6,r8
  801e00:	8009883a 	mov	r4,r16
  801e04:	880b883a 	mov	r5,r17
  801e08:	1021883a 	mov	r16,r2
  801e0c:	1823883a 	mov	r17,r3
  801e10:	08032ac0 	call	8032ac <__subdf3>
  801e14:	180f883a 	mov	r7,r3
  801e18:	880b883a 	mov	r5,r17
  801e1c:	8009883a 	mov	r4,r16
  801e20:	100d883a 	mov	r6,r2
  801e24:	08037640 	call	803764 <__divdf3>
  801e28:	d9001117 	ldw	r4,68(sp)
  801e2c:	d9403a17 	ldw	r5,232(sp)
  801e30:	a00d883a 	mov	r6,r20
  801e34:	a80f883a 	mov	r7,r21
  801e38:	1025883a 	mov	r18,r2
  801e3c:	1827883a 	mov	r19,r3
  801e40:	08033a00 	call	8033a0 <__muldf3>
  801e44:	180f883a 	mov	r7,r3
  801e48:	a009883a 	mov	r4,r20
  801e4c:	a80b883a 	mov	r5,r21
  801e50:	100d883a 	mov	r6,r2
  801e54:	080332c0 	call	80332c <__adddf3>
  801e58:	180f883a 	mov	r7,r3
  801e5c:	980b883a 	mov	r5,r19
  801e60:	9009883a 	mov	r4,r18
  801e64:	100d883a 	mov	r6,r2
  801e68:	08032ac0 	call	8032ac <__subdf3>
  801e6c:	d9801117 	ldw	r6,68(sp)
  801e70:	d9c03a17 	ldw	r7,232(sp)
  801e74:	180b883a 	mov	r5,r3
  801e78:	1009883a 	mov	r4,r2
  801e7c:	08032ac0 	call	8032ac <__subdf3>
  801e80:	0011883a 	mov	r8,zero
  801e84:	024ffc34 	movhi	r9,16368
  801e88:	480b883a 	mov	r5,r9
  801e8c:	180f883a 	mov	r7,r3
  801e90:	4009883a 	mov	r4,r8
  801e94:	100d883a 	mov	r6,r2
  801e98:	08032ac0 	call	8032ac <__subdf3>
  801e9c:	100b883a 	mov	r5,r2
  801ea0:	d8801317 	ldw	r2,76(sp)
  801ea4:	10d5883a 	add	r10,r2,r3
  801ea8:	5005d53a 	srai	r2,r10,20
  801eac:	0080720e 	bge	zero,r2,802078 <__ieee754_pow+0x12d4>
  801eb0:	2811883a 	mov	r8,r5
  801eb4:	5013883a 	mov	r9,r10
  801eb8:	d9c01a17 	ldw	r7,104(sp)
  801ebc:	d9801917 	ldw	r6,100(sp)
  801ec0:	480b883a 	mov	r5,r9
  801ec4:	4009883a 	mov	r4,r8
  801ec8:	003e8206 	br	8018d4 <__ieee754_pow+0xb30>
  801ecc:	0009883a 	mov	r4,zero
  801ed0:	800b883a 	mov	r5,r16
  801ed4:	a80f883a 	mov	r7,r21
  801ed8:	a00d883a 	mov	r6,r20
  801edc:	003c2b06 	br	800f8c <__ieee754_pow+0x1e8>
  801ee0:	d9001d17 	ldw	r4,116(sp)
  801ee4:	00994b34 	movhi	r2,25900
  801ee8:	10a0bf84 	addi	r2,r2,-32002
  801eec:	00cf25f4 	movhi	r3,15511
  801ef0:	18c551c4 	addi	r3,r3,5447
  801ef4:	a80b883a 	mov	r5,r21
  801ef8:	180f883a 	mov	r7,r3
  801efc:	100d883a 	mov	r6,r2
  801f00:	080332c0 	call	80332c <__adddf3>
  801f04:	d9801f17 	ldw	r6,124(sp)
  801f08:	880b883a 	mov	r5,r17
  801f0c:	8009883a 	mov	r4,r16
  801f10:	980f883a 	mov	r7,r19
  801f14:	1021883a 	mov	r16,r2
  801f18:	1823883a 	mov	r17,r3
  801f1c:	08032ac0 	call	8032ac <__subdf3>
  801f20:	180f883a 	mov	r7,r3
  801f24:	880b883a 	mov	r5,r17
  801f28:	8009883a 	mov	r4,r16
  801f2c:	100d883a 	mov	r6,r2
  801f30:	0803acc0 	call	803acc <__gtdf2>
  801f34:	00bf0c0e 	bge	zero,r2,801b68 <__ieee754_pow+0xdc4>
  801f38:	04220034 	movhi	r16,34816
  801f3c:	841d6704 	addi	r16,r16,30108
  801f40:	045f8e34 	movhi	r17,32312
  801f44:	8c790f04 	addi	r17,r17,-7108
  801f48:	d9401a17 	ldw	r5,104(sp)
  801f4c:	d9001917 	ldw	r4,100(sp)
  801f50:	800d883a 	mov	r6,r16
  801f54:	880f883a 	mov	r7,r17
  801f58:	08033a00 	call	8033a0 <__muldf3>
  801f5c:	180b883a 	mov	r5,r3
  801f60:	800d883a 	mov	r6,r16
  801f64:	880f883a 	mov	r7,r17
  801f68:	1009883a 	mov	r4,r2
  801f6c:	003e5906 	br	8018d4 <__ieee754_pow+0xb30>
  801f70:	e005d53a 	srai	r2,fp,20
  801f74:	01800434 	movhi	r6,16
  801f78:	d9401817 	ldw	r5,96(sp)
  801f7c:	10bf0084 	addi	r2,r2,-1022
  801f80:	308dd83a 	sra	r6,r6,r2
  801f84:	02000434 	movhi	r8,16
  801f88:	423fffc4 	addi	r8,r8,-1
  801f8c:	0005883a 	mov	r2,zero
  801f90:	298d883a 	add	r6,r5,r6
  801f94:	318b883a 	add	r5,r6,r6
  801f98:	320e703a 	and	r7,r6,r8
  801f9c:	1013883a 	mov	r9,r2
  801fa0:	280ad57a 	srli	r5,r5,21
  801fa4:	d8801817 	ldw	r2,96(sp)
  801fa8:	01000504 	movi	r4,20
  801fac:	297f0044 	addi	r5,r5,-1023
  801fb0:	4151d83a 	sra	r8,r8,r5
  801fb4:	39c00434 	orhi	r7,r7,16
  801fb8:	2149c83a 	sub	r4,r4,r5
  801fbc:	0210303a 	nor	r8,zero,r8
  801fc0:	3939d83a 	sra	fp,r7,r4
  801fc4:	320e703a 	and	r7,r6,r8
  801fc8:	10002916 	blt	r2,zero,802070 <__ieee754_pow+0x12cc>
  801fcc:	d9402017 	ldw	r5,128(sp)
  801fd0:	d9001f17 	ldw	r4,124(sp)
  801fd4:	480d883a 	mov	r6,r9
  801fd8:	08032ac0 	call	8032ac <__subdf3>
  801fdc:	180b883a 	mov	r5,r3
  801fe0:	d9402015 	stw	r5,128(sp)
  801fe4:	280f883a 	mov	r7,r5
  801fe8:	d9001d17 	ldw	r4,116(sp)
  801fec:	d9401e17 	ldw	r5,120(sp)
  801ff0:	1007883a 	mov	r3,r2
  801ff4:	180d883a 	mov	r6,r3
  801ff8:	d8801f15 	stw	r2,124(sp)
  801ffc:	080332c0 	call	80332c <__adddf3>
  802000:	180b883a 	mov	r5,r3
  802004:	e006953a 	slli	r3,fp,20
  802008:	282f883a 	mov	r23,r5
  80200c:	d8c01315 	stw	r3,76(sp)
  802010:	003edd06 	br	801b88 <__ieee754_pow+0xde4>
  802014:	383bc81e 	bne	r7,zero,800f38 <__ieee754_pow+0x194>
  802018:	28c5c83a 	sub	r2,r5,r3
  80201c:	8087d83a 	sra	r3,r16,r2
  802020:	1884983a 	sll	r2,r3,r2
  802024:	80801b26 	beq	r16,r2,802094 <__ieee754_pow+0x12f0>
  802028:	0039883a 	mov	fp,zero
  80202c:	003b9d06 	br	800ea4 <__ieee754_pow+0x100>
  802030:	d9801f17 	ldw	r6,124(sp)
  802034:	8009883a 	mov	r4,r16
  802038:	880b883a 	mov	r5,r17
  80203c:	980f883a 	mov	r7,r19
  802040:	08032ac0 	call	8032ac <__subdf3>
  802044:	d9001d17 	ldw	r4,116(sp)
  802048:	a80b883a 	mov	r5,r21
  80204c:	180f883a 	mov	r7,r3
  802050:	100d883a 	mov	r6,r2
  802054:	0803bdc0 	call	803bdc <__ledf2>
  802058:	00bfc516 	blt	zero,r2,801f70 <__ieee754_pow+0x11cc>
  80205c:	0430be74 	movhi	r16,49913
  802060:	843cd644 	addi	r16,r16,-3239
  802064:	04406974 	movhi	r17,421
  802068:	8c5b87c4 	addi	r17,r17,28191
  80206c:	003fb606 	br	801f48 <__ieee754_pow+0x11a4>
  802070:	0739c83a 	sub	fp,zero,fp
  802074:	003fd506 	br	801fcc <__ieee754_pow+0x1228>
  802078:	2809883a 	mov	r4,r5
  80207c:	e00d883a 	mov	r6,fp
  802080:	180b883a 	mov	r5,r3
  802084:	08025f80 	call	8025f8 <scalbn>
  802088:	1011883a 	mov	r8,r2
  80208c:	1813883a 	mov	r9,r3
  802090:	003f8906 	br	801eb8 <__ieee754_pow+0x1114>
  802094:	18c0004c 	andi	r3,r3,1
  802098:	00800084 	movi	r2,2
  80209c:	10f9c83a 	sub	fp,r2,r3
  8020a0:	003b8006 	br	800ea4 <__ieee754_pow+0x100>

008020a4 <__ieee754_sqrt>:
  8020a4:	defffd04 	addi	sp,sp,-12
  8020a8:	dc000015 	stw	r16,0(sp)
  8020ac:	009ffc34 	movhi	r2,32752
  8020b0:	2021883a 	mov	r16,r4
  8020b4:	291ffc2c 	andhi	r4,r5,32752
  8020b8:	dc400115 	stw	r17,4(sp)
  8020bc:	dfc00215 	stw	ra,8(sp)
  8020c0:	2823883a 	mov	r17,r5
  8020c4:	280f883a 	mov	r7,r5
  8020c8:	2807883a 	mov	r3,r5
  8020cc:	8011883a 	mov	r8,r16
  8020d0:	20807d26 	beq	r4,r2,8022c8 <__ieee754_sqrt+0x224>
  8020d4:	01408d0e 	bge	zero,r5,80230c <__ieee754_sqrt+0x268>
  8020d8:	380dd53a 	srai	r6,r7,20
  8020dc:	3000131e 	bne	r6,zero,80212c <__ieee754_sqrt+0x88>
  8020e0:	1800041e 	bne	r3,zero,8020f4 <__ieee754_sqrt+0x50>
  8020e4:	400ed2fa 	srli	r7,r8,11
  8020e8:	31bffac4 	addi	r6,r6,-21
  8020ec:	4010957a 	slli	r8,r8,21
  8020f0:	383ffc26 	beq	r7,zero,8020e4 <__ieee754_sqrt+0x40>
  8020f4:	3880042c 	andhi	r2,r7,16
  8020f8:	1000991e 	bne	r2,zero,802360 <__ieee754_sqrt+0x2bc>
  8020fc:	0009883a 	mov	r4,zero
  802100:	39cf883a 	add	r7,r7,r7
  802104:	3880042c 	andhi	r2,r7,16
  802108:	21000044 	addi	r4,r4,1
  80210c:	103ffc26 	beq	r2,zero,802100 <__ieee754_sqrt+0x5c>
  802110:	00800804 	movi	r2,32
  802114:	1105c83a 	sub	r2,r2,r4
  802118:	4086d83a 	srl	r3,r8,r2
  80211c:	4110983a 	sll	r8,r8,r4
  802120:	3105c83a 	sub	r2,r6,r4
  802124:	38ceb03a 	or	r7,r7,r3
  802128:	11800044 	addi	r6,r2,1
  80212c:	31bf0044 	addi	r6,r6,-1023
  802130:	30c0004c 	andi	r3,r6,1
  802134:	00800434 	movhi	r2,16
  802138:	10bfffc4 	addi	r2,r2,-1
  80213c:	3884703a 	and	r2,r7,r2
  802140:	1807003a 	cmpeq	r3,r3,zero
  802144:	11000434 	orhi	r4,r2,16
  802148:	18005426 	beq	r3,zero,80229c <__ieee754_sqrt+0x1f8>
  80214c:	4004d7fa 	srli	r2,r8,31
  802150:	4207883a 	add	r3,r8,r8
  802154:	02800834 	movhi	r10,32
  802158:	1105883a 	add	r2,r2,r4
  80215c:	2089883a 	add	r4,r4,r2
  802160:	0011883a 	mov	r8,zero
  802164:	000b883a 	mov	r5,zero
  802168:	0013883a 	mov	r9,zero
  80216c:	02c00584 	movi	r11,22
  802170:	520f883a 	add	r7,r10,r8
  802174:	1804d7fa 	srli	r2,r3,31
  802178:	4a400044 	addi	r9,r9,1
  80217c:	18c7883a 	add	r3,r3,r3
  802180:	21c00316 	blt	r4,r7,802190 <__ieee754_sqrt+0xec>
  802184:	21c9c83a 	sub	r4,r4,r7
  802188:	2a8b883a 	add	r5,r5,r10
  80218c:	51d1883a 	add	r8,r10,r7
  802190:	1105883a 	add	r2,r2,r4
  802194:	5014d07a 	srli	r10,r10,1
  802198:	2089883a 	add	r4,r4,r2
  80219c:	4afff41e 	bne	r9,r11,802170 <__ieee754_sqrt+0xcc>
  8021a0:	02600034 	movhi	r9,32768
  8021a4:	0017883a 	mov	r11,zero
  8021a8:	0019883a 	mov	r12,zero
  8021ac:	0015883a 	mov	r10,zero
  8021b0:	4821883a 	mov	r16,r9
  8021b4:	03c00804 	movi	r15,32
  8021b8:	00000806 	br	8021dc <__ieee754_sqrt+0x138>
  8021bc:	22003426 	beq	r4,r8,802290 <__ieee754_sqrt+0x1ec>
  8021c0:	1804d7fa 	srli	r2,r3,31
  8021c4:	52800044 	addi	r10,r10,1
  8021c8:	18c7883a 	add	r3,r3,r3
  8021cc:	1105883a 	add	r2,r2,r4
  8021d0:	2089883a 	add	r4,r4,r2
  8021d4:	4812d07a 	srli	r9,r9,1
  8021d8:	53c01326 	beq	r10,r15,802228 <__ieee754_sqrt+0x184>
  8021dc:	4acf883a 	add	r7,r9,r11
  8021e0:	413ff60e 	bge	r8,r4,8021bc <__ieee754_sqrt+0x118>
  8021e4:	38a0002c 	andhi	r2,r7,32768
  8021e8:	3a57883a 	add	r11,r7,r9
  8021ec:	14002426 	beq	r2,r16,802280 <__ieee754_sqrt+0x1dc>
  8021f0:	4005883a 	mov	r2,r8
  8021f4:	2209c83a 	sub	r4,r4,r8
  8021f8:	19c0012e 	bgeu	r3,r7,802200 <__ieee754_sqrt+0x15c>
  8021fc:	213fffc4 	addi	r4,r4,-1
  802200:	19c7c83a 	sub	r3,r3,r7
  802204:	1011883a 	mov	r8,r2
  802208:	1804d7fa 	srli	r2,r3,31
  80220c:	52800044 	addi	r10,r10,1
  802210:	6259883a 	add	r12,r12,r9
  802214:	1105883a 	add	r2,r2,r4
  802218:	18c7883a 	add	r3,r3,r3
  80221c:	2089883a 	add	r4,r4,r2
  802220:	4812d07a 	srli	r9,r9,1
  802224:	53ffed1e 	bne	r10,r15,8021dc <__ieee754_sqrt+0x138>
  802228:	20c4b03a 	or	r2,r4,r3
  80222c:	1000201e 	bne	r2,zero,8022b0 <__ieee754_sqrt+0x20c>
  802230:	600ed07a 	srli	r7,r12,1
  802234:	2880004c 	andi	r2,r5,1
  802238:	1005003a 	cmpeq	r2,r2,zero
  80223c:	1000011e 	bne	r2,zero,802244 <__ieee754_sqrt+0x1a0>
  802240:	39e00034 	orhi	r7,r7,32768
  802244:	300dd07a 	srai	r6,r6,1
  802248:	280bd07a 	srai	r5,r5,1
  80224c:	010ff834 	movhi	r4,16352
  802250:	300c953a 	slli	r6,r6,20
  802254:	290b883a 	add	r5,r5,r4
  802258:	3821883a 	mov	r16,r7
  80225c:	299d883a 	add	r14,r5,r6
  802260:	7023883a 	mov	r17,r14
  802264:	8005883a 	mov	r2,r16
  802268:	8807883a 	mov	r3,r17
  80226c:	dfc00217 	ldw	ra,8(sp)
  802270:	dc400117 	ldw	r17,4(sp)
  802274:	dc000017 	ldw	r16,0(sp)
  802278:	dec00304 	addi	sp,sp,12
  80227c:	f800283a 	ret
  802280:	5884703a 	and	r2,r11,r2
  802284:	103fda1e 	bne	r2,zero,8021f0 <__ieee754_sqrt+0x14c>
  802288:	40800044 	addi	r2,r8,1
  80228c:	003fd906 	br	8021f4 <__ieee754_sqrt+0x150>
  802290:	19ffd42e 	bgeu	r3,r7,8021e4 <__ieee754_sqrt+0x140>
  802294:	2011883a 	mov	r8,r4
  802298:	003fc906 	br	8021c0 <__ieee754_sqrt+0x11c>
  80229c:	4004d7fa 	srli	r2,r8,31
  8022a0:	4211883a 	add	r8,r8,r8
  8022a4:	1105883a 	add	r2,r2,r4
  8022a8:	2089883a 	add	r4,r4,r2
  8022ac:	003fa706 	br	80214c <__ieee754_sqrt+0xa8>
  8022b0:	00bfffc4 	movi	r2,-1
  8022b4:	60802726 	beq	r12,r2,802354 <__ieee754_sqrt+0x2b0>
  8022b8:	6080004c 	andi	r2,r12,1
  8022bc:	6085883a 	add	r2,r12,r2
  8022c0:	100ed07a 	srli	r7,r2,1
  8022c4:	003fdb06 	br	802234 <__ieee754_sqrt+0x190>
  8022c8:	8009883a 	mov	r4,r16
  8022cc:	800d883a 	mov	r6,r16
  8022d0:	08033a00 	call	8033a0 <__muldf3>
  8022d4:	180f883a 	mov	r7,r3
  8022d8:	880b883a 	mov	r5,r17
  8022dc:	8009883a 	mov	r4,r16
  8022e0:	100d883a 	mov	r6,r2
  8022e4:	080332c0 	call	80332c <__adddf3>
  8022e8:	1021883a 	mov	r16,r2
  8022ec:	1823883a 	mov	r17,r3
  8022f0:	8005883a 	mov	r2,r16
  8022f4:	8807883a 	mov	r3,r17
  8022f8:	dfc00217 	ldw	ra,8(sp)
  8022fc:	dc400117 	ldw	r17,4(sp)
  802300:	dc000017 	ldw	r16,0(sp)
  802304:	dec00304 	addi	sp,sp,12
  802308:	f800283a 	ret
  80230c:	00a00034 	movhi	r2,32768
  802310:	10bfffc4 	addi	r2,r2,-1
  802314:	2884703a 	and	r2,r5,r2
  802318:	8084b03a 	or	r2,r16,r2
  80231c:	103fd126 	beq	r2,zero,802264 <__ieee754_sqrt+0x1c0>
  802320:	283f6d26 	beq	r5,zero,8020d8 <__ieee754_sqrt+0x34>
  802324:	280f883a 	mov	r7,r5
  802328:	8009883a 	mov	r4,r16
  80232c:	800d883a 	mov	r6,r16
  802330:	08032ac0 	call	8032ac <__subdf3>
  802334:	1009883a 	mov	r4,r2
  802338:	180b883a 	mov	r5,r3
  80233c:	100d883a 	mov	r6,r2
  802340:	180f883a 	mov	r7,r3
  802344:	08037640 	call	803764 <__divdf3>
  802348:	1021883a 	mov	r16,r2
  80234c:	1823883a 	mov	r17,r3
  802350:	003fc406 	br	802264 <__ieee754_sqrt+0x1c0>
  802354:	29400044 	addi	r5,r5,1
  802358:	000f883a 	mov	r7,zero
  80235c:	003fb506 	br	802234 <__ieee754_sqrt+0x190>
  802360:	0009883a 	mov	r4,zero
  802364:	00800804 	movi	r2,32
  802368:	003f6b06 	br	802118 <__ieee754_sqrt+0x74>

0080236c <fabs>:
  80236c:	01e00034 	movhi	r7,32768
  802370:	39ffffc4 	addi	r7,r7,-1
  802374:	394e703a 	and	r7,r7,r5
  802378:	2005883a 	mov	r2,r4
  80237c:	3807883a 	mov	r3,r7
  802380:	f800283a 	ret

00802384 <finite>:
  802384:	00a00034 	movhi	r2,32768
  802388:	10bfffc4 	addi	r2,r2,-1
  80238c:	2884703a 	and	r2,r5,r2
  802390:	01600434 	movhi	r5,32784
  802394:	1145883a 	add	r2,r2,r5
  802398:	1004d7fa 	srli	r2,r2,31
  80239c:	f800283a 	ret

008023a0 <__isnand>:
  8023a0:	200d883a 	mov	r6,r4
  8023a4:	0109c83a 	sub	r4,zero,r4
  8023a8:	2188b03a 	or	r4,r4,r6
  8023ac:	2008d7fa 	srli	r4,r4,31
  8023b0:	00a00034 	movhi	r2,32768
  8023b4:	10bfffc4 	addi	r2,r2,-1
  8023b8:	1144703a 	and	r2,r2,r5
  8023bc:	2088b03a 	or	r4,r4,r2
  8023c0:	009ffc34 	movhi	r2,32752
  8023c4:	1105c83a 	sub	r2,r2,r4
  8023c8:	1004d7fa 	srli	r2,r2,31
  8023cc:	f800283a 	ret

008023d0 <matherr>:
  8023d0:	0005883a 	mov	r2,zero
  8023d4:	f800283a 	ret

008023d8 <nan>:
  8023d8:	015ffe34 	movhi	r5,32760
  8023dc:	0005883a 	mov	r2,zero
  8023e0:	2807883a 	mov	r3,r5
  8023e4:	f800283a 	ret

008023e8 <rint>:
  8023e8:	2015883a 	mov	r10,r4
  8023ec:	2809d53a 	srai	r4,r5,20
  8023f0:	defff904 	addi	sp,sp,-28
  8023f4:	034004c4 	movi	r13,19
  8023f8:	2101ffcc 	andi	r4,r4,2047
  8023fc:	227f0044 	addi	r9,r4,-1023
  802400:	dc800415 	stw	r18,16(sp)
  802404:	dfc00615 	stw	ra,24(sp)
  802408:	dcc00515 	stw	r19,20(sp)
  80240c:	dc400315 	stw	r17,12(sp)
  802410:	dc000215 	stw	r16,8(sp)
  802414:	2817883a 	mov	r11,r5
  802418:	500d883a 	mov	r6,r10
  80241c:	2824d7fa 	srli	r18,r5,31
  802420:	6a403016 	blt	r13,r9,8024e4 <rint+0xfc>
  802424:	48004916 	blt	r9,zero,80254c <rint+0x164>
  802428:	00800434 	movhi	r2,16
  80242c:	10bfffc4 	addi	r2,r2,-1
  802430:	1247d83a 	sra	r3,r2,r9
  802434:	2809883a 	mov	r4,r5
  802438:	1944703a 	and	r2,r3,r5
  80243c:	5084b03a 	or	r2,r10,r2
  802440:	10001f26 	beq	r2,zero,8024c0 <rint+0xd8>
  802444:	180ad07a 	srli	r5,r3,1
  802448:	5944703a 	and	r2,r11,r5
  80244c:	5084b03a 	or	r2,r10,r2
  802450:	10000626 	beq	r2,zero,80246c <rint+0x84>
  802454:	4b406626 	beq	r9,r13,8025f0 <rint+0x208>
  802458:	00c000b4 	movhi	r3,2
  80245c:	1a47d83a 	sra	r3,r3,r9
  802460:	0144303a 	nor	r2,zero,r5
  802464:	5884703a 	and	r2,r11,r2
  802468:	10c8b03a 	or	r4,r2,r3
  80246c:	900690fa 	slli	r3,r18,3
  802470:	00802074 	movhi	r2,129
  802474:	1090c904 	addi	r2,r2,17188
  802478:	200f883a 	mov	r7,r4
  80247c:	1887883a 	add	r3,r3,r2
  802480:	1c000017 	ldw	r16,0(r3)
  802484:	1c400117 	ldw	r17,4(r3)
  802488:	8009883a 	mov	r4,r16
  80248c:	880b883a 	mov	r5,r17
  802490:	080332c0 	call	80332c <__adddf3>
  802494:	d8800015 	stw	r2,0(sp)
  802498:	d8c00115 	stw	r3,4(sp)
  80249c:	d8800017 	ldw	r2,0(sp)
  8024a0:	d8c00117 	ldw	r3,4(sp)
  8024a4:	880f883a 	mov	r7,r17
  8024a8:	800d883a 	mov	r6,r16
  8024ac:	180b883a 	mov	r5,r3
  8024b0:	1009883a 	mov	r4,r2
  8024b4:	08032ac0 	call	8032ac <__subdf3>
  8024b8:	1015883a 	mov	r10,r2
  8024bc:	1817883a 	mov	r11,r3
  8024c0:	5005883a 	mov	r2,r10
  8024c4:	5807883a 	mov	r3,r11
  8024c8:	dfc00617 	ldw	ra,24(sp)
  8024cc:	dcc00517 	ldw	r19,20(sp)
  8024d0:	dc800417 	ldw	r18,16(sp)
  8024d4:	dc400317 	ldw	r17,12(sp)
  8024d8:	dc000217 	ldw	r16,8(sp)
  8024dc:	dec00704 	addi	sp,sp,28
  8024e0:	f800283a 	ret
  8024e4:	00800cc4 	movi	r2,51
  8024e8:	12400f16 	blt	r2,r9,802528 <rint+0x140>
  8024ec:	213efb44 	addi	r4,r4,-1043
  8024f0:	00bfffc4 	movi	r2,-1
  8024f4:	1104d83a 	srl	r2,r2,r4
  8024f8:	5086703a 	and	r3,r10,r2
  8024fc:	183ff026 	beq	r3,zero,8024c0 <rint+0xd8>
  802500:	100ad07a 	srli	r5,r2,1
  802504:	5144703a 	and	r2,r10,r5
  802508:	10000526 	beq	r2,zero,802520 <rint+0x138>
  80250c:	00d00034 	movhi	r3,16384
  802510:	1907d83a 	sra	r3,r3,r4
  802514:	0144303a 	nor	r2,zero,r5
  802518:	5084703a 	and	r2,r10,r2
  80251c:	10ccb03a 	or	r6,r2,r3
  802520:	5809883a 	mov	r4,r11
  802524:	003fd106 	br	80246c <rint+0x84>
  802528:	00810004 	movi	r2,1024
  80252c:	48bfe41e 	bne	r9,r2,8024c0 <rint+0xd8>
  802530:	5009883a 	mov	r4,r10
  802534:	500d883a 	mov	r6,r10
  802538:	280f883a 	mov	r7,r5
  80253c:	080332c0 	call	80332c <__adddf3>
  802540:	1015883a 	mov	r10,r2
  802544:	1817883a 	mov	r11,r3
  802548:	003fdd06 	br	8024c0 <rint+0xd8>
  80254c:	04e00034 	movhi	r19,32768
  802550:	9cffffc4 	addi	r19,r19,-1
  802554:	2cc4703a 	and	r2,r5,r19
  802558:	5084b03a 	or	r2,r10,r2
  80255c:	103fd826 	beq	r2,zero,8024c0 <rint+0xd8>
  802560:	00c00434 	movhi	r3,16
  802564:	18ffffc4 	addi	r3,r3,-1
  802568:	28c6703a 	and	r3,r5,r3
  80256c:	50c6b03a 	or	r3,r10,r3
  802570:	00cdc83a 	sub	r6,zero,r3
  802574:	900a90fa 	slli	r5,r18,3
  802578:	1986b03a 	or	r3,r3,r6
  80257c:	01002074 	movhi	r4,129
  802580:	2110c904 	addi	r4,r4,17188
  802584:	1806d33a 	srli	r3,r3,12
  802588:	290b883a 	add	r5,r5,r4
  80258c:	2c000017 	ldw	r16,0(r5)
  802590:	2c400117 	ldw	r17,4(r5)
  802594:	593fffac 	andhi	r4,r11,65534
  802598:	18c0022c 	andhi	r3,r3,8
  80259c:	1906b03a 	or	r3,r3,r4
  8025a0:	500d883a 	mov	r6,r10
  8025a4:	180f883a 	mov	r7,r3
  8025a8:	8009883a 	mov	r4,r16
  8025ac:	880b883a 	mov	r5,r17
  8025b0:	080332c0 	call	80332c <__adddf3>
  8025b4:	d8800015 	stw	r2,0(sp)
  8025b8:	d8c00115 	stw	r3,4(sp)
  8025bc:	d8800017 	ldw	r2,0(sp)
  8025c0:	d8c00117 	ldw	r3,4(sp)
  8025c4:	880f883a 	mov	r7,r17
  8025c8:	800d883a 	mov	r6,r16
  8025cc:	180b883a 	mov	r5,r3
  8025d0:	1009883a 	mov	r4,r2
  8025d4:	08032ac0 	call	8032ac <__subdf3>
  8025d8:	901297fa 	slli	r9,r18,31
  8025dc:	98d0703a 	and	r8,r19,r3
  8025e0:	1015883a 	mov	r10,r2
  8025e4:	4250b03a 	or	r8,r8,r9
  8025e8:	4017883a 	mov	r11,r8
  8025ec:	003fb406 	br	8024c0 <rint+0xd8>
  8025f0:	01900034 	movhi	r6,16384
  8025f4:	003f9d06 	br	80246c <rint+0x84>

008025f8 <scalbn>:
  8025f8:	2011883a 	mov	r8,r4
  8025fc:	291ffc2c 	andhi	r4,r5,32752
  802600:	2009d53a 	srai	r4,r4,20
  802604:	defffd04 	addi	sp,sp,-12
  802608:	dc000015 	stw	r16,0(sp)
  80260c:	dfc00215 	stw	ra,8(sp)
  802610:	dc400115 	stw	r17,4(sp)
  802614:	2813883a 	mov	r9,r5
  802618:	2815883a 	mov	r10,r5
  80261c:	3021883a 	mov	r16,r6
  802620:	2000281e 	bne	r4,zero,8026c4 <scalbn+0xcc>
  802624:	00a00034 	movhi	r2,32768
  802628:	10bfffc4 	addi	r2,r2,-1
  80262c:	2884703a 	and	r2,r5,r2
  802630:	4084b03a 	or	r2,r8,r2
  802634:	10001826 	beq	r2,zero,802698 <scalbn+0xa0>
  802638:	0005883a 	mov	r2,zero
  80263c:	00d0d434 	movhi	r3,17232
  802640:	4009883a 	mov	r4,r8
  802644:	100d883a 	mov	r6,r2
  802648:	180f883a 	mov	r7,r3
  80264c:	08033a00 	call	8033a0 <__muldf3>
  802650:	100b883a 	mov	r5,r2
  802654:	1011883a 	mov	r8,r2
  802658:	00bffff4 	movhi	r2,65535
  80265c:	108f2c04 	addi	r2,r2,15536
  802660:	180d883a 	mov	r6,r3
  802664:	1813883a 	mov	r9,r3
  802668:	8080120e 	bge	r16,r2,8026b4 <scalbn+0xbc>
  80266c:	00b0be74 	movhi	r2,49913
  802670:	10bcd644 	addi	r2,r2,-3239
  802674:	00c06974 	movhi	r3,421
  802678:	18db87c4 	addi	r3,r3,28191
  80267c:	2809883a 	mov	r4,r5
  802680:	180f883a 	mov	r7,r3
  802684:	300b883a 	mov	r5,r6
  802688:	100d883a 	mov	r6,r2
  80268c:	08033a00 	call	8033a0 <__muldf3>
  802690:	1011883a 	mov	r8,r2
  802694:	1813883a 	mov	r9,r3
  802698:	4005883a 	mov	r2,r8
  80269c:	4807883a 	mov	r3,r9
  8026a0:	dfc00217 	ldw	ra,8(sp)
  8026a4:	dc400117 	ldw	r17,4(sp)
  8026a8:	dc000017 	ldw	r16,0(sp)
  8026ac:	dec00304 	addi	sp,sp,12
  8026b0:	f800283a 	ret
  8026b4:	189ffc2c 	andhi	r2,r3,32752
  8026b8:	1005d53a 	srai	r2,r2,20
  8026bc:	1815883a 	mov	r10,r3
  8026c0:	113ff284 	addi	r4,r2,-54
  8026c4:	0081ffc4 	movi	r2,2047
  8026c8:	20801126 	beq	r4,r2,802710 <scalbn+0x118>
  8026cc:	2409883a 	add	r4,r4,r16
  8026d0:	0081ff84 	movi	r2,2046
  8026d4:	11001c16 	blt	r2,r4,802748 <scalbn+0x150>
  8026d8:	0100290e 	bge	zero,r4,802780 <scalbn+0x188>
  8026dc:	200a953a 	slli	r5,r4,20
  8026e0:	01200434 	movhi	r4,32784
  8026e4:	213fffc4 	addi	r4,r4,-1
  8026e8:	5108703a 	and	r4,r10,r4
  8026ec:	2148b03a 	or	r4,r4,r5
  8026f0:	2013883a 	mov	r9,r4
  8026f4:	4005883a 	mov	r2,r8
  8026f8:	4807883a 	mov	r3,r9
  8026fc:	dfc00217 	ldw	ra,8(sp)
  802700:	dc400117 	ldw	r17,4(sp)
  802704:	dc000017 	ldw	r16,0(sp)
  802708:	dec00304 	addi	sp,sp,12
  80270c:	f800283a 	ret
  802710:	480f883a 	mov	r7,r9
  802714:	4009883a 	mov	r4,r8
  802718:	480b883a 	mov	r5,r9
  80271c:	400d883a 	mov	r6,r8
  802720:	080332c0 	call	80332c <__adddf3>
  802724:	1011883a 	mov	r8,r2
  802728:	1813883a 	mov	r9,r3
  80272c:	4005883a 	mov	r2,r8
  802730:	4807883a 	mov	r3,r9
  802734:	dfc00217 	ldw	ra,8(sp)
  802738:	dc400117 	ldw	r17,4(sp)
  80273c:	dc000017 	ldw	r16,0(sp)
  802740:	dec00304 	addi	sp,sp,12
  802744:	f800283a 	ret
  802748:	04220034 	movhi	r16,34816
  80274c:	841d6704 	addi	r16,r16,30108
  802750:	045f8e34 	movhi	r17,32312
  802754:	8c790f04 	addi	r17,r17,-7108
  802758:	480f883a 	mov	r7,r9
  80275c:	400d883a 	mov	r6,r8
  802760:	8009883a 	mov	r4,r16
  802764:	880b883a 	mov	r5,r17
  802768:	08027d80 	call	8027d8 <copysign>
  80276c:	180b883a 	mov	r5,r3
  802770:	800d883a 	mov	r6,r16
  802774:	880f883a 	mov	r7,r17
  802778:	1009883a 	mov	r4,r2
  80277c:	003fc306 	br	80268c <scalbn+0x94>
  802780:	00bff284 	movi	r2,-54
  802784:	11000716 	blt	r2,r4,8027a4 <scalbn+0x1ac>
  802788:	00b0d414 	movui	r2,50000
  80278c:	143fee16 	blt	r2,r16,802748 <scalbn+0x150>
  802790:	0430be74 	movhi	r16,49913
  802794:	843cd644 	addi	r16,r16,-3239
  802798:	04406974 	movhi	r17,421
  80279c:	8c5b87c4 	addi	r17,r17,28191
  8027a0:	003fed06 	br	802758 <scalbn+0x160>
  8027a4:	21000d84 	addi	r4,r4,54
  8027a8:	2008953a 	slli	r4,r4,20
  8027ac:	01e00434 	movhi	r7,32784
  8027b0:	39ffffc4 	addi	r7,r7,-1
  8027b4:	51ce703a 	and	r7,r10,r7
  8027b8:	390eb03a 	or	r7,r7,r4
  8027bc:	024f2434 	movhi	r9,15504
  8027c0:	4009883a 	mov	r4,r8
  8027c4:	0011883a 	mov	r8,zero
  8027c8:	380b883a 	mov	r5,r7
  8027cc:	400d883a 	mov	r6,r8
  8027d0:	480f883a 	mov	r7,r9
  8027d4:	003fad06 	br	80268c <scalbn+0x94>

008027d8 <copysign>:
  8027d8:	3813883a 	mov	r9,r7
  8027dc:	01e00034 	movhi	r7,32768
  8027e0:	39ffffc4 	addi	r7,r7,-1
  8027e4:	394e703a 	and	r7,r7,r5
  8027e8:	4aa0002c 	andhi	r10,r9,32768
  8027ec:	3a8eb03a 	or	r7,r7,r10
  8027f0:	2005883a 	mov	r2,r4
  8027f4:	3807883a 	mov	r3,r7
  8027f8:	f800283a 	ret

008027fc <_fpadd_parts>:
  8027fc:	21c00017 	ldw	r7,0(r4)
  802800:	02000044 	movi	r8,1
  802804:	41c0332e 	bgeu	r8,r7,8028d4 <_fpadd_parts+0xd8>
  802808:	28800017 	ldw	r2,0(r5)
  80280c:	4080462e 	bgeu	r8,r2,802928 <_fpadd_parts+0x12c>
  802810:	00c00104 	movi	r3,4
  802814:	38c06b26 	beq	r7,r3,8029c4 <_fpadd_parts+0x1c8>
  802818:	10c04326 	beq	r2,r3,802928 <_fpadd_parts+0x12c>
  80281c:	00c00084 	movi	r3,2
  802820:	10c02e26 	beq	r2,r3,8028dc <_fpadd_parts+0xe0>
  802824:	38c04026 	beq	r7,r3,802928 <_fpadd_parts+0x12c>
  802828:	22800217 	ldw	r10,8(r4)
  80282c:	28c00217 	ldw	r3,8(r5)
  802830:	23000317 	ldw	r12,12(r4)
  802834:	2a400317 	ldw	r9,12(r5)
  802838:	50cfc83a 	sub	r7,r10,r3
  80283c:	3817883a 	mov	r11,r7
  802840:	38004f16 	blt	r7,zero,802980 <_fpadd_parts+0x184>
  802844:	008007c4 	movi	r2,31
  802848:	11c03316 	blt	r2,r7,802918 <_fpadd_parts+0x11c>
  80284c:	02c0540e 	bge	zero,r11,8029a0 <_fpadd_parts+0x1a4>
  802850:	41c4983a 	sll	r2,r8,r7
  802854:	49c6d83a 	srl	r3,r9,r7
  802858:	10bfffc4 	addi	r2,r2,-1
  80285c:	4884703a 	and	r2,r9,r2
  802860:	1004c03a 	cmpne	r2,r2,zero
  802864:	1892b03a 	or	r9,r3,r2
  802868:	20c00117 	ldw	r3,4(r4)
  80286c:	28800117 	ldw	r2,4(r5)
  802870:	18803c26 	beq	r3,r2,802964 <_fpadd_parts+0x168>
  802874:	18002f26 	beq	r3,zero,802934 <_fpadd_parts+0x138>
  802878:	4b05c83a 	sub	r2,r9,r12
  80287c:	10004216 	blt	r2,zero,802988 <_fpadd_parts+0x18c>
  802880:	32800215 	stw	r10,8(r6)
  802884:	30800315 	stw	r2,12(r6)
  802888:	30000115 	stw	zero,4(r6)
  80288c:	31000317 	ldw	r4,12(r6)
  802890:	01d00034 	movhi	r7,16384
  802894:	39ffff84 	addi	r7,r7,-2
  802898:	20bfffc4 	addi	r2,r4,-1
  80289c:	2007883a 	mov	r3,r4
  8028a0:	38800836 	bltu	r7,r2,8028c4 <_fpadd_parts+0xc8>
  8028a4:	31400217 	ldw	r5,8(r6)
  8028a8:	18c9883a 	add	r4,r3,r3
  8028ac:	20bfffc4 	addi	r2,r4,-1
  8028b0:	297fffc4 	addi	r5,r5,-1
  8028b4:	2007883a 	mov	r3,r4
  8028b8:	38bffb2e 	bgeu	r7,r2,8028a8 <_fpadd_parts+0xac>
  8028bc:	31400215 	stw	r5,8(r6)
  8028c0:	31000315 	stw	r4,12(r6)
  8028c4:	008000c4 	movi	r2,3
  8028c8:	30800015 	stw	r2,0(r6)
  8028cc:	20001b16 	blt	r4,zero,80293c <_fpadd_parts+0x140>
  8028d0:	3009883a 	mov	r4,r6
  8028d4:	2005883a 	mov	r2,r4
  8028d8:	f800283a 	ret
  8028dc:	38fffd1e 	bne	r7,r3,8028d4 <_fpadd_parts+0xd8>
  8028e0:	31c00015 	stw	r7,0(r6)
  8028e4:	20800117 	ldw	r2,4(r4)
  8028e8:	30800115 	stw	r2,4(r6)
  8028ec:	20c00217 	ldw	r3,8(r4)
  8028f0:	30c00215 	stw	r3,8(r6)
  8028f4:	20800317 	ldw	r2,12(r4)
  8028f8:	30800315 	stw	r2,12(r6)
  8028fc:	20c00117 	ldw	r3,4(r4)
  802900:	28800117 	ldw	r2,4(r5)
  802904:	3009883a 	mov	r4,r6
  802908:	1886703a 	and	r3,r3,r2
  80290c:	2005883a 	mov	r2,r4
  802910:	30c00115 	stw	r3,4(r6)
  802914:	f800283a 	ret
  802918:	1a801716 	blt	r3,r10,802978 <_fpadd_parts+0x17c>
  80291c:	1815883a 	mov	r10,r3
  802920:	0019883a 	mov	r12,zero
  802924:	003fd006 	br	802868 <_fpadd_parts+0x6c>
  802928:	2809883a 	mov	r4,r5
  80292c:	2005883a 	mov	r2,r4
  802930:	f800283a 	ret
  802934:	6245c83a 	sub	r2,r12,r9
  802938:	003fd006 	br	80287c <_fpadd_parts+0x80>
  80293c:	30800217 	ldw	r2,8(r6)
  802940:	2006d07a 	srli	r3,r4,1
  802944:	2100004c 	andi	r4,r4,1
  802948:	10800044 	addi	r2,r2,1
  80294c:	1906b03a 	or	r3,r3,r4
  802950:	3009883a 	mov	r4,r6
  802954:	30800215 	stw	r2,8(r6)
  802958:	2005883a 	mov	r2,r4
  80295c:	30c00315 	stw	r3,12(r6)
  802960:	f800283a 	ret
  802964:	4b09883a 	add	r4,r9,r12
  802968:	30c00115 	stw	r3,4(r6)
  80296c:	32800215 	stw	r10,8(r6)
  802970:	31000315 	stw	r4,12(r6)
  802974:	003fd306 	br	8028c4 <_fpadd_parts+0xc8>
  802978:	0013883a 	mov	r9,zero
  80297c:	003fba06 	br	802868 <_fpadd_parts+0x6c>
  802980:	01cfc83a 	sub	r7,zero,r7
  802984:	003faf06 	br	802844 <_fpadd_parts+0x48>
  802988:	0089c83a 	sub	r4,zero,r2
  80298c:	00800044 	movi	r2,1
  802990:	30800115 	stw	r2,4(r6)
  802994:	32800215 	stw	r10,8(r6)
  802998:	31000315 	stw	r4,12(r6)
  80299c:	003fbb06 	br	80288c <_fpadd_parts+0x90>
  8029a0:	583fb126 	beq	r11,zero,802868 <_fpadd_parts+0x6c>
  8029a4:	41c4983a 	sll	r2,r8,r7
  8029a8:	61c6d83a 	srl	r3,r12,r7
  8029ac:	51d5883a 	add	r10,r10,r7
  8029b0:	10bfffc4 	addi	r2,r2,-1
  8029b4:	6084703a 	and	r2,r12,r2
  8029b8:	1004c03a 	cmpne	r2,r2,zero
  8029bc:	1898b03a 	or	r12,r3,r2
  8029c0:	003fa906 	br	802868 <_fpadd_parts+0x6c>
  8029c4:	11ffc31e 	bne	r2,r7,8028d4 <_fpadd_parts+0xd8>
  8029c8:	28c00117 	ldw	r3,4(r5)
  8029cc:	20800117 	ldw	r2,4(r4)
  8029d0:	10ffc026 	beq	r2,r3,8028d4 <_fpadd_parts+0xd8>
  8029d4:	01002074 	movhi	r4,129
  8029d8:	2110cd04 	addi	r4,r4,17204
  8029dc:	003fbd06 	br	8028d4 <_fpadd_parts+0xd8>

008029e0 <__subsf3>:
  8029e0:	deffef04 	addi	sp,sp,-68
  8029e4:	dcc00f15 	stw	r19,60(sp)
  8029e8:	dcc00204 	addi	r19,sp,8
  8029ec:	dc400e15 	stw	r17,56(sp)
  8029f0:	d9000015 	stw	r4,0(sp)
  8029f4:	d9400115 	stw	r5,4(sp)
  8029f8:	d809883a 	mov	r4,sp
  8029fc:	980b883a 	mov	r5,r19
  802a00:	dc400604 	addi	r17,sp,24
  802a04:	dfc01015 	stw	ra,64(sp)
  802a08:	08040480 	call	804048 <__unpack_f>
  802a0c:	d9000104 	addi	r4,sp,4
  802a10:	880b883a 	mov	r5,r17
  802a14:	08040480 	call	804048 <__unpack_f>
  802a18:	d8800717 	ldw	r2,28(sp)
  802a1c:	9809883a 	mov	r4,r19
  802a20:	880b883a 	mov	r5,r17
  802a24:	d9800a04 	addi	r6,sp,40
  802a28:	1080005c 	xori	r2,r2,1
  802a2c:	d8800715 	stw	r2,28(sp)
  802a30:	08027fc0 	call	8027fc <_fpadd_parts>
  802a34:	1009883a 	mov	r4,r2
  802a38:	0803ee80 	call	803ee8 <__pack_f>
  802a3c:	dfc01017 	ldw	ra,64(sp)
  802a40:	dcc00f17 	ldw	r19,60(sp)
  802a44:	dc400e17 	ldw	r17,56(sp)
  802a48:	dec01104 	addi	sp,sp,68
  802a4c:	f800283a 	ret

00802a50 <__addsf3>:
  802a50:	deffef04 	addi	sp,sp,-68
  802a54:	dcc00f15 	stw	r19,60(sp)
  802a58:	dcc00204 	addi	r19,sp,8
  802a5c:	dc400e15 	stw	r17,56(sp)
  802a60:	d9000015 	stw	r4,0(sp)
  802a64:	d9400115 	stw	r5,4(sp)
  802a68:	d809883a 	mov	r4,sp
  802a6c:	980b883a 	mov	r5,r19
  802a70:	dc400604 	addi	r17,sp,24
  802a74:	dfc01015 	stw	ra,64(sp)
  802a78:	08040480 	call	804048 <__unpack_f>
  802a7c:	d9000104 	addi	r4,sp,4
  802a80:	880b883a 	mov	r5,r17
  802a84:	08040480 	call	804048 <__unpack_f>
  802a88:	d9800a04 	addi	r6,sp,40
  802a8c:	9809883a 	mov	r4,r19
  802a90:	880b883a 	mov	r5,r17
  802a94:	08027fc0 	call	8027fc <_fpadd_parts>
  802a98:	1009883a 	mov	r4,r2
  802a9c:	0803ee80 	call	803ee8 <__pack_f>
  802aa0:	dfc01017 	ldw	ra,64(sp)
  802aa4:	dcc00f17 	ldw	r19,60(sp)
  802aa8:	dc400e17 	ldw	r17,56(sp)
  802aac:	dec01104 	addi	sp,sp,68
  802ab0:	f800283a 	ret

00802ab4 <__mulsf3>:
  802ab4:	deffef04 	addi	sp,sp,-68
  802ab8:	dc400f15 	stw	r17,60(sp)
  802abc:	dc400204 	addi	r17,sp,8
  802ac0:	dc000e15 	stw	r16,56(sp)
  802ac4:	d9000015 	stw	r4,0(sp)
  802ac8:	d9400115 	stw	r5,4(sp)
  802acc:	d809883a 	mov	r4,sp
  802ad0:	880b883a 	mov	r5,r17
  802ad4:	dc000604 	addi	r16,sp,24
  802ad8:	dfc01015 	stw	ra,64(sp)
  802adc:	08040480 	call	804048 <__unpack_f>
  802ae0:	d9000104 	addi	r4,sp,4
  802ae4:	800b883a 	mov	r5,r16
  802ae8:	08040480 	call	804048 <__unpack_f>
  802aec:	d9000217 	ldw	r4,8(sp)
  802af0:	00800044 	movi	r2,1
  802af4:	01400104 	movi	r5,4
  802af8:	1100142e 	bgeu	r2,r4,802b4c <__mulsf3+0x98>
  802afc:	d8c00617 	ldw	r3,24(sp)
  802b00:	10c0052e 	bgeu	r2,r3,802b18 <__mulsf3+0x64>
  802b04:	21400f26 	beq	r4,r5,802b44 <__mulsf3+0x90>
  802b08:	19405d26 	beq	r3,r5,802c80 <__mulsf3+0x1cc>
  802b0c:	00800084 	movi	r2,2
  802b10:	20800e26 	beq	r4,r2,802b4c <__mulsf3+0x98>
  802b14:	1880181e 	bne	r3,r2,802b78 <__mulsf3+0xc4>
  802b18:	d8c00717 	ldw	r3,28(sp)
  802b1c:	d8800317 	ldw	r2,12(sp)
  802b20:	8009883a 	mov	r4,r16
  802b24:	10c4c03a 	cmpne	r2,r2,r3
  802b28:	d8800715 	stw	r2,28(sp)
  802b2c:	0803ee80 	call	803ee8 <__pack_f>
  802b30:	dfc01017 	ldw	ra,64(sp)
  802b34:	dc400f17 	ldw	r17,60(sp)
  802b38:	dc000e17 	ldw	r16,56(sp)
  802b3c:	dec01104 	addi	sp,sp,68
  802b40:	f800283a 	ret
  802b44:	00800084 	movi	r2,2
  802b48:	18804f26 	beq	r3,r2,802c88 <__mulsf3+0x1d4>
  802b4c:	d8800317 	ldw	r2,12(sp)
  802b50:	d8c00717 	ldw	r3,28(sp)
  802b54:	8809883a 	mov	r4,r17
  802b58:	10c4c03a 	cmpne	r2,r2,r3
  802b5c:	d8800315 	stw	r2,12(sp)
  802b60:	0803ee80 	call	803ee8 <__pack_f>
  802b64:	dfc01017 	ldw	ra,64(sp)
  802b68:	dc400f17 	ldw	r17,60(sp)
  802b6c:	dc000e17 	ldw	r16,56(sp)
  802b70:	dec01104 	addi	sp,sp,68
  802b74:	f800283a 	ret
  802b78:	d8800517 	ldw	r2,20(sp)
  802b7c:	da000917 	ldw	r8,36(sp)
  802b80:	0013883a 	mov	r9,zero
  802b84:	0007883a 	mov	r3,zero
  802b88:	480f883a 	mov	r7,r9
  802b8c:	180b883a 	mov	r5,r3
  802b90:	400d883a 	mov	r6,r8
  802b94:	1009883a 	mov	r4,r2
  802b98:	0803dd00 	call	803dd0 <__muldi3>
  802b9c:	da800417 	ldw	r10,16(sp)
  802ba0:	d9800817 	ldw	r6,32(sp)
  802ba4:	da400317 	ldw	r9,12(sp)
  802ba8:	52800084 	addi	r10,r10,2
  802bac:	3295883a 	add	r10,r6,r10
  802bb0:	d9800717 	ldw	r6,28(sp)
  802bb4:	180b883a 	mov	r5,r3
  802bb8:	180f883a 	mov	r7,r3
  802bbc:	4992c03a 	cmpne	r9,r9,r6
  802bc0:	da400b15 	stw	r9,44(sp)
  802bc4:	1007883a 	mov	r3,r2
  802bc8:	da800c15 	stw	r10,48(sp)
  802bcc:	2800070e 	bge	r5,zero,802bec <__mulsf3+0x138>
  802bd0:	2880004c 	andi	r2,r5,1
  802bd4:	1005003a 	cmpeq	r2,r2,zero
  802bd8:	500d883a 	mov	r6,r10
  802bdc:	10001e26 	beq	r2,zero,802c58 <__mulsf3+0x1a4>
  802be0:	380ed07a 	srli	r7,r7,1
  802be4:	31800044 	addi	r6,r6,1
  802be8:	d9800c15 	stw	r6,48(sp)
  802bec:	01100034 	movhi	r4,16384
  802bf0:	213fffc4 	addi	r4,r4,-1
  802bf4:	21c00b36 	bltu	r4,r7,802c24 <__mulsf3+0x170>
  802bf8:	d8800c17 	ldw	r2,48(sp)
  802bfc:	00000206 	br	802c08 <__mulsf3+0x154>
  802c00:	18c7883a 	add	r3,r3,r3
  802c04:	21c00636 	bltu	r4,r7,802c20 <__mulsf3+0x16c>
  802c08:	10bfffc4 	addi	r2,r2,-1
  802c0c:	39cf883a 	add	r7,r7,r7
  802c10:	183ffb0e 	bge	r3,zero,802c00 <__mulsf3+0x14c>
  802c14:	39c00054 	ori	r7,r7,1
  802c18:	18c7883a 	add	r3,r3,r3
  802c1c:	21fffa2e 	bgeu	r4,r7,802c08 <__mulsf3+0x154>
  802c20:	d8800c15 	stw	r2,48(sp)
  802c24:	39001fcc 	andi	r4,r7,127
  802c28:	00801004 	movi	r2,64
  802c2c:	20800d26 	beq	r4,r2,802c64 <__mulsf3+0x1b0>
  802c30:	008000c4 	movi	r2,3
  802c34:	d9000a04 	addi	r4,sp,40
  802c38:	d9c00d15 	stw	r7,52(sp)
  802c3c:	d8800a15 	stw	r2,40(sp)
  802c40:	0803ee80 	call	803ee8 <__pack_f>
  802c44:	dfc01017 	ldw	ra,64(sp)
  802c48:	dc400f17 	ldw	r17,60(sp)
  802c4c:	dc000e17 	ldw	r16,56(sp)
  802c50:	dec01104 	addi	sp,sp,68
  802c54:	f800283a 	ret
  802c58:	1804d07a 	srli	r2,r3,1
  802c5c:	10e00034 	orhi	r3,r2,32768
  802c60:	003fdf06 	br	802be0 <__mulsf3+0x12c>
  802c64:	3880200c 	andi	r2,r7,128
  802c68:	103ff11e 	bne	r2,zero,802c30 <__mulsf3+0x17c>
  802c6c:	183ff026 	beq	r3,zero,802c30 <__mulsf3+0x17c>
  802c70:	3907883a 	add	r3,r7,r4
  802c74:	00bfe004 	movi	r2,-128
  802c78:	188e703a 	and	r7,r3,r2
  802c7c:	003fec06 	br	802c30 <__mulsf3+0x17c>
  802c80:	00800084 	movi	r2,2
  802c84:	20bfa41e 	bne	r4,r2,802b18 <__mulsf3+0x64>
  802c88:	01002074 	movhi	r4,129
  802c8c:	2110cd04 	addi	r4,r4,17204
  802c90:	003fb306 	br	802b60 <__mulsf3+0xac>

00802c94 <__divsf3>:
  802c94:	defff304 	addi	sp,sp,-52
  802c98:	dc400b15 	stw	r17,44(sp)
  802c9c:	dc400204 	addi	r17,sp,8
  802ca0:	dc000a15 	stw	r16,40(sp)
  802ca4:	d9000015 	stw	r4,0(sp)
  802ca8:	d9400115 	stw	r5,4(sp)
  802cac:	d809883a 	mov	r4,sp
  802cb0:	880b883a 	mov	r5,r17
  802cb4:	dc000604 	addi	r16,sp,24
  802cb8:	dfc00c15 	stw	ra,48(sp)
  802cbc:	08040480 	call	804048 <__unpack_f>
  802cc0:	d9000104 	addi	r4,sp,4
  802cc4:	800b883a 	mov	r5,r16
  802cc8:	08040480 	call	804048 <__unpack_f>
  802ccc:	d9000217 	ldw	r4,8(sp)
  802cd0:	00800044 	movi	r2,1
  802cd4:	01800104 	movi	r6,4
  802cd8:	11000a2e 	bgeu	r2,r4,802d04 <__divsf3+0x70>
  802cdc:	d9400617 	ldw	r5,24(sp)
  802ce0:	1140432e 	bgeu	r2,r5,802df0 <__divsf3+0x15c>
  802ce4:	d8800317 	ldw	r2,12(sp)
  802ce8:	d8c00717 	ldw	r3,28(sp)
  802cec:	10c4f03a 	xor	r2,r2,r3
  802cf0:	d8800315 	stw	r2,12(sp)
  802cf4:	21800226 	beq	r4,r6,802d00 <__divsf3+0x6c>
  802cf8:	00800084 	movi	r2,2
  802cfc:	2080101e 	bne	r4,r2,802d40 <__divsf3+0xac>
  802d00:	29000726 	beq	r5,r4,802d20 <__divsf3+0x8c>
  802d04:	8809883a 	mov	r4,r17
  802d08:	0803ee80 	call	803ee8 <__pack_f>
  802d0c:	dfc00c17 	ldw	ra,48(sp)
  802d10:	dc400b17 	ldw	r17,44(sp)
  802d14:	dc000a17 	ldw	r16,40(sp)
  802d18:	dec00d04 	addi	sp,sp,52
  802d1c:	f800283a 	ret
  802d20:	01002074 	movhi	r4,129
  802d24:	2110cd04 	addi	r4,r4,17204
  802d28:	0803ee80 	call	803ee8 <__pack_f>
  802d2c:	dfc00c17 	ldw	ra,48(sp)
  802d30:	dc400b17 	ldw	r17,44(sp)
  802d34:	dc000a17 	ldw	r16,40(sp)
  802d38:	dec00d04 	addi	sp,sp,52
  802d3c:	f800283a 	ret
  802d40:	29802d26 	beq	r5,r6,802df8 <__divsf3+0x164>
  802d44:	28801a26 	beq	r5,r2,802db0 <__divsf3+0x11c>
  802d48:	d8c00417 	ldw	r3,16(sp)
  802d4c:	d8800817 	ldw	r2,32(sp)
  802d50:	d9000517 	ldw	r4,20(sp)
  802d54:	d9800917 	ldw	r6,36(sp)
  802d58:	1885c83a 	sub	r2,r3,r2
  802d5c:	d8800415 	stw	r2,16(sp)
  802d60:	2180032e 	bgeu	r4,r6,802d70 <__divsf3+0xdc>
  802d64:	10bfffc4 	addi	r2,r2,-1
  802d68:	d8800415 	stw	r2,16(sp)
  802d6c:	2109883a 	add	r4,r4,r4
  802d70:	01500034 	movhi	r5,16384
  802d74:	0007883a 	mov	r3,zero
  802d78:	0005883a 	mov	r2,zero
  802d7c:	01c007c4 	movi	r7,31
  802d80:	10800044 	addi	r2,r2,1
  802d84:	21800236 	bltu	r4,r6,802d90 <__divsf3+0xfc>
  802d88:	1946b03a 	or	r3,r3,r5
  802d8c:	2189c83a 	sub	r4,r4,r6
  802d90:	280ad07a 	srli	r5,r5,1
  802d94:	2109883a 	add	r4,r4,r4
  802d98:	11fff91e 	bne	r2,r7,802d80 <__divsf3+0xec>
  802d9c:	19401fcc 	andi	r5,r3,127
  802da0:	00801004 	movi	r2,64
  802da4:	28800a26 	beq	r5,r2,802dd0 <__divsf3+0x13c>
  802da8:	d8c00515 	stw	r3,20(sp)
  802dac:	003fd506 	br	802d04 <__divsf3+0x70>
  802db0:	8809883a 	mov	r4,r17
  802db4:	d9800215 	stw	r6,8(sp)
  802db8:	0803ee80 	call	803ee8 <__pack_f>
  802dbc:	dfc00c17 	ldw	ra,48(sp)
  802dc0:	dc400b17 	ldw	r17,44(sp)
  802dc4:	dc000a17 	ldw	r16,40(sp)
  802dc8:	dec00d04 	addi	sp,sp,52
  802dcc:	f800283a 	ret
  802dd0:	1880200c 	andi	r2,r3,128
  802dd4:	103ff41e 	bne	r2,zero,802da8 <__divsf3+0x114>
  802dd8:	203ff326 	beq	r4,zero,802da8 <__divsf3+0x114>
  802ddc:	1947883a 	add	r3,r3,r5
  802de0:	00bfe004 	movi	r2,-128
  802de4:	1886703a 	and	r3,r3,r2
  802de8:	d8c00515 	stw	r3,20(sp)
  802dec:	003fc506 	br	802d04 <__divsf3+0x70>
  802df0:	8009883a 	mov	r4,r16
  802df4:	003fc406 	br	802d08 <__divsf3+0x74>
  802df8:	8809883a 	mov	r4,r17
  802dfc:	d8000515 	stw	zero,20(sp)
  802e00:	d8000415 	stw	zero,16(sp)
  802e04:	003fc006 	br	802d08 <__divsf3+0x74>

00802e08 <__fixsfsi>:
  802e08:	defffa04 	addi	sp,sp,-24
  802e0c:	d9000015 	stw	r4,0(sp)
  802e10:	d9400104 	addi	r5,sp,4
  802e14:	d809883a 	mov	r4,sp
  802e18:	dfc00515 	stw	ra,20(sp)
  802e1c:	08040480 	call	804048 <__unpack_f>
  802e20:	d8c00117 	ldw	r3,4(sp)
  802e24:	00800084 	movi	r2,2
  802e28:	1880041e 	bne	r3,r2,802e3c <__fixsfsi+0x34>
  802e2c:	0005883a 	mov	r2,zero
  802e30:	dfc00517 	ldw	ra,20(sp)
  802e34:	dec00604 	addi	sp,sp,24
  802e38:	f800283a 	ret
  802e3c:	00800044 	movi	r2,1
  802e40:	10fffa2e 	bgeu	r2,r3,802e2c <__fixsfsi+0x24>
  802e44:	00800104 	movi	r2,4
  802e48:	18800426 	beq	r3,r2,802e5c <__fixsfsi+0x54>
  802e4c:	d8800317 	ldw	r2,12(sp)
  802e50:	103ff616 	blt	r2,zero,802e2c <__fixsfsi+0x24>
  802e54:	00c00784 	movi	r3,30
  802e58:	1880070e 	bge	r3,r2,802e78 <__fixsfsi+0x70>
  802e5c:	d8800217 	ldw	r2,8(sp)
  802e60:	10000c1e 	bne	r2,zero,802e94 <__fixsfsi+0x8c>
  802e64:	00a00034 	movhi	r2,32768
  802e68:	10bfffc4 	addi	r2,r2,-1
  802e6c:	dfc00517 	ldw	ra,20(sp)
  802e70:	dec00604 	addi	sp,sp,24
  802e74:	f800283a 	ret
  802e78:	1885c83a 	sub	r2,r3,r2
  802e7c:	d9000217 	ldw	r4,8(sp)
  802e80:	d8c00417 	ldw	r3,16(sp)
  802e84:	1884d83a 	srl	r2,r3,r2
  802e88:	203fe926 	beq	r4,zero,802e30 <__fixsfsi+0x28>
  802e8c:	0085c83a 	sub	r2,zero,r2
  802e90:	003fe706 	br	802e30 <__fixsfsi+0x28>
  802e94:	00a00034 	movhi	r2,32768
  802e98:	003fe506 	br	802e30 <__fixsfsi+0x28>

00802e9c <_fpadd_parts>:
  802e9c:	defff804 	addi	sp,sp,-32
  802ea0:	dcc00315 	stw	r19,12(sp)
  802ea4:	2027883a 	mov	r19,r4
  802ea8:	21000017 	ldw	r4,0(r4)
  802eac:	00c00044 	movi	r3,1
  802eb0:	dd400515 	stw	r21,20(sp)
  802eb4:	dd000415 	stw	r20,16(sp)
  802eb8:	ddc00715 	stw	r23,28(sp)
  802ebc:	dd800615 	stw	r22,24(sp)
  802ec0:	dc800215 	stw	r18,8(sp)
  802ec4:	dc400115 	stw	r17,4(sp)
  802ec8:	dc000015 	stw	r16,0(sp)
  802ecc:	282b883a 	mov	r21,r5
  802ed0:	3029883a 	mov	r20,r6
  802ed4:	1900632e 	bgeu	r3,r4,803064 <_fpadd_parts+0x1c8>
  802ed8:	28800017 	ldw	r2,0(r5)
  802edc:	1880812e 	bgeu	r3,r2,8030e4 <_fpadd_parts+0x248>
  802ee0:	00c00104 	movi	r3,4
  802ee4:	20c0dc26 	beq	r4,r3,803258 <_fpadd_parts+0x3bc>
  802ee8:	10c07e26 	beq	r2,r3,8030e4 <_fpadd_parts+0x248>
  802eec:	00c00084 	movi	r3,2
  802ef0:	10c06726 	beq	r2,r3,803090 <_fpadd_parts+0x1f4>
  802ef4:	20c07b26 	beq	r4,r3,8030e4 <_fpadd_parts+0x248>
  802ef8:	9dc00217 	ldw	r23,8(r19)
  802efc:	28c00217 	ldw	r3,8(r5)
  802f00:	9c400317 	ldw	r17,12(r19)
  802f04:	2bc00317 	ldw	r15,12(r5)
  802f08:	b8cdc83a 	sub	r6,r23,r3
  802f0c:	9c800417 	ldw	r18,16(r19)
  802f10:	2c000417 	ldw	r16,16(r5)
  802f14:	3009883a 	mov	r4,r6
  802f18:	30009716 	blt	r6,zero,803178 <_fpadd_parts+0x2dc>
  802f1c:	00800fc4 	movi	r2,63
  802f20:	11806b16 	blt	r2,r6,8030d0 <_fpadd_parts+0x234>
  802f24:	0100a40e 	bge	zero,r4,8031b8 <_fpadd_parts+0x31c>
  802f28:	35bff804 	addi	r22,r6,-32
  802f2c:	b000bc16 	blt	r22,zero,803220 <_fpadd_parts+0x384>
  802f30:	8596d83a 	srl	r11,r16,r22
  802f34:	0019883a 	mov	r12,zero
  802f38:	0013883a 	mov	r9,zero
  802f3c:	01000044 	movi	r4,1
  802f40:	0015883a 	mov	r10,zero
  802f44:	b000be16 	blt	r22,zero,803240 <_fpadd_parts+0x3a4>
  802f48:	2590983a 	sll	r8,r4,r22
  802f4c:	000f883a 	mov	r7,zero
  802f50:	00bfffc4 	movi	r2,-1
  802f54:	3889883a 	add	r4,r7,r2
  802f58:	408b883a 	add	r5,r8,r2
  802f5c:	21cd803a 	cmpltu	r6,r4,r7
  802f60:	314b883a 	add	r5,r6,r5
  802f64:	7904703a 	and	r2,r15,r4
  802f68:	8146703a 	and	r3,r16,r5
  802f6c:	10c4b03a 	or	r2,r2,r3
  802f70:	10000226 	beq	r2,zero,802f7c <_fpadd_parts+0xe0>
  802f74:	02400044 	movi	r9,1
  802f78:	0015883a 	mov	r10,zero
  802f7c:	5a5eb03a 	or	r15,r11,r9
  802f80:	62a0b03a 	or	r16,r12,r10
  802f84:	99400117 	ldw	r5,4(r19)
  802f88:	a8800117 	ldw	r2,4(r21)
  802f8c:	28806e26 	beq	r5,r2,803148 <_fpadd_parts+0x2ac>
  802f90:	28006626 	beq	r5,zero,80312c <_fpadd_parts+0x290>
  802f94:	7c45c83a 	sub	r2,r15,r17
  802f98:	7889803a 	cmpltu	r4,r15,r2
  802f9c:	8487c83a 	sub	r3,r16,r18
  802fa0:	1909c83a 	sub	r4,r3,r4
  802fa4:	100d883a 	mov	r6,r2
  802fa8:	200f883a 	mov	r7,r4
  802fac:	38007716 	blt	r7,zero,80318c <_fpadd_parts+0x2f0>
  802fb0:	a5c00215 	stw	r23,8(r20)
  802fb4:	a1c00415 	stw	r7,16(r20)
  802fb8:	a0000115 	stw	zero,4(r20)
  802fbc:	a1800315 	stw	r6,12(r20)
  802fc0:	a2000317 	ldw	r8,12(r20)
  802fc4:	a2400417 	ldw	r9,16(r20)
  802fc8:	00bfffc4 	movi	r2,-1
  802fcc:	408b883a 	add	r5,r8,r2
  802fd0:	2a09803a 	cmpltu	r4,r5,r8
  802fd4:	488d883a 	add	r6,r9,r2
  802fd8:	01c40034 	movhi	r7,4096
  802fdc:	39ffffc4 	addi	r7,r7,-1
  802fe0:	218d883a 	add	r6,r4,r6
  802fe4:	39801736 	bltu	r7,r6,803044 <_fpadd_parts+0x1a8>
  802fe8:	31c06526 	beq	r6,r7,803180 <_fpadd_parts+0x2e4>
  802fec:	a3000217 	ldw	r12,8(r20)
  802ff0:	4209883a 	add	r4,r8,r8
  802ff4:	00bfffc4 	movi	r2,-1
  802ff8:	220f803a 	cmpltu	r7,r4,r8
  802ffc:	4a4b883a 	add	r5,r9,r9
  803000:	394f883a 	add	r7,r7,r5
  803004:	2095883a 	add	r10,r4,r2
  803008:	3897883a 	add	r11,r7,r2
  80300c:	510d803a 	cmpltu	r6,r10,r4
  803010:	6099883a 	add	r12,r12,r2
  803014:	32d7883a 	add	r11,r6,r11
  803018:	00840034 	movhi	r2,4096
  80301c:	10bfffc4 	addi	r2,r2,-1
  803020:	2011883a 	mov	r8,r4
  803024:	3813883a 	mov	r9,r7
  803028:	a1000315 	stw	r4,12(r20)
  80302c:	a1c00415 	stw	r7,16(r20)
  803030:	a3000215 	stw	r12,8(r20)
  803034:	12c00336 	bltu	r2,r11,803044 <_fpadd_parts+0x1a8>
  803038:	58bfed1e 	bne	r11,r2,802ff0 <_fpadd_parts+0x154>
  80303c:	00bfff84 	movi	r2,-2
  803040:	12bfeb2e 	bgeu	r2,r10,802ff0 <_fpadd_parts+0x154>
  803044:	a2800417 	ldw	r10,16(r20)
  803048:	008000c4 	movi	r2,3
  80304c:	00c80034 	movhi	r3,8192
  803050:	18ffffc4 	addi	r3,r3,-1
  803054:	a2400317 	ldw	r9,12(r20)
  803058:	a0800015 	stw	r2,0(r20)
  80305c:	1a802336 	bltu	r3,r10,8030ec <_fpadd_parts+0x250>
  803060:	a027883a 	mov	r19,r20
  803064:	9805883a 	mov	r2,r19
  803068:	ddc00717 	ldw	r23,28(sp)
  80306c:	dd800617 	ldw	r22,24(sp)
  803070:	dd400517 	ldw	r21,20(sp)
  803074:	dd000417 	ldw	r20,16(sp)
  803078:	dcc00317 	ldw	r19,12(sp)
  80307c:	dc800217 	ldw	r18,8(sp)
  803080:	dc400117 	ldw	r17,4(sp)
  803084:	dc000017 	ldw	r16,0(sp)
  803088:	dec00804 	addi	sp,sp,32
  80308c:	f800283a 	ret
  803090:	20fff41e 	bne	r4,r3,803064 <_fpadd_parts+0x1c8>
  803094:	31000015 	stw	r4,0(r6)
  803098:	98800117 	ldw	r2,4(r19)
  80309c:	30800115 	stw	r2,4(r6)
  8030a0:	98c00217 	ldw	r3,8(r19)
  8030a4:	30c00215 	stw	r3,8(r6)
  8030a8:	98800317 	ldw	r2,12(r19)
  8030ac:	30800315 	stw	r2,12(r6)
  8030b0:	98c00417 	ldw	r3,16(r19)
  8030b4:	30c00415 	stw	r3,16(r6)
  8030b8:	98800117 	ldw	r2,4(r19)
  8030bc:	28c00117 	ldw	r3,4(r5)
  8030c0:	3027883a 	mov	r19,r6
  8030c4:	10c4703a 	and	r2,r2,r3
  8030c8:	30800115 	stw	r2,4(r6)
  8030cc:	003fe506 	br	803064 <_fpadd_parts+0x1c8>
  8030d0:	1dc02616 	blt	r3,r23,80316c <_fpadd_parts+0x2d0>
  8030d4:	0023883a 	mov	r17,zero
  8030d8:	182f883a 	mov	r23,r3
  8030dc:	0025883a 	mov	r18,zero
  8030e0:	003fa806 	br	802f84 <_fpadd_parts+0xe8>
  8030e4:	a827883a 	mov	r19,r21
  8030e8:	003fde06 	br	803064 <_fpadd_parts+0x1c8>
  8030ec:	01800044 	movi	r6,1
  8030f0:	500497fa 	slli	r2,r10,31
  8030f4:	4808d07a 	srli	r4,r9,1
  8030f8:	518ad83a 	srl	r5,r10,r6
  8030fc:	a2000217 	ldw	r8,8(r20)
  803100:	1108b03a 	or	r4,r2,r4
  803104:	0007883a 	mov	r3,zero
  803108:	4984703a 	and	r2,r9,r6
  80310c:	208cb03a 	or	r6,r4,r2
  803110:	28ceb03a 	or	r7,r5,r3
  803114:	42000044 	addi	r8,r8,1
  803118:	a027883a 	mov	r19,r20
  80311c:	a1c00415 	stw	r7,16(r20)
  803120:	a2000215 	stw	r8,8(r20)
  803124:	a1800315 	stw	r6,12(r20)
  803128:	003fce06 	br	803064 <_fpadd_parts+0x1c8>
  80312c:	8bc5c83a 	sub	r2,r17,r15
  803130:	8889803a 	cmpltu	r4,r17,r2
  803134:	9407c83a 	sub	r3,r18,r16
  803138:	1909c83a 	sub	r4,r3,r4
  80313c:	100d883a 	mov	r6,r2
  803140:	200f883a 	mov	r7,r4
  803144:	003f9906 	br	802fac <_fpadd_parts+0x110>
  803148:	7c45883a 	add	r2,r15,r17
  80314c:	13c9803a 	cmpltu	r4,r2,r15
  803150:	8487883a 	add	r3,r16,r18
  803154:	20c9883a 	add	r4,r4,r3
  803158:	a1400115 	stw	r5,4(r20)
  80315c:	a5c00215 	stw	r23,8(r20)
  803160:	a0800315 	stw	r2,12(r20)
  803164:	a1000415 	stw	r4,16(r20)
  803168:	003fb606 	br	803044 <_fpadd_parts+0x1a8>
  80316c:	001f883a 	mov	r15,zero
  803170:	0021883a 	mov	r16,zero
  803174:	003f8306 	br	802f84 <_fpadd_parts+0xe8>
  803178:	018dc83a 	sub	r6,zero,r6
  80317c:	003f6706 	br	802f1c <_fpadd_parts+0x80>
  803180:	00bfff84 	movi	r2,-2
  803184:	117faf36 	bltu	r2,r5,803044 <_fpadd_parts+0x1a8>
  803188:	003f9806 	br	802fec <_fpadd_parts+0x150>
  80318c:	0005883a 	mov	r2,zero
  803190:	1189c83a 	sub	r4,r2,r6
  803194:	1105803a 	cmpltu	r2,r2,r4
  803198:	01cbc83a 	sub	r5,zero,r7
  80319c:	2885c83a 	sub	r2,r5,r2
  8031a0:	01800044 	movi	r6,1
  8031a4:	a1800115 	stw	r6,4(r20)
  8031a8:	a5c00215 	stw	r23,8(r20)
  8031ac:	a1000315 	stw	r4,12(r20)
  8031b0:	a0800415 	stw	r2,16(r20)
  8031b4:	003f8206 	br	802fc0 <_fpadd_parts+0x124>
  8031b8:	203f7226 	beq	r4,zero,802f84 <_fpadd_parts+0xe8>
  8031bc:	35bff804 	addi	r22,r6,-32
  8031c0:	b9af883a 	add	r23,r23,r6
  8031c4:	b0003116 	blt	r22,zero,80328c <_fpadd_parts+0x3f0>
  8031c8:	959ad83a 	srl	r13,r18,r22
  8031cc:	001d883a 	mov	r14,zero
  8031d0:	000f883a 	mov	r7,zero
  8031d4:	01000044 	movi	r4,1
  8031d8:	0011883a 	mov	r8,zero
  8031dc:	b0002516 	blt	r22,zero,803274 <_fpadd_parts+0x3d8>
  8031e0:	2594983a 	sll	r10,r4,r22
  8031e4:	0013883a 	mov	r9,zero
  8031e8:	00bfffc4 	movi	r2,-1
  8031ec:	4889883a 	add	r4,r9,r2
  8031f0:	508b883a 	add	r5,r10,r2
  8031f4:	224d803a 	cmpltu	r6,r4,r9
  8031f8:	314b883a 	add	r5,r6,r5
  8031fc:	8904703a 	and	r2,r17,r4
  803200:	9146703a 	and	r3,r18,r5
  803204:	10c4b03a 	or	r2,r2,r3
  803208:	10000226 	beq	r2,zero,803214 <_fpadd_parts+0x378>
  80320c:	01c00044 	movi	r7,1
  803210:	0011883a 	mov	r8,zero
  803214:	69e2b03a 	or	r17,r13,r7
  803218:	7224b03a 	or	r18,r14,r8
  80321c:	003f5906 	br	802f84 <_fpadd_parts+0xe8>
  803220:	8407883a 	add	r3,r16,r16
  803224:	008007c4 	movi	r2,31
  803228:	1185c83a 	sub	r2,r2,r6
  80322c:	1886983a 	sll	r3,r3,r2
  803230:	7996d83a 	srl	r11,r15,r6
  803234:	8198d83a 	srl	r12,r16,r6
  803238:	1ad6b03a 	or	r11,r3,r11
  80323c:	003f3e06 	br	802f38 <_fpadd_parts+0x9c>
  803240:	2006d07a 	srli	r3,r4,1
  803244:	008007c4 	movi	r2,31
  803248:	1185c83a 	sub	r2,r2,r6
  80324c:	1890d83a 	srl	r8,r3,r2
  803250:	218e983a 	sll	r7,r4,r6
  803254:	003f3e06 	br	802f50 <_fpadd_parts+0xb4>
  803258:	113f821e 	bne	r2,r4,803064 <_fpadd_parts+0x1c8>
  80325c:	28c00117 	ldw	r3,4(r5)
  803260:	98800117 	ldw	r2,4(r19)
  803264:	10ff7f26 	beq	r2,r3,803064 <_fpadd_parts+0x1c8>
  803268:	04c02074 	movhi	r19,129
  80326c:	9cd0d104 	addi	r19,r19,17220
  803270:	003f7c06 	br	803064 <_fpadd_parts+0x1c8>
  803274:	2006d07a 	srli	r3,r4,1
  803278:	008007c4 	movi	r2,31
  80327c:	1185c83a 	sub	r2,r2,r6
  803280:	1894d83a 	srl	r10,r3,r2
  803284:	2192983a 	sll	r9,r4,r6
  803288:	003fd706 	br	8031e8 <_fpadd_parts+0x34c>
  80328c:	9487883a 	add	r3,r18,r18
  803290:	008007c4 	movi	r2,31
  803294:	1185c83a 	sub	r2,r2,r6
  803298:	1886983a 	sll	r3,r3,r2
  80329c:	899ad83a 	srl	r13,r17,r6
  8032a0:	919cd83a 	srl	r14,r18,r6
  8032a4:	1b5ab03a 	or	r13,r3,r13
  8032a8:	003fc906 	br	8031d0 <_fpadd_parts+0x334>

008032ac <__subdf3>:
  8032ac:	deffea04 	addi	sp,sp,-88
  8032b0:	dcc01415 	stw	r19,80(sp)
  8032b4:	dcc00404 	addi	r19,sp,16
  8032b8:	2011883a 	mov	r8,r4
  8032bc:	2813883a 	mov	r9,r5
  8032c0:	dc401315 	stw	r17,76(sp)
  8032c4:	d809883a 	mov	r4,sp
  8032c8:	980b883a 	mov	r5,r19
  8032cc:	dc400904 	addi	r17,sp,36
  8032d0:	dfc01515 	stw	ra,84(sp)
  8032d4:	da400115 	stw	r9,4(sp)
  8032d8:	d9c00315 	stw	r7,12(sp)
  8032dc:	da000015 	stw	r8,0(sp)
  8032e0:	d9800215 	stw	r6,8(sp)
  8032e4:	08044500 	call	804450 <__unpack_d>
  8032e8:	d9000204 	addi	r4,sp,8
  8032ec:	880b883a 	mov	r5,r17
  8032f0:	08044500 	call	804450 <__unpack_d>
  8032f4:	d8800a17 	ldw	r2,40(sp)
  8032f8:	880b883a 	mov	r5,r17
  8032fc:	9809883a 	mov	r4,r19
  803300:	d9800e04 	addi	r6,sp,56
  803304:	1080005c 	xori	r2,r2,1
  803308:	d8800a15 	stw	r2,40(sp)
  80330c:	0802e9c0 	call	802e9c <_fpadd_parts>
  803310:	1009883a 	mov	r4,r2
  803314:	080413c0 	call	80413c <__pack_d>
  803318:	dfc01517 	ldw	ra,84(sp)
  80331c:	dcc01417 	ldw	r19,80(sp)
  803320:	dc401317 	ldw	r17,76(sp)
  803324:	dec01604 	addi	sp,sp,88
  803328:	f800283a 	ret

0080332c <__adddf3>:
  80332c:	deffea04 	addi	sp,sp,-88
  803330:	dcc01415 	stw	r19,80(sp)
  803334:	dcc00404 	addi	r19,sp,16
  803338:	2011883a 	mov	r8,r4
  80333c:	2813883a 	mov	r9,r5
  803340:	dc401315 	stw	r17,76(sp)
  803344:	d809883a 	mov	r4,sp
  803348:	980b883a 	mov	r5,r19
  80334c:	dc400904 	addi	r17,sp,36
  803350:	dfc01515 	stw	ra,84(sp)
  803354:	da400115 	stw	r9,4(sp)
  803358:	d9c00315 	stw	r7,12(sp)
  80335c:	da000015 	stw	r8,0(sp)
  803360:	d9800215 	stw	r6,8(sp)
  803364:	08044500 	call	804450 <__unpack_d>
  803368:	d9000204 	addi	r4,sp,8
  80336c:	880b883a 	mov	r5,r17
  803370:	08044500 	call	804450 <__unpack_d>
  803374:	d9800e04 	addi	r6,sp,56
  803378:	9809883a 	mov	r4,r19
  80337c:	880b883a 	mov	r5,r17
  803380:	0802e9c0 	call	802e9c <_fpadd_parts>
  803384:	1009883a 	mov	r4,r2
  803388:	080413c0 	call	80413c <__pack_d>
  80338c:	dfc01517 	ldw	ra,84(sp)
  803390:	dcc01417 	ldw	r19,80(sp)
  803394:	dc401317 	ldw	r17,76(sp)
  803398:	dec01604 	addi	sp,sp,88
  80339c:	f800283a 	ret

008033a0 <__muldf3>:
  8033a0:	deffe004 	addi	sp,sp,-128
  8033a4:	dc401815 	stw	r17,96(sp)
  8033a8:	dc400404 	addi	r17,sp,16
  8033ac:	2011883a 	mov	r8,r4
  8033b0:	2813883a 	mov	r9,r5
  8033b4:	dc001715 	stw	r16,92(sp)
  8033b8:	d809883a 	mov	r4,sp
  8033bc:	880b883a 	mov	r5,r17
  8033c0:	dc000904 	addi	r16,sp,36
  8033c4:	dfc01f15 	stw	ra,124(sp)
  8033c8:	da400115 	stw	r9,4(sp)
  8033cc:	d9c00315 	stw	r7,12(sp)
  8033d0:	da000015 	stw	r8,0(sp)
  8033d4:	d9800215 	stw	r6,8(sp)
  8033d8:	ddc01e15 	stw	r23,120(sp)
  8033dc:	dd801d15 	stw	r22,116(sp)
  8033e0:	dd401c15 	stw	r21,112(sp)
  8033e4:	dd001b15 	stw	r20,108(sp)
  8033e8:	dcc01a15 	stw	r19,104(sp)
  8033ec:	dc801915 	stw	r18,100(sp)
  8033f0:	08044500 	call	804450 <__unpack_d>
  8033f4:	d9000204 	addi	r4,sp,8
  8033f8:	800b883a 	mov	r5,r16
  8033fc:	08044500 	call	804450 <__unpack_d>
  803400:	d9000417 	ldw	r4,16(sp)
  803404:	00800044 	movi	r2,1
  803408:	1100102e 	bgeu	r2,r4,80344c <__muldf3+0xac>
  80340c:	d8c00917 	ldw	r3,36(sp)
  803410:	10c0062e 	bgeu	r2,r3,80342c <__muldf3+0x8c>
  803414:	00800104 	movi	r2,4
  803418:	20800a26 	beq	r4,r2,803444 <__muldf3+0xa4>
  80341c:	1880cc26 	beq	r3,r2,803750 <__muldf3+0x3b0>
  803420:	00800084 	movi	r2,2
  803424:	20800926 	beq	r4,r2,80344c <__muldf3+0xac>
  803428:	1880191e 	bne	r3,r2,803490 <__muldf3+0xf0>
  80342c:	d8c00a17 	ldw	r3,40(sp)
  803430:	d8800517 	ldw	r2,20(sp)
  803434:	8009883a 	mov	r4,r16
  803438:	10c4c03a 	cmpne	r2,r2,r3
  80343c:	d8800a15 	stw	r2,40(sp)
  803440:	00000706 	br	803460 <__muldf3+0xc0>
  803444:	00800084 	movi	r2,2
  803448:	1880c326 	beq	r3,r2,803758 <__muldf3+0x3b8>
  80344c:	d8800517 	ldw	r2,20(sp)
  803450:	d8c00a17 	ldw	r3,40(sp)
  803454:	8809883a 	mov	r4,r17
  803458:	10c4c03a 	cmpne	r2,r2,r3
  80345c:	d8800515 	stw	r2,20(sp)
  803460:	080413c0 	call	80413c <__pack_d>
  803464:	dfc01f17 	ldw	ra,124(sp)
  803468:	ddc01e17 	ldw	r23,120(sp)
  80346c:	dd801d17 	ldw	r22,116(sp)
  803470:	dd401c17 	ldw	r21,112(sp)
  803474:	dd001b17 	ldw	r20,108(sp)
  803478:	dcc01a17 	ldw	r19,104(sp)
  80347c:	dc801917 	ldw	r18,100(sp)
  803480:	dc401817 	ldw	r17,96(sp)
  803484:	dc001717 	ldw	r16,92(sp)
  803488:	dec02004 	addi	sp,sp,128
  80348c:	f800283a 	ret
  803490:	dd800717 	ldw	r22,28(sp)
  803494:	dc800c17 	ldw	r18,48(sp)
  803498:	002b883a 	mov	r21,zero
  80349c:	0023883a 	mov	r17,zero
  8034a0:	a80b883a 	mov	r5,r21
  8034a4:	b00d883a 	mov	r6,r22
  8034a8:	880f883a 	mov	r7,r17
  8034ac:	ddc00817 	ldw	r23,32(sp)
  8034b0:	dcc00d17 	ldw	r19,52(sp)
  8034b4:	9009883a 	mov	r4,r18
  8034b8:	0803dd00 	call	803dd0 <__muldi3>
  8034bc:	001b883a 	mov	r13,zero
  8034c0:	680f883a 	mov	r7,r13
  8034c4:	b009883a 	mov	r4,r22
  8034c8:	000b883a 	mov	r5,zero
  8034cc:	980d883a 	mov	r6,r19
  8034d0:	b82d883a 	mov	r22,r23
  8034d4:	002f883a 	mov	r23,zero
  8034d8:	db401615 	stw	r13,88(sp)
  8034dc:	d8801315 	stw	r2,76(sp)
  8034e0:	d8c01415 	stw	r3,80(sp)
  8034e4:	dcc01515 	stw	r19,84(sp)
  8034e8:	0803dd00 	call	803dd0 <__muldi3>
  8034ec:	b00d883a 	mov	r6,r22
  8034f0:	000b883a 	mov	r5,zero
  8034f4:	9009883a 	mov	r4,r18
  8034f8:	b80f883a 	mov	r7,r23
  8034fc:	1021883a 	mov	r16,r2
  803500:	1823883a 	mov	r17,r3
  803504:	0803dd00 	call	803dd0 <__muldi3>
  803508:	8085883a 	add	r2,r16,r2
  80350c:	140d803a 	cmpltu	r6,r2,r16
  803510:	88c7883a 	add	r3,r17,r3
  803514:	30cd883a 	add	r6,r6,r3
  803518:	1029883a 	mov	r20,r2
  80351c:	302b883a 	mov	r21,r6
  803520:	da801317 	ldw	r10,76(sp)
  803524:	dac01417 	ldw	r11,80(sp)
  803528:	db001517 	ldw	r12,84(sp)
  80352c:	db401617 	ldw	r13,88(sp)
  803530:	3440612e 	bgeu	r6,r17,8036b8 <__muldf3+0x318>
  803534:	0009883a 	mov	r4,zero
  803538:	5105883a 	add	r2,r10,r4
  80353c:	128d803a 	cmpltu	r6,r2,r10
  803540:	5d07883a 	add	r3,r11,r20
  803544:	30cd883a 	add	r6,r6,r3
  803548:	0021883a 	mov	r16,zero
  80354c:	04400044 	movi	r17,1
  803550:	1025883a 	mov	r18,r2
  803554:	3027883a 	mov	r19,r6
  803558:	32c06236 	bltu	r6,r11,8036e4 <__muldf3+0x344>
  80355c:	59807a26 	beq	r11,r6,803748 <__muldf3+0x3a8>
  803560:	680b883a 	mov	r5,r13
  803564:	b80f883a 	mov	r7,r23
  803568:	6009883a 	mov	r4,r12
  80356c:	b00d883a 	mov	r6,r22
  803570:	0803dd00 	call	803dd0 <__muldi3>
  803574:	1009883a 	mov	r4,r2
  803578:	000f883a 	mov	r7,zero
  80357c:	1545883a 	add	r2,r2,r21
  803580:	1111803a 	cmpltu	r8,r2,r4
  803584:	19c7883a 	add	r3,r3,r7
  803588:	40c7883a 	add	r3,r8,r3
  80358c:	88cb883a 	add	r5,r17,r3
  803590:	d8c00617 	ldw	r3,24(sp)
  803594:	8089883a 	add	r4,r16,r2
  803598:	d8800b17 	ldw	r2,44(sp)
  80359c:	18c00104 	addi	r3,r3,4
  8035a0:	240d803a 	cmpltu	r6,r4,r16
  8035a4:	10c7883a 	add	r3,r2,r3
  8035a8:	2013883a 	mov	r9,r4
  8035ac:	d8800a17 	ldw	r2,40(sp)
  8035b0:	d9000517 	ldw	r4,20(sp)
  8035b4:	314d883a 	add	r6,r6,r5
  8035b8:	3015883a 	mov	r10,r6
  8035bc:	2088c03a 	cmpne	r4,r4,r2
  8035c0:	00880034 	movhi	r2,8192
  8035c4:	10bfffc4 	addi	r2,r2,-1
  8035c8:	d9000f15 	stw	r4,60(sp)
  8035cc:	d8c01015 	stw	r3,64(sp)
  8035d0:	1180162e 	bgeu	r2,r6,80362c <__muldf3+0x28c>
  8035d4:	1811883a 	mov	r8,r3
  8035d8:	101f883a 	mov	r15,r2
  8035dc:	980497fa 	slli	r2,r19,31
  8035e0:	9016d07a 	srli	r11,r18,1
  8035e4:	500697fa 	slli	r3,r10,31
  8035e8:	480cd07a 	srli	r6,r9,1
  8035ec:	500ed07a 	srli	r7,r10,1
  8035f0:	12d6b03a 	or	r11,r2,r11
  8035f4:	00800044 	movi	r2,1
  8035f8:	198cb03a 	or	r6,r3,r6
  8035fc:	4888703a 	and	r4,r9,r2
  803600:	9818d07a 	srli	r12,r19,1
  803604:	001b883a 	mov	r13,zero
  803608:	03a00034 	movhi	r14,32768
  80360c:	3013883a 	mov	r9,r6
  803610:	3815883a 	mov	r10,r7
  803614:	4091883a 	add	r8,r8,r2
  803618:	20000226 	beq	r4,zero,803624 <__muldf3+0x284>
  80361c:	5b64b03a 	or	r18,r11,r13
  803620:	63a6b03a 	or	r19,r12,r14
  803624:	7abfed36 	bltu	r15,r10,8035dc <__muldf3+0x23c>
  803628:	da001015 	stw	r8,64(sp)
  80362c:	00840034 	movhi	r2,4096
  803630:	10bfffc4 	addi	r2,r2,-1
  803634:	12801436 	bltu	r2,r10,803688 <__muldf3+0x2e8>
  803638:	da001017 	ldw	r8,64(sp)
  80363c:	101f883a 	mov	r15,r2
  803640:	4a45883a 	add	r2,r9,r9
  803644:	124d803a 	cmpltu	r6,r2,r9
  803648:	5287883a 	add	r3,r10,r10
  80364c:	9497883a 	add	r11,r18,r18
  803650:	5c8f803a 	cmpltu	r7,r11,r18
  803654:	9cd9883a 	add	r12,r19,r19
  803658:	01000044 	movi	r4,1
  80365c:	30cd883a 	add	r6,r6,r3
  803660:	3b0f883a 	add	r7,r7,r12
  803664:	423fffc4 	addi	r8,r8,-1
  803668:	1013883a 	mov	r9,r2
  80366c:	3015883a 	mov	r10,r6
  803670:	111ab03a 	or	r13,r2,r4
  803674:	98003016 	blt	r19,zero,803738 <__muldf3+0x398>
  803678:	5825883a 	mov	r18,r11
  80367c:	3827883a 	mov	r19,r7
  803680:	7abfef2e 	bgeu	r15,r10,803640 <__muldf3+0x2a0>
  803684:	da001015 	stw	r8,64(sp)
  803688:	00803fc4 	movi	r2,255
  80368c:	488e703a 	and	r7,r9,r2
  803690:	00802004 	movi	r2,128
  803694:	0007883a 	mov	r3,zero
  803698:	0011883a 	mov	r8,zero
  80369c:	38801826 	beq	r7,r2,803700 <__muldf3+0x360>
  8036a0:	008000c4 	movi	r2,3
  8036a4:	d9000e04 	addi	r4,sp,56
  8036a8:	da801215 	stw	r10,72(sp)
  8036ac:	d8800e15 	stw	r2,56(sp)
  8036b0:	da401115 	stw	r9,68(sp)
  8036b4:	003f6a06 	br	803460 <__muldf3+0xc0>
  8036b8:	89802126 	beq	r17,r6,803740 <__muldf3+0x3a0>
  8036bc:	0009883a 	mov	r4,zero
  8036c0:	5105883a 	add	r2,r10,r4
  8036c4:	128d803a 	cmpltu	r6,r2,r10
  8036c8:	5d07883a 	add	r3,r11,r20
  8036cc:	30cd883a 	add	r6,r6,r3
  8036d0:	0021883a 	mov	r16,zero
  8036d4:	0023883a 	mov	r17,zero
  8036d8:	1025883a 	mov	r18,r2
  8036dc:	3027883a 	mov	r19,r6
  8036e0:	32ff9e2e 	bgeu	r6,r11,80355c <__muldf3+0x1bc>
  8036e4:	00800044 	movi	r2,1
  8036e8:	8089883a 	add	r4,r16,r2
  8036ec:	240d803a 	cmpltu	r6,r4,r16
  8036f0:	344d883a 	add	r6,r6,r17
  8036f4:	2021883a 	mov	r16,r4
  8036f8:	3023883a 	mov	r17,r6
  8036fc:	003f9806 	br	803560 <__muldf3+0x1c0>
  803700:	403fe71e 	bne	r8,zero,8036a0 <__muldf3+0x300>
  803704:	01004004 	movi	r4,256
  803708:	4904703a 	and	r2,r9,r4
  80370c:	10c4b03a 	or	r2,r2,r3
  803710:	103fe31e 	bne	r2,zero,8036a0 <__muldf3+0x300>
  803714:	94c4b03a 	or	r2,r18,r19
  803718:	103fe126 	beq	r2,zero,8036a0 <__muldf3+0x300>
  80371c:	49c5883a 	add	r2,r9,r7
  803720:	1251803a 	cmpltu	r8,r2,r9
  803724:	4291883a 	add	r8,r8,r10
  803728:	013fc004 	movi	r4,-256
  80372c:	1112703a 	and	r9,r2,r4
  803730:	4015883a 	mov	r10,r8
  803734:	003fda06 	br	8036a0 <__muldf3+0x300>
  803738:	6813883a 	mov	r9,r13
  80373c:	003fce06 	br	803678 <__muldf3+0x2d8>
  803740:	143f7c36 	bltu	r2,r16,803534 <__muldf3+0x194>
  803744:	003fdd06 	br	8036bc <__muldf3+0x31c>
  803748:	12bf852e 	bgeu	r2,r10,803560 <__muldf3+0x1c0>
  80374c:	003fe506 	br	8036e4 <__muldf3+0x344>
  803750:	00800084 	movi	r2,2
  803754:	20bf351e 	bne	r4,r2,80342c <__muldf3+0x8c>
  803758:	01002074 	movhi	r4,129
  80375c:	2110d104 	addi	r4,r4,17220
  803760:	003f3f06 	br	803460 <__muldf3+0xc0>

00803764 <__divdf3>:
  803764:	deffed04 	addi	sp,sp,-76
  803768:	dcc01115 	stw	r19,68(sp)
  80376c:	dcc00404 	addi	r19,sp,16
  803770:	2011883a 	mov	r8,r4
  803774:	2813883a 	mov	r9,r5
  803778:	dc000e15 	stw	r16,56(sp)
  80377c:	d809883a 	mov	r4,sp
  803780:	980b883a 	mov	r5,r19
  803784:	dc000904 	addi	r16,sp,36
  803788:	dfc01215 	stw	ra,72(sp)
  80378c:	da400115 	stw	r9,4(sp)
  803790:	d9c00315 	stw	r7,12(sp)
  803794:	da000015 	stw	r8,0(sp)
  803798:	d9800215 	stw	r6,8(sp)
  80379c:	dc801015 	stw	r18,64(sp)
  8037a0:	dc400f15 	stw	r17,60(sp)
  8037a4:	08044500 	call	804450 <__unpack_d>
  8037a8:	d9000204 	addi	r4,sp,8
  8037ac:	800b883a 	mov	r5,r16
  8037b0:	08044500 	call	804450 <__unpack_d>
  8037b4:	d9000417 	ldw	r4,16(sp)
  8037b8:	00800044 	movi	r2,1
  8037bc:	11000b2e 	bgeu	r2,r4,8037ec <__divdf3+0x88>
  8037c0:	d9400917 	ldw	r5,36(sp)
  8037c4:	1140762e 	bgeu	r2,r5,8039a0 <__divdf3+0x23c>
  8037c8:	d8800517 	ldw	r2,20(sp)
  8037cc:	d8c00a17 	ldw	r3,40(sp)
  8037d0:	01800104 	movi	r6,4
  8037d4:	10c4f03a 	xor	r2,r2,r3
  8037d8:	d8800515 	stw	r2,20(sp)
  8037dc:	21800226 	beq	r4,r6,8037e8 <__divdf3+0x84>
  8037e0:	00800084 	movi	r2,2
  8037e4:	2080141e 	bne	r4,r2,803838 <__divdf3+0xd4>
  8037e8:	29000926 	beq	r5,r4,803810 <__divdf3+0xac>
  8037ec:	9809883a 	mov	r4,r19
  8037f0:	080413c0 	call	80413c <__pack_d>
  8037f4:	dfc01217 	ldw	ra,72(sp)
  8037f8:	dcc01117 	ldw	r19,68(sp)
  8037fc:	dc801017 	ldw	r18,64(sp)
  803800:	dc400f17 	ldw	r17,60(sp)
  803804:	dc000e17 	ldw	r16,56(sp)
  803808:	dec01304 	addi	sp,sp,76
  80380c:	f800283a 	ret
  803810:	01002074 	movhi	r4,129
  803814:	2110d104 	addi	r4,r4,17220
  803818:	080413c0 	call	80413c <__pack_d>
  80381c:	dfc01217 	ldw	ra,72(sp)
  803820:	dcc01117 	ldw	r19,68(sp)
  803824:	dc801017 	ldw	r18,64(sp)
  803828:	dc400f17 	ldw	r17,60(sp)
  80382c:	dc000e17 	ldw	r16,56(sp)
  803830:	dec01304 	addi	sp,sp,76
  803834:	f800283a 	ret
  803838:	29805b26 	beq	r5,r6,8039a8 <__divdf3+0x244>
  80383c:	28802d26 	beq	r5,r2,8038f4 <__divdf3+0x190>
  803840:	d8c00617 	ldw	r3,24(sp)
  803844:	d8800b17 	ldw	r2,44(sp)
  803848:	d9c00817 	ldw	r7,32(sp)
  80384c:	dc400d17 	ldw	r17,52(sp)
  803850:	188bc83a 	sub	r5,r3,r2
  803854:	d9800717 	ldw	r6,28(sp)
  803858:	dc000c17 	ldw	r16,48(sp)
  80385c:	d9400615 	stw	r5,24(sp)
  803860:	3c403836 	bltu	r7,r17,803944 <__divdf3+0x1e0>
  803864:	89c03626 	beq	r17,r7,803940 <__divdf3+0x1dc>
  803868:	0015883a 	mov	r10,zero
  80386c:	001d883a 	mov	r14,zero
  803870:	02c40034 	movhi	r11,4096
  803874:	001f883a 	mov	r15,zero
  803878:	003f883a 	mov	ra,zero
  80387c:	04800f44 	movi	r18,61
  803880:	00000f06 	br	8038c0 <__divdf3+0x15c>
  803884:	601d883a 	mov	r14,r12
  803888:	681f883a 	mov	r15,r13
  80388c:	400d883a 	mov	r6,r8
  803890:	100f883a 	mov	r7,r2
  803894:	3191883a 	add	r8,r6,r6
  803898:	5808d07a 	srli	r4,r11,1
  80389c:	4185803a 	cmpltu	r2,r8,r6
  8038a0:	39d3883a 	add	r9,r7,r7
  8038a4:	28c6b03a 	or	r3,r5,r3
  8038a8:	1245883a 	add	r2,r2,r9
  8038ac:	1815883a 	mov	r10,r3
  8038b0:	2017883a 	mov	r11,r4
  8038b4:	400d883a 	mov	r6,r8
  8038b8:	100f883a 	mov	r7,r2
  8038bc:	fc801726 	beq	ra,r18,80391c <__divdf3+0x1b8>
  8038c0:	580a97fa 	slli	r5,r11,31
  8038c4:	5006d07a 	srli	r3,r10,1
  8038c8:	ffc00044 	addi	ra,ra,1
  8038cc:	3c7ff136 	bltu	r7,r17,803894 <__divdf3+0x130>
  8038d0:	3411c83a 	sub	r8,r6,r16
  8038d4:	3205803a 	cmpltu	r2,r6,r8
  8038d8:	3c53c83a 	sub	r9,r7,r17
  8038dc:	7298b03a 	or	r12,r14,r10
  8038e0:	7adab03a 	or	r13,r15,r11
  8038e4:	4885c83a 	sub	r2,r9,r2
  8038e8:	89ffe61e 	bne	r17,r7,803884 <__divdf3+0x120>
  8038ec:	343fe936 	bltu	r6,r16,803894 <__divdf3+0x130>
  8038f0:	003fe406 	br	803884 <__divdf3+0x120>
  8038f4:	9809883a 	mov	r4,r19
  8038f8:	d9800415 	stw	r6,16(sp)
  8038fc:	080413c0 	call	80413c <__pack_d>
  803900:	dfc01217 	ldw	ra,72(sp)
  803904:	dcc01117 	ldw	r19,68(sp)
  803908:	dc801017 	ldw	r18,64(sp)
  80390c:	dc400f17 	ldw	r17,60(sp)
  803910:	dc000e17 	ldw	r16,56(sp)
  803914:	dec01304 	addi	sp,sp,76
  803918:	f800283a 	ret
  80391c:	00803fc4 	movi	r2,255
  803920:	7090703a 	and	r8,r14,r2
  803924:	00802004 	movi	r2,128
  803928:	0007883a 	mov	r3,zero
  80392c:	0013883a 	mov	r9,zero
  803930:	40800d26 	beq	r8,r2,803968 <__divdf3+0x204>
  803934:	dbc00815 	stw	r15,32(sp)
  803938:	db800715 	stw	r14,28(sp)
  80393c:	003fab06 	br	8037ec <__divdf3+0x88>
  803940:	343fc92e 	bgeu	r6,r16,803868 <__divdf3+0x104>
  803944:	3185883a 	add	r2,r6,r6
  803948:	1189803a 	cmpltu	r4,r2,r6
  80394c:	39c7883a 	add	r3,r7,r7
  803950:	20c9883a 	add	r4,r4,r3
  803954:	297fffc4 	addi	r5,r5,-1
  803958:	100d883a 	mov	r6,r2
  80395c:	200f883a 	mov	r7,r4
  803960:	d9400615 	stw	r5,24(sp)
  803964:	003fc006 	br	803868 <__divdf3+0x104>
  803968:	483ff21e 	bne	r9,zero,803934 <__divdf3+0x1d0>
  80396c:	01004004 	movi	r4,256
  803970:	7104703a 	and	r2,r14,r4
  803974:	10c4b03a 	or	r2,r2,r3
  803978:	103fee1e 	bne	r2,zero,803934 <__divdf3+0x1d0>
  80397c:	31c4b03a 	or	r2,r6,r7
  803980:	103fec26 	beq	r2,zero,803934 <__divdf3+0x1d0>
  803984:	7205883a 	add	r2,r14,r8
  803988:	1391803a 	cmpltu	r8,r2,r14
  80398c:	43d1883a 	add	r8,r8,r15
  803990:	013fc004 	movi	r4,-256
  803994:	111c703a 	and	r14,r2,r4
  803998:	401f883a 	mov	r15,r8
  80399c:	003fe506 	br	803934 <__divdf3+0x1d0>
  8039a0:	8009883a 	mov	r4,r16
  8039a4:	003f9206 	br	8037f0 <__divdf3+0x8c>
  8039a8:	9809883a 	mov	r4,r19
  8039ac:	d8000715 	stw	zero,28(sp)
  8039b0:	d8000815 	stw	zero,32(sp)
  8039b4:	d8000615 	stw	zero,24(sp)
  8039b8:	003f8d06 	br	8037f0 <__divdf3+0x8c>

008039bc <__eqdf2>:
  8039bc:	deffef04 	addi	sp,sp,-68
  8039c0:	dc400f15 	stw	r17,60(sp)
  8039c4:	dc400404 	addi	r17,sp,16
  8039c8:	2005883a 	mov	r2,r4
  8039cc:	2807883a 	mov	r3,r5
  8039d0:	dc000e15 	stw	r16,56(sp)
  8039d4:	d809883a 	mov	r4,sp
  8039d8:	880b883a 	mov	r5,r17
  8039dc:	dc000904 	addi	r16,sp,36
  8039e0:	d8c00115 	stw	r3,4(sp)
  8039e4:	d8800015 	stw	r2,0(sp)
  8039e8:	d9800215 	stw	r6,8(sp)
  8039ec:	dfc01015 	stw	ra,64(sp)
  8039f0:	d9c00315 	stw	r7,12(sp)
  8039f4:	08044500 	call	804450 <__unpack_d>
  8039f8:	d9000204 	addi	r4,sp,8
  8039fc:	800b883a 	mov	r5,r16
  803a00:	08044500 	call	804450 <__unpack_d>
  803a04:	d8800417 	ldw	r2,16(sp)
  803a08:	00c00044 	movi	r3,1
  803a0c:	180d883a 	mov	r6,r3
  803a10:	1880062e 	bgeu	r3,r2,803a2c <__eqdf2+0x70>
  803a14:	d8800917 	ldw	r2,36(sp)
  803a18:	8809883a 	mov	r4,r17
  803a1c:	800b883a 	mov	r5,r16
  803a20:	1880022e 	bgeu	r3,r2,803a2c <__eqdf2+0x70>
  803a24:	08045880 	call	804588 <__fpcmp_parts_d>
  803a28:	100d883a 	mov	r6,r2
  803a2c:	3005883a 	mov	r2,r6
  803a30:	dfc01017 	ldw	ra,64(sp)
  803a34:	dc400f17 	ldw	r17,60(sp)
  803a38:	dc000e17 	ldw	r16,56(sp)
  803a3c:	dec01104 	addi	sp,sp,68
  803a40:	f800283a 	ret

00803a44 <__nedf2>:
  803a44:	deffef04 	addi	sp,sp,-68
  803a48:	dc400f15 	stw	r17,60(sp)
  803a4c:	dc400404 	addi	r17,sp,16
  803a50:	2005883a 	mov	r2,r4
  803a54:	2807883a 	mov	r3,r5
  803a58:	dc000e15 	stw	r16,56(sp)
  803a5c:	d809883a 	mov	r4,sp
  803a60:	880b883a 	mov	r5,r17
  803a64:	dc000904 	addi	r16,sp,36
  803a68:	d8c00115 	stw	r3,4(sp)
  803a6c:	d8800015 	stw	r2,0(sp)
  803a70:	d9800215 	stw	r6,8(sp)
  803a74:	dfc01015 	stw	ra,64(sp)
  803a78:	d9c00315 	stw	r7,12(sp)
  803a7c:	08044500 	call	804450 <__unpack_d>
  803a80:	d9000204 	addi	r4,sp,8
  803a84:	800b883a 	mov	r5,r16
  803a88:	08044500 	call	804450 <__unpack_d>
  803a8c:	d8800417 	ldw	r2,16(sp)
  803a90:	00c00044 	movi	r3,1
  803a94:	180d883a 	mov	r6,r3
  803a98:	1880062e 	bgeu	r3,r2,803ab4 <__nedf2+0x70>
  803a9c:	d8800917 	ldw	r2,36(sp)
  803aa0:	8809883a 	mov	r4,r17
  803aa4:	800b883a 	mov	r5,r16
  803aa8:	1880022e 	bgeu	r3,r2,803ab4 <__nedf2+0x70>
  803aac:	08045880 	call	804588 <__fpcmp_parts_d>
  803ab0:	100d883a 	mov	r6,r2
  803ab4:	3005883a 	mov	r2,r6
  803ab8:	dfc01017 	ldw	ra,64(sp)
  803abc:	dc400f17 	ldw	r17,60(sp)
  803ac0:	dc000e17 	ldw	r16,56(sp)
  803ac4:	dec01104 	addi	sp,sp,68
  803ac8:	f800283a 	ret

00803acc <__gtdf2>:
  803acc:	deffef04 	addi	sp,sp,-68
  803ad0:	dc400f15 	stw	r17,60(sp)
  803ad4:	dc400404 	addi	r17,sp,16
  803ad8:	2005883a 	mov	r2,r4
  803adc:	2807883a 	mov	r3,r5
  803ae0:	dc000e15 	stw	r16,56(sp)
  803ae4:	d809883a 	mov	r4,sp
  803ae8:	880b883a 	mov	r5,r17
  803aec:	dc000904 	addi	r16,sp,36
  803af0:	d8c00115 	stw	r3,4(sp)
  803af4:	d8800015 	stw	r2,0(sp)
  803af8:	d9800215 	stw	r6,8(sp)
  803afc:	dfc01015 	stw	ra,64(sp)
  803b00:	d9c00315 	stw	r7,12(sp)
  803b04:	08044500 	call	804450 <__unpack_d>
  803b08:	d9000204 	addi	r4,sp,8
  803b0c:	800b883a 	mov	r5,r16
  803b10:	08044500 	call	804450 <__unpack_d>
  803b14:	d8800417 	ldw	r2,16(sp)
  803b18:	00c00044 	movi	r3,1
  803b1c:	01bfffc4 	movi	r6,-1
  803b20:	1880062e 	bgeu	r3,r2,803b3c <__gtdf2+0x70>
  803b24:	d8800917 	ldw	r2,36(sp)
  803b28:	8809883a 	mov	r4,r17
  803b2c:	800b883a 	mov	r5,r16
  803b30:	1880022e 	bgeu	r3,r2,803b3c <__gtdf2+0x70>
  803b34:	08045880 	call	804588 <__fpcmp_parts_d>
  803b38:	100d883a 	mov	r6,r2
  803b3c:	3005883a 	mov	r2,r6
  803b40:	dfc01017 	ldw	ra,64(sp)
  803b44:	dc400f17 	ldw	r17,60(sp)
  803b48:	dc000e17 	ldw	r16,56(sp)
  803b4c:	dec01104 	addi	sp,sp,68
  803b50:	f800283a 	ret

00803b54 <__ltdf2>:
  803b54:	deffef04 	addi	sp,sp,-68
  803b58:	dc400f15 	stw	r17,60(sp)
  803b5c:	dc400404 	addi	r17,sp,16
  803b60:	2005883a 	mov	r2,r4
  803b64:	2807883a 	mov	r3,r5
  803b68:	dc000e15 	stw	r16,56(sp)
  803b6c:	d809883a 	mov	r4,sp
  803b70:	880b883a 	mov	r5,r17
  803b74:	dc000904 	addi	r16,sp,36
  803b78:	d8c00115 	stw	r3,4(sp)
  803b7c:	d8800015 	stw	r2,0(sp)
  803b80:	d9800215 	stw	r6,8(sp)
  803b84:	dfc01015 	stw	ra,64(sp)
  803b88:	d9c00315 	stw	r7,12(sp)
  803b8c:	08044500 	call	804450 <__unpack_d>
  803b90:	d9000204 	addi	r4,sp,8
  803b94:	800b883a 	mov	r5,r16
  803b98:	08044500 	call	804450 <__unpack_d>
  803b9c:	d8800417 	ldw	r2,16(sp)
  803ba0:	00c00044 	movi	r3,1
  803ba4:	180d883a 	mov	r6,r3
  803ba8:	1880062e 	bgeu	r3,r2,803bc4 <__ltdf2+0x70>
  803bac:	d8800917 	ldw	r2,36(sp)
  803bb0:	8809883a 	mov	r4,r17
  803bb4:	800b883a 	mov	r5,r16
  803bb8:	1880022e 	bgeu	r3,r2,803bc4 <__ltdf2+0x70>
  803bbc:	08045880 	call	804588 <__fpcmp_parts_d>
  803bc0:	100d883a 	mov	r6,r2
  803bc4:	3005883a 	mov	r2,r6
  803bc8:	dfc01017 	ldw	ra,64(sp)
  803bcc:	dc400f17 	ldw	r17,60(sp)
  803bd0:	dc000e17 	ldw	r16,56(sp)
  803bd4:	dec01104 	addi	sp,sp,68
  803bd8:	f800283a 	ret

00803bdc <__ledf2>:
  803bdc:	deffef04 	addi	sp,sp,-68
  803be0:	dc400f15 	stw	r17,60(sp)
  803be4:	dc400404 	addi	r17,sp,16
  803be8:	2005883a 	mov	r2,r4
  803bec:	2807883a 	mov	r3,r5
  803bf0:	dc000e15 	stw	r16,56(sp)
  803bf4:	d809883a 	mov	r4,sp
  803bf8:	880b883a 	mov	r5,r17
  803bfc:	dc000904 	addi	r16,sp,36
  803c00:	d8c00115 	stw	r3,4(sp)
  803c04:	d8800015 	stw	r2,0(sp)
  803c08:	d9800215 	stw	r6,8(sp)
  803c0c:	dfc01015 	stw	ra,64(sp)
  803c10:	d9c00315 	stw	r7,12(sp)
  803c14:	08044500 	call	804450 <__unpack_d>
  803c18:	d9000204 	addi	r4,sp,8
  803c1c:	800b883a 	mov	r5,r16
  803c20:	08044500 	call	804450 <__unpack_d>
  803c24:	d8800417 	ldw	r2,16(sp)
  803c28:	00c00044 	movi	r3,1
  803c2c:	180d883a 	mov	r6,r3
  803c30:	1880062e 	bgeu	r3,r2,803c4c <__ledf2+0x70>
  803c34:	d8800917 	ldw	r2,36(sp)
  803c38:	8809883a 	mov	r4,r17
  803c3c:	800b883a 	mov	r5,r16
  803c40:	1880022e 	bgeu	r3,r2,803c4c <__ledf2+0x70>
  803c44:	08045880 	call	804588 <__fpcmp_parts_d>
  803c48:	100d883a 	mov	r6,r2
  803c4c:	3005883a 	mov	r2,r6
  803c50:	dfc01017 	ldw	ra,64(sp)
  803c54:	dc400f17 	ldw	r17,60(sp)
  803c58:	dc000e17 	ldw	r16,56(sp)
  803c5c:	dec01104 	addi	sp,sp,68
  803c60:	f800283a 	ret

00803c64 <__floatsidf>:
  803c64:	2006d7fa 	srli	r3,r4,31
  803c68:	defff604 	addi	sp,sp,-40
  803c6c:	008000c4 	movi	r2,3
  803c70:	dfc00915 	stw	ra,36(sp)
  803c74:	dcc00815 	stw	r19,32(sp)
  803c78:	dc800715 	stw	r18,28(sp)
  803c7c:	dc400615 	stw	r17,24(sp)
  803c80:	dc000515 	stw	r16,20(sp)
  803c84:	d8800015 	stw	r2,0(sp)
  803c88:	d8c00115 	stw	r3,4(sp)
  803c8c:	20000f1e 	bne	r4,zero,803ccc <__floatsidf+0x68>
  803c90:	00800084 	movi	r2,2
  803c94:	d8800015 	stw	r2,0(sp)
  803c98:	d809883a 	mov	r4,sp
  803c9c:	080413c0 	call	80413c <__pack_d>
  803ca0:	1009883a 	mov	r4,r2
  803ca4:	180b883a 	mov	r5,r3
  803ca8:	2005883a 	mov	r2,r4
  803cac:	2807883a 	mov	r3,r5
  803cb0:	dfc00917 	ldw	ra,36(sp)
  803cb4:	dcc00817 	ldw	r19,32(sp)
  803cb8:	dc800717 	ldw	r18,28(sp)
  803cbc:	dc400617 	ldw	r17,24(sp)
  803cc0:	dc000517 	ldw	r16,20(sp)
  803cc4:	dec00a04 	addi	sp,sp,40
  803cc8:	f800283a 	ret
  803ccc:	00800f04 	movi	r2,60
  803cd0:	1807003a 	cmpeq	r3,r3,zero
  803cd4:	d8800215 	stw	r2,8(sp)
  803cd8:	18001126 	beq	r3,zero,803d20 <__floatsidf+0xbc>
  803cdc:	0027883a 	mov	r19,zero
  803ce0:	2025883a 	mov	r18,r4
  803ce4:	d9000315 	stw	r4,12(sp)
  803ce8:	dcc00415 	stw	r19,16(sp)
  803cec:	0803e680 	call	803e68 <__clzsi2>
  803cf0:	11000744 	addi	r4,r2,29
  803cf4:	013fe80e 	bge	zero,r4,803c98 <__floatsidf+0x34>
  803cf8:	10bfff44 	addi	r2,r2,-3
  803cfc:	10000c16 	blt	r2,zero,803d30 <__floatsidf+0xcc>
  803d00:	90a2983a 	sll	r17,r18,r2
  803d04:	0021883a 	mov	r16,zero
  803d08:	d8800217 	ldw	r2,8(sp)
  803d0c:	dc400415 	stw	r17,16(sp)
  803d10:	dc000315 	stw	r16,12(sp)
  803d14:	1105c83a 	sub	r2,r2,r4
  803d18:	d8800215 	stw	r2,8(sp)
  803d1c:	003fde06 	br	803c98 <__floatsidf+0x34>
  803d20:	00a00034 	movhi	r2,32768
  803d24:	20800a26 	beq	r4,r2,803d50 <__floatsidf+0xec>
  803d28:	0109c83a 	sub	r4,zero,r4
  803d2c:	003feb06 	br	803cdc <__floatsidf+0x78>
  803d30:	9006d07a 	srli	r3,r18,1
  803d34:	008007c4 	movi	r2,31
  803d38:	1105c83a 	sub	r2,r2,r4
  803d3c:	1886d83a 	srl	r3,r3,r2
  803d40:	9922983a 	sll	r17,r19,r4
  803d44:	9120983a 	sll	r16,r18,r4
  803d48:	1c62b03a 	or	r17,r3,r17
  803d4c:	003fee06 	br	803d08 <__floatsidf+0xa4>
  803d50:	0009883a 	mov	r4,zero
  803d54:	01707834 	movhi	r5,49632
  803d58:	003fd306 	br	803ca8 <__floatsidf+0x44>

00803d5c <__truncdfsf2>:
  803d5c:	defff804 	addi	sp,sp,-32
  803d60:	2005883a 	mov	r2,r4
  803d64:	2807883a 	mov	r3,r5
  803d68:	d809883a 	mov	r4,sp
  803d6c:	d9400204 	addi	r5,sp,8
  803d70:	d8c00115 	stw	r3,4(sp)
  803d74:	d8800015 	stw	r2,0(sp)
  803d78:	dfc00715 	stw	ra,28(sp)
  803d7c:	08044500 	call	804450 <__unpack_d>
  803d80:	d9c00517 	ldw	r7,20(sp)
  803d84:	da000617 	ldw	r8,24(sp)
  803d88:	02d00034 	movhi	r11,16384
  803d8c:	5affffc4 	addi	r11,r11,-1
  803d90:	3812d7ba 	srli	r9,r7,30
  803d94:	401a90ba 	slli	r13,r8,2
  803d98:	3ac4703a 	and	r2,r7,r11
  803d9c:	0007883a 	mov	r3,zero
  803da0:	6a52b03a 	or	r9,r13,r9
  803da4:	10c4b03a 	or	r2,r2,r3
  803da8:	d9000217 	ldw	r4,8(sp)
  803dac:	d9400317 	ldw	r5,12(sp)
  803db0:	d9800417 	ldw	r6,16(sp)
  803db4:	480f883a 	mov	r7,r9
  803db8:	10000126 	beq	r2,zero,803dc0 <__truncdfsf2+0x64>
  803dbc:	49c00054 	ori	r7,r9,1
  803dc0:	08041100 	call	804110 <__make_fp>
  803dc4:	dfc00717 	ldw	ra,28(sp)
  803dc8:	dec00804 	addi	sp,sp,32
  803dcc:	f800283a 	ret

00803dd0 <__muldi3>:
  803dd0:	2011883a 	mov	r8,r4
  803dd4:	427fffcc 	andi	r9,r8,65535
  803dd8:	4018d43a 	srli	r12,r8,16
  803ddc:	32bfffcc 	andi	r10,r6,65535
  803de0:	3016d43a 	srli	r11,r6,16
  803de4:	4a85383a 	mul	r2,r9,r10
  803de8:	6295383a 	mul	r10,r12,r10
  803dec:	4ad3383a 	mul	r9,r9,r11
  803df0:	113fffcc 	andi	r4,r2,65535
  803df4:	1004d43a 	srli	r2,r2,16
  803df8:	4a93883a 	add	r9,r9,r10
  803dfc:	3807883a 	mov	r3,r7
  803e00:	1245883a 	add	r2,r2,r9
  803e04:	280f883a 	mov	r7,r5
  803e08:	180b883a 	mov	r5,r3
  803e0c:	1006943a 	slli	r3,r2,16
  803e10:	defffd04 	addi	sp,sp,-12
  803e14:	dc800215 	stw	r18,8(sp)
  803e18:	1907883a 	add	r3,r3,r4
  803e1c:	dc400115 	stw	r17,4(sp)
  803e20:	dc000015 	stw	r16,0(sp)
  803e24:	4165383a 	mul	r18,r8,r5
  803e28:	31e3383a 	mul	r17,r6,r7
  803e2c:	1012d43a 	srli	r9,r2,16
  803e30:	62d9383a 	mul	r12,r12,r11
  803e34:	181f883a 	mov	r15,r3
  803e38:	1280022e 	bgeu	r2,r10,803e44 <__muldi3+0x74>
  803e3c:	00800074 	movhi	r2,1
  803e40:	6099883a 	add	r12,r12,r2
  803e44:	624d883a 	add	r6,r12,r9
  803e48:	9187883a 	add	r3,r18,r6
  803e4c:	88c7883a 	add	r3,r17,r3
  803e50:	7805883a 	mov	r2,r15
  803e54:	dc800217 	ldw	r18,8(sp)
  803e58:	dc400117 	ldw	r17,4(sp)
  803e5c:	dc000017 	ldw	r16,0(sp)
  803e60:	dec00304 	addi	sp,sp,12
  803e64:	f800283a 	ret

00803e68 <__clzsi2>:
  803e68:	00bfffd4 	movui	r2,65535
  803e6c:	11000e36 	bltu	r2,r4,803ea8 <__clzsi2+0x40>
  803e70:	00803fc4 	movi	r2,255
  803e74:	01400204 	movi	r5,8
  803e78:	0007883a 	mov	r3,zero
  803e7c:	11001036 	bltu	r2,r4,803ec0 <__clzsi2+0x58>
  803e80:	000b883a 	mov	r5,zero
  803e84:	20c6d83a 	srl	r3,r4,r3
  803e88:	00802074 	movhi	r2,129
  803e8c:	1090d604 	addi	r2,r2,17240
  803e90:	1887883a 	add	r3,r3,r2
  803e94:	18800003 	ldbu	r2,0(r3)
  803e98:	00c00804 	movi	r3,32
  803e9c:	2885883a 	add	r2,r5,r2
  803ea0:	1885c83a 	sub	r2,r3,r2
  803ea4:	f800283a 	ret
  803ea8:	01400404 	movi	r5,16
  803eac:	00804034 	movhi	r2,256
  803eb0:	10bfffc4 	addi	r2,r2,-1
  803eb4:	2807883a 	mov	r3,r5
  803eb8:	113ff22e 	bgeu	r2,r4,803e84 <__clzsi2+0x1c>
  803ebc:	01400604 	movi	r5,24
  803ec0:	2807883a 	mov	r3,r5
  803ec4:	20c6d83a 	srl	r3,r4,r3
  803ec8:	00802074 	movhi	r2,129
  803ecc:	1090d604 	addi	r2,r2,17240
  803ed0:	1887883a 	add	r3,r3,r2
  803ed4:	18800003 	ldbu	r2,0(r3)
  803ed8:	00c00804 	movi	r3,32
  803edc:	2885883a 	add	r2,r5,r2
  803ee0:	1885c83a 	sub	r2,r3,r2
  803ee4:	f800283a 	ret

00803ee8 <__pack_f>:
  803ee8:	20c00017 	ldw	r3,0(r4)
  803eec:	01c00044 	movi	r7,1
  803ef0:	21800317 	ldw	r6,12(r4)
  803ef4:	21400117 	ldw	r5,4(r4)
  803ef8:	38c02d2e 	bgeu	r7,r3,803fb0 <__pack_f+0xc8>
  803efc:	00800104 	movi	r2,4
  803f00:	18802826 	beq	r3,r2,803fa4 <__pack_f+0xbc>
  803f04:	00800084 	movi	r2,2
  803f08:	18800126 	beq	r3,r2,803f10 <__pack_f+0x28>
  803f0c:	3000101e 	bne	r6,zero,803f50 <__pack_f+0x68>
  803f10:	000d883a 	mov	r6,zero
  803f14:	0007883a 	mov	r3,zero
  803f18:	19003fcc 	andi	r4,r3,255
  803f1c:	200895fa 	slli	r4,r4,23
  803f20:	00c02034 	movhi	r3,128
  803f24:	18ffffc4 	addi	r3,r3,-1
  803f28:	30c6703a 	and	r3,r6,r3
  803f2c:	10a0002c 	andhi	r2,r2,32768
  803f30:	10c4b03a 	or	r2,r2,r3
  803f34:	280a97fa 	slli	r5,r5,31
  803f38:	1104b03a 	or	r2,r2,r4
  803f3c:	00e00034 	movhi	r3,32768
  803f40:	18ffffc4 	addi	r3,r3,-1
  803f44:	10c4703a 	and	r2,r2,r3
  803f48:	1144b03a 	or	r2,r2,r5
  803f4c:	f800283a 	ret
  803f50:	21000217 	ldw	r4,8(r4)
  803f54:	00bfe084 	movi	r2,-126
  803f58:	20801b16 	blt	r4,r2,803fc8 <__pack_f+0xe0>
  803f5c:	00801fc4 	movi	r2,127
  803f60:	11001016 	blt	r2,r4,803fa4 <__pack_f+0xbc>
  803f64:	308e703a 	and	r7,r6,r2
  803f68:	2087883a 	add	r3,r4,r2
  803f6c:	00801004 	movi	r2,64
  803f70:	38800526 	beq	r7,r2,803f88 <__pack_f+0xa0>
  803f74:	31800fc4 	addi	r6,r6,63
  803f78:	30000716 	blt	r6,zero,803f98 <__pack_f+0xb0>
  803f7c:	300490ba 	slli	r2,r6,2
  803f80:	100cd27a 	srli	r6,r2,9
  803f84:	003fe406 	br	803f18 <__pack_f+0x30>
  803f88:	3080200c 	andi	r2,r6,128
  803f8c:	103ffa26 	beq	r2,zero,803f78 <__pack_f+0x90>
  803f90:	31cd883a 	add	r6,r6,r7
  803f94:	003ff806 	br	803f78 <__pack_f+0x90>
  803f98:	300cd07a 	srli	r6,r6,1
  803f9c:	18c00044 	addi	r3,r3,1
  803fa0:	003ff606 	br	803f7c <__pack_f+0x94>
  803fa4:	000d883a 	mov	r6,zero
  803fa8:	00ffffc4 	movi	r3,-1
  803fac:	003fda06 	br	803f18 <__pack_f+0x30>
  803fb0:	31800434 	orhi	r6,r6,16
  803fb4:	00802034 	movhi	r2,128
  803fb8:	10bfffc4 	addi	r2,r2,-1
  803fbc:	308c703a 	and	r6,r6,r2
  803fc0:	00ffffc4 	movi	r3,-1
  803fc4:	003fd406 	br	803f18 <__pack_f+0x30>
  803fc8:	1109c83a 	sub	r4,r2,r4
  803fcc:	00800644 	movi	r2,25
  803fd0:	11001216 	blt	r2,r4,80401c <__pack_f+0x134>
  803fd4:	3904983a 	sll	r2,r7,r4
  803fd8:	3106d83a 	srl	r3,r6,r4
  803fdc:	10bfffc4 	addi	r2,r2,-1
  803fe0:	3084703a 	and	r2,r6,r2
  803fe4:	1004c03a 	cmpne	r2,r2,zero
  803fe8:	1886b03a 	or	r3,r3,r2
  803fec:	19001fcc 	andi	r4,r3,127
  803ff0:	00801004 	movi	r2,64
  803ff4:	20800c26 	beq	r4,r2,804028 <__pack_f+0x140>
  803ff8:	18c00fc4 	addi	r3,r3,63
  803ffc:	00900034 	movhi	r2,16384
  804000:	10bfffc4 	addi	r2,r2,-1
  804004:	180cd1fa 	srli	r6,r3,7
  804008:	10c7803a 	cmpltu	r3,r2,r3
  80400c:	00802034 	movhi	r2,128
  804010:	10bfffc4 	addi	r2,r2,-1
  804014:	308c703a 	and	r6,r6,r2
  804018:	003fbf06 	br	803f18 <__pack_f+0x30>
  80401c:	0007883a 	mov	r3,zero
  804020:	000d883a 	mov	r6,zero
  804024:	003ff906 	br	80400c <__pack_f+0x124>
  804028:	1880200c 	andi	r2,r3,128
  80402c:	10000126 	beq	r2,zero,804034 <__pack_f+0x14c>
  804030:	1907883a 	add	r3,r3,r4
  804034:	180cd1fa 	srli	r6,r3,7
  804038:	00900034 	movhi	r2,16384
  80403c:	10bfffc4 	addi	r2,r2,-1
  804040:	10c7803a 	cmpltu	r3,r2,r3
  804044:	003ff106 	br	80400c <__pack_f+0x124>

00804048 <__unpack_f>:
  804048:	21800017 	ldw	r6,0(r4)
  80404c:	00c02034 	movhi	r3,128
  804050:	18ffffc4 	addi	r3,r3,-1
  804054:	3004d5fa 	srli	r2,r6,23
  804058:	3008d7fa 	srli	r4,r6,31
  80405c:	30ce703a 	and	r7,r6,r3
  804060:	10c03fcc 	andi	r3,r2,255
  804064:	29000115 	stw	r4,4(r5)
  804068:	1800131e 	bne	r3,zero,8040b8 <__unpack_f+0x70>
  80406c:	38000f26 	beq	r7,zero,8040ac <__unpack_f+0x64>
  804070:	380691fa 	slli	r3,r7,7
  804074:	01bfe084 	movi	r6,-126
  804078:	008000c4 	movi	r2,3
  80407c:	01100034 	movhi	r4,16384
  804080:	213fffc4 	addi	r4,r4,-1
  804084:	28800015 	stw	r2,0(r5)
  804088:	29800215 	stw	r6,8(r5)
  80408c:	20c00536 	bltu	r4,r3,8040a4 <__unpack_f+0x5c>
  804090:	3005883a 	mov	r2,r6
  804094:	18c7883a 	add	r3,r3,r3
  804098:	10bfffc4 	addi	r2,r2,-1
  80409c:	20fffd2e 	bgeu	r4,r3,804094 <__unpack_f+0x4c>
  8040a0:	28800215 	stw	r2,8(r5)
  8040a4:	28c00315 	stw	r3,12(r5)
  8040a8:	f800283a 	ret
  8040ac:	00800084 	movi	r2,2
  8040b0:	28800015 	stw	r2,0(r5)
  8040b4:	f800283a 	ret
  8040b8:	00803fc4 	movi	r2,255
  8040bc:	18800826 	beq	r3,r2,8040e0 <__unpack_f+0x98>
  8040c0:	380491fa 	slli	r2,r7,7
  8040c4:	18ffe044 	addi	r3,r3,-127
  8040c8:	28c00215 	stw	r3,8(r5)
  8040cc:	10900034 	orhi	r2,r2,16384
  8040d0:	28800315 	stw	r2,12(r5)
  8040d4:	008000c4 	movi	r2,3
  8040d8:	28800015 	stw	r2,0(r5)
  8040dc:	f800283a 	ret
  8040e0:	3800031e 	bne	r7,zero,8040f0 <__unpack_f+0xa8>
  8040e4:	00800104 	movi	r2,4
  8040e8:	28800015 	stw	r2,0(r5)
  8040ec:	f800283a 	ret
  8040f0:	3080042c 	andhi	r2,r6,16
  8040f4:	10000426 	beq	r2,zero,804108 <__unpack_f+0xc0>
  8040f8:	00800044 	movi	r2,1
  8040fc:	28800015 	stw	r2,0(r5)
  804100:	29c00315 	stw	r7,12(r5)
  804104:	f800283a 	ret
  804108:	28000015 	stw	zero,0(r5)
  80410c:	003ffc06 	br	804100 <__unpack_f+0xb8>

00804110 <__make_fp>:
  804110:	defffb04 	addi	sp,sp,-20
  804114:	d9000015 	stw	r4,0(sp)
  804118:	d809883a 	mov	r4,sp
  80411c:	dfc00415 	stw	ra,16(sp)
  804120:	d9400115 	stw	r5,4(sp)
  804124:	d9800215 	stw	r6,8(sp)
  804128:	d9c00315 	stw	r7,12(sp)
  80412c:	0803ee80 	call	803ee8 <__pack_f>
  804130:	dfc00417 	ldw	ra,16(sp)
  804134:	dec00504 	addi	sp,sp,20
  804138:	f800283a 	ret

0080413c <__pack_d>:
  80413c:	20c00017 	ldw	r3,0(r4)
  804140:	defffd04 	addi	sp,sp,-12
  804144:	dc000015 	stw	r16,0(sp)
  804148:	dc800215 	stw	r18,8(sp)
  80414c:	dc400115 	stw	r17,4(sp)
  804150:	00800044 	movi	r2,1
  804154:	22000317 	ldw	r8,12(r4)
  804158:	001f883a 	mov	r15,zero
  80415c:	22400417 	ldw	r9,16(r4)
  804160:	24000117 	ldw	r16,4(r4)
  804164:	10c0552e 	bgeu	r2,r3,8042bc <__pack_d+0x180>
  804168:	00800104 	movi	r2,4
  80416c:	18804f26 	beq	r3,r2,8042ac <__pack_d+0x170>
  804170:	00800084 	movi	r2,2
  804174:	18800226 	beq	r3,r2,804180 <__pack_d+0x44>
  804178:	4244b03a 	or	r2,r8,r9
  80417c:	10001a1e 	bne	r2,zero,8041e8 <__pack_d+0xac>
  804180:	000d883a 	mov	r6,zero
  804184:	000f883a 	mov	r7,zero
  804188:	0011883a 	mov	r8,zero
  80418c:	00800434 	movhi	r2,16
  804190:	10bfffc4 	addi	r2,r2,-1
  804194:	301d883a 	mov	r14,r6
  804198:	3884703a 	and	r2,r7,r2
  80419c:	400a953a 	slli	r5,r8,20
  8041a0:	79bffc2c 	andhi	r6,r15,65520
  8041a4:	308cb03a 	or	r6,r6,r2
  8041a8:	00e00434 	movhi	r3,32784
  8041ac:	18ffffc4 	addi	r3,r3,-1
  8041b0:	800497fa 	slli	r2,r16,31
  8041b4:	30c6703a 	and	r3,r6,r3
  8041b8:	1946b03a 	or	r3,r3,r5
  8041bc:	01600034 	movhi	r5,32768
  8041c0:	297fffc4 	addi	r5,r5,-1
  8041c4:	194a703a 	and	r5,r3,r5
  8041c8:	288ab03a 	or	r5,r5,r2
  8041cc:	2807883a 	mov	r3,r5
  8041d0:	7005883a 	mov	r2,r14
  8041d4:	dc800217 	ldw	r18,8(sp)
  8041d8:	dc400117 	ldw	r17,4(sp)
  8041dc:	dc000017 	ldw	r16,0(sp)
  8041e0:	dec00304 	addi	sp,sp,12
  8041e4:	f800283a 	ret
  8041e8:	21000217 	ldw	r4,8(r4)
  8041ec:	00bf0084 	movi	r2,-1022
  8041f0:	20803f16 	blt	r4,r2,8042f0 <__pack_d+0x1b4>
  8041f4:	0080ffc4 	movi	r2,1023
  8041f8:	11002c16 	blt	r2,r4,8042ac <__pack_d+0x170>
  8041fc:	00803fc4 	movi	r2,255
  804200:	408c703a 	and	r6,r8,r2
  804204:	00802004 	movi	r2,128
  804208:	0007883a 	mov	r3,zero
  80420c:	000f883a 	mov	r7,zero
  804210:	2280ffc4 	addi	r10,r4,1023
  804214:	30801e26 	beq	r6,r2,804290 <__pack_d+0x154>
  804218:	00801fc4 	movi	r2,127
  80421c:	4089883a 	add	r4,r8,r2
  804220:	220d803a 	cmpltu	r6,r4,r8
  804224:	324d883a 	add	r6,r6,r9
  804228:	2011883a 	mov	r8,r4
  80422c:	3013883a 	mov	r9,r6
  804230:	00880034 	movhi	r2,8192
  804234:	10bfffc4 	addi	r2,r2,-1
  804238:	12400d36 	bltu	r2,r9,804270 <__pack_d+0x134>
  80423c:	4804963a 	slli	r2,r9,24
  804240:	400cd23a 	srli	r6,r8,8
  804244:	480ed23a 	srli	r7,r9,8
  804248:	013fffc4 	movi	r4,-1
  80424c:	118cb03a 	or	r6,r2,r6
  804250:	01400434 	movhi	r5,16
  804254:	297fffc4 	addi	r5,r5,-1
  804258:	3104703a 	and	r2,r6,r4
  80425c:	3946703a 	and	r3,r7,r5
  804260:	5201ffcc 	andi	r8,r10,2047
  804264:	100d883a 	mov	r6,r2
  804268:	180f883a 	mov	r7,r3
  80426c:	003fc706 	br	80418c <__pack_d+0x50>
  804270:	480897fa 	slli	r4,r9,31
  804274:	4004d07a 	srli	r2,r8,1
  804278:	4806d07a 	srli	r3,r9,1
  80427c:	52800044 	addi	r10,r10,1
  804280:	2084b03a 	or	r2,r4,r2
  804284:	1011883a 	mov	r8,r2
  804288:	1813883a 	mov	r9,r3
  80428c:	003feb06 	br	80423c <__pack_d+0x100>
  804290:	383fe11e 	bne	r7,zero,804218 <__pack_d+0xdc>
  804294:	01004004 	movi	r4,256
  804298:	4104703a 	and	r2,r8,r4
  80429c:	10c4b03a 	or	r2,r2,r3
  8042a0:	103fe326 	beq	r2,zero,804230 <__pack_d+0xf4>
  8042a4:	3005883a 	mov	r2,r6
  8042a8:	003fdc06 	br	80421c <__pack_d+0xe0>
  8042ac:	000d883a 	mov	r6,zero
  8042b0:	000f883a 	mov	r7,zero
  8042b4:	0201ffc4 	movi	r8,2047
  8042b8:	003fb406 	br	80418c <__pack_d+0x50>
  8042bc:	0005883a 	mov	r2,zero
  8042c0:	00c00234 	movhi	r3,8
  8042c4:	408cb03a 	or	r6,r8,r2
  8042c8:	48ceb03a 	or	r7,r9,r3
  8042cc:	013fffc4 	movi	r4,-1
  8042d0:	01400434 	movhi	r5,16
  8042d4:	297fffc4 	addi	r5,r5,-1
  8042d8:	3104703a 	and	r2,r6,r4
  8042dc:	3946703a 	and	r3,r7,r5
  8042e0:	100d883a 	mov	r6,r2
  8042e4:	180f883a 	mov	r7,r3
  8042e8:	0201ffc4 	movi	r8,2047
  8042ec:	003fa706 	br	80418c <__pack_d+0x50>
  8042f0:	1109c83a 	sub	r4,r2,r4
  8042f4:	00800e04 	movi	r2,56
  8042f8:	11004316 	blt	r2,r4,804408 <__pack_d+0x2cc>
  8042fc:	21fff804 	addi	r7,r4,-32
  804300:	38004516 	blt	r7,zero,804418 <__pack_d+0x2dc>
  804304:	49d8d83a 	srl	r12,r9,r7
  804308:	001b883a 	mov	r13,zero
  80430c:	0023883a 	mov	r17,zero
  804310:	01400044 	movi	r5,1
  804314:	0025883a 	mov	r18,zero
  804318:	38004716 	blt	r7,zero,804438 <__pack_d+0x2fc>
  80431c:	29d6983a 	sll	r11,r5,r7
  804320:	0015883a 	mov	r10,zero
  804324:	00bfffc4 	movi	r2,-1
  804328:	5089883a 	add	r4,r10,r2
  80432c:	588b883a 	add	r5,r11,r2
  804330:	228d803a 	cmpltu	r6,r4,r10
  804334:	314b883a 	add	r5,r6,r5
  804338:	4104703a 	and	r2,r8,r4
  80433c:	4946703a 	and	r3,r9,r5
  804340:	10c4b03a 	or	r2,r2,r3
  804344:	10000226 	beq	r2,zero,804350 <__pack_d+0x214>
  804348:	04400044 	movi	r17,1
  80434c:	0025883a 	mov	r18,zero
  804350:	00803fc4 	movi	r2,255
  804354:	644eb03a 	or	r7,r12,r17
  804358:	3892703a 	and	r9,r7,r2
  80435c:	00802004 	movi	r2,128
  804360:	6c90b03a 	or	r8,r13,r18
  804364:	0015883a 	mov	r10,zero
  804368:	48801626 	beq	r9,r2,8043c4 <__pack_d+0x288>
  80436c:	01001fc4 	movi	r4,127
  804370:	3905883a 	add	r2,r7,r4
  804374:	11cd803a 	cmpltu	r6,r2,r7
  804378:	320d883a 	add	r6,r6,r8
  80437c:	100f883a 	mov	r7,r2
  804380:	00840034 	movhi	r2,4096
  804384:	10bfffc4 	addi	r2,r2,-1
  804388:	3011883a 	mov	r8,r6
  80438c:	0007883a 	mov	r3,zero
  804390:	11801b36 	bltu	r2,r6,804400 <__pack_d+0x2c4>
  804394:	4004963a 	slli	r2,r8,24
  804398:	3808d23a 	srli	r4,r7,8
  80439c:	400ad23a 	srli	r5,r8,8
  8043a0:	1813883a 	mov	r9,r3
  8043a4:	1108b03a 	or	r4,r2,r4
  8043a8:	00bfffc4 	movi	r2,-1
  8043ac:	00c00434 	movhi	r3,16
  8043b0:	18ffffc4 	addi	r3,r3,-1
  8043b4:	208c703a 	and	r6,r4,r2
  8043b8:	28ce703a 	and	r7,r5,r3
  8043bc:	4a01ffcc 	andi	r8,r9,2047
  8043c0:	003f7206 	br	80418c <__pack_d+0x50>
  8043c4:	503fe91e 	bne	r10,zero,80436c <__pack_d+0x230>
  8043c8:	01004004 	movi	r4,256
  8043cc:	3904703a 	and	r2,r7,r4
  8043d0:	0007883a 	mov	r3,zero
  8043d4:	10c4b03a 	or	r2,r2,r3
  8043d8:	10000626 	beq	r2,zero,8043f4 <__pack_d+0x2b8>
  8043dc:	3a45883a 	add	r2,r7,r9
  8043e0:	11cd803a 	cmpltu	r6,r2,r7
  8043e4:	320d883a 	add	r6,r6,r8
  8043e8:	100f883a 	mov	r7,r2
  8043ec:	3011883a 	mov	r8,r6
  8043f0:	0007883a 	mov	r3,zero
  8043f4:	00840034 	movhi	r2,4096
  8043f8:	10bfffc4 	addi	r2,r2,-1
  8043fc:	123fe52e 	bgeu	r2,r8,804394 <__pack_d+0x258>
  804400:	00c00044 	movi	r3,1
  804404:	003fe306 	br	804394 <__pack_d+0x258>
  804408:	0009883a 	mov	r4,zero
  80440c:	0013883a 	mov	r9,zero
  804410:	000b883a 	mov	r5,zero
  804414:	003fe406 	br	8043a8 <__pack_d+0x26c>
  804418:	4a47883a 	add	r3,r9,r9
  80441c:	008007c4 	movi	r2,31
  804420:	1105c83a 	sub	r2,r2,r4
  804424:	1886983a 	sll	r3,r3,r2
  804428:	4118d83a 	srl	r12,r8,r4
  80442c:	491ad83a 	srl	r13,r9,r4
  804430:	1b18b03a 	or	r12,r3,r12
  804434:	003fb506 	br	80430c <__pack_d+0x1d0>
  804438:	2806d07a 	srli	r3,r5,1
  80443c:	008007c4 	movi	r2,31
  804440:	1105c83a 	sub	r2,r2,r4
  804444:	1896d83a 	srl	r11,r3,r2
  804448:	2914983a 	sll	r10,r5,r4
  80444c:	003fb506 	br	804324 <__pack_d+0x1e8>

00804450 <__unpack_d>:
  804450:	20c00117 	ldw	r3,4(r4)
  804454:	22400017 	ldw	r9,0(r4)
  804458:	00800434 	movhi	r2,16
  80445c:	10bfffc4 	addi	r2,r2,-1
  804460:	1808d53a 	srli	r4,r3,20
  804464:	180cd7fa 	srli	r6,r3,31
  804468:	1894703a 	and	r10,r3,r2
  80446c:	2201ffcc 	andi	r8,r4,2047
  804470:	281b883a 	mov	r13,r5
  804474:	4817883a 	mov	r11,r9
  804478:	29800115 	stw	r6,4(r5)
  80447c:	5019883a 	mov	r12,r10
  804480:	40001e1e 	bne	r8,zero,8044fc <__unpack_d+0xac>
  804484:	4a84b03a 	or	r2,r9,r10
  804488:	10001926 	beq	r2,zero,8044f0 <__unpack_d+0xa0>
  80448c:	4804d63a 	srli	r2,r9,24
  804490:	500c923a 	slli	r6,r10,8
  804494:	013f0084 	movi	r4,-1022
  804498:	00c40034 	movhi	r3,4096
  80449c:	18ffffc4 	addi	r3,r3,-1
  8044a0:	118cb03a 	or	r6,r2,r6
  8044a4:	008000c4 	movi	r2,3
  8044a8:	480a923a 	slli	r5,r9,8
  8044ac:	68800015 	stw	r2,0(r13)
  8044b0:	69000215 	stw	r4,8(r13)
  8044b4:	19800b36 	bltu	r3,r6,8044e4 <__unpack_d+0x94>
  8044b8:	200f883a 	mov	r7,r4
  8044bc:	1811883a 	mov	r8,r3
  8044c0:	2945883a 	add	r2,r5,r5
  8044c4:	1149803a 	cmpltu	r4,r2,r5
  8044c8:	3187883a 	add	r3,r6,r6
  8044cc:	20c9883a 	add	r4,r4,r3
  8044d0:	100b883a 	mov	r5,r2
  8044d4:	200d883a 	mov	r6,r4
  8044d8:	39ffffc4 	addi	r7,r7,-1
  8044dc:	413ff82e 	bgeu	r8,r4,8044c0 <__unpack_d+0x70>
  8044e0:	69c00215 	stw	r7,8(r13)
  8044e4:	69800415 	stw	r6,16(r13)
  8044e8:	69400315 	stw	r5,12(r13)
  8044ec:	f800283a 	ret
  8044f0:	00800084 	movi	r2,2
  8044f4:	28800015 	stw	r2,0(r5)
  8044f8:	f800283a 	ret
  8044fc:	0081ffc4 	movi	r2,2047
  804500:	40800f26 	beq	r8,r2,804540 <__unpack_d+0xf0>
  804504:	480cd63a 	srli	r6,r9,24
  804508:	5006923a 	slli	r3,r10,8
  80450c:	4804923a 	slli	r2,r9,8
  804510:	0009883a 	mov	r4,zero
  804514:	30c6b03a 	or	r3,r6,r3
  804518:	01440034 	movhi	r5,4096
  80451c:	110cb03a 	or	r6,r2,r4
  804520:	423f0044 	addi	r8,r8,-1023
  804524:	194eb03a 	or	r7,r3,r5
  804528:	008000c4 	movi	r2,3
  80452c:	69c00415 	stw	r7,16(r13)
  804530:	6a000215 	stw	r8,8(r13)
  804534:	68800015 	stw	r2,0(r13)
  804538:	69800315 	stw	r6,12(r13)
  80453c:	f800283a 	ret
  804540:	4a84b03a 	or	r2,r9,r10
  804544:	1000031e 	bne	r2,zero,804554 <__unpack_d+0x104>
  804548:	00800104 	movi	r2,4
  80454c:	28800015 	stw	r2,0(r5)
  804550:	f800283a 	ret
  804554:	0009883a 	mov	r4,zero
  804558:	01400234 	movhi	r5,8
  80455c:	4904703a 	and	r2,r9,r4
  804560:	5146703a 	and	r3,r10,r5
  804564:	10c4b03a 	or	r2,r2,r3
  804568:	10000526 	beq	r2,zero,804580 <__unpack_d+0x130>
  80456c:	00800044 	movi	r2,1
  804570:	68800015 	stw	r2,0(r13)
  804574:	6b000415 	stw	r12,16(r13)
  804578:	6ac00315 	stw	r11,12(r13)
  80457c:	f800283a 	ret
  804580:	68000015 	stw	zero,0(r13)
  804584:	003ffb06 	br	804574 <__unpack_d+0x124>

00804588 <__fpcmp_parts_d>:
  804588:	21800017 	ldw	r6,0(r4)
  80458c:	00c00044 	movi	r3,1
  804590:	19800a2e 	bgeu	r3,r6,8045bc <__fpcmp_parts_d+0x34>
  804594:	28800017 	ldw	r2,0(r5)
  804598:	1880082e 	bgeu	r3,r2,8045bc <__fpcmp_parts_d+0x34>
  80459c:	00c00104 	movi	r3,4
  8045a0:	30c02626 	beq	r6,r3,80463c <__fpcmp_parts_d+0xb4>
  8045a4:	10c02226 	beq	r2,r3,804630 <__fpcmp_parts_d+0xa8>
  8045a8:	00c00084 	movi	r3,2
  8045ac:	30c00526 	beq	r6,r3,8045c4 <__fpcmp_parts_d+0x3c>
  8045b0:	10c0071e 	bne	r2,r3,8045d0 <__fpcmp_parts_d+0x48>
  8045b4:	20800117 	ldw	r2,4(r4)
  8045b8:	1000091e 	bne	r2,zero,8045e0 <__fpcmp_parts_d+0x58>
  8045bc:	00800044 	movi	r2,1
  8045c0:	f800283a 	ret
  8045c4:	10c01a1e 	bne	r2,r3,804630 <__fpcmp_parts_d+0xa8>
  8045c8:	0005883a 	mov	r2,zero
  8045cc:	f800283a 	ret
  8045d0:	22000117 	ldw	r8,4(r4)
  8045d4:	28800117 	ldw	r2,4(r5)
  8045d8:	40800326 	beq	r8,r2,8045e8 <__fpcmp_parts_d+0x60>
  8045dc:	403ff726 	beq	r8,zero,8045bc <__fpcmp_parts_d+0x34>
  8045e0:	00bfffc4 	movi	r2,-1
  8045e4:	f800283a 	ret
  8045e8:	20c00217 	ldw	r3,8(r4)
  8045ec:	28800217 	ldw	r2,8(r5)
  8045f0:	10fffa16 	blt	r2,r3,8045dc <__fpcmp_parts_d+0x54>
  8045f4:	18800916 	blt	r3,r2,80461c <__fpcmp_parts_d+0x94>
  8045f8:	21c00417 	ldw	r7,16(r4)
  8045fc:	28c00417 	ldw	r3,16(r5)
  804600:	21800317 	ldw	r6,12(r4)
  804604:	28800317 	ldw	r2,12(r5)
  804608:	19fff436 	bltu	r3,r7,8045dc <__fpcmp_parts_d+0x54>
  80460c:	38c00526 	beq	r7,r3,804624 <__fpcmp_parts_d+0x9c>
  804610:	38c00236 	bltu	r7,r3,80461c <__fpcmp_parts_d+0x94>
  804614:	19ffec1e 	bne	r3,r7,8045c8 <__fpcmp_parts_d+0x40>
  804618:	30bfeb2e 	bgeu	r6,r2,8045c8 <__fpcmp_parts_d+0x40>
  80461c:	403fe71e 	bne	r8,zero,8045bc <__fpcmp_parts_d+0x34>
  804620:	003fef06 	br	8045e0 <__fpcmp_parts_d+0x58>
  804624:	11bffa2e 	bgeu	r2,r6,804610 <__fpcmp_parts_d+0x88>
  804628:	403fe426 	beq	r8,zero,8045bc <__fpcmp_parts_d+0x34>
  80462c:	003fec06 	br	8045e0 <__fpcmp_parts_d+0x58>
  804630:	28800117 	ldw	r2,4(r5)
  804634:	103fe11e 	bne	r2,zero,8045bc <__fpcmp_parts_d+0x34>
  804638:	003fe906 	br	8045e0 <__fpcmp_parts_d+0x58>
  80463c:	11bfdd1e 	bne	r2,r6,8045b4 <__fpcmp_parts_d+0x2c>
  804640:	28c00117 	ldw	r3,4(r5)
  804644:	20800117 	ldw	r2,4(r4)
  804648:	1885c83a 	sub	r2,r3,r2
  80464c:	f800283a 	ret

00804650 <__errno>:
  804650:	00c02074 	movhi	r3,129
  804654:	18d82b04 	addi	r3,r3,24748
  804658:	18800017 	ldw	r2,0(r3)
  80465c:	f800283a 	ret

00804660 <_puts_r>:
  804660:	defff604 	addi	sp,sp,-40
  804664:	dc400715 	stw	r17,28(sp)
  804668:	2023883a 	mov	r17,r4
  80466c:	2809883a 	mov	r4,r5
  804670:	dfc00915 	stw	ra,36(sp)
  804674:	dcc00815 	stw	r19,32(sp)
  804678:	2827883a 	mov	r19,r5
  80467c:	08047140 	call	804714 <strlen>
  804680:	89400217 	ldw	r5,8(r17)
  804684:	00c02074 	movhi	r3,129
  804688:	18d11704 	addi	r3,r3,17500
  80468c:	01c00044 	movi	r7,1
  804690:	12000044 	addi	r8,r2,1
  804694:	d8c00515 	stw	r3,20(sp)
  804698:	d9c00615 	stw	r7,24(sp)
  80469c:	d8c00304 	addi	r3,sp,12
  8046a0:	01c00084 	movi	r7,2
  8046a4:	8809883a 	mov	r4,r17
  8046a8:	d80d883a 	mov	r6,sp
  8046ac:	d8c00015 	stw	r3,0(sp)
  8046b0:	dcc00315 	stw	r19,12(sp)
  8046b4:	da000215 	stw	r8,8(sp)
  8046b8:	d9c00115 	stw	r7,4(sp)
  8046bc:	d8800415 	stw	r2,16(sp)
  8046c0:	08047880 	call	804788 <__sfvwrite_r>
  8046c4:	00ffffc4 	movi	r3,-1
  8046c8:	10000626 	beq	r2,zero,8046e4 <_puts_r+0x84>
  8046cc:	1805883a 	mov	r2,r3
  8046d0:	dfc00917 	ldw	ra,36(sp)
  8046d4:	dcc00817 	ldw	r19,32(sp)
  8046d8:	dc400717 	ldw	r17,28(sp)
  8046dc:	dec00a04 	addi	sp,sp,40
  8046e0:	f800283a 	ret
  8046e4:	00c00284 	movi	r3,10
  8046e8:	1805883a 	mov	r2,r3
  8046ec:	dfc00917 	ldw	ra,36(sp)
  8046f0:	dcc00817 	ldw	r19,32(sp)
  8046f4:	dc400717 	ldw	r17,28(sp)
  8046f8:	dec00a04 	addi	sp,sp,40
  8046fc:	f800283a 	ret

00804700 <puts>:
  804700:	00802074 	movhi	r2,129
  804704:	10982b04 	addi	r2,r2,24748
  804708:	200b883a 	mov	r5,r4
  80470c:	11000017 	ldw	r4,0(r2)
  804710:	08046601 	jmpi	804660 <_puts_r>

00804714 <strlen>:
  804714:	208000cc 	andi	r2,r4,3
  804718:	2011883a 	mov	r8,r4
  80471c:	1000161e 	bne	r2,zero,804778 <strlen+0x64>
  804720:	20c00017 	ldw	r3,0(r4)
  804724:	017fbff4 	movhi	r5,65279
  804728:	297fbfc4 	addi	r5,r5,-257
  80472c:	01e02074 	movhi	r7,32897
  804730:	39e02004 	addi	r7,r7,-32640
  804734:	1945883a 	add	r2,r3,r5
  804738:	11c4703a 	and	r2,r2,r7
  80473c:	00c6303a 	nor	r3,zero,r3
  804740:	1886703a 	and	r3,r3,r2
  804744:	18000c1e 	bne	r3,zero,804778 <strlen+0x64>
  804748:	280d883a 	mov	r6,r5
  80474c:	380b883a 	mov	r5,r7
  804750:	21000104 	addi	r4,r4,4
  804754:	20800017 	ldw	r2,0(r4)
  804758:	1187883a 	add	r3,r2,r6
  80475c:	1946703a 	and	r3,r3,r5
  804760:	0084303a 	nor	r2,zero,r2
  804764:	10c4703a 	and	r2,r2,r3
  804768:	103ff926 	beq	r2,zero,804750 <strlen+0x3c>
  80476c:	20800007 	ldb	r2,0(r4)
  804770:	10000326 	beq	r2,zero,804780 <strlen+0x6c>
  804774:	21000044 	addi	r4,r4,1
  804778:	20800007 	ldb	r2,0(r4)
  80477c:	103ffd1e 	bne	r2,zero,804774 <strlen+0x60>
  804780:	2205c83a 	sub	r2,r4,r8
  804784:	f800283a 	ret

00804788 <__sfvwrite_r>:
  804788:	30800217 	ldw	r2,8(r6)
  80478c:	defff504 	addi	sp,sp,-44
  804790:	df000915 	stw	fp,36(sp)
  804794:	dd800715 	stw	r22,28(sp)
  804798:	dc800315 	stw	r18,12(sp)
  80479c:	dfc00a15 	stw	ra,40(sp)
  8047a0:	ddc00815 	stw	r23,32(sp)
  8047a4:	dd400615 	stw	r21,24(sp)
  8047a8:	dd000515 	stw	r20,20(sp)
  8047ac:	dcc00415 	stw	r19,16(sp)
  8047b0:	dc400215 	stw	r17,8(sp)
  8047b4:	dc000115 	stw	r16,4(sp)
  8047b8:	302d883a 	mov	r22,r6
  8047bc:	2039883a 	mov	fp,r4
  8047c0:	2825883a 	mov	r18,r5
  8047c4:	10001c26 	beq	r2,zero,804838 <__sfvwrite_r+0xb0>
  8047c8:	29c0030b 	ldhu	r7,12(r5)
  8047cc:	3880020c 	andi	r2,r7,8
  8047d0:	10002726 	beq	r2,zero,804870 <__sfvwrite_r+0xe8>
  8047d4:	28800417 	ldw	r2,16(r5)
  8047d8:	10002526 	beq	r2,zero,804870 <__sfvwrite_r+0xe8>
  8047dc:	3880008c 	andi	r2,r7,2
  8047e0:	b5400017 	ldw	r21,0(r22)
  8047e4:	10002826 	beq	r2,zero,804888 <__sfvwrite_r+0x100>
  8047e8:	0021883a 	mov	r16,zero
  8047ec:	0023883a 	mov	r17,zero
  8047f0:	880d883a 	mov	r6,r17
  8047f4:	e009883a 	mov	r4,fp
  8047f8:	00810004 	movi	r2,1024
  8047fc:	80006e26 	beq	r16,zero,8049b8 <__sfvwrite_r+0x230>
  804800:	800f883a 	mov	r7,r16
  804804:	91400717 	ldw	r5,28(r18)
  804808:	1400012e 	bgeu	r2,r16,804810 <__sfvwrite_r+0x88>
  80480c:	100f883a 	mov	r7,r2
  804810:	90c00917 	ldw	r3,36(r18)
  804814:	183ee83a 	callr	r3
  804818:	1007883a 	mov	r3,r2
  80481c:	80a1c83a 	sub	r16,r16,r2
  804820:	88a3883a 	add	r17,r17,r2
  804824:	00806d0e 	bge	zero,r2,8049dc <__sfvwrite_r+0x254>
  804828:	b0800217 	ldw	r2,8(r22)
  80482c:	10c5c83a 	sub	r2,r2,r3
  804830:	b0800215 	stw	r2,8(r22)
  804834:	103fee1e 	bne	r2,zero,8047f0 <__sfvwrite_r+0x68>
  804838:	0009883a 	mov	r4,zero
  80483c:	2005883a 	mov	r2,r4
  804840:	dfc00a17 	ldw	ra,40(sp)
  804844:	df000917 	ldw	fp,36(sp)
  804848:	ddc00817 	ldw	r23,32(sp)
  80484c:	dd800717 	ldw	r22,28(sp)
  804850:	dd400617 	ldw	r21,24(sp)
  804854:	dd000517 	ldw	r20,20(sp)
  804858:	dcc00417 	ldw	r19,16(sp)
  80485c:	dc800317 	ldw	r18,12(sp)
  804860:	dc400217 	ldw	r17,8(sp)
  804864:	dc000117 	ldw	r16,4(sp)
  804868:	dec00b04 	addi	sp,sp,44
  80486c:	f800283a 	ret
  804870:	0805c2c0 	call	805c2c <__swsetup_r>
  804874:	1000e41e 	bne	r2,zero,804c08 <__sfvwrite_r+0x480>
  804878:	91c0030b 	ldhu	r7,12(r18)
  80487c:	b5400017 	ldw	r21,0(r22)
  804880:	3880008c 	andi	r2,r7,2
  804884:	103fd81e 	bne	r2,zero,8047e8 <__sfvwrite_r+0x60>
  804888:	3880004c 	andi	r2,r7,1
  80488c:	1005003a 	cmpeq	r2,r2,zero
  804890:	10005726 	beq	r2,zero,8049f0 <__sfvwrite_r+0x268>
  804894:	0029883a 	mov	r20,zero
  804898:	002f883a 	mov	r23,zero
  80489c:	a0004226 	beq	r20,zero,8049a8 <__sfvwrite_r+0x220>
  8048a0:	3880800c 	andi	r2,r7,512
  8048a4:	94000217 	ldw	r16,8(r18)
  8048a8:	10008b26 	beq	r2,zero,804ad8 <__sfvwrite_r+0x350>
  8048ac:	800d883a 	mov	r6,r16
  8048b0:	a400a536 	bltu	r20,r16,804b48 <__sfvwrite_r+0x3c0>
  8048b4:	3881200c 	andi	r2,r7,1152
  8048b8:	10002726 	beq	r2,zero,804958 <__sfvwrite_r+0x1d0>
  8048bc:	90800517 	ldw	r2,20(r18)
  8048c0:	92000417 	ldw	r8,16(r18)
  8048c4:	91400017 	ldw	r5,0(r18)
  8048c8:	1087883a 	add	r3,r2,r2
  8048cc:	1887883a 	add	r3,r3,r2
  8048d0:	1808d7fa 	srli	r4,r3,31
  8048d4:	2a21c83a 	sub	r16,r5,r8
  8048d8:	80800044 	addi	r2,r16,1
  8048dc:	20c9883a 	add	r4,r4,r3
  8048e0:	2027d07a 	srai	r19,r4,1
  8048e4:	a085883a 	add	r2,r20,r2
  8048e8:	980d883a 	mov	r6,r19
  8048ec:	9880022e 	bgeu	r19,r2,8048f8 <__sfvwrite_r+0x170>
  8048f0:	1027883a 	mov	r19,r2
  8048f4:	100d883a 	mov	r6,r2
  8048f8:	3881000c 	andi	r2,r7,1024
  8048fc:	1000b826 	beq	r2,zero,804be0 <__sfvwrite_r+0x458>
  804900:	300b883a 	mov	r5,r6
  804904:	e009883a 	mov	r4,fp
  804908:	0804c240 	call	804c24 <_malloc_r>
  80490c:	10003126 	beq	r2,zero,8049d4 <__sfvwrite_r+0x24c>
  804910:	91400417 	ldw	r5,16(r18)
  804914:	1009883a 	mov	r4,r2
  804918:	800d883a 	mov	r6,r16
  80491c:	1023883a 	mov	r17,r2
  804920:	08054480 	call	805448 <memcpy>
  804924:	90c0030b 	ldhu	r3,12(r18)
  804928:	00beffc4 	movi	r2,-1025
  80492c:	1886703a 	and	r3,r3,r2
  804930:	18c02014 	ori	r3,r3,128
  804934:	90c0030d 	sth	r3,12(r18)
  804938:	9c07c83a 	sub	r3,r19,r16
  80493c:	8c05883a 	add	r2,r17,r16
  804940:	a00d883a 	mov	r6,r20
  804944:	a021883a 	mov	r16,r20
  804948:	90800015 	stw	r2,0(r18)
  80494c:	90c00215 	stw	r3,8(r18)
  804950:	94400415 	stw	r17,16(r18)
  804954:	94c00515 	stw	r19,20(r18)
  804958:	91000017 	ldw	r4,0(r18)
  80495c:	b80b883a 	mov	r5,r23
  804960:	a023883a 	mov	r17,r20
  804964:	08054e80 	call	8054e8 <memmove>
  804968:	90c00217 	ldw	r3,8(r18)
  80496c:	90800017 	ldw	r2,0(r18)
  804970:	a027883a 	mov	r19,r20
  804974:	1c07c83a 	sub	r3,r3,r16
  804978:	1405883a 	add	r2,r2,r16
  80497c:	90c00215 	stw	r3,8(r18)
  804980:	a021883a 	mov	r16,r20
  804984:	90800015 	stw	r2,0(r18)
  804988:	b0800217 	ldw	r2,8(r22)
  80498c:	1405c83a 	sub	r2,r2,r16
  804990:	b0800215 	stw	r2,8(r22)
  804994:	103fa826 	beq	r2,zero,804838 <__sfvwrite_r+0xb0>
  804998:	a469c83a 	sub	r20,r20,r17
  80499c:	91c0030b 	ldhu	r7,12(r18)
  8049a0:	bcef883a 	add	r23,r23,r19
  8049a4:	a03fbe1e 	bne	r20,zero,8048a0 <__sfvwrite_r+0x118>
  8049a8:	adc00017 	ldw	r23,0(r21)
  8049ac:	ad000117 	ldw	r20,4(r21)
  8049b0:	ad400204 	addi	r21,r21,8
  8049b4:	003fb906 	br	80489c <__sfvwrite_r+0x114>
  8049b8:	ac400017 	ldw	r17,0(r21)
  8049bc:	ac000117 	ldw	r16,4(r21)
  8049c0:	ad400204 	addi	r21,r21,8
  8049c4:	003f8a06 	br	8047f0 <__sfvwrite_r+0x68>
  8049c8:	91400417 	ldw	r5,16(r18)
  8049cc:	e009883a 	mov	r4,fp
  8049d0:	08063840 	call	806384 <_free_r>
  8049d4:	00800304 	movi	r2,12
  8049d8:	e0800015 	stw	r2,0(fp)
  8049dc:	9080030b 	ldhu	r2,12(r18)
  8049e0:	013fffc4 	movi	r4,-1
  8049e4:	10801014 	ori	r2,r2,64
  8049e8:	9080030d 	sth	r2,12(r18)
  8049ec:	003f9306 	br	80483c <__sfvwrite_r+0xb4>
  8049f0:	0027883a 	mov	r19,zero
  8049f4:	002f883a 	mov	r23,zero
  8049f8:	d8000015 	stw	zero,0(sp)
  8049fc:	0029883a 	mov	r20,zero
  804a00:	98001e26 	beq	r19,zero,804a7c <__sfvwrite_r+0x2f4>
  804a04:	d8c00017 	ldw	r3,0(sp)
  804a08:	1804c03a 	cmpne	r2,r3,zero
  804a0c:	10005e26 	beq	r2,zero,804b88 <__sfvwrite_r+0x400>
  804a10:	9821883a 	mov	r16,r19
  804a14:	a4c0012e 	bgeu	r20,r19,804a1c <__sfvwrite_r+0x294>
  804a18:	a021883a 	mov	r16,r20
  804a1c:	91000017 	ldw	r4,0(r18)
  804a20:	90800417 	ldw	r2,16(r18)
  804a24:	91800217 	ldw	r6,8(r18)
  804a28:	91c00517 	ldw	r7,20(r18)
  804a2c:	1100022e 	bgeu	r2,r4,804a38 <__sfvwrite_r+0x2b0>
  804a30:	31e3883a 	add	r17,r6,r7
  804a34:	8c001616 	blt	r17,r16,804a90 <__sfvwrite_r+0x308>
  804a38:	81c03816 	blt	r16,r7,804b1c <__sfvwrite_r+0x394>
  804a3c:	90c00917 	ldw	r3,36(r18)
  804a40:	91400717 	ldw	r5,28(r18)
  804a44:	e009883a 	mov	r4,fp
  804a48:	b80d883a 	mov	r6,r23
  804a4c:	183ee83a 	callr	r3
  804a50:	1023883a 	mov	r17,r2
  804a54:	00bfe10e 	bge	zero,r2,8049dc <__sfvwrite_r+0x254>
  804a58:	a469c83a 	sub	r20,r20,r17
  804a5c:	a0001826 	beq	r20,zero,804ac0 <__sfvwrite_r+0x338>
  804a60:	b0800217 	ldw	r2,8(r22)
  804a64:	1445c83a 	sub	r2,r2,r17
  804a68:	b0800215 	stw	r2,8(r22)
  804a6c:	103f7226 	beq	r2,zero,804838 <__sfvwrite_r+0xb0>
  804a70:	9c67c83a 	sub	r19,r19,r17
  804a74:	bc6f883a 	add	r23,r23,r17
  804a78:	983fe21e 	bne	r19,zero,804a04 <__sfvwrite_r+0x27c>
  804a7c:	adc00017 	ldw	r23,0(r21)
  804a80:	acc00117 	ldw	r19,4(r21)
  804a84:	ad400204 	addi	r21,r21,8
  804a88:	d8000015 	stw	zero,0(sp)
  804a8c:	003fdc06 	br	804a00 <__sfvwrite_r+0x278>
  804a90:	b80b883a 	mov	r5,r23
  804a94:	880d883a 	mov	r6,r17
  804a98:	08054e80 	call	8054e8 <memmove>
  804a9c:	90c00017 	ldw	r3,0(r18)
  804aa0:	e009883a 	mov	r4,fp
  804aa4:	900b883a 	mov	r5,r18
  804aa8:	1c47883a 	add	r3,r3,r17
  804aac:	90c00015 	stw	r3,0(r18)
  804ab0:	0805d680 	call	805d68 <_fflush_r>
  804ab4:	103fc91e 	bne	r2,zero,8049dc <__sfvwrite_r+0x254>
  804ab8:	a469c83a 	sub	r20,r20,r17
  804abc:	a03fe81e 	bne	r20,zero,804a60 <__sfvwrite_r+0x2d8>
  804ac0:	e009883a 	mov	r4,fp
  804ac4:	900b883a 	mov	r5,r18
  804ac8:	0805d680 	call	805d68 <_fflush_r>
  804acc:	103fc31e 	bne	r2,zero,8049dc <__sfvwrite_r+0x254>
  804ad0:	d8000015 	stw	zero,0(sp)
  804ad4:	003fe206 	br	804a60 <__sfvwrite_r+0x2d8>
  804ad8:	91000017 	ldw	r4,0(r18)
  804adc:	90800417 	ldw	r2,16(r18)
  804ae0:	1100022e 	bgeu	r2,r4,804aec <__sfvwrite_r+0x364>
  804ae4:	8023883a 	mov	r17,r16
  804ae8:	85003136 	bltu	r16,r20,804bb0 <__sfvwrite_r+0x428>
  804aec:	91c00517 	ldw	r7,20(r18)
  804af0:	a1c01836 	bltu	r20,r7,804b54 <__sfvwrite_r+0x3cc>
  804af4:	90c00917 	ldw	r3,36(r18)
  804af8:	91400717 	ldw	r5,28(r18)
  804afc:	e009883a 	mov	r4,fp
  804b00:	b80d883a 	mov	r6,r23
  804b04:	183ee83a 	callr	r3
  804b08:	1021883a 	mov	r16,r2
  804b0c:	00bfb30e 	bge	zero,r2,8049dc <__sfvwrite_r+0x254>
  804b10:	1023883a 	mov	r17,r2
  804b14:	1027883a 	mov	r19,r2
  804b18:	003f9b06 	br	804988 <__sfvwrite_r+0x200>
  804b1c:	b80b883a 	mov	r5,r23
  804b20:	800d883a 	mov	r6,r16
  804b24:	08054e80 	call	8054e8 <memmove>
  804b28:	90c00217 	ldw	r3,8(r18)
  804b2c:	90800017 	ldw	r2,0(r18)
  804b30:	8023883a 	mov	r17,r16
  804b34:	1c07c83a 	sub	r3,r3,r16
  804b38:	1405883a 	add	r2,r2,r16
  804b3c:	90c00215 	stw	r3,8(r18)
  804b40:	90800015 	stw	r2,0(r18)
  804b44:	003fc406 	br	804a58 <__sfvwrite_r+0x2d0>
  804b48:	a00d883a 	mov	r6,r20
  804b4c:	a021883a 	mov	r16,r20
  804b50:	003f8106 	br	804958 <__sfvwrite_r+0x1d0>
  804b54:	b80b883a 	mov	r5,r23
  804b58:	a00d883a 	mov	r6,r20
  804b5c:	08054e80 	call	8054e8 <memmove>
  804b60:	90c00217 	ldw	r3,8(r18)
  804b64:	90800017 	ldw	r2,0(r18)
  804b68:	a021883a 	mov	r16,r20
  804b6c:	1d07c83a 	sub	r3,r3,r20
  804b70:	1505883a 	add	r2,r2,r20
  804b74:	a023883a 	mov	r17,r20
  804b78:	a027883a 	mov	r19,r20
  804b7c:	90c00215 	stw	r3,8(r18)
  804b80:	90800015 	stw	r2,0(r18)
  804b84:	003f8006 	br	804988 <__sfvwrite_r+0x200>
  804b88:	b809883a 	mov	r4,r23
  804b8c:	01400284 	movi	r5,10
  804b90:	980d883a 	mov	r6,r19
  804b94:	08053640 	call	805364 <memchr>
  804b98:	10001726 	beq	r2,zero,804bf8 <__sfvwrite_r+0x470>
  804b9c:	15c5c83a 	sub	r2,r2,r23
  804ba0:	15000044 	addi	r20,r2,1
  804ba4:	00800044 	movi	r2,1
  804ba8:	d8800015 	stw	r2,0(sp)
  804bac:	003f9806 	br	804a10 <__sfvwrite_r+0x288>
  804bb0:	b80b883a 	mov	r5,r23
  804bb4:	800d883a 	mov	r6,r16
  804bb8:	08054e80 	call	8054e8 <memmove>
  804bbc:	90c00017 	ldw	r3,0(r18)
  804bc0:	e009883a 	mov	r4,fp
  804bc4:	900b883a 	mov	r5,r18
  804bc8:	1c07883a 	add	r3,r3,r16
  804bcc:	90c00015 	stw	r3,0(r18)
  804bd0:	8027883a 	mov	r19,r16
  804bd4:	0805d680 	call	805d68 <_fflush_r>
  804bd8:	103f6b26 	beq	r2,zero,804988 <__sfvwrite_r+0x200>
  804bdc:	003f7f06 	br	8049dc <__sfvwrite_r+0x254>
  804be0:	400b883a 	mov	r5,r8
  804be4:	e009883a 	mov	r4,fp
  804be8:	08055c80 	call	8055c8 <_realloc_r>
  804bec:	103f7626 	beq	r2,zero,8049c8 <__sfvwrite_r+0x240>
  804bf0:	1023883a 	mov	r17,r2
  804bf4:	003f5006 	br	804938 <__sfvwrite_r+0x1b0>
  804bf8:	00c00044 	movi	r3,1
  804bfc:	9d000044 	addi	r20,r19,1
  804c00:	d8c00015 	stw	r3,0(sp)
  804c04:	003f8206 	br	804a10 <__sfvwrite_r+0x288>
  804c08:	9080030b 	ldhu	r2,12(r18)
  804c0c:	00c00244 	movi	r3,9
  804c10:	013fffc4 	movi	r4,-1
  804c14:	10801014 	ori	r2,r2,64
  804c18:	9080030d 	sth	r2,12(r18)
  804c1c:	e0c00015 	stw	r3,0(fp)
  804c20:	003f0606 	br	80483c <__sfvwrite_r+0xb4>

00804c24 <_malloc_r>:
  804c24:	defff604 	addi	sp,sp,-40
  804c28:	28c002c4 	addi	r3,r5,11
  804c2c:	00800584 	movi	r2,22
  804c30:	dc800215 	stw	r18,8(sp)
  804c34:	dfc00915 	stw	ra,36(sp)
  804c38:	df000815 	stw	fp,32(sp)
  804c3c:	ddc00715 	stw	r23,28(sp)
  804c40:	dd800615 	stw	r22,24(sp)
  804c44:	dd400515 	stw	r21,20(sp)
  804c48:	dd000415 	stw	r20,16(sp)
  804c4c:	dcc00315 	stw	r19,12(sp)
  804c50:	dc400115 	stw	r17,4(sp)
  804c54:	dc000015 	stw	r16,0(sp)
  804c58:	2025883a 	mov	r18,r4
  804c5c:	10c01236 	bltu	r2,r3,804ca8 <_malloc_r+0x84>
  804c60:	04400404 	movi	r17,16
  804c64:	8940142e 	bgeu	r17,r5,804cb8 <_malloc_r+0x94>
  804c68:	00800304 	movi	r2,12
  804c6c:	0007883a 	mov	r3,zero
  804c70:	90800015 	stw	r2,0(r18)
  804c74:	1805883a 	mov	r2,r3
  804c78:	dfc00917 	ldw	ra,36(sp)
  804c7c:	df000817 	ldw	fp,32(sp)
  804c80:	ddc00717 	ldw	r23,28(sp)
  804c84:	dd800617 	ldw	r22,24(sp)
  804c88:	dd400517 	ldw	r21,20(sp)
  804c8c:	dd000417 	ldw	r20,16(sp)
  804c90:	dcc00317 	ldw	r19,12(sp)
  804c94:	dc800217 	ldw	r18,8(sp)
  804c98:	dc400117 	ldw	r17,4(sp)
  804c9c:	dc000017 	ldw	r16,0(sp)
  804ca0:	dec00a04 	addi	sp,sp,40
  804ca4:	f800283a 	ret
  804ca8:	00bffe04 	movi	r2,-8
  804cac:	18a2703a 	and	r17,r3,r2
  804cb0:	883fed16 	blt	r17,zero,804c68 <_malloc_r+0x44>
  804cb4:	897fec36 	bltu	r17,r5,804c68 <_malloc_r+0x44>
  804cb8:	9009883a 	mov	r4,r18
  804cbc:	0807b740 	call	807b74 <__malloc_lock>
  804cc0:	00807dc4 	movi	r2,503
  804cc4:	14402b2e 	bgeu	r2,r17,804d74 <_malloc_r+0x150>
  804cc8:	8806d27a 	srli	r3,r17,9
  804ccc:	18003f1e 	bne	r3,zero,804dcc <_malloc_r+0x1a8>
  804cd0:	880cd0fa 	srli	r6,r17,3
  804cd4:	300490fa 	slli	r2,r6,3
  804cd8:	02c02074 	movhi	r11,129
  804cdc:	5ad28004 	addi	r11,r11,18944
  804ce0:	12cb883a 	add	r5,r2,r11
  804ce4:	2c000317 	ldw	r16,12(r5)
  804ce8:	580f883a 	mov	r7,r11
  804cec:	2c00041e 	bne	r5,r16,804d00 <_malloc_r+0xdc>
  804cf0:	00000a06 	br	804d1c <_malloc_r+0xf8>
  804cf4:	1800860e 	bge	r3,zero,804f10 <_malloc_r+0x2ec>
  804cf8:	84000317 	ldw	r16,12(r16)
  804cfc:	2c000726 	beq	r5,r16,804d1c <_malloc_r+0xf8>
  804d00:	80800117 	ldw	r2,4(r16)
  804d04:	00ffff04 	movi	r3,-4
  804d08:	10c8703a 	and	r4,r2,r3
  804d0c:	2447c83a 	sub	r3,r4,r17
  804d10:	008003c4 	movi	r2,15
  804d14:	10fff70e 	bge	r2,r3,804cf4 <_malloc_r+0xd0>
  804d18:	31bfffc4 	addi	r6,r6,-1
  804d1c:	32400044 	addi	r9,r6,1
  804d20:	02802074 	movhi	r10,129
  804d24:	52928204 	addi	r10,r10,18952
  804d28:	54000217 	ldw	r16,8(r10)
  804d2c:	8280a026 	beq	r16,r10,804fb0 <_malloc_r+0x38c>
  804d30:	80800117 	ldw	r2,4(r16)
  804d34:	00ffff04 	movi	r3,-4
  804d38:	10ca703a 	and	r5,r2,r3
  804d3c:	2c4dc83a 	sub	r6,r5,r17
  804d40:	008003c4 	movi	r2,15
  804d44:	11808316 	blt	r2,r6,804f54 <_malloc_r+0x330>
  804d48:	52800315 	stw	r10,12(r10)
  804d4c:	52800215 	stw	r10,8(r10)
  804d50:	30002916 	blt	r6,zero,804df8 <_malloc_r+0x1d4>
  804d54:	8147883a 	add	r3,r16,r5
  804d58:	18800117 	ldw	r2,4(r3)
  804d5c:	9009883a 	mov	r4,r18
  804d60:	10800054 	ori	r2,r2,1
  804d64:	18800115 	stw	r2,4(r3)
  804d68:	0807c7c0 	call	807c7c <__malloc_unlock>
  804d6c:	80c00204 	addi	r3,r16,8
  804d70:	003fc006 	br	804c74 <_malloc_r+0x50>
  804d74:	02c02074 	movhi	r11,129
  804d78:	5ad28004 	addi	r11,r11,18944
  804d7c:	8ac5883a 	add	r2,r17,r11
  804d80:	14000317 	ldw	r16,12(r2)
  804d84:	580f883a 	mov	r7,r11
  804d88:	8806d0fa 	srli	r3,r17,3
  804d8c:	14006c26 	beq	r2,r16,804f40 <_malloc_r+0x31c>
  804d90:	80c00117 	ldw	r3,4(r16)
  804d94:	00bfff04 	movi	r2,-4
  804d98:	81800317 	ldw	r6,12(r16)
  804d9c:	1886703a 	and	r3,r3,r2
  804da0:	80c7883a 	add	r3,r16,r3
  804da4:	18800117 	ldw	r2,4(r3)
  804da8:	81400217 	ldw	r5,8(r16)
  804dac:	9009883a 	mov	r4,r18
  804db0:	10800054 	ori	r2,r2,1
  804db4:	18800115 	stw	r2,4(r3)
  804db8:	31400215 	stw	r5,8(r6)
  804dbc:	29800315 	stw	r6,12(r5)
  804dc0:	0807c7c0 	call	807c7c <__malloc_unlock>
  804dc4:	80c00204 	addi	r3,r16,8
  804dc8:	003faa06 	br	804c74 <_malloc_r+0x50>
  804dcc:	00800104 	movi	r2,4
  804dd0:	10c0052e 	bgeu	r2,r3,804de8 <_malloc_r+0x1c4>
  804dd4:	00800504 	movi	r2,20
  804dd8:	10c07836 	bltu	r2,r3,804fbc <_malloc_r+0x398>
  804ddc:	198016c4 	addi	r6,r3,91
  804de0:	300490fa 	slli	r2,r6,3
  804de4:	003fbc06 	br	804cd8 <_malloc_r+0xb4>
  804de8:	8804d1ba 	srli	r2,r17,6
  804dec:	11800e04 	addi	r6,r2,56
  804df0:	300490fa 	slli	r2,r6,3
  804df4:	003fb806 	br	804cd8 <_malloc_r+0xb4>
  804df8:	00807fc4 	movi	r2,511
  804dfc:	1140bb36 	bltu	r2,r5,8050ec <_malloc_r+0x4c8>
  804e00:	2806d0fa 	srli	r3,r5,3
  804e04:	573ffe04 	addi	fp,r10,-8
  804e08:	00800044 	movi	r2,1
  804e0c:	180890fa 	slli	r4,r3,3
  804e10:	1807d0ba 	srai	r3,r3,2
  804e14:	e1c00117 	ldw	r7,4(fp)
  804e18:	5909883a 	add	r4,r11,r4
  804e1c:	21400217 	ldw	r5,8(r4)
  804e20:	10c4983a 	sll	r2,r2,r3
  804e24:	81000315 	stw	r4,12(r16)
  804e28:	81400215 	stw	r5,8(r16)
  804e2c:	388eb03a 	or	r7,r7,r2
  804e30:	2c000315 	stw	r16,12(r5)
  804e34:	24000215 	stw	r16,8(r4)
  804e38:	e1c00115 	stw	r7,4(fp)
  804e3c:	4807883a 	mov	r3,r9
  804e40:	4800cd16 	blt	r9,zero,805178 <_malloc_r+0x554>
  804e44:	1807d0ba 	srai	r3,r3,2
  804e48:	00800044 	movi	r2,1
  804e4c:	10c8983a 	sll	r4,r2,r3
  804e50:	39004436 	bltu	r7,r4,804f64 <_malloc_r+0x340>
  804e54:	21c4703a 	and	r2,r4,r7
  804e58:	10000a1e 	bne	r2,zero,804e84 <_malloc_r+0x260>
  804e5c:	2109883a 	add	r4,r4,r4
  804e60:	00bfff04 	movi	r2,-4
  804e64:	4884703a 	and	r2,r9,r2
  804e68:	3906703a 	and	r3,r7,r4
  804e6c:	12400104 	addi	r9,r2,4
  804e70:	1800041e 	bne	r3,zero,804e84 <_malloc_r+0x260>
  804e74:	2109883a 	add	r4,r4,r4
  804e78:	3904703a 	and	r2,r7,r4
  804e7c:	4a400104 	addi	r9,r9,4
  804e80:	103ffc26 	beq	r2,zero,804e74 <_malloc_r+0x250>
  804e84:	480490fa 	slli	r2,r9,3
  804e88:	4819883a 	mov	r12,r9
  804e8c:	023fff04 	movi	r8,-4
  804e90:	589b883a 	add	r13,r11,r2
  804e94:	6807883a 	mov	r3,r13
  804e98:	014003c4 	movi	r5,15
  804e9c:	1c000317 	ldw	r16,12(r3)
  804ea0:	1c00041e 	bne	r3,r16,804eb4 <_malloc_r+0x290>
  804ea4:	0000a706 	br	805144 <_malloc_r+0x520>
  804ea8:	3000ab0e 	bge	r6,zero,805158 <_malloc_r+0x534>
  804eac:	84000317 	ldw	r16,12(r16)
  804eb0:	1c00a426 	beq	r3,r16,805144 <_malloc_r+0x520>
  804eb4:	80800117 	ldw	r2,4(r16)
  804eb8:	1204703a 	and	r2,r2,r8
  804ebc:	144dc83a 	sub	r6,r2,r17
  804ec0:	29bff90e 	bge	r5,r6,804ea8 <_malloc_r+0x284>
  804ec4:	81000317 	ldw	r4,12(r16)
  804ec8:	80c00217 	ldw	r3,8(r16)
  804ecc:	89400054 	ori	r5,r17,1
  804ed0:	8445883a 	add	r2,r16,r17
  804ed4:	20c00215 	stw	r3,8(r4)
  804ed8:	19000315 	stw	r4,12(r3)
  804edc:	81400115 	stw	r5,4(r16)
  804ee0:	1187883a 	add	r3,r2,r6
  804ee4:	31000054 	ori	r4,r6,1
  804ee8:	50800315 	stw	r2,12(r10)
  804eec:	50800215 	stw	r2,8(r10)
  804ef0:	19800015 	stw	r6,0(r3)
  804ef4:	11000115 	stw	r4,4(r2)
  804ef8:	12800215 	stw	r10,8(r2)
  804efc:	12800315 	stw	r10,12(r2)
  804f00:	9009883a 	mov	r4,r18
  804f04:	0807c7c0 	call	807c7c <__malloc_unlock>
  804f08:	80c00204 	addi	r3,r16,8
  804f0c:	003f5906 	br	804c74 <_malloc_r+0x50>
  804f10:	8109883a 	add	r4,r16,r4
  804f14:	20800117 	ldw	r2,4(r4)
  804f18:	80c00217 	ldw	r3,8(r16)
  804f1c:	81400317 	ldw	r5,12(r16)
  804f20:	10800054 	ori	r2,r2,1
  804f24:	20800115 	stw	r2,4(r4)
  804f28:	28c00215 	stw	r3,8(r5)
  804f2c:	19400315 	stw	r5,12(r3)
  804f30:	9009883a 	mov	r4,r18
  804f34:	0807c7c0 	call	807c7c <__malloc_unlock>
  804f38:	80c00204 	addi	r3,r16,8
  804f3c:	003f4d06 	br	804c74 <_malloc_r+0x50>
  804f40:	80800204 	addi	r2,r16,8
  804f44:	14000317 	ldw	r16,12(r2)
  804f48:	143f911e 	bne	r2,r16,804d90 <_malloc_r+0x16c>
  804f4c:	1a400084 	addi	r9,r3,2
  804f50:	003f7306 	br	804d20 <_malloc_r+0xfc>
  804f54:	88c00054 	ori	r3,r17,1
  804f58:	8445883a 	add	r2,r16,r17
  804f5c:	80c00115 	stw	r3,4(r16)
  804f60:	003fdf06 	br	804ee0 <_malloc_r+0x2bc>
  804f64:	e4000217 	ldw	r16,8(fp)
  804f68:	00bfff04 	movi	r2,-4
  804f6c:	80c00117 	ldw	r3,4(r16)
  804f70:	802d883a 	mov	r22,r16
  804f74:	18aa703a 	and	r21,r3,r2
  804f78:	ac401636 	bltu	r21,r17,804fd4 <_malloc_r+0x3b0>
  804f7c:	ac49c83a 	sub	r4,r21,r17
  804f80:	008003c4 	movi	r2,15
  804f84:	1100130e 	bge	r2,r4,804fd4 <_malloc_r+0x3b0>
  804f88:	88800054 	ori	r2,r17,1
  804f8c:	8447883a 	add	r3,r16,r17
  804f90:	80800115 	stw	r2,4(r16)
  804f94:	20800054 	ori	r2,r4,1
  804f98:	18800115 	stw	r2,4(r3)
  804f9c:	e0c00215 	stw	r3,8(fp)
  804fa0:	9009883a 	mov	r4,r18
  804fa4:	0807c7c0 	call	807c7c <__malloc_unlock>
  804fa8:	80c00204 	addi	r3,r16,8
  804fac:	003f3106 	br	804c74 <_malloc_r+0x50>
  804fb0:	39c00117 	ldw	r7,4(r7)
  804fb4:	573ffe04 	addi	fp,r10,-8
  804fb8:	003fa006 	br	804e3c <_malloc_r+0x218>
  804fbc:	00801504 	movi	r2,84
  804fc0:	10c06736 	bltu	r2,r3,805160 <_malloc_r+0x53c>
  804fc4:	8804d33a 	srli	r2,r17,12
  804fc8:	11801b84 	addi	r6,r2,110
  804fcc:	300490fa 	slli	r2,r6,3
  804fd0:	003f4106 	br	804cd8 <_malloc_r+0xb4>
  804fd4:	d0a70817 	ldw	r2,-25568(gp)
  804fd8:	d0e00417 	ldw	r3,-32752(gp)
  804fdc:	053fffc4 	movi	r20,-1
  804fe0:	10800404 	addi	r2,r2,16
  804fe4:	88a7883a 	add	r19,r17,r2
  804fe8:	1d000326 	beq	r3,r20,804ff8 <_malloc_r+0x3d4>
  804fec:	98c3ffc4 	addi	r3,r19,4095
  804ff0:	00bc0004 	movi	r2,-4096
  804ff4:	18a6703a 	and	r19,r3,r2
  804ff8:	9009883a 	mov	r4,r18
  804ffc:	980b883a 	mov	r5,r19
  805000:	0805bbc0 	call	805bbc <_sbrk_r>
  805004:	1009883a 	mov	r4,r2
  805008:	15000426 	beq	r2,r20,80501c <_malloc_r+0x3f8>
  80500c:	854b883a 	add	r5,r16,r21
  805010:	1029883a 	mov	r20,r2
  805014:	11405a2e 	bgeu	r2,r5,805180 <_malloc_r+0x55c>
  805018:	87000c26 	beq	r16,fp,80504c <_malloc_r+0x428>
  80501c:	e4000217 	ldw	r16,8(fp)
  805020:	80c00117 	ldw	r3,4(r16)
  805024:	00bfff04 	movi	r2,-4
  805028:	1884703a 	and	r2,r3,r2
  80502c:	14400336 	bltu	r2,r17,80503c <_malloc_r+0x418>
  805030:	1449c83a 	sub	r4,r2,r17
  805034:	008003c4 	movi	r2,15
  805038:	113fd316 	blt	r2,r4,804f88 <_malloc_r+0x364>
  80503c:	9009883a 	mov	r4,r18
  805040:	0807c7c0 	call	807c7c <__malloc_unlock>
  805044:	0007883a 	mov	r3,zero
  805048:	003f0a06 	br	804c74 <_malloc_r+0x50>
  80504c:	05c02074 	movhi	r23,129
  805050:	bddf5504 	addi	r23,r23,32084
  805054:	b8800017 	ldw	r2,0(r23)
  805058:	988d883a 	add	r6,r19,r2
  80505c:	b9800015 	stw	r6,0(r23)
  805060:	d0e00417 	ldw	r3,-32752(gp)
  805064:	00bfffc4 	movi	r2,-1
  805068:	18808e26 	beq	r3,r2,8052a4 <_malloc_r+0x680>
  80506c:	2145c83a 	sub	r2,r4,r5
  805070:	3085883a 	add	r2,r6,r2
  805074:	b8800015 	stw	r2,0(r23)
  805078:	20c001cc 	andi	r3,r4,7
  80507c:	18005f1e 	bne	r3,zero,8051fc <_malloc_r+0x5d8>
  805080:	000b883a 	mov	r5,zero
  805084:	a4c5883a 	add	r2,r20,r19
  805088:	1083ffcc 	andi	r2,r2,4095
  80508c:	00c40004 	movi	r3,4096
  805090:	1887c83a 	sub	r3,r3,r2
  805094:	28e7883a 	add	r19,r5,r3
  805098:	9009883a 	mov	r4,r18
  80509c:	980b883a 	mov	r5,r19
  8050a0:	0805bbc0 	call	805bbc <_sbrk_r>
  8050a4:	1007883a 	mov	r3,r2
  8050a8:	00bfffc4 	movi	r2,-1
  8050ac:	18807a26 	beq	r3,r2,805298 <_malloc_r+0x674>
  8050b0:	1d05c83a 	sub	r2,r3,r20
  8050b4:	9885883a 	add	r2,r19,r2
  8050b8:	10c00054 	ori	r3,r2,1
  8050bc:	b8800017 	ldw	r2,0(r23)
  8050c0:	a021883a 	mov	r16,r20
  8050c4:	a0c00115 	stw	r3,4(r20)
  8050c8:	9885883a 	add	r2,r19,r2
  8050cc:	b8800015 	stw	r2,0(r23)
  8050d0:	e5000215 	stw	r20,8(fp)
  8050d4:	b7003626 	beq	r22,fp,8051b0 <_malloc_r+0x58c>
  8050d8:	018003c4 	movi	r6,15
  8050dc:	35404b36 	bltu	r6,r21,80520c <_malloc_r+0x5e8>
  8050e0:	00800044 	movi	r2,1
  8050e4:	a0800115 	stw	r2,4(r20)
  8050e8:	003fcd06 	br	805020 <_malloc_r+0x3fc>
  8050ec:	2808d27a 	srli	r4,r5,9
  8050f0:	2000371e 	bne	r4,zero,8051d0 <_malloc_r+0x5ac>
  8050f4:	2808d0fa 	srli	r4,r5,3
  8050f8:	200690fa 	slli	r3,r4,3
  8050fc:	1ad1883a 	add	r8,r3,r11
  805100:	41800217 	ldw	r6,8(r8)
  805104:	41805b26 	beq	r8,r6,805274 <_malloc_r+0x650>
  805108:	30800117 	ldw	r2,4(r6)
  80510c:	00ffff04 	movi	r3,-4
  805110:	10c4703a 	and	r2,r2,r3
  805114:	2880022e 	bgeu	r5,r2,805120 <_malloc_r+0x4fc>
  805118:	31800217 	ldw	r6,8(r6)
  80511c:	41bffa1e 	bne	r8,r6,805108 <_malloc_r+0x4e4>
  805120:	32000317 	ldw	r8,12(r6)
  805124:	39c00117 	ldw	r7,4(r7)
  805128:	82000315 	stw	r8,12(r16)
  80512c:	81800215 	stw	r6,8(r16)
  805130:	07002074 	movhi	fp,129
  805134:	e7128004 	addi	fp,fp,18944
  805138:	34000315 	stw	r16,12(r6)
  80513c:	44000215 	stw	r16,8(r8)
  805140:	003f3e06 	br	804e3c <_malloc_r+0x218>
  805144:	63000044 	addi	r12,r12,1
  805148:	608000cc 	andi	r2,r12,3
  80514c:	10005d26 	beq	r2,zero,8052c4 <_malloc_r+0x6a0>
  805150:	18c00204 	addi	r3,r3,8
  805154:	003f5106 	br	804e9c <_malloc_r+0x278>
  805158:	8089883a 	add	r4,r16,r2
  80515c:	003f6d06 	br	804f14 <_malloc_r+0x2f0>
  805160:	00805504 	movi	r2,340
  805164:	10c02036 	bltu	r2,r3,8051e8 <_malloc_r+0x5c4>
  805168:	8804d3fa 	srli	r2,r17,15
  80516c:	11801dc4 	addi	r6,r2,119
  805170:	300490fa 	slli	r2,r6,3
  805174:	003ed806 	br	804cd8 <_malloc_r+0xb4>
  805178:	48c000c4 	addi	r3,r9,3
  80517c:	003f3106 	br	804e44 <_malloc_r+0x220>
  805180:	05c02074 	movhi	r23,129
  805184:	bddf5504 	addi	r23,r23,32084
  805188:	b8800017 	ldw	r2,0(r23)
  80518c:	988d883a 	add	r6,r19,r2
  805190:	b9800015 	stw	r6,0(r23)
  805194:	293fb21e 	bne	r5,r4,805060 <_malloc_r+0x43c>
  805198:	2083ffcc 	andi	r2,r4,4095
  80519c:	103fb01e 	bne	r2,zero,805060 <_malloc_r+0x43c>
  8051a0:	e4000217 	ldw	r16,8(fp)
  8051a4:	9d45883a 	add	r2,r19,r21
  8051a8:	10800054 	ori	r2,r2,1
  8051ac:	80800115 	stw	r2,4(r16)
  8051b0:	b8c00017 	ldw	r3,0(r23)
  8051b4:	d0a70917 	ldw	r2,-25564(gp)
  8051b8:	10c0012e 	bgeu	r2,r3,8051c0 <_malloc_r+0x59c>
  8051bc:	d0e70915 	stw	r3,-25564(gp)
  8051c0:	d0a70a17 	ldw	r2,-25560(gp)
  8051c4:	10ff962e 	bgeu	r2,r3,805020 <_malloc_r+0x3fc>
  8051c8:	d0e70a15 	stw	r3,-25560(gp)
  8051cc:	003f9406 	br	805020 <_malloc_r+0x3fc>
  8051d0:	00800104 	movi	r2,4
  8051d4:	11001e36 	bltu	r2,r4,805250 <_malloc_r+0x62c>
  8051d8:	2804d1ba 	srli	r2,r5,6
  8051dc:	11000e04 	addi	r4,r2,56
  8051e0:	200690fa 	slli	r3,r4,3
  8051e4:	003fc506 	br	8050fc <_malloc_r+0x4d8>
  8051e8:	00815504 	movi	r2,1364
  8051ec:	10c01d2e 	bgeu	r2,r3,805264 <_malloc_r+0x640>
  8051f0:	01801f84 	movi	r6,126
  8051f4:	0080fc04 	movi	r2,1008
  8051f8:	003eb706 	br	804cd8 <_malloc_r+0xb4>
  8051fc:	00800204 	movi	r2,8
  805200:	10cbc83a 	sub	r5,r2,r3
  805204:	2169883a 	add	r20,r4,r5
  805208:	003f9e06 	br	805084 <_malloc_r+0x460>
  80520c:	00bffe04 	movi	r2,-8
  805210:	a93ffd04 	addi	r4,r21,-12
  805214:	2088703a 	and	r4,r4,r2
  805218:	b10b883a 	add	r5,r22,r4
  80521c:	00c00144 	movi	r3,5
  805220:	28c00215 	stw	r3,8(r5)
  805224:	28c00115 	stw	r3,4(r5)
  805228:	b0800117 	ldw	r2,4(r22)
  80522c:	1080004c 	andi	r2,r2,1
  805230:	2084b03a 	or	r2,r4,r2
  805234:	b0800115 	stw	r2,4(r22)
  805238:	313fdd2e 	bgeu	r6,r4,8051b0 <_malloc_r+0x58c>
  80523c:	b1400204 	addi	r5,r22,8
  805240:	9009883a 	mov	r4,r18
  805244:	08063840 	call	806384 <_free_r>
  805248:	e4000217 	ldw	r16,8(fp)
  80524c:	003fd806 	br	8051b0 <_malloc_r+0x58c>
  805250:	00800504 	movi	r2,20
  805254:	11001536 	bltu	r2,r4,8052ac <_malloc_r+0x688>
  805258:	210016c4 	addi	r4,r4,91
  80525c:	200690fa 	slli	r3,r4,3
  805260:	003fa606 	br	8050fc <_malloc_r+0x4d8>
  805264:	8804d4ba 	srli	r2,r17,18
  805268:	11801f04 	addi	r6,r2,124
  80526c:	300490fa 	slli	r2,r6,3
  805270:	003e9906 	br	804cd8 <_malloc_r+0xb4>
  805274:	2009d0ba 	srai	r4,r4,2
  805278:	01402074 	movhi	r5,129
  80527c:	29528004 	addi	r5,r5,18944
  805280:	00c00044 	movi	r3,1
  805284:	28800117 	ldw	r2,4(r5)
  805288:	1906983a 	sll	r3,r3,r4
  80528c:	10c4b03a 	or	r2,r2,r3
  805290:	28800115 	stw	r2,4(r5)
  805294:	003fa306 	br	805124 <_malloc_r+0x500>
  805298:	0027883a 	mov	r19,zero
  80529c:	00c00044 	movi	r3,1
  8052a0:	003f8606 	br	8050bc <_malloc_r+0x498>
  8052a4:	d1200415 	stw	r4,-32752(gp)
  8052a8:	003f7306 	br	805078 <_malloc_r+0x454>
  8052ac:	00801504 	movi	r2,84
  8052b0:	11001936 	bltu	r2,r4,805318 <_malloc_r+0x6f4>
  8052b4:	2804d33a 	srli	r2,r5,12
  8052b8:	11001b84 	addi	r4,r2,110
  8052bc:	200690fa 	slli	r3,r4,3
  8052c0:	003f8e06 	br	8050fc <_malloc_r+0x4d8>
  8052c4:	480b883a 	mov	r5,r9
  8052c8:	6807883a 	mov	r3,r13
  8052cc:	288000cc 	andi	r2,r5,3
  8052d0:	18fffe04 	addi	r3,r3,-8
  8052d4:	297fffc4 	addi	r5,r5,-1
  8052d8:	10001526 	beq	r2,zero,805330 <_malloc_r+0x70c>
  8052dc:	18800217 	ldw	r2,8(r3)
  8052e0:	10fffa26 	beq	r2,r3,8052cc <_malloc_r+0x6a8>
  8052e4:	2109883a 	add	r4,r4,r4
  8052e8:	393f1e36 	bltu	r7,r4,804f64 <_malloc_r+0x340>
  8052ec:	203f1d26 	beq	r4,zero,804f64 <_malloc_r+0x340>
  8052f0:	21c4703a 	and	r2,r4,r7
  8052f4:	10000226 	beq	r2,zero,805300 <_malloc_r+0x6dc>
  8052f8:	6013883a 	mov	r9,r12
  8052fc:	003ee106 	br	804e84 <_malloc_r+0x260>
  805300:	2109883a 	add	r4,r4,r4
  805304:	3904703a 	and	r2,r7,r4
  805308:	63000104 	addi	r12,r12,4
  80530c:	103ffc26 	beq	r2,zero,805300 <_malloc_r+0x6dc>
  805310:	6013883a 	mov	r9,r12
  805314:	003edb06 	br	804e84 <_malloc_r+0x260>
  805318:	00805504 	movi	r2,340
  80531c:	11000836 	bltu	r2,r4,805340 <_malloc_r+0x71c>
  805320:	2804d3fa 	srli	r2,r5,15
  805324:	11001dc4 	addi	r4,r2,119
  805328:	200690fa 	slli	r3,r4,3
  80532c:	003f7306 	br	8050fc <_malloc_r+0x4d8>
  805330:	0104303a 	nor	r2,zero,r4
  805334:	388e703a 	and	r7,r7,r2
  805338:	e1c00115 	stw	r7,4(fp)
  80533c:	003fe906 	br	8052e4 <_malloc_r+0x6c0>
  805340:	00815504 	movi	r2,1364
  805344:	1100032e 	bgeu	r2,r4,805354 <_malloc_r+0x730>
  805348:	01001f84 	movi	r4,126
  80534c:	00c0fc04 	movi	r3,1008
  805350:	003f6a06 	br	8050fc <_malloc_r+0x4d8>
  805354:	2804d4ba 	srli	r2,r5,18
  805358:	11001f04 	addi	r4,r2,124
  80535c:	200690fa 	slli	r3,r4,3
  805360:	003f6606 	br	8050fc <_malloc_r+0x4d8>

00805364 <memchr>:
  805364:	008000c4 	movi	r2,3
  805368:	29403fcc 	andi	r5,r5,255
  80536c:	2007883a 	mov	r3,r4
  805370:	1180022e 	bgeu	r2,r6,80537c <memchr+0x18>
  805374:	2084703a 	and	r2,r4,r2
  805378:	10000b26 	beq	r2,zero,8053a8 <memchr+0x44>
  80537c:	313fffc4 	addi	r4,r6,-1
  805380:	3000051e 	bne	r6,zero,805398 <memchr+0x34>
  805384:	00002c06 	br	805438 <memchr+0xd4>
  805388:	213fffc4 	addi	r4,r4,-1
  80538c:	00bfffc4 	movi	r2,-1
  805390:	18c00044 	addi	r3,r3,1
  805394:	20802826 	beq	r4,r2,805438 <memchr+0xd4>
  805398:	18800003 	ldbu	r2,0(r3)
  80539c:	28bffa1e 	bne	r5,r2,805388 <memchr+0x24>
  8053a0:	1805883a 	mov	r2,r3
  8053a4:	f800283a 	ret
  8053a8:	0011883a 	mov	r8,zero
  8053ac:	0007883a 	mov	r3,zero
  8053b0:	01c00104 	movi	r7,4
  8053b4:	4004923a 	slli	r2,r8,8
  8053b8:	18c00044 	addi	r3,r3,1
  8053bc:	1151883a 	add	r8,r2,r5
  8053c0:	19fffc1e 	bne	r3,r7,8053b4 <memchr+0x50>
  8053c4:	02bfbff4 	movhi	r10,65279
  8053c8:	52bfbfc4 	addi	r10,r10,-257
  8053cc:	02602074 	movhi	r9,32897
  8053d0:	4a602004 	addi	r9,r9,-32640
  8053d4:	02c000c4 	movi	r11,3
  8053d8:	20800017 	ldw	r2,0(r4)
  8053dc:	31bfff04 	addi	r6,r6,-4
  8053e0:	200f883a 	mov	r7,r4
  8053e4:	1204f03a 	xor	r2,r2,r8
  8053e8:	1287883a 	add	r3,r2,r10
  8053ec:	1a46703a 	and	r3,r3,r9
  8053f0:	0084303a 	nor	r2,zero,r2
  8053f4:	10c4703a 	and	r2,r2,r3
  8053f8:	10000b26 	beq	r2,zero,805428 <memchr+0xc4>
  8053fc:	20800003 	ldbu	r2,0(r4)
  805400:	28800f26 	beq	r5,r2,805440 <memchr+0xdc>
  805404:	20800043 	ldbu	r2,1(r4)
  805408:	21c00044 	addi	r7,r4,1
  80540c:	28800c26 	beq	r5,r2,805440 <memchr+0xdc>
  805410:	20800083 	ldbu	r2,2(r4)
  805414:	21c00084 	addi	r7,r4,2
  805418:	28800926 	beq	r5,r2,805440 <memchr+0xdc>
  80541c:	208000c3 	ldbu	r2,3(r4)
  805420:	21c000c4 	addi	r7,r4,3
  805424:	28800626 	beq	r5,r2,805440 <memchr+0xdc>
  805428:	21000104 	addi	r4,r4,4
  80542c:	59bfea36 	bltu	r11,r6,8053d8 <memchr+0x74>
  805430:	2007883a 	mov	r3,r4
  805434:	003fd106 	br	80537c <memchr+0x18>
  805438:	0005883a 	mov	r2,zero
  80543c:	f800283a 	ret
  805440:	3805883a 	mov	r2,r7
  805444:	f800283a 	ret

00805448 <memcpy>:
  805448:	01c003c4 	movi	r7,15
  80544c:	2007883a 	mov	r3,r4
  805450:	3980032e 	bgeu	r7,r6,805460 <memcpy+0x18>
  805454:	2904b03a 	or	r2,r5,r4
  805458:	108000cc 	andi	r2,r2,3
  80545c:	10000926 	beq	r2,zero,805484 <memcpy+0x3c>
  805460:	30000626 	beq	r6,zero,80547c <memcpy+0x34>
  805464:	30cd883a 	add	r6,r6,r3
  805468:	28800003 	ldbu	r2,0(r5)
  80546c:	29400044 	addi	r5,r5,1
  805470:	18800005 	stb	r2,0(r3)
  805474:	18c00044 	addi	r3,r3,1
  805478:	30fffb1e 	bne	r6,r3,805468 <memcpy+0x20>
  80547c:	2005883a 	mov	r2,r4
  805480:	f800283a 	ret
  805484:	3811883a 	mov	r8,r7
  805488:	200f883a 	mov	r7,r4
  80548c:	28c00017 	ldw	r3,0(r5)
  805490:	31bffc04 	addi	r6,r6,-16
  805494:	38c00015 	stw	r3,0(r7)
  805498:	28800117 	ldw	r2,4(r5)
  80549c:	38800115 	stw	r2,4(r7)
  8054a0:	28c00217 	ldw	r3,8(r5)
  8054a4:	38c00215 	stw	r3,8(r7)
  8054a8:	28800317 	ldw	r2,12(r5)
  8054ac:	29400404 	addi	r5,r5,16
  8054b0:	38800315 	stw	r2,12(r7)
  8054b4:	39c00404 	addi	r7,r7,16
  8054b8:	41bff436 	bltu	r8,r6,80548c <memcpy+0x44>
  8054bc:	008000c4 	movi	r2,3
  8054c0:	1180072e 	bgeu	r2,r6,8054e0 <memcpy+0x98>
  8054c4:	1007883a 	mov	r3,r2
  8054c8:	28800017 	ldw	r2,0(r5)
  8054cc:	31bfff04 	addi	r6,r6,-4
  8054d0:	29400104 	addi	r5,r5,4
  8054d4:	38800015 	stw	r2,0(r7)
  8054d8:	39c00104 	addi	r7,r7,4
  8054dc:	19bffa36 	bltu	r3,r6,8054c8 <memcpy+0x80>
  8054e0:	3807883a 	mov	r3,r7
  8054e4:	003fde06 	br	805460 <memcpy+0x18>

008054e8 <memmove>:
  8054e8:	2807883a 	mov	r3,r5
  8054ec:	2011883a 	mov	r8,r4
  8054f0:	29000c2e 	bgeu	r5,r4,805524 <memmove+0x3c>
  8054f4:	298f883a 	add	r7,r5,r6
  8054f8:	21c00a2e 	bgeu	r4,r7,805524 <memmove+0x3c>
  8054fc:	30000726 	beq	r6,zero,80551c <memmove+0x34>
  805500:	2187883a 	add	r3,r4,r6
  805504:	198dc83a 	sub	r6,r3,r6
  805508:	39ffffc4 	addi	r7,r7,-1
  80550c:	38800003 	ldbu	r2,0(r7)
  805510:	18ffffc4 	addi	r3,r3,-1
  805514:	18800005 	stb	r2,0(r3)
  805518:	19bffb1e 	bne	r3,r6,805508 <memmove+0x20>
  80551c:	2005883a 	mov	r2,r4
  805520:	f800283a 	ret
  805524:	01c003c4 	movi	r7,15
  805528:	39800a36 	bltu	r7,r6,805554 <memmove+0x6c>
  80552c:	303ffb26 	beq	r6,zero,80551c <memmove+0x34>
  805530:	400f883a 	mov	r7,r8
  805534:	320d883a 	add	r6,r6,r8
  805538:	28800003 	ldbu	r2,0(r5)
  80553c:	29400044 	addi	r5,r5,1
  805540:	38800005 	stb	r2,0(r7)
  805544:	39c00044 	addi	r7,r7,1
  805548:	39bffb1e 	bne	r7,r6,805538 <memmove+0x50>
  80554c:	2005883a 	mov	r2,r4
  805550:	f800283a 	ret
  805554:	1904b03a 	or	r2,r3,r4
  805558:	108000cc 	andi	r2,r2,3
  80555c:	103ff31e 	bne	r2,zero,80552c <memmove+0x44>
  805560:	3811883a 	mov	r8,r7
  805564:	180b883a 	mov	r5,r3
  805568:	200f883a 	mov	r7,r4
  80556c:	28c00017 	ldw	r3,0(r5)
  805570:	31bffc04 	addi	r6,r6,-16
  805574:	38c00015 	stw	r3,0(r7)
  805578:	28800117 	ldw	r2,4(r5)
  80557c:	38800115 	stw	r2,4(r7)
  805580:	28c00217 	ldw	r3,8(r5)
  805584:	38c00215 	stw	r3,8(r7)
  805588:	28800317 	ldw	r2,12(r5)
  80558c:	29400404 	addi	r5,r5,16
  805590:	38800315 	stw	r2,12(r7)
  805594:	39c00404 	addi	r7,r7,16
  805598:	41bff436 	bltu	r8,r6,80556c <memmove+0x84>
  80559c:	008000c4 	movi	r2,3
  8055a0:	1180072e 	bgeu	r2,r6,8055c0 <memmove+0xd8>
  8055a4:	1007883a 	mov	r3,r2
  8055a8:	28800017 	ldw	r2,0(r5)
  8055ac:	31bfff04 	addi	r6,r6,-4
  8055b0:	29400104 	addi	r5,r5,4
  8055b4:	38800015 	stw	r2,0(r7)
  8055b8:	39c00104 	addi	r7,r7,4
  8055bc:	19bffa36 	bltu	r3,r6,8055a8 <memmove+0xc0>
  8055c0:	3811883a 	mov	r8,r7
  8055c4:	003fd906 	br	80552c <memmove+0x44>

008055c8 <_realloc_r>:
  8055c8:	defff404 	addi	sp,sp,-48
  8055cc:	dd800815 	stw	r22,32(sp)
  8055d0:	dc800415 	stw	r18,16(sp)
  8055d4:	dc400315 	stw	r17,12(sp)
  8055d8:	dfc00b15 	stw	ra,44(sp)
  8055dc:	df000a15 	stw	fp,40(sp)
  8055e0:	ddc00915 	stw	r23,36(sp)
  8055e4:	dd400715 	stw	r21,28(sp)
  8055e8:	dd000615 	stw	r20,24(sp)
  8055ec:	dcc00515 	stw	r19,20(sp)
  8055f0:	dc000215 	stw	r16,8(sp)
  8055f4:	2825883a 	mov	r18,r5
  8055f8:	3023883a 	mov	r17,r6
  8055fc:	202d883a 	mov	r22,r4
  805600:	2800c926 	beq	r5,zero,805928 <_realloc_r+0x360>
  805604:	0807b740 	call	807b74 <__malloc_lock>
  805608:	943ffe04 	addi	r16,r18,-8
  80560c:	88c002c4 	addi	r3,r17,11
  805610:	00800584 	movi	r2,22
  805614:	82000117 	ldw	r8,4(r16)
  805618:	10c01b2e 	bgeu	r2,r3,805688 <_realloc_r+0xc0>
  80561c:	00bffe04 	movi	r2,-8
  805620:	188e703a 	and	r7,r3,r2
  805624:	3839883a 	mov	fp,r7
  805628:	38001a16 	blt	r7,zero,805694 <_realloc_r+0xcc>
  80562c:	e4401936 	bltu	fp,r17,805694 <_realloc_r+0xcc>
  805630:	013fff04 	movi	r4,-4
  805634:	4126703a 	and	r19,r8,r4
  805638:	99c02616 	blt	r19,r7,8056d4 <_realloc_r+0x10c>
  80563c:	802b883a 	mov	r21,r16
  805640:	9829883a 	mov	r20,r19
  805644:	84000204 	addi	r16,r16,8
  805648:	a80f883a 	mov	r7,r21
  80564c:	a70dc83a 	sub	r6,r20,fp
  805650:	008003c4 	movi	r2,15
  805654:	1180c136 	bltu	r2,r6,80595c <_realloc_r+0x394>
  805658:	38800117 	ldw	r2,4(r7)
  80565c:	a549883a 	add	r4,r20,r21
  805660:	1080004c 	andi	r2,r2,1
  805664:	a084b03a 	or	r2,r20,r2
  805668:	38800115 	stw	r2,4(r7)
  80566c:	20c00117 	ldw	r3,4(r4)
  805670:	18c00054 	ori	r3,r3,1
  805674:	20c00115 	stw	r3,4(r4)
  805678:	b009883a 	mov	r4,r22
  80567c:	0807c7c0 	call	807c7c <__malloc_unlock>
  805680:	8023883a 	mov	r17,r16
  805684:	00000606 	br	8056a0 <_realloc_r+0xd8>
  805688:	01c00404 	movi	r7,16
  80568c:	3839883a 	mov	fp,r7
  805690:	e47fe72e 	bgeu	fp,r17,805630 <_realloc_r+0x68>
  805694:	00800304 	movi	r2,12
  805698:	0023883a 	mov	r17,zero
  80569c:	b0800015 	stw	r2,0(r22)
  8056a0:	8805883a 	mov	r2,r17
  8056a4:	dfc00b17 	ldw	ra,44(sp)
  8056a8:	df000a17 	ldw	fp,40(sp)
  8056ac:	ddc00917 	ldw	r23,36(sp)
  8056b0:	dd800817 	ldw	r22,32(sp)
  8056b4:	dd400717 	ldw	r21,28(sp)
  8056b8:	dd000617 	ldw	r20,24(sp)
  8056bc:	dcc00517 	ldw	r19,20(sp)
  8056c0:	dc800417 	ldw	r18,16(sp)
  8056c4:	dc400317 	ldw	r17,12(sp)
  8056c8:	dc000217 	ldw	r16,8(sp)
  8056cc:	dec00c04 	addi	sp,sp,48
  8056d0:	f800283a 	ret
  8056d4:	00802074 	movhi	r2,129
  8056d8:	10928004 	addi	r2,r2,18944
  8056dc:	12400217 	ldw	r9,8(r2)
  8056e0:	84cd883a 	add	r6,r16,r19
  8056e4:	802b883a 	mov	r21,r16
  8056e8:	3240b926 	beq	r6,r9,8059d0 <_realloc_r+0x408>
  8056ec:	31400117 	ldw	r5,4(r6)
  8056f0:	00bfff84 	movi	r2,-2
  8056f4:	2884703a 	and	r2,r5,r2
  8056f8:	1185883a 	add	r2,r2,r6
  8056fc:	10c00117 	ldw	r3,4(r2)
  805700:	18c0004c 	andi	r3,r3,1
  805704:	1807003a 	cmpeq	r3,r3,zero
  805708:	1800a326 	beq	r3,zero,805998 <_realloc_r+0x3d0>
  80570c:	2908703a 	and	r4,r5,r4
  805710:	9929883a 	add	r20,r19,r4
  805714:	a1c0a30e 	bge	r20,r7,8059a4 <_realloc_r+0x3dc>
  805718:	4080004c 	andi	r2,r8,1
  80571c:	1000551e 	bne	r2,zero,805874 <_realloc_r+0x2ac>
  805720:	80800017 	ldw	r2,0(r16)
  805724:	80afc83a 	sub	r23,r16,r2
  805728:	b8c00117 	ldw	r3,4(r23)
  80572c:	00bfff04 	movi	r2,-4
  805730:	1884703a 	and	r2,r3,r2
  805734:	30002e26 	beq	r6,zero,8057f0 <_realloc_r+0x228>
  805738:	3240b926 	beq	r6,r9,805a20 <_realloc_r+0x458>
  80573c:	98a9883a 	add	r20,r19,r2
  805740:	2509883a 	add	r4,r4,r20
  805744:	d9000015 	stw	r4,0(sp)
  805748:	21c02a16 	blt	r4,r7,8057f4 <_realloc_r+0x22c>
  80574c:	30800317 	ldw	r2,12(r6)
  805750:	30c00217 	ldw	r3,8(r6)
  805754:	01400904 	movi	r5,36
  805758:	99bfff04 	addi	r6,r19,-4
  80575c:	18800315 	stw	r2,12(r3)
  805760:	10c00215 	stw	r3,8(r2)
  805764:	b9000317 	ldw	r4,12(r23)
  805768:	b8800217 	ldw	r2,8(r23)
  80576c:	b82b883a 	mov	r21,r23
  805770:	bc000204 	addi	r16,r23,8
  805774:	20800215 	stw	r2,8(r4)
  805778:	11000315 	stw	r4,12(r2)
  80577c:	2980e436 	bltu	r5,r6,805b10 <_realloc_r+0x548>
  805780:	008004c4 	movi	r2,19
  805784:	9009883a 	mov	r4,r18
  805788:	8011883a 	mov	r8,r16
  80578c:	11800f2e 	bgeu	r2,r6,8057cc <_realloc_r+0x204>
  805790:	90800017 	ldw	r2,0(r18)
  805794:	ba000404 	addi	r8,r23,16
  805798:	91000204 	addi	r4,r18,8
  80579c:	b8800215 	stw	r2,8(r23)
  8057a0:	90c00117 	ldw	r3,4(r18)
  8057a4:	008006c4 	movi	r2,27
  8057a8:	b8c00315 	stw	r3,12(r23)
  8057ac:	1180072e 	bgeu	r2,r6,8057cc <_realloc_r+0x204>
  8057b0:	90c00217 	ldw	r3,8(r18)
  8057b4:	ba000604 	addi	r8,r23,24
  8057b8:	91000404 	addi	r4,r18,16
  8057bc:	b8c00415 	stw	r3,16(r23)
  8057c0:	90800317 	ldw	r2,12(r18)
  8057c4:	b8800515 	stw	r2,20(r23)
  8057c8:	3140e726 	beq	r6,r5,805b68 <_realloc_r+0x5a0>
  8057cc:	20800017 	ldw	r2,0(r4)
  8057d0:	dd000017 	ldw	r20,0(sp)
  8057d4:	b80f883a 	mov	r7,r23
  8057d8:	40800015 	stw	r2,0(r8)
  8057dc:	20c00117 	ldw	r3,4(r4)
  8057e0:	40c00115 	stw	r3,4(r8)
  8057e4:	20800217 	ldw	r2,8(r4)
  8057e8:	40800215 	stw	r2,8(r8)
  8057ec:	003f9706 	br	80564c <_realloc_r+0x84>
  8057f0:	98a9883a 	add	r20,r19,r2
  8057f4:	a1c01f16 	blt	r20,r7,805874 <_realloc_r+0x2ac>
  8057f8:	b8c00317 	ldw	r3,12(r23)
  8057fc:	b8800217 	ldw	r2,8(r23)
  805800:	99bfff04 	addi	r6,r19,-4
  805804:	01400904 	movi	r5,36
  805808:	b82b883a 	mov	r21,r23
  80580c:	18800215 	stw	r2,8(r3)
  805810:	10c00315 	stw	r3,12(r2)
  805814:	bc000204 	addi	r16,r23,8
  805818:	2980c336 	bltu	r5,r6,805b28 <_realloc_r+0x560>
  80581c:	008004c4 	movi	r2,19
  805820:	9009883a 	mov	r4,r18
  805824:	8011883a 	mov	r8,r16
  805828:	11800f2e 	bgeu	r2,r6,805868 <_realloc_r+0x2a0>
  80582c:	90800017 	ldw	r2,0(r18)
  805830:	ba000404 	addi	r8,r23,16
  805834:	91000204 	addi	r4,r18,8
  805838:	b8800215 	stw	r2,8(r23)
  80583c:	90c00117 	ldw	r3,4(r18)
  805840:	008006c4 	movi	r2,27
  805844:	b8c00315 	stw	r3,12(r23)
  805848:	1180072e 	bgeu	r2,r6,805868 <_realloc_r+0x2a0>
  80584c:	90c00217 	ldw	r3,8(r18)
  805850:	ba000604 	addi	r8,r23,24
  805854:	91000404 	addi	r4,r18,16
  805858:	b8c00415 	stw	r3,16(r23)
  80585c:	90800317 	ldw	r2,12(r18)
  805860:	b8800515 	stw	r2,20(r23)
  805864:	3140c726 	beq	r6,r5,805b84 <_realloc_r+0x5bc>
  805868:	20800017 	ldw	r2,0(r4)
  80586c:	b80f883a 	mov	r7,r23
  805870:	003fd906 	br	8057d8 <_realloc_r+0x210>
  805874:	880b883a 	mov	r5,r17
  805878:	b009883a 	mov	r4,r22
  80587c:	0804c240 	call	804c24 <_malloc_r>
  805880:	1023883a 	mov	r17,r2
  805884:	10002526 	beq	r2,zero,80591c <_realloc_r+0x354>
  805888:	80800117 	ldw	r2,4(r16)
  80588c:	00ffff84 	movi	r3,-2
  805890:	893ffe04 	addi	r4,r17,-8
  805894:	10c4703a 	and	r2,r2,r3
  805898:	8085883a 	add	r2,r16,r2
  80589c:	20809526 	beq	r4,r2,805af4 <_realloc_r+0x52c>
  8058a0:	99bfff04 	addi	r6,r19,-4
  8058a4:	01c00904 	movi	r7,36
  8058a8:	39804536 	bltu	r7,r6,8059c0 <_realloc_r+0x3f8>
  8058ac:	008004c4 	movi	r2,19
  8058b0:	9009883a 	mov	r4,r18
  8058b4:	880b883a 	mov	r5,r17
  8058b8:	11800f2e 	bgeu	r2,r6,8058f8 <_realloc_r+0x330>
  8058bc:	90800017 	ldw	r2,0(r18)
  8058c0:	89400204 	addi	r5,r17,8
  8058c4:	91000204 	addi	r4,r18,8
  8058c8:	88800015 	stw	r2,0(r17)
  8058cc:	90c00117 	ldw	r3,4(r18)
  8058d0:	008006c4 	movi	r2,27
  8058d4:	88c00115 	stw	r3,4(r17)
  8058d8:	1180072e 	bgeu	r2,r6,8058f8 <_realloc_r+0x330>
  8058dc:	90c00217 	ldw	r3,8(r18)
  8058e0:	89400404 	addi	r5,r17,16
  8058e4:	91000404 	addi	r4,r18,16
  8058e8:	88c00215 	stw	r3,8(r17)
  8058ec:	90800317 	ldw	r2,12(r18)
  8058f0:	88800315 	stw	r2,12(r17)
  8058f4:	31c09126 	beq	r6,r7,805b3c <_realloc_r+0x574>
  8058f8:	20800017 	ldw	r2,0(r4)
  8058fc:	28800015 	stw	r2,0(r5)
  805900:	20c00117 	ldw	r3,4(r4)
  805904:	28c00115 	stw	r3,4(r5)
  805908:	20800217 	ldw	r2,8(r4)
  80590c:	28800215 	stw	r2,8(r5)
  805910:	900b883a 	mov	r5,r18
  805914:	b009883a 	mov	r4,r22
  805918:	08063840 	call	806384 <_free_r>
  80591c:	b009883a 	mov	r4,r22
  805920:	0807c7c0 	call	807c7c <__malloc_unlock>
  805924:	003f5e06 	br	8056a0 <_realloc_r+0xd8>
  805928:	300b883a 	mov	r5,r6
  80592c:	dfc00b17 	ldw	ra,44(sp)
  805930:	df000a17 	ldw	fp,40(sp)
  805934:	ddc00917 	ldw	r23,36(sp)
  805938:	dd800817 	ldw	r22,32(sp)
  80593c:	dd400717 	ldw	r21,28(sp)
  805940:	dd000617 	ldw	r20,24(sp)
  805944:	dcc00517 	ldw	r19,20(sp)
  805948:	dc800417 	ldw	r18,16(sp)
  80594c:	dc400317 	ldw	r17,12(sp)
  805950:	dc000217 	ldw	r16,8(sp)
  805954:	dec00c04 	addi	sp,sp,48
  805958:	0804c241 	jmpi	804c24 <_malloc_r>
  80595c:	38800117 	ldw	r2,4(r7)
  805960:	e54b883a 	add	r5,fp,r21
  805964:	31000054 	ori	r4,r6,1
  805968:	1080004c 	andi	r2,r2,1
  80596c:	1704b03a 	or	r2,r2,fp
  805970:	38800115 	stw	r2,4(r7)
  805974:	29000115 	stw	r4,4(r5)
  805978:	2987883a 	add	r3,r5,r6
  80597c:	18800117 	ldw	r2,4(r3)
  805980:	29400204 	addi	r5,r5,8
  805984:	b009883a 	mov	r4,r22
  805988:	10800054 	ori	r2,r2,1
  80598c:	18800115 	stw	r2,4(r3)
  805990:	08063840 	call	806384 <_free_r>
  805994:	003f3806 	br	805678 <_realloc_r+0xb0>
  805998:	000d883a 	mov	r6,zero
  80599c:	0009883a 	mov	r4,zero
  8059a0:	003f5d06 	br	805718 <_realloc_r+0x150>
  8059a4:	30c00217 	ldw	r3,8(r6)
  8059a8:	30800317 	ldw	r2,12(r6)
  8059ac:	800f883a 	mov	r7,r16
  8059b0:	84000204 	addi	r16,r16,8
  8059b4:	10c00215 	stw	r3,8(r2)
  8059b8:	18800315 	stw	r2,12(r3)
  8059bc:	003f2306 	br	80564c <_realloc_r+0x84>
  8059c0:	8809883a 	mov	r4,r17
  8059c4:	900b883a 	mov	r5,r18
  8059c8:	08054e80 	call	8054e8 <memmove>
  8059cc:	003fd006 	br	805910 <_realloc_r+0x348>
  8059d0:	30800117 	ldw	r2,4(r6)
  8059d4:	e0c00404 	addi	r3,fp,16
  8059d8:	1108703a 	and	r4,r2,r4
  8059dc:	9905883a 	add	r2,r19,r4
  8059e0:	10ff4d16 	blt	r2,r3,805718 <_realloc_r+0x150>
  8059e4:	1705c83a 	sub	r2,r2,fp
  8059e8:	870b883a 	add	r5,r16,fp
  8059ec:	10800054 	ori	r2,r2,1
  8059f0:	28800115 	stw	r2,4(r5)
  8059f4:	80c00117 	ldw	r3,4(r16)
  8059f8:	00802074 	movhi	r2,129
  8059fc:	10928004 	addi	r2,r2,18944
  805a00:	b009883a 	mov	r4,r22
  805a04:	18c0004c 	andi	r3,r3,1
  805a08:	e0c6b03a 	or	r3,fp,r3
  805a0c:	11400215 	stw	r5,8(r2)
  805a10:	80c00115 	stw	r3,4(r16)
  805a14:	0807c7c0 	call	807c7c <__malloc_unlock>
  805a18:	84400204 	addi	r17,r16,8
  805a1c:	003f2006 	br	8056a0 <_realloc_r+0xd8>
  805a20:	98a9883a 	add	r20,r19,r2
  805a24:	2509883a 	add	r4,r4,r20
  805a28:	e0800404 	addi	r2,fp,16
  805a2c:	d9000115 	stw	r4,4(sp)
  805a30:	20bf7016 	blt	r4,r2,8057f4 <_realloc_r+0x22c>
  805a34:	b8c00317 	ldw	r3,12(r23)
  805a38:	b8800217 	ldw	r2,8(r23)
  805a3c:	99bfff04 	addi	r6,r19,-4
  805a40:	01400904 	movi	r5,36
  805a44:	18800215 	stw	r2,8(r3)
  805a48:	10c00315 	stw	r3,12(r2)
  805a4c:	bc400204 	addi	r17,r23,8
  805a50:	29804136 	bltu	r5,r6,805b58 <_realloc_r+0x590>
  805a54:	008004c4 	movi	r2,19
  805a58:	9009883a 	mov	r4,r18
  805a5c:	880f883a 	mov	r7,r17
  805a60:	11800f2e 	bgeu	r2,r6,805aa0 <_realloc_r+0x4d8>
  805a64:	90800017 	ldw	r2,0(r18)
  805a68:	b9c00404 	addi	r7,r23,16
  805a6c:	91000204 	addi	r4,r18,8
  805a70:	b8800215 	stw	r2,8(r23)
  805a74:	90c00117 	ldw	r3,4(r18)
  805a78:	008006c4 	movi	r2,27
  805a7c:	b8c00315 	stw	r3,12(r23)
  805a80:	1180072e 	bgeu	r2,r6,805aa0 <_realloc_r+0x4d8>
  805a84:	90c00217 	ldw	r3,8(r18)
  805a88:	b9c00604 	addi	r7,r23,24
  805a8c:	91000404 	addi	r4,r18,16
  805a90:	b8c00415 	stw	r3,16(r23)
  805a94:	90800317 	ldw	r2,12(r18)
  805a98:	b8800515 	stw	r2,20(r23)
  805a9c:	31404026 	beq	r6,r5,805ba0 <_realloc_r+0x5d8>
  805aa0:	20800017 	ldw	r2,0(r4)
  805aa4:	38800015 	stw	r2,0(r7)
  805aa8:	20c00117 	ldw	r3,4(r4)
  805aac:	38c00115 	stw	r3,4(r7)
  805ab0:	20800217 	ldw	r2,8(r4)
  805ab4:	38800215 	stw	r2,8(r7)
  805ab8:	d8c00117 	ldw	r3,4(sp)
  805abc:	bf0b883a 	add	r5,r23,fp
  805ac0:	b009883a 	mov	r4,r22
  805ac4:	1f05c83a 	sub	r2,r3,fp
  805ac8:	10800054 	ori	r2,r2,1
  805acc:	28800115 	stw	r2,4(r5)
  805ad0:	b8c00117 	ldw	r3,4(r23)
  805ad4:	00802074 	movhi	r2,129
  805ad8:	10928004 	addi	r2,r2,18944
  805adc:	11400215 	stw	r5,8(r2)
  805ae0:	18c0004c 	andi	r3,r3,1
  805ae4:	e0c6b03a 	or	r3,fp,r3
  805ae8:	b8c00115 	stw	r3,4(r23)
  805aec:	0807c7c0 	call	807c7c <__malloc_unlock>
  805af0:	003eeb06 	br	8056a0 <_realloc_r+0xd8>
  805af4:	20800117 	ldw	r2,4(r4)
  805af8:	00ffff04 	movi	r3,-4
  805afc:	800f883a 	mov	r7,r16
  805b00:	10c4703a 	and	r2,r2,r3
  805b04:	98a9883a 	add	r20,r19,r2
  805b08:	84000204 	addi	r16,r16,8
  805b0c:	003ecf06 	br	80564c <_realloc_r+0x84>
  805b10:	900b883a 	mov	r5,r18
  805b14:	8009883a 	mov	r4,r16
  805b18:	08054e80 	call	8054e8 <memmove>
  805b1c:	dd000017 	ldw	r20,0(sp)
  805b20:	b80f883a 	mov	r7,r23
  805b24:	003ec906 	br	80564c <_realloc_r+0x84>
  805b28:	900b883a 	mov	r5,r18
  805b2c:	8009883a 	mov	r4,r16
  805b30:	08054e80 	call	8054e8 <memmove>
  805b34:	b80f883a 	mov	r7,r23
  805b38:	003ec406 	br	80564c <_realloc_r+0x84>
  805b3c:	90c00417 	ldw	r3,16(r18)
  805b40:	89400604 	addi	r5,r17,24
  805b44:	91000604 	addi	r4,r18,24
  805b48:	88c00415 	stw	r3,16(r17)
  805b4c:	90800517 	ldw	r2,20(r18)
  805b50:	88800515 	stw	r2,20(r17)
  805b54:	003f6806 	br	8058f8 <_realloc_r+0x330>
  805b58:	900b883a 	mov	r5,r18
  805b5c:	8809883a 	mov	r4,r17
  805b60:	08054e80 	call	8054e8 <memmove>
  805b64:	003fd406 	br	805ab8 <_realloc_r+0x4f0>
  805b68:	90c00417 	ldw	r3,16(r18)
  805b6c:	91000604 	addi	r4,r18,24
  805b70:	ba000804 	addi	r8,r23,32
  805b74:	b8c00615 	stw	r3,24(r23)
  805b78:	90800517 	ldw	r2,20(r18)
  805b7c:	b8800715 	stw	r2,28(r23)
  805b80:	003f1206 	br	8057cc <_realloc_r+0x204>
  805b84:	90c00417 	ldw	r3,16(r18)
  805b88:	91000604 	addi	r4,r18,24
  805b8c:	ba000804 	addi	r8,r23,32
  805b90:	b8c00615 	stw	r3,24(r23)
  805b94:	90800517 	ldw	r2,20(r18)
  805b98:	b8800715 	stw	r2,28(r23)
  805b9c:	003f3206 	br	805868 <_realloc_r+0x2a0>
  805ba0:	90c00417 	ldw	r3,16(r18)
  805ba4:	91000604 	addi	r4,r18,24
  805ba8:	b9c00804 	addi	r7,r23,32
  805bac:	b8c00615 	stw	r3,24(r23)
  805bb0:	90800517 	ldw	r2,20(r18)
  805bb4:	b8800715 	stw	r2,28(r23)
  805bb8:	003fb906 	br	805aa0 <_realloc_r+0x4d8>

00805bbc <_sbrk_r>:
  805bbc:	defffd04 	addi	sp,sp,-12
  805bc0:	dc000015 	stw	r16,0(sp)
  805bc4:	04002074 	movhi	r16,129
  805bc8:	841f3504 	addi	r16,r16,31956
  805bcc:	dc400115 	stw	r17,4(sp)
  805bd0:	80000015 	stw	zero,0(r16)
  805bd4:	2023883a 	mov	r17,r4
  805bd8:	2809883a 	mov	r4,r5
  805bdc:	dfc00215 	stw	ra,8(sp)
  805be0:	08078300 	call	807830 <sbrk>
  805be4:	1007883a 	mov	r3,r2
  805be8:	00bfffc4 	movi	r2,-1
  805bec:	18800626 	beq	r3,r2,805c08 <_sbrk_r+0x4c>
  805bf0:	1805883a 	mov	r2,r3
  805bf4:	dfc00217 	ldw	ra,8(sp)
  805bf8:	dc400117 	ldw	r17,4(sp)
  805bfc:	dc000017 	ldw	r16,0(sp)
  805c00:	dec00304 	addi	sp,sp,12
  805c04:	f800283a 	ret
  805c08:	80800017 	ldw	r2,0(r16)
  805c0c:	103ff826 	beq	r2,zero,805bf0 <_sbrk_r+0x34>
  805c10:	88800015 	stw	r2,0(r17)
  805c14:	1805883a 	mov	r2,r3
  805c18:	dfc00217 	ldw	ra,8(sp)
  805c1c:	dc400117 	ldw	r17,4(sp)
  805c20:	dc000017 	ldw	r16,0(sp)
  805c24:	dec00304 	addi	sp,sp,12
  805c28:	f800283a 	ret

00805c2c <__swsetup_r>:
  805c2c:	00802074 	movhi	r2,129
  805c30:	10982b04 	addi	r2,r2,24748
  805c34:	10c00017 	ldw	r3,0(r2)
  805c38:	defffd04 	addi	sp,sp,-12
  805c3c:	dc400115 	stw	r17,4(sp)
  805c40:	dc000015 	stw	r16,0(sp)
  805c44:	dfc00215 	stw	ra,8(sp)
  805c48:	2023883a 	mov	r17,r4
  805c4c:	2821883a 	mov	r16,r5
  805c50:	18000226 	beq	r3,zero,805c5c <__swsetup_r+0x30>
  805c54:	18800e17 	ldw	r2,56(r3)
  805c58:	10001f26 	beq	r2,zero,805cd8 <__swsetup_r+0xac>
  805c5c:	8100030b 	ldhu	r4,12(r16)
  805c60:	2080020c 	andi	r2,r4,8
  805c64:	10002826 	beq	r2,zero,805d08 <__swsetup_r+0xdc>
  805c68:	81400417 	ldw	r5,16(r16)
  805c6c:	28001d26 	beq	r5,zero,805ce4 <__swsetup_r+0xb8>
  805c70:	2080004c 	andi	r2,r4,1
  805c74:	1005003a 	cmpeq	r2,r2,zero
  805c78:	10000b26 	beq	r2,zero,805ca8 <__swsetup_r+0x7c>
  805c7c:	2080008c 	andi	r2,r4,2
  805c80:	10001226 	beq	r2,zero,805ccc <__swsetup_r+0xa0>
  805c84:	0005883a 	mov	r2,zero
  805c88:	80800215 	stw	r2,8(r16)
  805c8c:	28000b26 	beq	r5,zero,805cbc <__swsetup_r+0x90>
  805c90:	0005883a 	mov	r2,zero
  805c94:	dfc00217 	ldw	ra,8(sp)
  805c98:	dc400117 	ldw	r17,4(sp)
  805c9c:	dc000017 	ldw	r16,0(sp)
  805ca0:	dec00304 	addi	sp,sp,12
  805ca4:	f800283a 	ret
  805ca8:	80800517 	ldw	r2,20(r16)
  805cac:	80000215 	stw	zero,8(r16)
  805cb0:	0085c83a 	sub	r2,zero,r2
  805cb4:	80800615 	stw	r2,24(r16)
  805cb8:	283ff51e 	bne	r5,zero,805c90 <__swsetup_r+0x64>
  805cbc:	2080200c 	andi	r2,r4,128
  805cc0:	103ff326 	beq	r2,zero,805c90 <__swsetup_r+0x64>
  805cc4:	00bfffc4 	movi	r2,-1
  805cc8:	003ff206 	br	805c94 <__swsetup_r+0x68>
  805ccc:	80800517 	ldw	r2,20(r16)
  805cd0:	80800215 	stw	r2,8(r16)
  805cd4:	003fed06 	br	805c8c <__swsetup_r+0x60>
  805cd8:	1809883a 	mov	r4,r3
  805cdc:	08060000 	call	806000 <__sinit>
  805ce0:	003fde06 	br	805c5c <__swsetup_r+0x30>
  805ce4:	20c0a00c 	andi	r3,r4,640
  805ce8:	00808004 	movi	r2,512
  805cec:	18bfe026 	beq	r3,r2,805c70 <__swsetup_r+0x44>
  805cf0:	8809883a 	mov	r4,r17
  805cf4:	800b883a 	mov	r5,r16
  805cf8:	08068180 	call	806818 <__smakebuf_r>
  805cfc:	8100030b 	ldhu	r4,12(r16)
  805d00:	81400417 	ldw	r5,16(r16)
  805d04:	003fda06 	br	805c70 <__swsetup_r+0x44>
  805d08:	2080040c 	andi	r2,r4,16
  805d0c:	103fed26 	beq	r2,zero,805cc4 <__swsetup_r+0x98>
  805d10:	2080010c 	andi	r2,r4,4
  805d14:	10001226 	beq	r2,zero,805d60 <__swsetup_r+0x134>
  805d18:	81400c17 	ldw	r5,48(r16)
  805d1c:	28000526 	beq	r5,zero,805d34 <__swsetup_r+0x108>
  805d20:	80801004 	addi	r2,r16,64
  805d24:	28800226 	beq	r5,r2,805d30 <__swsetup_r+0x104>
  805d28:	8809883a 	mov	r4,r17
  805d2c:	08063840 	call	806384 <_free_r>
  805d30:	80000c15 	stw	zero,48(r16)
  805d34:	8080030b 	ldhu	r2,12(r16)
  805d38:	81400417 	ldw	r5,16(r16)
  805d3c:	80000115 	stw	zero,4(r16)
  805d40:	10bff6cc 	andi	r2,r2,65499
  805d44:	8080030d 	sth	r2,12(r16)
  805d48:	81400015 	stw	r5,0(r16)
  805d4c:	8080030b 	ldhu	r2,12(r16)
  805d50:	10800214 	ori	r2,r2,8
  805d54:	113fffcc 	andi	r4,r2,65535
  805d58:	8080030d 	sth	r2,12(r16)
  805d5c:	003fc306 	br	805c6c <__swsetup_r+0x40>
  805d60:	81400417 	ldw	r5,16(r16)
  805d64:	003ff906 	br	805d4c <__swsetup_r+0x120>

00805d68 <_fflush_r>:
  805d68:	defffb04 	addi	sp,sp,-20
  805d6c:	dcc00315 	stw	r19,12(sp)
  805d70:	dc800215 	stw	r18,8(sp)
  805d74:	dfc00415 	stw	ra,16(sp)
  805d78:	dc400115 	stw	r17,4(sp)
  805d7c:	dc000015 	stw	r16,0(sp)
  805d80:	2027883a 	mov	r19,r4
  805d84:	2825883a 	mov	r18,r5
  805d88:	20000226 	beq	r4,zero,805d94 <_fflush_r+0x2c>
  805d8c:	20800e17 	ldw	r2,56(r4)
  805d90:	10005626 	beq	r2,zero,805eec <_fflush_r+0x184>
  805d94:	9100030b 	ldhu	r4,12(r18)
  805d98:	20ffffcc 	andi	r3,r4,65535
  805d9c:	18e0001c 	xori	r3,r3,32768
  805da0:	18e00004 	addi	r3,r3,-32768
  805da4:	1880020c 	andi	r2,r3,8
  805da8:	1000261e 	bne	r2,zero,805e44 <_fflush_r+0xdc>
  805dac:	90c00117 	ldw	r3,4(r18)
  805db0:	20820014 	ori	r2,r4,2048
  805db4:	9080030d 	sth	r2,12(r18)
  805db8:	1009883a 	mov	r4,r2
  805dbc:	00c0400e 	bge	zero,r3,805ec0 <_fflush_r+0x158>
  805dc0:	92000a17 	ldw	r8,40(r18)
  805dc4:	40004026 	beq	r8,zero,805ec8 <_fflush_r+0x160>
  805dc8:	2084000c 	andi	r2,r4,4096
  805dcc:	10005326 	beq	r2,zero,805f1c <_fflush_r+0x1b4>
  805dd0:	94001417 	ldw	r16,80(r18)
  805dd4:	9080030b 	ldhu	r2,12(r18)
  805dd8:	1080010c 	andi	r2,r2,4
  805ddc:	1000481e 	bne	r2,zero,805f00 <_fflush_r+0x198>
  805de0:	91400717 	ldw	r5,28(r18)
  805de4:	9809883a 	mov	r4,r19
  805de8:	800d883a 	mov	r6,r16
  805dec:	000f883a 	mov	r7,zero
  805df0:	403ee83a 	callr	r8
  805df4:	8080261e 	bne	r16,r2,805e90 <_fflush_r+0x128>
  805df8:	9080030b 	ldhu	r2,12(r18)
  805dfc:	91000417 	ldw	r4,16(r18)
  805e00:	90000115 	stw	zero,4(r18)
  805e04:	10bdffcc 	andi	r2,r2,63487
  805e08:	10ffffcc 	andi	r3,r2,65535
  805e0c:	18c4000c 	andi	r3,r3,4096
  805e10:	9080030d 	sth	r2,12(r18)
  805e14:	91000015 	stw	r4,0(r18)
  805e18:	18002b26 	beq	r3,zero,805ec8 <_fflush_r+0x160>
  805e1c:	0007883a 	mov	r3,zero
  805e20:	1805883a 	mov	r2,r3
  805e24:	94001415 	stw	r16,80(r18)
  805e28:	dfc00417 	ldw	ra,16(sp)
  805e2c:	dcc00317 	ldw	r19,12(sp)
  805e30:	dc800217 	ldw	r18,8(sp)
  805e34:	dc400117 	ldw	r17,4(sp)
  805e38:	dc000017 	ldw	r16,0(sp)
  805e3c:	dec00504 	addi	sp,sp,20
  805e40:	f800283a 	ret
  805e44:	94400417 	ldw	r17,16(r18)
  805e48:	88001f26 	beq	r17,zero,805ec8 <_fflush_r+0x160>
  805e4c:	90800017 	ldw	r2,0(r18)
  805e50:	18c000cc 	andi	r3,r3,3
  805e54:	94400015 	stw	r17,0(r18)
  805e58:	1461c83a 	sub	r16,r2,r17
  805e5c:	18002526 	beq	r3,zero,805ef4 <_fflush_r+0x18c>
  805e60:	0005883a 	mov	r2,zero
  805e64:	90800215 	stw	r2,8(r18)
  805e68:	0400170e 	bge	zero,r16,805ec8 <_fflush_r+0x160>
  805e6c:	90c00917 	ldw	r3,36(r18)
  805e70:	91400717 	ldw	r5,28(r18)
  805e74:	880d883a 	mov	r6,r17
  805e78:	800f883a 	mov	r7,r16
  805e7c:	9809883a 	mov	r4,r19
  805e80:	183ee83a 	callr	r3
  805e84:	88a3883a 	add	r17,r17,r2
  805e88:	80a1c83a 	sub	r16,r16,r2
  805e8c:	00bff616 	blt	zero,r2,805e68 <_fflush_r+0x100>
  805e90:	9080030b 	ldhu	r2,12(r18)
  805e94:	00ffffc4 	movi	r3,-1
  805e98:	10801014 	ori	r2,r2,64
  805e9c:	9080030d 	sth	r2,12(r18)
  805ea0:	1805883a 	mov	r2,r3
  805ea4:	dfc00417 	ldw	ra,16(sp)
  805ea8:	dcc00317 	ldw	r19,12(sp)
  805eac:	dc800217 	ldw	r18,8(sp)
  805eb0:	dc400117 	ldw	r17,4(sp)
  805eb4:	dc000017 	ldw	r16,0(sp)
  805eb8:	dec00504 	addi	sp,sp,20
  805ebc:	f800283a 	ret
  805ec0:	90800f17 	ldw	r2,60(r18)
  805ec4:	00bfbe16 	blt	zero,r2,805dc0 <_fflush_r+0x58>
  805ec8:	0007883a 	mov	r3,zero
  805ecc:	1805883a 	mov	r2,r3
  805ed0:	dfc00417 	ldw	ra,16(sp)
  805ed4:	dcc00317 	ldw	r19,12(sp)
  805ed8:	dc800217 	ldw	r18,8(sp)
  805edc:	dc400117 	ldw	r17,4(sp)
  805ee0:	dc000017 	ldw	r16,0(sp)
  805ee4:	dec00504 	addi	sp,sp,20
  805ee8:	f800283a 	ret
  805eec:	08060000 	call	806000 <__sinit>
  805ef0:	003fa806 	br	805d94 <_fflush_r+0x2c>
  805ef4:	90800517 	ldw	r2,20(r18)
  805ef8:	90800215 	stw	r2,8(r18)
  805efc:	003fda06 	br	805e68 <_fflush_r+0x100>
  805f00:	90800117 	ldw	r2,4(r18)
  805f04:	90c00c17 	ldw	r3,48(r18)
  805f08:	80a1c83a 	sub	r16,r16,r2
  805f0c:	183fb426 	beq	r3,zero,805de0 <_fflush_r+0x78>
  805f10:	90800f17 	ldw	r2,60(r18)
  805f14:	80a1c83a 	sub	r16,r16,r2
  805f18:	003fb106 	br	805de0 <_fflush_r+0x78>
  805f1c:	91400717 	ldw	r5,28(r18)
  805f20:	9809883a 	mov	r4,r19
  805f24:	000d883a 	mov	r6,zero
  805f28:	01c00044 	movi	r7,1
  805f2c:	403ee83a 	callr	r8
  805f30:	1021883a 	mov	r16,r2
  805f34:	00bfffc4 	movi	r2,-1
  805f38:	80800226 	beq	r16,r2,805f44 <_fflush_r+0x1dc>
  805f3c:	92000a17 	ldw	r8,40(r18)
  805f40:	003fa406 	br	805dd4 <_fflush_r+0x6c>
  805f44:	98c00017 	ldw	r3,0(r19)
  805f48:	00800744 	movi	r2,29
  805f4c:	18bfde26 	beq	r3,r2,805ec8 <_fflush_r+0x160>
  805f50:	9080030b 	ldhu	r2,12(r18)
  805f54:	8007883a 	mov	r3,r16
  805f58:	10801014 	ori	r2,r2,64
  805f5c:	9080030d 	sth	r2,12(r18)
  805f60:	003fcf06 	br	805ea0 <_fflush_r+0x138>

00805f64 <fflush>:
  805f64:	01402034 	movhi	r5,128
  805f68:	29575a04 	addi	r5,r5,23912
  805f6c:	2007883a 	mov	r3,r4
  805f70:	20000526 	beq	r4,zero,805f88 <fflush+0x24>
  805f74:	00802074 	movhi	r2,129
  805f78:	10982b04 	addi	r2,r2,24748
  805f7c:	11000017 	ldw	r4,0(r2)
  805f80:	180b883a 	mov	r5,r3
  805f84:	0805d681 	jmpi	805d68 <_fflush_r>
  805f88:	00802074 	movhi	r2,129
  805f8c:	10982c04 	addi	r2,r2,24752
  805f90:	11000017 	ldw	r4,0(r2)
  805f94:	08066981 	jmpi	806698 <_fwalk_reent>

00805f98 <std>:
  805f98:	00802034 	movhi	r2,128
  805f9c:	109a9104 	addi	r2,r2,27204
  805fa0:	20800b15 	stw	r2,44(r4)
  805fa4:	00802034 	movhi	r2,128
  805fa8:	109acc04 	addi	r2,r2,27440
  805fac:	20800815 	stw	r2,32(r4)
  805fb0:	00c02034 	movhi	r3,128
  805fb4:	18daad04 	addi	r3,r3,27316
  805fb8:	00802034 	movhi	r2,128
  805fbc:	109a9304 	addi	r2,r2,27212
  805fc0:	2140030d 	sth	r5,12(r4)
  805fc4:	2180038d 	sth	r6,14(r4)
  805fc8:	20c00915 	stw	r3,36(r4)
  805fcc:	20800a15 	stw	r2,40(r4)
  805fd0:	20000015 	stw	zero,0(r4)
  805fd4:	20000115 	stw	zero,4(r4)
  805fd8:	20000215 	stw	zero,8(r4)
  805fdc:	20000415 	stw	zero,16(r4)
  805fe0:	20000515 	stw	zero,20(r4)
  805fe4:	20000615 	stw	zero,24(r4)
  805fe8:	21000715 	stw	r4,28(r4)
  805fec:	f800283a 	ret

00805ff0 <__sfp_lock_acquire>:
  805ff0:	f800283a 	ret

00805ff4 <__sfp_lock_release>:
  805ff4:	f800283a 	ret

00805ff8 <__sinit_lock_acquire>:
  805ff8:	f800283a 	ret

00805ffc <__sinit_lock_release>:
  805ffc:	f800283a 	ret

00806000 <__sinit>:
  806000:	20800e17 	ldw	r2,56(r4)
  806004:	defffd04 	addi	sp,sp,-12
  806008:	dc400115 	stw	r17,4(sp)
  80600c:	dc000015 	stw	r16,0(sp)
  806010:	dfc00215 	stw	ra,8(sp)
  806014:	04400044 	movi	r17,1
  806018:	01400104 	movi	r5,4
  80601c:	000d883a 	mov	r6,zero
  806020:	2021883a 	mov	r16,r4
  806024:	2200bb04 	addi	r8,r4,748
  806028:	200f883a 	mov	r7,r4
  80602c:	10000526 	beq	r2,zero,806044 <__sinit+0x44>
  806030:	dfc00217 	ldw	ra,8(sp)
  806034:	dc400117 	ldw	r17,4(sp)
  806038:	dc000017 	ldw	r16,0(sp)
  80603c:	dec00304 	addi	sp,sp,12
  806040:	f800283a 	ret
  806044:	21000117 	ldw	r4,4(r4)
  806048:	00802034 	movhi	r2,128
  80604c:	10983904 	addi	r2,r2,24804
  806050:	00c000c4 	movi	r3,3
  806054:	80800f15 	stw	r2,60(r16)
  806058:	80c0b915 	stw	r3,740(r16)
  80605c:	8200ba15 	stw	r8,744(r16)
  806060:	84400e15 	stw	r17,56(r16)
  806064:	8000b815 	stw	zero,736(r16)
  806068:	0805f980 	call	805f98 <std>
  80606c:	81000217 	ldw	r4,8(r16)
  806070:	880d883a 	mov	r6,r17
  806074:	800f883a 	mov	r7,r16
  806078:	01400284 	movi	r5,10
  80607c:	0805f980 	call	805f98 <std>
  806080:	81000317 	ldw	r4,12(r16)
  806084:	800f883a 	mov	r7,r16
  806088:	01400484 	movi	r5,18
  80608c:	01800084 	movi	r6,2
  806090:	dfc00217 	ldw	ra,8(sp)
  806094:	dc400117 	ldw	r17,4(sp)
  806098:	dc000017 	ldw	r16,0(sp)
  80609c:	dec00304 	addi	sp,sp,12
  8060a0:	0805f981 	jmpi	805f98 <std>

008060a4 <__fp_lock>:
  8060a4:	0005883a 	mov	r2,zero
  8060a8:	f800283a 	ret

008060ac <__fp_unlock>:
  8060ac:	0005883a 	mov	r2,zero
  8060b0:	f800283a 	ret

008060b4 <__fp_unlock_all>:
  8060b4:	00802074 	movhi	r2,129
  8060b8:	10982b04 	addi	r2,r2,24748
  8060bc:	11000017 	ldw	r4,0(r2)
  8060c0:	01402034 	movhi	r5,128
  8060c4:	29582b04 	addi	r5,r5,24748
  8060c8:	08067601 	jmpi	806760 <_fwalk>

008060cc <__fp_lock_all>:
  8060cc:	00802074 	movhi	r2,129
  8060d0:	10982b04 	addi	r2,r2,24748
  8060d4:	11000017 	ldw	r4,0(r2)
  8060d8:	01402034 	movhi	r5,128
  8060dc:	29582904 	addi	r5,r5,24740
  8060e0:	08067601 	jmpi	806760 <_fwalk>

008060e4 <_cleanup_r>:
  8060e4:	01402034 	movhi	r5,128
  8060e8:	295b6204 	addi	r5,r5,28040
  8060ec:	08067601 	jmpi	806760 <_fwalk>

008060f0 <_cleanup>:
  8060f0:	00802074 	movhi	r2,129
  8060f4:	10982c04 	addi	r2,r2,24752
  8060f8:	11000017 	ldw	r4,0(r2)
  8060fc:	08060e41 	jmpi	8060e4 <_cleanup_r>

00806100 <__sfmoreglue>:
  806100:	defffc04 	addi	sp,sp,-16
  806104:	dc400115 	stw	r17,4(sp)
  806108:	2c401724 	muli	r17,r5,92
  80610c:	dc800215 	stw	r18,8(sp)
  806110:	2825883a 	mov	r18,r5
  806114:	89400304 	addi	r5,r17,12
  806118:	dc000015 	stw	r16,0(sp)
  80611c:	dfc00315 	stw	ra,12(sp)
  806120:	0804c240 	call	804c24 <_malloc_r>
  806124:	0021883a 	mov	r16,zero
  806128:	880d883a 	mov	r6,r17
  80612c:	000b883a 	mov	r5,zero
  806130:	10000626 	beq	r2,zero,80614c <__sfmoreglue+0x4c>
  806134:	11000304 	addi	r4,r2,12
  806138:	14800115 	stw	r18,4(r2)
  80613c:	10000015 	stw	zero,0(r2)
  806140:	11000215 	stw	r4,8(r2)
  806144:	1021883a 	mov	r16,r2
  806148:	08069ac0 	call	8069ac <memset>
  80614c:	8005883a 	mov	r2,r16
  806150:	dfc00317 	ldw	ra,12(sp)
  806154:	dc800217 	ldw	r18,8(sp)
  806158:	dc400117 	ldw	r17,4(sp)
  80615c:	dc000017 	ldw	r16,0(sp)
  806160:	dec00404 	addi	sp,sp,16
  806164:	f800283a 	ret

00806168 <__sfp>:
  806168:	defffd04 	addi	sp,sp,-12
  80616c:	00802074 	movhi	r2,129
  806170:	10982c04 	addi	r2,r2,24752
  806174:	dc000015 	stw	r16,0(sp)
  806178:	14000017 	ldw	r16,0(r2)
  80617c:	dc400115 	stw	r17,4(sp)
  806180:	dfc00215 	stw	ra,8(sp)
  806184:	80800e17 	ldw	r2,56(r16)
  806188:	2023883a 	mov	r17,r4
  80618c:	10002626 	beq	r2,zero,806228 <__sfp+0xc0>
  806190:	8400b804 	addi	r16,r16,736
  806194:	80800117 	ldw	r2,4(r16)
  806198:	81000217 	ldw	r4,8(r16)
  80619c:	10ffffc4 	addi	r3,r2,-1
  8061a0:	18000916 	blt	r3,zero,8061c8 <__sfp+0x60>
  8061a4:	2080030f 	ldh	r2,12(r4)
  8061a8:	10000b26 	beq	r2,zero,8061d8 <__sfp+0x70>
  8061ac:	017fffc4 	movi	r5,-1
  8061b0:	00000206 	br	8061bc <__sfp+0x54>
  8061b4:	2080030f 	ldh	r2,12(r4)
  8061b8:	10000726 	beq	r2,zero,8061d8 <__sfp+0x70>
  8061bc:	18ffffc4 	addi	r3,r3,-1
  8061c0:	21001704 	addi	r4,r4,92
  8061c4:	197ffb1e 	bne	r3,r5,8061b4 <__sfp+0x4c>
  8061c8:	80800017 	ldw	r2,0(r16)
  8061cc:	10001926 	beq	r2,zero,806234 <__sfp+0xcc>
  8061d0:	1021883a 	mov	r16,r2
  8061d4:	003fef06 	br	806194 <__sfp+0x2c>
  8061d8:	00bfffc4 	movi	r2,-1
  8061dc:	00c00044 	movi	r3,1
  8061e0:	2080038d 	sth	r2,14(r4)
  8061e4:	20c0030d 	sth	r3,12(r4)
  8061e8:	20000015 	stw	zero,0(r4)
  8061ec:	20000215 	stw	zero,8(r4)
  8061f0:	20000115 	stw	zero,4(r4)
  8061f4:	20000415 	stw	zero,16(r4)
  8061f8:	20000515 	stw	zero,20(r4)
  8061fc:	20000615 	stw	zero,24(r4)
  806200:	20000c15 	stw	zero,48(r4)
  806204:	20000d15 	stw	zero,52(r4)
  806208:	20001115 	stw	zero,68(r4)
  80620c:	20001215 	stw	zero,72(r4)
  806210:	2005883a 	mov	r2,r4
  806214:	dfc00217 	ldw	ra,8(sp)
  806218:	dc400117 	ldw	r17,4(sp)
  80621c:	dc000017 	ldw	r16,0(sp)
  806220:	dec00304 	addi	sp,sp,12
  806224:	f800283a 	ret
  806228:	8009883a 	mov	r4,r16
  80622c:	08060000 	call	806000 <__sinit>
  806230:	003fd706 	br	806190 <__sfp+0x28>
  806234:	8809883a 	mov	r4,r17
  806238:	01400104 	movi	r5,4
  80623c:	08061000 	call	806100 <__sfmoreglue>
  806240:	80800015 	stw	r2,0(r16)
  806244:	103fe21e 	bne	r2,zero,8061d0 <__sfp+0x68>
  806248:	00800304 	movi	r2,12
  80624c:	0009883a 	mov	r4,zero
  806250:	88800015 	stw	r2,0(r17)
  806254:	003fee06 	br	806210 <__sfp+0xa8>

00806258 <_malloc_trim_r>:
  806258:	defffb04 	addi	sp,sp,-20
  80625c:	dcc00315 	stw	r19,12(sp)
  806260:	04c02074 	movhi	r19,129
  806264:	9cd28004 	addi	r19,r19,18944
  806268:	dc800215 	stw	r18,8(sp)
  80626c:	dc400115 	stw	r17,4(sp)
  806270:	dc000015 	stw	r16,0(sp)
  806274:	2823883a 	mov	r17,r5
  806278:	2025883a 	mov	r18,r4
  80627c:	dfc00415 	stw	ra,16(sp)
  806280:	0807b740 	call	807b74 <__malloc_lock>
  806284:	98800217 	ldw	r2,8(r19)
  806288:	9009883a 	mov	r4,r18
  80628c:	000b883a 	mov	r5,zero
  806290:	10c00117 	ldw	r3,4(r2)
  806294:	00bfff04 	movi	r2,-4
  806298:	18a0703a 	and	r16,r3,r2
  80629c:	8463c83a 	sub	r17,r16,r17
  8062a0:	8c43fbc4 	addi	r17,r17,4079
  8062a4:	8822d33a 	srli	r17,r17,12
  8062a8:	0083ffc4 	movi	r2,4095
  8062ac:	8c7fffc4 	addi	r17,r17,-1
  8062b0:	8822933a 	slli	r17,r17,12
  8062b4:	1440060e 	bge	r2,r17,8062d0 <_malloc_trim_r+0x78>
  8062b8:	0805bbc0 	call	805bbc <_sbrk_r>
  8062bc:	98c00217 	ldw	r3,8(r19)
  8062c0:	9009883a 	mov	r4,r18
  8062c4:	044bc83a 	sub	r5,zero,r17
  8062c8:	80c7883a 	add	r3,r16,r3
  8062cc:	10c00926 	beq	r2,r3,8062f4 <_malloc_trim_r+0x9c>
  8062d0:	0807c7c0 	call	807c7c <__malloc_unlock>
  8062d4:	0005883a 	mov	r2,zero
  8062d8:	dfc00417 	ldw	ra,16(sp)
  8062dc:	dcc00317 	ldw	r19,12(sp)
  8062e0:	dc800217 	ldw	r18,8(sp)
  8062e4:	dc400117 	ldw	r17,4(sp)
  8062e8:	dc000017 	ldw	r16,0(sp)
  8062ec:	dec00504 	addi	sp,sp,20
  8062f0:	f800283a 	ret
  8062f4:	9009883a 	mov	r4,r18
  8062f8:	0805bbc0 	call	805bbc <_sbrk_r>
  8062fc:	844dc83a 	sub	r6,r16,r17
  806300:	00ffffc4 	movi	r3,-1
  806304:	9009883a 	mov	r4,r18
  806308:	000b883a 	mov	r5,zero
  80630c:	01c02074 	movhi	r7,129
  806310:	39df5504 	addi	r7,r7,32084
  806314:	31800054 	ori	r6,r6,1
  806318:	10c00926 	beq	r2,r3,806340 <_malloc_trim_r+0xe8>
  80631c:	38800017 	ldw	r2,0(r7)
  806320:	98c00217 	ldw	r3,8(r19)
  806324:	9009883a 	mov	r4,r18
  806328:	1445c83a 	sub	r2,r2,r17
  80632c:	38800015 	stw	r2,0(r7)
  806330:	19800115 	stw	r6,4(r3)
  806334:	0807c7c0 	call	807c7c <__malloc_unlock>
  806338:	00800044 	movi	r2,1
  80633c:	003fe606 	br	8062d8 <_malloc_trim_r+0x80>
  806340:	0805bbc0 	call	805bbc <_sbrk_r>
  806344:	99800217 	ldw	r6,8(r19)
  806348:	100f883a 	mov	r7,r2
  80634c:	9009883a 	mov	r4,r18
  806350:	1187c83a 	sub	r3,r2,r6
  806354:	008003c4 	movi	r2,15
  806358:	19400054 	ori	r5,r3,1
  80635c:	10ffdc0e 	bge	r2,r3,8062d0 <_malloc_trim_r+0x78>
  806360:	00802074 	movhi	r2,129
  806364:	10982e04 	addi	r2,r2,24760
  806368:	10c00017 	ldw	r3,0(r2)
  80636c:	00802074 	movhi	r2,129
  806370:	109f5504 	addi	r2,r2,32084
  806374:	31400115 	stw	r5,4(r6)
  806378:	38c7c83a 	sub	r3,r7,r3
  80637c:	10c00015 	stw	r3,0(r2)
  806380:	003fd306 	br	8062d0 <_malloc_trim_r+0x78>

00806384 <_free_r>:
  806384:	defffd04 	addi	sp,sp,-12
  806388:	dc400115 	stw	r17,4(sp)
  80638c:	dc000015 	stw	r16,0(sp)
  806390:	dfc00215 	stw	ra,8(sp)
  806394:	2821883a 	mov	r16,r5
  806398:	2023883a 	mov	r17,r4
  80639c:	28005a26 	beq	r5,zero,806508 <_free_r+0x184>
  8063a0:	0807b740 	call	807b74 <__malloc_lock>
  8063a4:	823ffe04 	addi	r8,r16,-8
  8063a8:	41400117 	ldw	r5,4(r8)
  8063ac:	00bfff84 	movi	r2,-2
  8063b0:	02802074 	movhi	r10,129
  8063b4:	52928004 	addi	r10,r10,18944
  8063b8:	288e703a 	and	r7,r5,r2
  8063bc:	41cd883a 	add	r6,r8,r7
  8063c0:	30c00117 	ldw	r3,4(r6)
  8063c4:	51000217 	ldw	r4,8(r10)
  8063c8:	00bfff04 	movi	r2,-4
  8063cc:	1892703a 	and	r9,r3,r2
  8063d0:	5017883a 	mov	r11,r10
  8063d4:	31006726 	beq	r6,r4,806574 <_free_r+0x1f0>
  8063d8:	2880004c 	andi	r2,r5,1
  8063dc:	1005003a 	cmpeq	r2,r2,zero
  8063e0:	32400115 	stw	r9,4(r6)
  8063e4:	10001a1e 	bne	r2,zero,806450 <_free_r+0xcc>
  8063e8:	000b883a 	mov	r5,zero
  8063ec:	3247883a 	add	r3,r6,r9
  8063f0:	18800117 	ldw	r2,4(r3)
  8063f4:	1080004c 	andi	r2,r2,1
  8063f8:	1000231e 	bne	r2,zero,806488 <_free_r+0x104>
  8063fc:	280ac03a 	cmpne	r5,r5,zero
  806400:	3a4f883a 	add	r7,r7,r9
  806404:	2800451e 	bne	r5,zero,80651c <_free_r+0x198>
  806408:	31000217 	ldw	r4,8(r6)
  80640c:	00802074 	movhi	r2,129
  806410:	10928204 	addi	r2,r2,18952
  806414:	20807b26 	beq	r4,r2,806604 <_free_r+0x280>
  806418:	30800317 	ldw	r2,12(r6)
  80641c:	3a07883a 	add	r3,r7,r8
  806420:	19c00015 	stw	r7,0(r3)
  806424:	11000215 	stw	r4,8(r2)
  806428:	20800315 	stw	r2,12(r4)
  80642c:	38800054 	ori	r2,r7,1
  806430:	40800115 	stw	r2,4(r8)
  806434:	28001a26 	beq	r5,zero,8064a0 <_free_r+0x11c>
  806438:	8809883a 	mov	r4,r17
  80643c:	dfc00217 	ldw	ra,8(sp)
  806440:	dc400117 	ldw	r17,4(sp)
  806444:	dc000017 	ldw	r16,0(sp)
  806448:	dec00304 	addi	sp,sp,12
  80644c:	0807c7c1 	jmpi	807c7c <__malloc_unlock>
  806450:	80bffe17 	ldw	r2,-8(r16)
  806454:	50c00204 	addi	r3,r10,8
  806458:	4091c83a 	sub	r8,r8,r2
  80645c:	41000217 	ldw	r4,8(r8)
  806460:	388f883a 	add	r7,r7,r2
  806464:	20c06126 	beq	r4,r3,8065ec <_free_r+0x268>
  806468:	40800317 	ldw	r2,12(r8)
  80646c:	3247883a 	add	r3,r6,r9
  806470:	000b883a 	mov	r5,zero
  806474:	11000215 	stw	r4,8(r2)
  806478:	20800315 	stw	r2,12(r4)
  80647c:	18800117 	ldw	r2,4(r3)
  806480:	1080004c 	andi	r2,r2,1
  806484:	103fdd26 	beq	r2,zero,8063fc <_free_r+0x78>
  806488:	38800054 	ori	r2,r7,1
  80648c:	3a07883a 	add	r3,r7,r8
  806490:	280ac03a 	cmpne	r5,r5,zero
  806494:	40800115 	stw	r2,4(r8)
  806498:	19c00015 	stw	r7,0(r3)
  80649c:	283fe61e 	bne	r5,zero,806438 <_free_r+0xb4>
  8064a0:	00807fc4 	movi	r2,511
  8064a4:	11c01f2e 	bgeu	r2,r7,806524 <_free_r+0x1a0>
  8064a8:	3806d27a 	srli	r3,r7,9
  8064ac:	1800481e 	bne	r3,zero,8065d0 <_free_r+0x24c>
  8064b0:	3804d0fa 	srli	r2,r7,3
  8064b4:	100690fa 	slli	r3,r2,3
  8064b8:	1acd883a 	add	r6,r3,r11
  8064bc:	31400217 	ldw	r5,8(r6)
  8064c0:	31405926 	beq	r6,r5,806628 <_free_r+0x2a4>
  8064c4:	28800117 	ldw	r2,4(r5)
  8064c8:	00ffff04 	movi	r3,-4
  8064cc:	10c4703a 	and	r2,r2,r3
  8064d0:	3880022e 	bgeu	r7,r2,8064dc <_free_r+0x158>
  8064d4:	29400217 	ldw	r5,8(r5)
  8064d8:	317ffa1e 	bne	r6,r5,8064c4 <_free_r+0x140>
  8064dc:	29800317 	ldw	r6,12(r5)
  8064e0:	41800315 	stw	r6,12(r8)
  8064e4:	41400215 	stw	r5,8(r8)
  8064e8:	8809883a 	mov	r4,r17
  8064ec:	2a000315 	stw	r8,12(r5)
  8064f0:	32000215 	stw	r8,8(r6)
  8064f4:	dfc00217 	ldw	ra,8(sp)
  8064f8:	dc400117 	ldw	r17,4(sp)
  8064fc:	dc000017 	ldw	r16,0(sp)
  806500:	dec00304 	addi	sp,sp,12
  806504:	0807c7c1 	jmpi	807c7c <__malloc_unlock>
  806508:	dfc00217 	ldw	ra,8(sp)
  80650c:	dc400117 	ldw	r17,4(sp)
  806510:	dc000017 	ldw	r16,0(sp)
  806514:	dec00304 	addi	sp,sp,12
  806518:	f800283a 	ret
  80651c:	31000217 	ldw	r4,8(r6)
  806520:	003fbd06 	br	806418 <_free_r+0x94>
  806524:	3806d0fa 	srli	r3,r7,3
  806528:	00800044 	movi	r2,1
  80652c:	51400117 	ldw	r5,4(r10)
  806530:	180890fa 	slli	r4,r3,3
  806534:	1807d0ba 	srai	r3,r3,2
  806538:	22c9883a 	add	r4,r4,r11
  80653c:	21800217 	ldw	r6,8(r4)
  806540:	10c4983a 	sll	r2,r2,r3
  806544:	41000315 	stw	r4,12(r8)
  806548:	41800215 	stw	r6,8(r8)
  80654c:	288ab03a 	or	r5,r5,r2
  806550:	22000215 	stw	r8,8(r4)
  806554:	8809883a 	mov	r4,r17
  806558:	51400115 	stw	r5,4(r10)
  80655c:	32000315 	stw	r8,12(r6)
  806560:	dfc00217 	ldw	ra,8(sp)
  806564:	dc400117 	ldw	r17,4(sp)
  806568:	dc000017 	ldw	r16,0(sp)
  80656c:	dec00304 	addi	sp,sp,12
  806570:	0807c7c1 	jmpi	807c7c <__malloc_unlock>
  806574:	2880004c 	andi	r2,r5,1
  806578:	3a4d883a 	add	r6,r7,r9
  80657c:	1000071e 	bne	r2,zero,80659c <_free_r+0x218>
  806580:	80bffe17 	ldw	r2,-8(r16)
  806584:	4091c83a 	sub	r8,r8,r2
  806588:	41000317 	ldw	r4,12(r8)
  80658c:	40c00217 	ldw	r3,8(r8)
  806590:	308d883a 	add	r6,r6,r2
  806594:	20c00215 	stw	r3,8(r4)
  806598:	19000315 	stw	r4,12(r3)
  80659c:	00802074 	movhi	r2,129
  8065a0:	10982d04 	addi	r2,r2,24756
  8065a4:	11000017 	ldw	r4,0(r2)
  8065a8:	30c00054 	ori	r3,r6,1
  8065ac:	52000215 	stw	r8,8(r10)
  8065b0:	40c00115 	stw	r3,4(r8)
  8065b4:	313fa036 	bltu	r6,r4,806438 <_free_r+0xb4>
  8065b8:	00802074 	movhi	r2,129
  8065bc:	109f3204 	addi	r2,r2,31944
  8065c0:	11400017 	ldw	r5,0(r2)
  8065c4:	8809883a 	mov	r4,r17
  8065c8:	08062580 	call	806258 <_malloc_trim_r>
  8065cc:	003f9a06 	br	806438 <_free_r+0xb4>
  8065d0:	00800104 	movi	r2,4
  8065d4:	10c0072e 	bgeu	r2,r3,8065f4 <_free_r+0x270>
  8065d8:	00800504 	movi	r2,20
  8065dc:	10c01936 	bltu	r2,r3,806644 <_free_r+0x2c0>
  8065e0:	188016c4 	addi	r2,r3,91
  8065e4:	100690fa 	slli	r3,r2,3
  8065e8:	003fb306 	br	8064b8 <_free_r+0x134>
  8065ec:	01400044 	movi	r5,1
  8065f0:	003f7e06 	br	8063ec <_free_r+0x68>
  8065f4:	3804d1ba 	srli	r2,r7,6
  8065f8:	10800e04 	addi	r2,r2,56
  8065fc:	100690fa 	slli	r3,r2,3
  806600:	003fad06 	br	8064b8 <_free_r+0x134>
  806604:	22000315 	stw	r8,12(r4)
  806608:	22000215 	stw	r8,8(r4)
  80660c:	3a05883a 	add	r2,r7,r8
  806610:	38c00054 	ori	r3,r7,1
  806614:	11c00015 	stw	r7,0(r2)
  806618:	41000215 	stw	r4,8(r8)
  80661c:	40c00115 	stw	r3,4(r8)
  806620:	41000315 	stw	r4,12(r8)
  806624:	003f8406 	br	806438 <_free_r+0xb4>
  806628:	1005d0ba 	srai	r2,r2,2
  80662c:	00c00044 	movi	r3,1
  806630:	51000117 	ldw	r4,4(r10)
  806634:	1886983a 	sll	r3,r3,r2
  806638:	20c8b03a 	or	r4,r4,r3
  80663c:	51000115 	stw	r4,4(r10)
  806640:	003fa706 	br	8064e0 <_free_r+0x15c>
  806644:	00801504 	movi	r2,84
  806648:	10c00436 	bltu	r2,r3,80665c <_free_r+0x2d8>
  80664c:	3804d33a 	srli	r2,r7,12
  806650:	10801b84 	addi	r2,r2,110
  806654:	100690fa 	slli	r3,r2,3
  806658:	003f9706 	br	8064b8 <_free_r+0x134>
  80665c:	00805504 	movi	r2,340
  806660:	10c00436 	bltu	r2,r3,806674 <_free_r+0x2f0>
  806664:	3804d3fa 	srli	r2,r7,15
  806668:	10801dc4 	addi	r2,r2,119
  80666c:	100690fa 	slli	r3,r2,3
  806670:	003f9106 	br	8064b8 <_free_r+0x134>
  806674:	00815504 	movi	r2,1364
  806678:	10c0032e 	bgeu	r2,r3,806688 <_free_r+0x304>
  80667c:	00801f84 	movi	r2,126
  806680:	00c0fc04 	movi	r3,1008
  806684:	003f8c06 	br	8064b8 <_free_r+0x134>
  806688:	3804d4ba 	srli	r2,r7,18
  80668c:	10801f04 	addi	r2,r2,124
  806690:	100690fa 	slli	r3,r2,3
  806694:	003f8806 	br	8064b8 <_free_r+0x134>

00806698 <_fwalk_reent>:
  806698:	defff704 	addi	sp,sp,-36
  80669c:	dcc00315 	stw	r19,12(sp)
  8066a0:	24c0b804 	addi	r19,r4,736
  8066a4:	dd800615 	stw	r22,24(sp)
  8066a8:	dd400515 	stw	r21,20(sp)
  8066ac:	dfc00815 	stw	ra,32(sp)
  8066b0:	ddc00715 	stw	r23,28(sp)
  8066b4:	dd000415 	stw	r20,16(sp)
  8066b8:	dc800215 	stw	r18,8(sp)
  8066bc:	dc400115 	stw	r17,4(sp)
  8066c0:	dc000015 	stw	r16,0(sp)
  8066c4:	202b883a 	mov	r21,r4
  8066c8:	282d883a 	mov	r22,r5
  8066cc:	0805ff00 	call	805ff0 <__sfp_lock_acquire>
  8066d0:	98002126 	beq	r19,zero,806758 <_fwalk_reent+0xc0>
  8066d4:	002f883a 	mov	r23,zero
  8066d8:	9c800117 	ldw	r18,4(r19)
  8066dc:	9c000217 	ldw	r16,8(r19)
  8066e0:	90bfffc4 	addi	r2,r18,-1
  8066e4:	10000d16 	blt	r2,zero,80671c <_fwalk_reent+0x84>
  8066e8:	0023883a 	mov	r17,zero
  8066ec:	053fffc4 	movi	r20,-1
  8066f0:	8080030f 	ldh	r2,12(r16)
  8066f4:	8c400044 	addi	r17,r17,1
  8066f8:	10000626 	beq	r2,zero,806714 <_fwalk_reent+0x7c>
  8066fc:	8080038f 	ldh	r2,14(r16)
  806700:	800b883a 	mov	r5,r16
  806704:	a809883a 	mov	r4,r21
  806708:	15000226 	beq	r2,r20,806714 <_fwalk_reent+0x7c>
  80670c:	b03ee83a 	callr	r22
  806710:	b8aeb03a 	or	r23,r23,r2
  806714:	84001704 	addi	r16,r16,92
  806718:	947ff51e 	bne	r18,r17,8066f0 <_fwalk_reent+0x58>
  80671c:	9cc00017 	ldw	r19,0(r19)
  806720:	983fed1e 	bne	r19,zero,8066d8 <_fwalk_reent+0x40>
  806724:	0805ff40 	call	805ff4 <__sfp_lock_release>
  806728:	b805883a 	mov	r2,r23
  80672c:	dfc00817 	ldw	ra,32(sp)
  806730:	ddc00717 	ldw	r23,28(sp)
  806734:	dd800617 	ldw	r22,24(sp)
  806738:	dd400517 	ldw	r21,20(sp)
  80673c:	dd000417 	ldw	r20,16(sp)
  806740:	dcc00317 	ldw	r19,12(sp)
  806744:	dc800217 	ldw	r18,8(sp)
  806748:	dc400117 	ldw	r17,4(sp)
  80674c:	dc000017 	ldw	r16,0(sp)
  806750:	dec00904 	addi	sp,sp,36
  806754:	f800283a 	ret
  806758:	002f883a 	mov	r23,zero
  80675c:	003ff106 	br	806724 <_fwalk_reent+0x8c>

00806760 <_fwalk>:
  806760:	defff804 	addi	sp,sp,-32
  806764:	dcc00315 	stw	r19,12(sp)
  806768:	24c0b804 	addi	r19,r4,736
  80676c:	dd400515 	stw	r21,20(sp)
  806770:	dfc00715 	stw	ra,28(sp)
  806774:	dd800615 	stw	r22,24(sp)
  806778:	dd000415 	stw	r20,16(sp)
  80677c:	dc800215 	stw	r18,8(sp)
  806780:	dc400115 	stw	r17,4(sp)
  806784:	dc000015 	stw	r16,0(sp)
  806788:	282b883a 	mov	r21,r5
  80678c:	0805ff00 	call	805ff0 <__sfp_lock_acquire>
  806790:	98001f26 	beq	r19,zero,806810 <_fwalk+0xb0>
  806794:	002d883a 	mov	r22,zero
  806798:	9c800117 	ldw	r18,4(r19)
  80679c:	9c000217 	ldw	r16,8(r19)
  8067a0:	90bfffc4 	addi	r2,r18,-1
  8067a4:	10000c16 	blt	r2,zero,8067d8 <_fwalk+0x78>
  8067a8:	0023883a 	mov	r17,zero
  8067ac:	053fffc4 	movi	r20,-1
  8067b0:	8080030f 	ldh	r2,12(r16)
  8067b4:	8c400044 	addi	r17,r17,1
  8067b8:	10000526 	beq	r2,zero,8067d0 <_fwalk+0x70>
  8067bc:	8080038f 	ldh	r2,14(r16)
  8067c0:	8009883a 	mov	r4,r16
  8067c4:	15000226 	beq	r2,r20,8067d0 <_fwalk+0x70>
  8067c8:	a83ee83a 	callr	r21
  8067cc:	b0acb03a 	or	r22,r22,r2
  8067d0:	84001704 	addi	r16,r16,92
  8067d4:	947ff61e 	bne	r18,r17,8067b0 <_fwalk+0x50>
  8067d8:	9cc00017 	ldw	r19,0(r19)
  8067dc:	983fee1e 	bne	r19,zero,806798 <_fwalk+0x38>
  8067e0:	0805ff40 	call	805ff4 <__sfp_lock_release>
  8067e4:	b005883a 	mov	r2,r22
  8067e8:	dfc00717 	ldw	ra,28(sp)
  8067ec:	dd800617 	ldw	r22,24(sp)
  8067f0:	dd400517 	ldw	r21,20(sp)
  8067f4:	dd000417 	ldw	r20,16(sp)
  8067f8:	dcc00317 	ldw	r19,12(sp)
  8067fc:	dc800217 	ldw	r18,8(sp)
  806800:	dc400117 	ldw	r17,4(sp)
  806804:	dc000017 	ldw	r16,0(sp)
  806808:	dec00804 	addi	sp,sp,32
  80680c:	f800283a 	ret
  806810:	002d883a 	mov	r22,zero
  806814:	003ff206 	br	8067e0 <_fwalk+0x80>

00806818 <__smakebuf_r>:
  806818:	2880030b 	ldhu	r2,12(r5)
  80681c:	deffed04 	addi	sp,sp,-76
  806820:	dc401015 	stw	r17,64(sp)
  806824:	1080008c 	andi	r2,r2,2
  806828:	dc000f15 	stw	r16,60(sp)
  80682c:	dfc01215 	stw	ra,72(sp)
  806830:	dc801115 	stw	r18,68(sp)
  806834:	2821883a 	mov	r16,r5
  806838:	2023883a 	mov	r17,r4
  80683c:	10000b26 	beq	r2,zero,80686c <__smakebuf_r+0x54>
  806840:	28c010c4 	addi	r3,r5,67
  806844:	00800044 	movi	r2,1
  806848:	28800515 	stw	r2,20(r5)
  80684c:	28c00415 	stw	r3,16(r5)
  806850:	28c00015 	stw	r3,0(r5)
  806854:	dfc01217 	ldw	ra,72(sp)
  806858:	dc801117 	ldw	r18,68(sp)
  80685c:	dc401017 	ldw	r17,64(sp)
  806860:	dc000f17 	ldw	r16,60(sp)
  806864:	dec01304 	addi	sp,sp,76
  806868:	f800283a 	ret
  80686c:	2940038f 	ldh	r5,14(r5)
  806870:	28002116 	blt	r5,zero,8068f8 <__smakebuf_r+0xe0>
  806874:	d80d883a 	mov	r6,sp
  806878:	0806d9c0 	call	806d9c <_fstat_r>
  80687c:	10001e16 	blt	r2,zero,8068f8 <__smakebuf_r+0xe0>
  806880:	d8800117 	ldw	r2,4(sp)
  806884:	00e00014 	movui	r3,32768
  806888:	113c000c 	andi	r4,r2,61440
  80688c:	20c03126 	beq	r4,r3,806954 <__smakebuf_r+0x13c>
  806890:	8080030b 	ldhu	r2,12(r16)
  806894:	00c80004 	movi	r3,8192
  806898:	10820014 	ori	r2,r2,2048
  80689c:	8080030d 	sth	r2,12(r16)
  8068a0:	20c01e26 	beq	r4,r3,80691c <__smakebuf_r+0x104>
  8068a4:	04810004 	movi	r18,1024
  8068a8:	8809883a 	mov	r4,r17
  8068ac:	900b883a 	mov	r5,r18
  8068b0:	0804c240 	call	804c24 <_malloc_r>
  8068b4:	1009883a 	mov	r4,r2
  8068b8:	10003126 	beq	r2,zero,806980 <__smakebuf_r+0x168>
  8068bc:	80c0030b 	ldhu	r3,12(r16)
  8068c0:	00802034 	movhi	r2,128
  8068c4:	10983904 	addi	r2,r2,24804
  8068c8:	88800f15 	stw	r2,60(r17)
  8068cc:	18c02014 	ori	r3,r3,128
  8068d0:	84800515 	stw	r18,20(r16)
  8068d4:	80c0030d 	sth	r3,12(r16)
  8068d8:	81000415 	stw	r4,16(r16)
  8068dc:	81000015 	stw	r4,0(r16)
  8068e0:	dfc01217 	ldw	ra,72(sp)
  8068e4:	dc801117 	ldw	r18,68(sp)
  8068e8:	dc401017 	ldw	r17,64(sp)
  8068ec:	dc000f17 	ldw	r16,60(sp)
  8068f0:	dec01304 	addi	sp,sp,76
  8068f4:	f800283a 	ret
  8068f8:	80c0030b 	ldhu	r3,12(r16)
  8068fc:	1880200c 	andi	r2,r3,128
  806900:	10000426 	beq	r2,zero,806914 <__smakebuf_r+0xfc>
  806904:	04801004 	movi	r18,64
  806908:	18820014 	ori	r2,r3,2048
  80690c:	8080030d 	sth	r2,12(r16)
  806910:	003fe506 	br	8068a8 <__smakebuf_r+0x90>
  806914:	04810004 	movi	r18,1024
  806918:	003ffb06 	br	806908 <__smakebuf_r+0xf0>
  80691c:	8140038f 	ldh	r5,14(r16)
  806920:	8809883a 	mov	r4,r17
  806924:	0806e100 	call	806e10 <_isatty_r>
  806928:	103fde26 	beq	r2,zero,8068a4 <__smakebuf_r+0x8c>
  80692c:	8080030b 	ldhu	r2,12(r16)
  806930:	80c010c4 	addi	r3,r16,67
  806934:	04810004 	movi	r18,1024
  806938:	10800054 	ori	r2,r2,1
  80693c:	8080030d 	sth	r2,12(r16)
  806940:	00800044 	movi	r2,1
  806944:	80c00415 	stw	r3,16(r16)
  806948:	80800515 	stw	r2,20(r16)
  80694c:	80c00015 	stw	r3,0(r16)
  806950:	003fd506 	br	8068a8 <__smakebuf_r+0x90>
  806954:	80c00a17 	ldw	r3,40(r16)
  806958:	00802034 	movhi	r2,128
  80695c:	109a9304 	addi	r2,r2,27212
  806960:	18bfcb1e 	bne	r3,r2,806890 <__smakebuf_r+0x78>
  806964:	8080030b 	ldhu	r2,12(r16)
  806968:	00c10004 	movi	r3,1024
  80696c:	1825883a 	mov	r18,r3
  806970:	10c4b03a 	or	r2,r2,r3
  806974:	8080030d 	sth	r2,12(r16)
  806978:	80c01315 	stw	r3,76(r16)
  80697c:	003fca06 	br	8068a8 <__smakebuf_r+0x90>
  806980:	8100030b 	ldhu	r4,12(r16)
  806984:	2080800c 	andi	r2,r4,512
  806988:	103fb21e 	bne	r2,zero,806854 <__smakebuf_r+0x3c>
  80698c:	80c010c4 	addi	r3,r16,67
  806990:	21000094 	ori	r4,r4,2
  806994:	00800044 	movi	r2,1
  806998:	80800515 	stw	r2,20(r16)
  80699c:	8100030d 	sth	r4,12(r16)
  8069a0:	80c00415 	stw	r3,16(r16)
  8069a4:	80c00015 	stw	r3,0(r16)
  8069a8:	003faa06 	br	806854 <__smakebuf_r+0x3c>

008069ac <memset>:
  8069ac:	008000c4 	movi	r2,3
  8069b0:	29403fcc 	andi	r5,r5,255
  8069b4:	2007883a 	mov	r3,r4
  8069b8:	1180022e 	bgeu	r2,r6,8069c4 <memset+0x18>
  8069bc:	2084703a 	and	r2,r4,r2
  8069c0:	10000826 	beq	r2,zero,8069e4 <memset+0x38>
  8069c4:	30000526 	beq	r6,zero,8069dc <memset+0x30>
  8069c8:	2805883a 	mov	r2,r5
  8069cc:	30cd883a 	add	r6,r6,r3
  8069d0:	18800005 	stb	r2,0(r3)
  8069d4:	18c00044 	addi	r3,r3,1
  8069d8:	19bffd1e 	bne	r3,r6,8069d0 <memset+0x24>
  8069dc:	2005883a 	mov	r2,r4
  8069e0:	f800283a 	ret
  8069e4:	2804923a 	slli	r2,r5,8
  8069e8:	020003c4 	movi	r8,15
  8069ec:	200f883a 	mov	r7,r4
  8069f0:	2884b03a 	or	r2,r5,r2
  8069f4:	1006943a 	slli	r3,r2,16
  8069f8:	10c6b03a 	or	r3,r2,r3
  8069fc:	41800a2e 	bgeu	r8,r6,806a28 <memset+0x7c>
  806a00:	4005883a 	mov	r2,r8
  806a04:	31bffc04 	addi	r6,r6,-16
  806a08:	38c00015 	stw	r3,0(r7)
  806a0c:	38c00115 	stw	r3,4(r7)
  806a10:	38c00215 	stw	r3,8(r7)
  806a14:	38c00315 	stw	r3,12(r7)
  806a18:	39c00404 	addi	r7,r7,16
  806a1c:	11bff936 	bltu	r2,r6,806a04 <memset+0x58>
  806a20:	008000c4 	movi	r2,3
  806a24:	1180052e 	bgeu	r2,r6,806a3c <memset+0x90>
  806a28:	31bfff04 	addi	r6,r6,-4
  806a2c:	008000c4 	movi	r2,3
  806a30:	38c00015 	stw	r3,0(r7)
  806a34:	39c00104 	addi	r7,r7,4
  806a38:	11bffb36 	bltu	r2,r6,806a28 <memset+0x7c>
  806a3c:	3807883a 	mov	r3,r7
  806a40:	003fe006 	br	8069c4 <memset+0x18>

00806a44 <__sclose>:
  806a44:	2940038f 	ldh	r5,14(r5)
  806a48:	0806c081 	jmpi	806c08 <_close_r>

00806a4c <__sseek>:
  806a4c:	defffe04 	addi	sp,sp,-8
  806a50:	dc000015 	stw	r16,0(sp)
  806a54:	2821883a 	mov	r16,r5
  806a58:	2940038f 	ldh	r5,14(r5)
  806a5c:	dfc00115 	stw	ra,4(sp)
  806a60:	0806e800 	call	806e80 <_lseek_r>
  806a64:	1007883a 	mov	r3,r2
  806a68:	00bfffc4 	movi	r2,-1
  806a6c:	18800926 	beq	r3,r2,806a94 <__sseek+0x48>
  806a70:	8080030b 	ldhu	r2,12(r16)
  806a74:	80c01415 	stw	r3,80(r16)
  806a78:	10840014 	ori	r2,r2,4096
  806a7c:	8080030d 	sth	r2,12(r16)
  806a80:	1805883a 	mov	r2,r3
  806a84:	dfc00117 	ldw	ra,4(sp)
  806a88:	dc000017 	ldw	r16,0(sp)
  806a8c:	dec00204 	addi	sp,sp,8
  806a90:	f800283a 	ret
  806a94:	8080030b 	ldhu	r2,12(r16)
  806a98:	10bbffcc 	andi	r2,r2,61439
  806a9c:	8080030d 	sth	r2,12(r16)
  806aa0:	1805883a 	mov	r2,r3
  806aa4:	dfc00117 	ldw	ra,4(sp)
  806aa8:	dc000017 	ldw	r16,0(sp)
  806aac:	dec00204 	addi	sp,sp,8
  806ab0:	f800283a 	ret

00806ab4 <__swrite>:
  806ab4:	2880030b 	ldhu	r2,12(r5)
  806ab8:	defffb04 	addi	sp,sp,-20
  806abc:	dcc00315 	stw	r19,12(sp)
  806ac0:	1080400c 	andi	r2,r2,256
  806ac4:	dc800215 	stw	r18,8(sp)
  806ac8:	dc400115 	stw	r17,4(sp)
  806acc:	dc000015 	stw	r16,0(sp)
  806ad0:	3027883a 	mov	r19,r6
  806ad4:	3825883a 	mov	r18,r7
  806ad8:	dfc00415 	stw	ra,16(sp)
  806adc:	2821883a 	mov	r16,r5
  806ae0:	000d883a 	mov	r6,zero
  806ae4:	01c00084 	movi	r7,2
  806ae8:	2023883a 	mov	r17,r4
  806aec:	10000226 	beq	r2,zero,806af8 <__swrite+0x44>
  806af0:	2940038f 	ldh	r5,14(r5)
  806af4:	0806e800 	call	806e80 <_lseek_r>
  806af8:	8080030b 	ldhu	r2,12(r16)
  806afc:	8140038f 	ldh	r5,14(r16)
  806b00:	8809883a 	mov	r4,r17
  806b04:	10bbffcc 	andi	r2,r2,61439
  806b08:	980d883a 	mov	r6,r19
  806b0c:	900f883a 	mov	r7,r18
  806b10:	8080030d 	sth	r2,12(r16)
  806b14:	dfc00417 	ldw	ra,16(sp)
  806b18:	dcc00317 	ldw	r19,12(sp)
  806b1c:	dc800217 	ldw	r18,8(sp)
  806b20:	dc400117 	ldw	r17,4(sp)
  806b24:	dc000017 	ldw	r16,0(sp)
  806b28:	dec00504 	addi	sp,sp,20
  806b2c:	0806b901 	jmpi	806b90 <_write_r>

00806b30 <__sread>:
  806b30:	defffe04 	addi	sp,sp,-8
  806b34:	dc000015 	stw	r16,0(sp)
  806b38:	2821883a 	mov	r16,r5
  806b3c:	2940038f 	ldh	r5,14(r5)
  806b40:	dfc00115 	stw	ra,4(sp)
  806b44:	0806ef80 	call	806ef8 <_read_r>
  806b48:	1007883a 	mov	r3,r2
  806b4c:	10000816 	blt	r2,zero,806b70 <__sread+0x40>
  806b50:	80801417 	ldw	r2,80(r16)
  806b54:	10c5883a 	add	r2,r2,r3
  806b58:	80801415 	stw	r2,80(r16)
  806b5c:	1805883a 	mov	r2,r3
  806b60:	dfc00117 	ldw	ra,4(sp)
  806b64:	dc000017 	ldw	r16,0(sp)
  806b68:	dec00204 	addi	sp,sp,8
  806b6c:	f800283a 	ret
  806b70:	8080030b 	ldhu	r2,12(r16)
  806b74:	10bbffcc 	andi	r2,r2,61439
  806b78:	8080030d 	sth	r2,12(r16)
  806b7c:	1805883a 	mov	r2,r3
  806b80:	dfc00117 	ldw	ra,4(sp)
  806b84:	dc000017 	ldw	r16,0(sp)
  806b88:	dec00204 	addi	sp,sp,8
  806b8c:	f800283a 	ret

00806b90 <_write_r>:
  806b90:	defffd04 	addi	sp,sp,-12
  806b94:	dc000015 	stw	r16,0(sp)
  806b98:	04002074 	movhi	r16,129
  806b9c:	841f3504 	addi	r16,r16,31956
  806ba0:	dc400115 	stw	r17,4(sp)
  806ba4:	80000015 	stw	zero,0(r16)
  806ba8:	2023883a 	mov	r17,r4
  806bac:	2809883a 	mov	r4,r5
  806bb0:	300b883a 	mov	r5,r6
  806bb4:	380d883a 	mov	r6,r7
  806bb8:	dfc00215 	stw	ra,8(sp)
  806bbc:	08078ec0 	call	8078ec <write>
  806bc0:	1007883a 	mov	r3,r2
  806bc4:	00bfffc4 	movi	r2,-1
  806bc8:	18800626 	beq	r3,r2,806be4 <_write_r+0x54>
  806bcc:	1805883a 	mov	r2,r3
  806bd0:	dfc00217 	ldw	ra,8(sp)
  806bd4:	dc400117 	ldw	r17,4(sp)
  806bd8:	dc000017 	ldw	r16,0(sp)
  806bdc:	dec00304 	addi	sp,sp,12
  806be0:	f800283a 	ret
  806be4:	80800017 	ldw	r2,0(r16)
  806be8:	103ff826 	beq	r2,zero,806bcc <_write_r+0x3c>
  806bec:	88800015 	stw	r2,0(r17)
  806bf0:	1805883a 	mov	r2,r3
  806bf4:	dfc00217 	ldw	ra,8(sp)
  806bf8:	dc400117 	ldw	r17,4(sp)
  806bfc:	dc000017 	ldw	r16,0(sp)
  806c00:	dec00304 	addi	sp,sp,12
  806c04:	f800283a 	ret

00806c08 <_close_r>:
  806c08:	defffd04 	addi	sp,sp,-12
  806c0c:	dc000015 	stw	r16,0(sp)
  806c10:	04002074 	movhi	r16,129
  806c14:	841f3504 	addi	r16,r16,31956
  806c18:	dc400115 	stw	r17,4(sp)
  806c1c:	80000015 	stw	zero,0(r16)
  806c20:	2023883a 	mov	r17,r4
  806c24:	2809883a 	mov	r4,r5
  806c28:	dfc00215 	stw	ra,8(sp)
  806c2c:	0806f700 	call	806f70 <close>
  806c30:	1007883a 	mov	r3,r2
  806c34:	00bfffc4 	movi	r2,-1
  806c38:	18800626 	beq	r3,r2,806c54 <_close_r+0x4c>
  806c3c:	1805883a 	mov	r2,r3
  806c40:	dfc00217 	ldw	ra,8(sp)
  806c44:	dc400117 	ldw	r17,4(sp)
  806c48:	dc000017 	ldw	r16,0(sp)
  806c4c:	dec00304 	addi	sp,sp,12
  806c50:	f800283a 	ret
  806c54:	80800017 	ldw	r2,0(r16)
  806c58:	103ff826 	beq	r2,zero,806c3c <_close_r+0x34>
  806c5c:	88800015 	stw	r2,0(r17)
  806c60:	1805883a 	mov	r2,r3
  806c64:	dfc00217 	ldw	ra,8(sp)
  806c68:	dc400117 	ldw	r17,4(sp)
  806c6c:	dc000017 	ldw	r16,0(sp)
  806c70:	dec00304 	addi	sp,sp,12
  806c74:	f800283a 	ret

00806c78 <_fclose_r>:
  806c78:	defffc04 	addi	sp,sp,-16
  806c7c:	dc400115 	stw	r17,4(sp)
  806c80:	dc000015 	stw	r16,0(sp)
  806c84:	dfc00315 	stw	ra,12(sp)
  806c88:	dc800215 	stw	r18,8(sp)
  806c8c:	2821883a 	mov	r16,r5
  806c90:	2023883a 	mov	r17,r4
  806c94:	28002926 	beq	r5,zero,806d3c <_fclose_r+0xc4>
  806c98:	0805ff00 	call	805ff0 <__sfp_lock_acquire>
  806c9c:	88000226 	beq	r17,zero,806ca8 <_fclose_r+0x30>
  806ca0:	88800e17 	ldw	r2,56(r17)
  806ca4:	10002d26 	beq	r2,zero,806d5c <_fclose_r+0xe4>
  806ca8:	8080030f 	ldh	r2,12(r16)
  806cac:	10002226 	beq	r2,zero,806d38 <_fclose_r+0xc0>
  806cb0:	8809883a 	mov	r4,r17
  806cb4:	800b883a 	mov	r5,r16
  806cb8:	0805d680 	call	805d68 <_fflush_r>
  806cbc:	1025883a 	mov	r18,r2
  806cc0:	80800b17 	ldw	r2,44(r16)
  806cc4:	10000426 	beq	r2,zero,806cd8 <_fclose_r+0x60>
  806cc8:	81400717 	ldw	r5,28(r16)
  806ccc:	8809883a 	mov	r4,r17
  806cd0:	103ee83a 	callr	r2
  806cd4:	10002a16 	blt	r2,zero,806d80 <_fclose_r+0x108>
  806cd8:	8080030b 	ldhu	r2,12(r16)
  806cdc:	1080200c 	andi	r2,r2,128
  806ce0:	1000231e 	bne	r2,zero,806d70 <_fclose_r+0xf8>
  806ce4:	81400c17 	ldw	r5,48(r16)
  806ce8:	28000526 	beq	r5,zero,806d00 <_fclose_r+0x88>
  806cec:	80801004 	addi	r2,r16,64
  806cf0:	28800226 	beq	r5,r2,806cfc <_fclose_r+0x84>
  806cf4:	8809883a 	mov	r4,r17
  806cf8:	08063840 	call	806384 <_free_r>
  806cfc:	80000c15 	stw	zero,48(r16)
  806d00:	81401117 	ldw	r5,68(r16)
  806d04:	28000326 	beq	r5,zero,806d14 <_fclose_r+0x9c>
  806d08:	8809883a 	mov	r4,r17
  806d0c:	08063840 	call	806384 <_free_r>
  806d10:	80001115 	stw	zero,68(r16)
  806d14:	8000030d 	sth	zero,12(r16)
  806d18:	0805ff40 	call	805ff4 <__sfp_lock_release>
  806d1c:	9005883a 	mov	r2,r18
  806d20:	dfc00317 	ldw	ra,12(sp)
  806d24:	dc800217 	ldw	r18,8(sp)
  806d28:	dc400117 	ldw	r17,4(sp)
  806d2c:	dc000017 	ldw	r16,0(sp)
  806d30:	dec00404 	addi	sp,sp,16
  806d34:	f800283a 	ret
  806d38:	0805ff40 	call	805ff4 <__sfp_lock_release>
  806d3c:	0025883a 	mov	r18,zero
  806d40:	9005883a 	mov	r2,r18
  806d44:	dfc00317 	ldw	ra,12(sp)
  806d48:	dc800217 	ldw	r18,8(sp)
  806d4c:	dc400117 	ldw	r17,4(sp)
  806d50:	dc000017 	ldw	r16,0(sp)
  806d54:	dec00404 	addi	sp,sp,16
  806d58:	f800283a 	ret
  806d5c:	8809883a 	mov	r4,r17
  806d60:	08060000 	call	806000 <__sinit>
  806d64:	8080030f 	ldh	r2,12(r16)
  806d68:	103fd11e 	bne	r2,zero,806cb0 <_fclose_r+0x38>
  806d6c:	003ff206 	br	806d38 <_fclose_r+0xc0>
  806d70:	81400417 	ldw	r5,16(r16)
  806d74:	8809883a 	mov	r4,r17
  806d78:	08063840 	call	806384 <_free_r>
  806d7c:	003fd906 	br	806ce4 <_fclose_r+0x6c>
  806d80:	04bfffc4 	movi	r18,-1
  806d84:	003fd406 	br	806cd8 <_fclose_r+0x60>

00806d88 <fclose>:
  806d88:	00802074 	movhi	r2,129
  806d8c:	10982b04 	addi	r2,r2,24748
  806d90:	200b883a 	mov	r5,r4
  806d94:	11000017 	ldw	r4,0(r2)
  806d98:	0806c781 	jmpi	806c78 <_fclose_r>

00806d9c <_fstat_r>:
  806d9c:	defffd04 	addi	sp,sp,-12
  806da0:	dc000015 	stw	r16,0(sp)
  806da4:	04002074 	movhi	r16,129
  806da8:	841f3504 	addi	r16,r16,31956
  806dac:	dc400115 	stw	r17,4(sp)
  806db0:	80000015 	stw	zero,0(r16)
  806db4:	2023883a 	mov	r17,r4
  806db8:	2809883a 	mov	r4,r5
  806dbc:	300b883a 	mov	r5,r6
  806dc0:	dfc00215 	stw	ra,8(sp)
  806dc4:	08070f80 	call	8070f8 <fstat>
  806dc8:	1007883a 	mov	r3,r2
  806dcc:	00bfffc4 	movi	r2,-1
  806dd0:	18800626 	beq	r3,r2,806dec <_fstat_r+0x50>
  806dd4:	1805883a 	mov	r2,r3
  806dd8:	dfc00217 	ldw	ra,8(sp)
  806ddc:	dc400117 	ldw	r17,4(sp)
  806de0:	dc000017 	ldw	r16,0(sp)
  806de4:	dec00304 	addi	sp,sp,12
  806de8:	f800283a 	ret
  806dec:	80800017 	ldw	r2,0(r16)
  806df0:	103ff826 	beq	r2,zero,806dd4 <_fstat_r+0x38>
  806df4:	88800015 	stw	r2,0(r17)
  806df8:	1805883a 	mov	r2,r3
  806dfc:	dfc00217 	ldw	ra,8(sp)
  806e00:	dc400117 	ldw	r17,4(sp)
  806e04:	dc000017 	ldw	r16,0(sp)
  806e08:	dec00304 	addi	sp,sp,12
  806e0c:	f800283a 	ret

00806e10 <_isatty_r>:
  806e10:	defffd04 	addi	sp,sp,-12
  806e14:	dc000015 	stw	r16,0(sp)
  806e18:	04002074 	movhi	r16,129
  806e1c:	841f3504 	addi	r16,r16,31956
  806e20:	dc400115 	stw	r17,4(sp)
  806e24:	80000015 	stw	zero,0(r16)
  806e28:	2023883a 	mov	r17,r4
  806e2c:	2809883a 	mov	r4,r5
  806e30:	dfc00215 	stw	ra,8(sp)
  806e34:	080722c0 	call	80722c <isatty>
  806e38:	1007883a 	mov	r3,r2
  806e3c:	00bfffc4 	movi	r2,-1
  806e40:	18800626 	beq	r3,r2,806e5c <_isatty_r+0x4c>
  806e44:	1805883a 	mov	r2,r3
  806e48:	dfc00217 	ldw	ra,8(sp)
  806e4c:	dc400117 	ldw	r17,4(sp)
  806e50:	dc000017 	ldw	r16,0(sp)
  806e54:	dec00304 	addi	sp,sp,12
  806e58:	f800283a 	ret
  806e5c:	80800017 	ldw	r2,0(r16)
  806e60:	103ff826 	beq	r2,zero,806e44 <_isatty_r+0x34>
  806e64:	88800015 	stw	r2,0(r17)
  806e68:	1805883a 	mov	r2,r3
  806e6c:	dfc00217 	ldw	ra,8(sp)
  806e70:	dc400117 	ldw	r17,4(sp)
  806e74:	dc000017 	ldw	r16,0(sp)
  806e78:	dec00304 	addi	sp,sp,12
  806e7c:	f800283a 	ret

00806e80 <_lseek_r>:
  806e80:	defffd04 	addi	sp,sp,-12
  806e84:	dc000015 	stw	r16,0(sp)
  806e88:	04002074 	movhi	r16,129
  806e8c:	841f3504 	addi	r16,r16,31956
  806e90:	dc400115 	stw	r17,4(sp)
  806e94:	80000015 	stw	zero,0(r16)
  806e98:	2023883a 	mov	r17,r4
  806e9c:	2809883a 	mov	r4,r5
  806ea0:	300b883a 	mov	r5,r6
  806ea4:	380d883a 	mov	r6,r7
  806ea8:	dfc00215 	stw	ra,8(sp)
  806eac:	08074380 	call	807438 <lseek>
  806eb0:	1007883a 	mov	r3,r2
  806eb4:	00bfffc4 	movi	r2,-1
  806eb8:	18800626 	beq	r3,r2,806ed4 <_lseek_r+0x54>
  806ebc:	1805883a 	mov	r2,r3
  806ec0:	dfc00217 	ldw	ra,8(sp)
  806ec4:	dc400117 	ldw	r17,4(sp)
  806ec8:	dc000017 	ldw	r16,0(sp)
  806ecc:	dec00304 	addi	sp,sp,12
  806ed0:	f800283a 	ret
  806ed4:	80800017 	ldw	r2,0(r16)
  806ed8:	103ff826 	beq	r2,zero,806ebc <_lseek_r+0x3c>
  806edc:	88800015 	stw	r2,0(r17)
  806ee0:	1805883a 	mov	r2,r3
  806ee4:	dfc00217 	ldw	ra,8(sp)
  806ee8:	dc400117 	ldw	r17,4(sp)
  806eec:	dc000017 	ldw	r16,0(sp)
  806ef0:	dec00304 	addi	sp,sp,12
  806ef4:	f800283a 	ret

00806ef8 <_read_r>:
  806ef8:	defffd04 	addi	sp,sp,-12
  806efc:	dc000015 	stw	r16,0(sp)
  806f00:	04002074 	movhi	r16,129
  806f04:	841f3504 	addi	r16,r16,31956
  806f08:	dc400115 	stw	r17,4(sp)
  806f0c:	80000015 	stw	zero,0(r16)
  806f10:	2023883a 	mov	r17,r4
  806f14:	2809883a 	mov	r4,r5
  806f18:	300b883a 	mov	r5,r6
  806f1c:	380d883a 	mov	r6,r7
  806f20:	dfc00215 	stw	ra,8(sp)
  806f24:	08076500 	call	807650 <read>
  806f28:	1007883a 	mov	r3,r2
  806f2c:	00bfffc4 	movi	r2,-1
  806f30:	18800626 	beq	r3,r2,806f4c <_read_r+0x54>
  806f34:	1805883a 	mov	r2,r3
  806f38:	dfc00217 	ldw	ra,8(sp)
  806f3c:	dc400117 	ldw	r17,4(sp)
  806f40:	dc000017 	ldw	r16,0(sp)
  806f44:	dec00304 	addi	sp,sp,12
  806f48:	f800283a 	ret
  806f4c:	80800017 	ldw	r2,0(r16)
  806f50:	103ff826 	beq	r2,zero,806f34 <_read_r+0x3c>
  806f54:	88800015 	stw	r2,0(r17)
  806f58:	1805883a 	mov	r2,r3
  806f5c:	dfc00217 	ldw	ra,8(sp)
  806f60:	dc400117 	ldw	r17,4(sp)
  806f64:	dc000017 	ldw	r16,0(sp)
  806f68:	dec00304 	addi	sp,sp,12
  806f6c:	f800283a 	ret

00806f70 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  806f70:	defff804 	addi	sp,sp,-32
  806f74:	dfc00715 	stw	ra,28(sp)
  806f78:	df000615 	stw	fp,24(sp)
  806f7c:	df000604 	addi	fp,sp,24
  806f80:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  806f84:	e0bffc17 	ldw	r2,-16(fp)
  806f88:	1004803a 	cmplt	r2,r2,zero
  806f8c:	1000081e 	bne	r2,zero,806fb0 <close+0x40>
  806f90:	e0bffc17 	ldw	r2,-16(fp)
  806f94:	10800324 	muli	r2,r2,12
  806f98:	1007883a 	mov	r3,r2
  806f9c:	00802074 	movhi	r2,129
  806fa0:	10938c04 	addi	r2,r2,20016
  806fa4:	1887883a 	add	r3,r3,r2
  806fa8:	e0ffff15 	stw	r3,-4(fp)
  806fac:	00000106 	br	806fb4 <close+0x44>
  806fb0:	e03fff15 	stw	zero,-4(fp)
  806fb4:	e0bfff17 	ldw	r2,-4(fp)
  806fb8:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  806fbc:	e0bffb17 	ldw	r2,-20(fp)
  806fc0:	1005003a 	cmpeq	r2,r2,zero
  806fc4:	10001d1e 	bne	r2,zero,80703c <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  806fc8:	e0bffb17 	ldw	r2,-20(fp)
  806fcc:	10800017 	ldw	r2,0(r2)
  806fd0:	10800417 	ldw	r2,16(r2)
  806fd4:	1005003a 	cmpeq	r2,r2,zero
  806fd8:	1000071e 	bne	r2,zero,806ff8 <close+0x88>
  806fdc:	e0bffb17 	ldw	r2,-20(fp)
  806fe0:	10800017 	ldw	r2,0(r2)
  806fe4:	10800417 	ldw	r2,16(r2)
  806fe8:	e13ffb17 	ldw	r4,-20(fp)
  806fec:	103ee83a 	callr	r2
  806ff0:	e0bffe15 	stw	r2,-8(fp)
  806ff4:	00000106 	br	806ffc <close+0x8c>
  806ff8:	e03ffe15 	stw	zero,-8(fp)
  806ffc:	e0bffe17 	ldw	r2,-8(fp)
  807000:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  807004:	e13ffc17 	ldw	r4,-16(fp)
  807008:	08077d00 	call	8077d0 <alt_release_fd>
    if (rval < 0)
  80700c:	e0bffa17 	ldw	r2,-24(fp)
  807010:	1004403a 	cmpge	r2,r2,zero
  807014:	1000071e 	bne	r2,zero,807034 <close+0xc4>
    {
      ALT_ERRNO = -rval;
  807018:	080706c0 	call	80706c <alt_get_errno>
  80701c:	e0fffa17 	ldw	r3,-24(fp)
  807020:	00c7c83a 	sub	r3,zero,r3
  807024:	10c00015 	stw	r3,0(r2)
      return -1;
  807028:	00bfffc4 	movi	r2,-1
  80702c:	e0bffd15 	stw	r2,-12(fp)
  807030:	00000806 	br	807054 <close+0xe4>
    }
    return 0;
  807034:	e03ffd15 	stw	zero,-12(fp)
  807038:	00000606 	br	807054 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80703c:	080706c0 	call	80706c <alt_get_errno>
  807040:	1007883a 	mov	r3,r2
  807044:	00801444 	movi	r2,81
  807048:	18800015 	stw	r2,0(r3)
    return -1;
  80704c:	00bfffc4 	movi	r2,-1
  807050:	e0bffd15 	stw	r2,-12(fp)
  807054:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  807058:	e037883a 	mov	sp,fp
  80705c:	dfc00117 	ldw	ra,4(sp)
  807060:	df000017 	ldw	fp,0(sp)
  807064:	dec00204 	addi	sp,sp,8
  807068:	f800283a 	ret

0080706c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80706c:	defffd04 	addi	sp,sp,-12
  807070:	dfc00215 	stw	ra,8(sp)
  807074:	df000115 	stw	fp,4(sp)
  807078:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80707c:	00802074 	movhi	r2,129
  807080:	10983404 	addi	r2,r2,24784
  807084:	10800017 	ldw	r2,0(r2)
  807088:	1005003a 	cmpeq	r2,r2,zero
  80708c:	1000061e 	bne	r2,zero,8070a8 <alt_get_errno+0x3c>
  807090:	00802074 	movhi	r2,129
  807094:	10983404 	addi	r2,r2,24784
  807098:	10800017 	ldw	r2,0(r2)
  80709c:	103ee83a 	callr	r2
  8070a0:	e0bfff15 	stw	r2,-4(fp)
  8070a4:	00000306 	br	8070b4 <alt_get_errno+0x48>
  8070a8:	00802074 	movhi	r2,129
  8070ac:	109f3504 	addi	r2,r2,31956
  8070b0:	e0bfff15 	stw	r2,-4(fp)
  8070b4:	e0bfff17 	ldw	r2,-4(fp)
}
  8070b8:	e037883a 	mov	sp,fp
  8070bc:	dfc00117 	ldw	ra,4(sp)
  8070c0:	df000017 	ldw	fp,0(sp)
  8070c4:	dec00204 	addi	sp,sp,8
  8070c8:	f800283a 	ret

008070cc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  8070cc:	defffc04 	addi	sp,sp,-16
  8070d0:	df000315 	stw	fp,12(sp)
  8070d4:	df000304 	addi	fp,sp,12
  8070d8:	e13ffd15 	stw	r4,-12(fp)
  8070dc:	e17ffe15 	stw	r5,-8(fp)
  8070e0:	e1bfff15 	stw	r6,-4(fp)
  return len;
  8070e4:	e0bfff17 	ldw	r2,-4(fp)
}
  8070e8:	e037883a 	mov	sp,fp
  8070ec:	df000017 	ldw	fp,0(sp)
  8070f0:	dec00104 	addi	sp,sp,4
  8070f4:	f800283a 	ret

008070f8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  8070f8:	defff904 	addi	sp,sp,-28
  8070fc:	dfc00615 	stw	ra,24(sp)
  807100:	df000515 	stw	fp,20(sp)
  807104:	df000504 	addi	fp,sp,20
  807108:	e13ffc15 	stw	r4,-16(fp)
  80710c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  807110:	e0bffc17 	ldw	r2,-16(fp)
  807114:	1004803a 	cmplt	r2,r2,zero
  807118:	1000081e 	bne	r2,zero,80713c <fstat+0x44>
  80711c:	e0bffc17 	ldw	r2,-16(fp)
  807120:	10800324 	muli	r2,r2,12
  807124:	1007883a 	mov	r3,r2
  807128:	00802074 	movhi	r2,129
  80712c:	10938c04 	addi	r2,r2,20016
  807130:	1887883a 	add	r3,r3,r2
  807134:	e0ffff15 	stw	r3,-4(fp)
  807138:	00000106 	br	807140 <fstat+0x48>
  80713c:	e03fff15 	stw	zero,-4(fp)
  807140:	e0bfff17 	ldw	r2,-4(fp)
  807144:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  807148:	e0bffb17 	ldw	r2,-20(fp)
  80714c:	1005003a 	cmpeq	r2,r2,zero
  807150:	1000121e 	bne	r2,zero,80719c <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  807154:	e0bffb17 	ldw	r2,-20(fp)
  807158:	10800017 	ldw	r2,0(r2)
  80715c:	10800817 	ldw	r2,32(r2)
  807160:	1005003a 	cmpeq	r2,r2,zero
  807164:	1000081e 	bne	r2,zero,807188 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  807168:	e0bffb17 	ldw	r2,-20(fp)
  80716c:	10800017 	ldw	r2,0(r2)
  807170:	10800817 	ldw	r2,32(r2)
  807174:	e13ffb17 	ldw	r4,-20(fp)
  807178:	e17ffd17 	ldw	r5,-12(fp)
  80717c:	103ee83a 	callr	r2
  807180:	e0bffe15 	stw	r2,-8(fp)
  807184:	00000b06 	br	8071b4 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  807188:	e0fffd17 	ldw	r3,-12(fp)
  80718c:	00880004 	movi	r2,8192
  807190:	18800115 	stw	r2,4(r3)
      return 0;
  807194:	e03ffe15 	stw	zero,-8(fp)
  807198:	00000606 	br	8071b4 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80719c:	08071cc0 	call	8071cc <alt_get_errno>
  8071a0:	1007883a 	mov	r3,r2
  8071a4:	00801444 	movi	r2,81
  8071a8:	18800015 	stw	r2,0(r3)
    return -1;
  8071ac:	00bfffc4 	movi	r2,-1
  8071b0:	e0bffe15 	stw	r2,-8(fp)
  8071b4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  8071b8:	e037883a 	mov	sp,fp
  8071bc:	dfc00117 	ldw	ra,4(sp)
  8071c0:	df000017 	ldw	fp,0(sp)
  8071c4:	dec00204 	addi	sp,sp,8
  8071c8:	f800283a 	ret

008071cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8071cc:	defffd04 	addi	sp,sp,-12
  8071d0:	dfc00215 	stw	ra,8(sp)
  8071d4:	df000115 	stw	fp,4(sp)
  8071d8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8071dc:	00802074 	movhi	r2,129
  8071e0:	10983404 	addi	r2,r2,24784
  8071e4:	10800017 	ldw	r2,0(r2)
  8071e8:	1005003a 	cmpeq	r2,r2,zero
  8071ec:	1000061e 	bne	r2,zero,807208 <alt_get_errno+0x3c>
  8071f0:	00802074 	movhi	r2,129
  8071f4:	10983404 	addi	r2,r2,24784
  8071f8:	10800017 	ldw	r2,0(r2)
  8071fc:	103ee83a 	callr	r2
  807200:	e0bfff15 	stw	r2,-4(fp)
  807204:	00000306 	br	807214 <alt_get_errno+0x48>
  807208:	00802074 	movhi	r2,129
  80720c:	109f3504 	addi	r2,r2,31956
  807210:	e0bfff15 	stw	r2,-4(fp)
  807214:	e0bfff17 	ldw	r2,-4(fp)
}
  807218:	e037883a 	mov	sp,fp
  80721c:	dfc00117 	ldw	ra,4(sp)
  807220:	df000017 	ldw	fp,0(sp)
  807224:	dec00204 	addi	sp,sp,8
  807228:	f800283a 	ret

0080722c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80722c:	deffeb04 	addi	sp,sp,-84
  807230:	dfc01415 	stw	ra,80(sp)
  807234:	df001315 	stw	fp,76(sp)
  807238:	df001304 	addi	fp,sp,76
  80723c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  807240:	e0bffd17 	ldw	r2,-12(fp)
  807244:	1004803a 	cmplt	r2,r2,zero
  807248:	1000081e 	bne	r2,zero,80726c <isatty+0x40>
  80724c:	e0bffd17 	ldw	r2,-12(fp)
  807250:	10800324 	muli	r2,r2,12
  807254:	1007883a 	mov	r3,r2
  807258:	00802074 	movhi	r2,129
  80725c:	10938c04 	addi	r2,r2,20016
  807260:	1887883a 	add	r3,r3,r2
  807264:	e0ffff15 	stw	r3,-4(fp)
  807268:	00000106 	br	807270 <isatty+0x44>
  80726c:	e03fff15 	stw	zero,-4(fp)
  807270:	e0bfff17 	ldw	r2,-4(fp)
  807274:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  807278:	e0bfed17 	ldw	r2,-76(fp)
  80727c:	1005003a 	cmpeq	r2,r2,zero
  807280:	10000f1e 	bne	r2,zero,8072c0 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  807284:	e0bfed17 	ldw	r2,-76(fp)
  807288:	10800017 	ldw	r2,0(r2)
  80728c:	10800817 	ldw	r2,32(r2)
  807290:	1004c03a 	cmpne	r2,r2,zero
  807294:	1000031e 	bne	r2,zero,8072a4 <isatty+0x78>
    {
      return 1;
  807298:	00800044 	movi	r2,1
  80729c:	e0bffe15 	stw	r2,-8(fp)
  8072a0:	00000c06 	br	8072d4 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  8072a4:	e17fee04 	addi	r5,fp,-72
  8072a8:	e13ffd17 	ldw	r4,-12(fp)
  8072ac:	08070f80 	call	8070f8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  8072b0:	e0bfef17 	ldw	r2,-68(fp)
  8072b4:	10880020 	cmpeqi	r2,r2,8192
  8072b8:	e0bffe15 	stw	r2,-8(fp)
  8072bc:	00000506 	br	8072d4 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8072c0:	08072ec0 	call	8072ec <alt_get_errno>
  8072c4:	1007883a 	mov	r3,r2
  8072c8:	00801444 	movi	r2,81
  8072cc:	18800015 	stw	r2,0(r3)
    return 0;
  8072d0:	e03ffe15 	stw	zero,-8(fp)
  8072d4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  8072d8:	e037883a 	mov	sp,fp
  8072dc:	dfc00117 	ldw	ra,4(sp)
  8072e0:	df000017 	ldw	fp,0(sp)
  8072e4:	dec00204 	addi	sp,sp,8
  8072e8:	f800283a 	ret

008072ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8072ec:	defffd04 	addi	sp,sp,-12
  8072f0:	dfc00215 	stw	ra,8(sp)
  8072f4:	df000115 	stw	fp,4(sp)
  8072f8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8072fc:	00802074 	movhi	r2,129
  807300:	10983404 	addi	r2,r2,24784
  807304:	10800017 	ldw	r2,0(r2)
  807308:	1005003a 	cmpeq	r2,r2,zero
  80730c:	1000061e 	bne	r2,zero,807328 <alt_get_errno+0x3c>
  807310:	00802074 	movhi	r2,129
  807314:	10983404 	addi	r2,r2,24784
  807318:	10800017 	ldw	r2,0(r2)
  80731c:	103ee83a 	callr	r2
  807320:	e0bfff15 	stw	r2,-4(fp)
  807324:	00000306 	br	807334 <alt_get_errno+0x48>
  807328:	00802074 	movhi	r2,129
  80732c:	109f3504 	addi	r2,r2,31956
  807330:	e0bfff15 	stw	r2,-4(fp)
  807334:	e0bfff17 	ldw	r2,-4(fp)
}
  807338:	e037883a 	mov	sp,fp
  80733c:	dfc00117 	ldw	ra,4(sp)
  807340:	df000017 	ldw	fp,0(sp)
  807344:	dec00204 	addi	sp,sp,8
  807348:	f800283a 	ret

0080734c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80734c:	defffe04 	addi	sp,sp,-8
  807350:	dfc00115 	stw	ra,4(sp)
  807354:	df000015 	stw	fp,0(sp)
  807358:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80735c:	01002074 	movhi	r4,129
  807360:	21185804 	addi	r4,r4,24928
  807364:	01402074 	movhi	r5,129
  807368:	29518004 	addi	r5,r5,17920
  80736c:	01802074 	movhi	r6,129
  807370:	31985804 	addi	r6,r6,24928
  807374:	08073cc0 	call	8073cc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  807378:	01002034 	movhi	r4,128
  80737c:	21000004 	addi	r4,r4,0
  807380:	01404434 	movhi	r5,272
  807384:	29500804 	addi	r5,r5,16416
  807388:	01804434 	movhi	r6,272
  80738c:	31907004 	addi	r6,r6,16832
  807390:	08073cc0 	call	8073cc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  807394:	01002074 	movhi	r4,129
  807398:	21108e04 	addi	r4,r4,16952
  80739c:	01402074 	movhi	r5,129
  8073a0:	29508e04 	addi	r5,r5,16952
  8073a4:	01802074 	movhi	r6,129
  8073a8:	31918004 	addi	r6,r6,17920
  8073ac:	08073cc0 	call	8073cc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  8073b0:	0812adc0 	call	812adc <alt_dcache_flush_all>
  alt_icache_flush_all();
  8073b4:	0812d900 	call	812d90 <alt_icache_flush_all>
}
  8073b8:	e037883a 	mov	sp,fp
  8073bc:	dfc00117 	ldw	ra,4(sp)
  8073c0:	df000017 	ldw	fp,0(sp)
  8073c4:	dec00204 	addi	sp,sp,8
  8073c8:	f800283a 	ret

008073cc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  8073cc:	defffc04 	addi	sp,sp,-16
  8073d0:	df000315 	stw	fp,12(sp)
  8073d4:	df000304 	addi	fp,sp,12
  8073d8:	e13ffd15 	stw	r4,-12(fp)
  8073dc:	e17ffe15 	stw	r5,-8(fp)
  8073e0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  8073e4:	e0fffe17 	ldw	r3,-8(fp)
  8073e8:	e0bffd17 	ldw	r2,-12(fp)
  8073ec:	18800e26 	beq	r3,r2,807428 <alt_load_section+0x5c>
  {
    while( to != end )
  8073f0:	00000a06 	br	80741c <alt_load_section+0x50>
    {
      *to++ = *from++;
  8073f4:	e0bffd17 	ldw	r2,-12(fp)
  8073f8:	10c00017 	ldw	r3,0(r2)
  8073fc:	e0bffe17 	ldw	r2,-8(fp)
  807400:	10c00015 	stw	r3,0(r2)
  807404:	e0bffe17 	ldw	r2,-8(fp)
  807408:	10800104 	addi	r2,r2,4
  80740c:	e0bffe15 	stw	r2,-8(fp)
  807410:	e0bffd17 	ldw	r2,-12(fp)
  807414:	10800104 	addi	r2,r2,4
  807418:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80741c:	e0fffe17 	ldw	r3,-8(fp)
  807420:	e0bfff17 	ldw	r2,-4(fp)
  807424:	18bff31e 	bne	r3,r2,8073f4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  807428:	e037883a 	mov	sp,fp
  80742c:	df000017 	ldw	fp,0(sp)
  807430:	dec00104 	addi	sp,sp,4
  807434:	f800283a 	ret

00807438 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  807438:	defff804 	addi	sp,sp,-32
  80743c:	dfc00715 	stw	ra,28(sp)
  807440:	df000615 	stw	fp,24(sp)
  807444:	df000604 	addi	fp,sp,24
  807448:	e13ffc15 	stw	r4,-16(fp)
  80744c:	e17ffd15 	stw	r5,-12(fp)
  807450:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  807454:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  807458:	e0bffc17 	ldw	r2,-16(fp)
  80745c:	1004803a 	cmplt	r2,r2,zero
  807460:	1000081e 	bne	r2,zero,807484 <lseek+0x4c>
  807464:	e0bffc17 	ldw	r2,-16(fp)
  807468:	10800324 	muli	r2,r2,12
  80746c:	1007883a 	mov	r3,r2
  807470:	00802074 	movhi	r2,129
  807474:	10938c04 	addi	r2,r2,20016
  807478:	1887883a 	add	r3,r3,r2
  80747c:	e0ffff15 	stw	r3,-4(fp)
  807480:	00000106 	br	807488 <lseek+0x50>
  807484:	e03fff15 	stw	zero,-4(fp)
  807488:	e0bfff17 	ldw	r2,-4(fp)
  80748c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  807490:	e0bffb17 	ldw	r2,-20(fp)
  807494:	1005003a 	cmpeq	r2,r2,zero
  807498:	1000111e 	bne	r2,zero,8074e0 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80749c:	e0bffb17 	ldw	r2,-20(fp)
  8074a0:	10800017 	ldw	r2,0(r2)
  8074a4:	10800717 	ldw	r2,28(r2)
  8074a8:	1005003a 	cmpeq	r2,r2,zero
  8074ac:	1000091e 	bne	r2,zero,8074d4 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  8074b0:	e0bffb17 	ldw	r2,-20(fp)
  8074b4:	10800017 	ldw	r2,0(r2)
  8074b8:	10800717 	ldw	r2,28(r2)
  8074bc:	e13ffb17 	ldw	r4,-20(fp)
  8074c0:	e17ffd17 	ldw	r5,-12(fp)
  8074c4:	e1bffe17 	ldw	r6,-8(fp)
  8074c8:	103ee83a 	callr	r2
  8074cc:	e0bffa15 	stw	r2,-24(fp)
  8074d0:	00000506 	br	8074e8 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  8074d4:	00bfde84 	movi	r2,-134
  8074d8:	e0bffa15 	stw	r2,-24(fp)
  8074dc:	00000206 	br	8074e8 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  8074e0:	00bfebc4 	movi	r2,-81
  8074e4:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  8074e8:	e0bffa17 	ldw	r2,-24(fp)
  8074ec:	1004403a 	cmpge	r2,r2,zero
  8074f0:	1000071e 	bne	r2,zero,807510 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  8074f4:	08075280 	call	807528 <alt_get_errno>
  8074f8:	1007883a 	mov	r3,r2
  8074fc:	e0bffa17 	ldw	r2,-24(fp)
  807500:	0085c83a 	sub	r2,zero,r2
  807504:	18800015 	stw	r2,0(r3)
    rc = -1;
  807508:	00bfffc4 	movi	r2,-1
  80750c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  807510:	e0bffa17 	ldw	r2,-24(fp)
}
  807514:	e037883a 	mov	sp,fp
  807518:	dfc00117 	ldw	ra,4(sp)
  80751c:	df000017 	ldw	fp,0(sp)
  807520:	dec00204 	addi	sp,sp,8
  807524:	f800283a 	ret

00807528 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  807528:	defffd04 	addi	sp,sp,-12
  80752c:	dfc00215 	stw	ra,8(sp)
  807530:	df000115 	stw	fp,4(sp)
  807534:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  807538:	00802074 	movhi	r2,129
  80753c:	10983404 	addi	r2,r2,24784
  807540:	10800017 	ldw	r2,0(r2)
  807544:	1005003a 	cmpeq	r2,r2,zero
  807548:	1000061e 	bne	r2,zero,807564 <alt_get_errno+0x3c>
  80754c:	00802074 	movhi	r2,129
  807550:	10983404 	addi	r2,r2,24784
  807554:	10800017 	ldw	r2,0(r2)
  807558:	103ee83a 	callr	r2
  80755c:	e0bfff15 	stw	r2,-4(fp)
  807560:	00000306 	br	807570 <alt_get_errno+0x48>
  807564:	00802074 	movhi	r2,129
  807568:	109f3504 	addi	r2,r2,31956
  80756c:	e0bfff15 	stw	r2,-4(fp)
  807570:	e0bfff17 	ldw	r2,-4(fp)
}
  807574:	e037883a 	mov	sp,fp
  807578:	dfc00117 	ldw	ra,4(sp)
  80757c:	df000017 	ldw	fp,0(sp)
  807580:	dec00204 	addi	sp,sp,8
  807584:	f800283a 	ret

00807588 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  807588:	defffb04 	addi	sp,sp,-20
  80758c:	dfc00415 	stw	ra,16(sp)
  807590:	df000315 	stw	fp,12(sp)
  807594:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  807598:	0009883a 	mov	r4,zero
  80759c:	08100180 	call	810018 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  8075a0:	08086740 	call	808674 <OSInit>
  8075a4:	01000044 	movi	r4,1
  8075a8:	080d5380 	call	80d538 <OSSemCreate>
  8075ac:	1007883a 	mov	r3,r2
  8075b0:	00802074 	movhi	r2,129
  8075b4:	109f3b04 	addi	r2,r2,31980
  8075b8:	10c00015 	stw	r3,0(r2)
  8075bc:	01000044 	movi	r4,1
  8075c0:	080d5380 	call	80d538 <OSSemCreate>
  8075c4:	1007883a 	mov	r3,r2
  8075c8:	00802074 	movhi	r2,129
  8075cc:	109f3d04 	addi	r2,r2,31988
  8075d0:	10c00015 	stw	r3,0(r2)
  8075d4:	00802074 	movhi	r2,129
  8075d8:	109f3604 	addi	r2,r2,31960
  8075dc:	e0bffd15 	stw	r2,-12(fp)
  8075e0:	00800044 	movi	r2,1
  8075e4:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  8075e8:	e13ffe0b 	ldhu	r4,-8(fp)
  8075ec:	080d5380 	call	80d538 <OSSemCreate>
  8075f0:	1007883a 	mov	r3,r2
  8075f4:	e0bffd17 	ldw	r2,-12(fp)
  8075f8:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  8075fc:	081004c0 	call	81004c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  807600:	01002074 	movhi	r4,129
  807604:	21111b04 	addi	r4,r4,17516
  807608:	01402074 	movhi	r5,129
  80760c:	29511b04 	addi	r5,r5,17516
  807610:	01802074 	movhi	r6,129
  807614:	31911b04 	addi	r6,r6,17516
  807618:	0812e840 	call	812e84 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80761c:	0812c340 	call	812c34 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  807620:	01002074 	movhi	r4,129
  807624:	210b2604 	addi	r4,r4,11416
  807628:	0813cd40 	call	813cd4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80762c:	d1270d17 	ldw	r4,-25548(gp)
  807630:	d1670e17 	ldw	r5,-25544(gp)
  807634:	d1a70f17 	ldw	r6,-25540(gp)
  807638:	08007d40 	call	8007d4 <main>
  80763c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  807640:	01000044 	movi	r4,1
  807644:	0806f700 	call	806f70 <close>
  exit (result);
  807648:	e13fff17 	ldw	r4,-4(fp)
  80764c:	0813ce80 	call	813ce8 <exit>

00807650 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  807650:	defff704 	addi	sp,sp,-36
  807654:	dfc00815 	stw	ra,32(sp)
  807658:	df000715 	stw	fp,28(sp)
  80765c:	df000704 	addi	fp,sp,28
  807660:	e13ffb15 	stw	r4,-20(fp)
  807664:	e17ffc15 	stw	r5,-16(fp)
  807668:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80766c:	e0bffb17 	ldw	r2,-20(fp)
  807670:	1004803a 	cmplt	r2,r2,zero
  807674:	1000081e 	bne	r2,zero,807698 <read+0x48>
  807678:	e0bffb17 	ldw	r2,-20(fp)
  80767c:	10800324 	muli	r2,r2,12
  807680:	1007883a 	mov	r3,r2
  807684:	00802074 	movhi	r2,129
  807688:	10938c04 	addi	r2,r2,20016
  80768c:	1887883a 	add	r3,r3,r2
  807690:	e0ffff15 	stw	r3,-4(fp)
  807694:	00000106 	br	80769c <read+0x4c>
  807698:	e03fff15 	stw	zero,-4(fp)
  80769c:	e0bfff17 	ldw	r2,-4(fp)
  8076a0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  8076a4:	e0bffa17 	ldw	r2,-24(fp)
  8076a8:	1005003a 	cmpeq	r2,r2,zero
  8076ac:	1000241e 	bne	r2,zero,807740 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  8076b0:	e0bffa17 	ldw	r2,-24(fp)
  8076b4:	10800217 	ldw	r2,8(r2)
  8076b8:	108000cc 	andi	r2,r2,3
  8076bc:	10800060 	cmpeqi	r2,r2,1
  8076c0:	10001a1e 	bne	r2,zero,80772c <read+0xdc>
  8076c4:	e0bffa17 	ldw	r2,-24(fp)
  8076c8:	10800017 	ldw	r2,0(r2)
  8076cc:	10800517 	ldw	r2,20(r2)
  8076d0:	1005003a 	cmpeq	r2,r2,zero
  8076d4:	1000151e 	bne	r2,zero,80772c <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  8076d8:	e0bffa17 	ldw	r2,-24(fp)
  8076dc:	10800017 	ldw	r2,0(r2)
  8076e0:	10800517 	ldw	r2,20(r2)
  8076e4:	e17ffc17 	ldw	r5,-16(fp)
  8076e8:	e1bffd17 	ldw	r6,-12(fp)
  8076ec:	e13ffa17 	ldw	r4,-24(fp)
  8076f0:	103ee83a 	callr	r2
  8076f4:	e0bff915 	stw	r2,-28(fp)
  8076f8:	e0bff917 	ldw	r2,-28(fp)
  8076fc:	1004403a 	cmpge	r2,r2,zero
  807700:	1000071e 	bne	r2,zero,807720 <read+0xd0>
        {
          ALT_ERRNO = -rval;
  807704:	08077700 	call	807770 <alt_get_errno>
  807708:	e0fff917 	ldw	r3,-28(fp)
  80770c:	00c7c83a 	sub	r3,zero,r3
  807710:	10c00015 	stw	r3,0(r2)
          return -1;
  807714:	00bfffc4 	movi	r2,-1
  807718:	e0bffe15 	stw	r2,-8(fp)
  80771c:	00000e06 	br	807758 <read+0x108>
        }
        return rval;
  807720:	e0bff917 	ldw	r2,-28(fp)
  807724:	e0bffe15 	stw	r2,-8(fp)
  807728:	00000b06 	br	807758 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80772c:	08077700 	call	807770 <alt_get_errno>
  807730:	1007883a 	mov	r3,r2
  807734:	00800344 	movi	r2,13
  807738:	18800015 	stw	r2,0(r3)
  80773c:	00000406 	br	807750 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  807740:	08077700 	call	807770 <alt_get_errno>
  807744:	1007883a 	mov	r3,r2
  807748:	00801444 	movi	r2,81
  80774c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  807750:	00bfffc4 	movi	r2,-1
  807754:	e0bffe15 	stw	r2,-8(fp)
  807758:	e0bffe17 	ldw	r2,-8(fp)
}
  80775c:	e037883a 	mov	sp,fp
  807760:	dfc00117 	ldw	ra,4(sp)
  807764:	df000017 	ldw	fp,0(sp)
  807768:	dec00204 	addi	sp,sp,8
  80776c:	f800283a 	ret

00807770 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  807770:	defffd04 	addi	sp,sp,-12
  807774:	dfc00215 	stw	ra,8(sp)
  807778:	df000115 	stw	fp,4(sp)
  80777c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  807780:	00802074 	movhi	r2,129
  807784:	10983404 	addi	r2,r2,24784
  807788:	10800017 	ldw	r2,0(r2)
  80778c:	1005003a 	cmpeq	r2,r2,zero
  807790:	1000061e 	bne	r2,zero,8077ac <alt_get_errno+0x3c>
  807794:	00802074 	movhi	r2,129
  807798:	10983404 	addi	r2,r2,24784
  80779c:	10800017 	ldw	r2,0(r2)
  8077a0:	103ee83a 	callr	r2
  8077a4:	e0bfff15 	stw	r2,-4(fp)
  8077a8:	00000306 	br	8077b8 <alt_get_errno+0x48>
  8077ac:	00802074 	movhi	r2,129
  8077b0:	109f3504 	addi	r2,r2,31956
  8077b4:	e0bfff15 	stw	r2,-4(fp)
  8077b8:	e0bfff17 	ldw	r2,-4(fp)
}
  8077bc:	e037883a 	mov	sp,fp
  8077c0:	dfc00117 	ldw	ra,4(sp)
  8077c4:	df000017 	ldw	fp,0(sp)
  8077c8:	dec00204 	addi	sp,sp,8
  8077cc:	f800283a 	ret

008077d0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  8077d0:	defffe04 	addi	sp,sp,-8
  8077d4:	df000115 	stw	fp,4(sp)
  8077d8:	df000104 	addi	fp,sp,4
  8077dc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  8077e0:	e0bfff17 	ldw	r2,-4(fp)
  8077e4:	108000d0 	cmplti	r2,r2,3
  8077e8:	10000d1e 	bne	r2,zero,807820 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  8077ec:	e0bfff17 	ldw	r2,-4(fp)
  8077f0:	00c02074 	movhi	r3,129
  8077f4:	18d38c04 	addi	r3,r3,20016
  8077f8:	10800324 	muli	r2,r2,12
  8077fc:	10c5883a 	add	r2,r2,r3
  807800:	10800204 	addi	r2,r2,8
  807804:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  807808:	e0bfff17 	ldw	r2,-4(fp)
  80780c:	00c02074 	movhi	r3,129
  807810:	18d38c04 	addi	r3,r3,20016
  807814:	10800324 	muli	r2,r2,12
  807818:	10c5883a 	add	r2,r2,r3
  80781c:	10000015 	stw	zero,0(r2)
  }
}
  807820:	e037883a 	mov	sp,fp
  807824:	df000017 	ldw	fp,0(sp)
  807828:	dec00104 	addi	sp,sp,4
  80782c:	f800283a 	ret

00807830 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  807830:	defff804 	addi	sp,sp,-32
  807834:	df000715 	stw	fp,28(sp)
  807838:	df000704 	addi	fp,sp,28
  80783c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807840:	0005303a 	rdctl	r2,status
  807844:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807848:	e0fffb17 	ldw	r3,-20(fp)
  80784c:	00bfff84 	movi	r2,-2
  807850:	1884703a 	and	r2,r3,r2
  807854:	1001703a 	wrctl	status,r2
  
  return context;
  807858:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80785c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  807860:	d0a00b17 	ldw	r2,-32724(gp)
  807864:	10c000c4 	addi	r3,r2,3
  807868:	00bfff04 	movi	r2,-4
  80786c:	1884703a 	and	r2,r3,r2
  807870:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  807874:	d0e00b17 	ldw	r3,-32724(gp)
  807878:	e0bffe17 	ldw	r2,-8(fp)
  80787c:	1887883a 	add	r3,r3,r2
  807880:	00804034 	movhi	r2,256
  807884:	10800004 	addi	r2,r2,0
  807888:	10c0072e 	bgeu	r2,r3,8078a8 <sbrk+0x78>
  80788c:	e0bffd17 	ldw	r2,-12(fp)
  807890:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807894:	e0bffa17 	ldw	r2,-24(fp)
  807898:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80789c:	00bfffc4 	movi	r2,-1
  8078a0:	e0bfff15 	stw	r2,-4(fp)
  8078a4:	00000c06 	br	8078d8 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  8078a8:	d0a00b17 	ldw	r2,-32724(gp)
  8078ac:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  8078b0:	d0e00b17 	ldw	r3,-32724(gp)
  8078b4:	e0bffe17 	ldw	r2,-8(fp)
  8078b8:	1885883a 	add	r2,r3,r2
  8078bc:	d0a00b15 	stw	r2,-32724(gp)
  8078c0:	e0bffd17 	ldw	r2,-12(fp)
  8078c4:	e0bff915 	stw	r2,-28(fp)
  8078c8:	e0bff917 	ldw	r2,-28(fp)
  8078cc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  8078d0:	e0bffc17 	ldw	r2,-16(fp)
  8078d4:	e0bfff15 	stw	r2,-4(fp)
  8078d8:	e0bfff17 	ldw	r2,-4(fp)
} 
  8078dc:	e037883a 	mov	sp,fp
  8078e0:	df000017 	ldw	fp,0(sp)
  8078e4:	dec00104 	addi	sp,sp,4
  8078e8:	f800283a 	ret

008078ec <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  8078ec:	defff704 	addi	sp,sp,-36
  8078f0:	dfc00815 	stw	ra,32(sp)
  8078f4:	df000715 	stw	fp,28(sp)
  8078f8:	df000704 	addi	fp,sp,28
  8078fc:	e13ffb15 	stw	r4,-20(fp)
  807900:	e17ffc15 	stw	r5,-16(fp)
  807904:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  807908:	e0bffb17 	ldw	r2,-20(fp)
  80790c:	1004803a 	cmplt	r2,r2,zero
  807910:	1000081e 	bne	r2,zero,807934 <write+0x48>
  807914:	e0bffb17 	ldw	r2,-20(fp)
  807918:	10800324 	muli	r2,r2,12
  80791c:	1007883a 	mov	r3,r2
  807920:	00802074 	movhi	r2,129
  807924:	10938c04 	addi	r2,r2,20016
  807928:	1887883a 	add	r3,r3,r2
  80792c:	e0ffff15 	stw	r3,-4(fp)
  807930:	00000106 	br	807938 <write+0x4c>
  807934:	e03fff15 	stw	zero,-4(fp)
  807938:	e0bfff17 	ldw	r2,-4(fp)
  80793c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  807940:	e0bffa17 	ldw	r2,-24(fp)
  807944:	1005003a 	cmpeq	r2,r2,zero
  807948:	1000241e 	bne	r2,zero,8079dc <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80794c:	e0bffa17 	ldw	r2,-24(fp)
  807950:	10800217 	ldw	r2,8(r2)
  807954:	108000cc 	andi	r2,r2,3
  807958:	1005003a 	cmpeq	r2,r2,zero
  80795c:	10001a1e 	bne	r2,zero,8079c8 <write+0xdc>
  807960:	e0bffa17 	ldw	r2,-24(fp)
  807964:	10800017 	ldw	r2,0(r2)
  807968:	10800617 	ldw	r2,24(r2)
  80796c:	1005003a 	cmpeq	r2,r2,zero
  807970:	1000151e 	bne	r2,zero,8079c8 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  807974:	e0bffa17 	ldw	r2,-24(fp)
  807978:	10800017 	ldw	r2,0(r2)
  80797c:	10800617 	ldw	r2,24(r2)
  807980:	e17ffc17 	ldw	r5,-16(fp)
  807984:	e1bffd17 	ldw	r6,-12(fp)
  807988:	e13ffa17 	ldw	r4,-24(fp)
  80798c:	103ee83a 	callr	r2
  807990:	e0bff915 	stw	r2,-28(fp)
  807994:	e0bff917 	ldw	r2,-28(fp)
  807998:	1004403a 	cmpge	r2,r2,zero
  80799c:	1000071e 	bne	r2,zero,8079bc <write+0xd0>
      {
        ALT_ERRNO = -rval;
  8079a0:	0807a0c0 	call	807a0c <alt_get_errno>
  8079a4:	e0fff917 	ldw	r3,-28(fp)
  8079a8:	00c7c83a 	sub	r3,zero,r3
  8079ac:	10c00015 	stw	r3,0(r2)
        return -1;
  8079b0:	00bfffc4 	movi	r2,-1
  8079b4:	e0bffe15 	stw	r2,-8(fp)
  8079b8:	00000e06 	br	8079f4 <write+0x108>
      }
      return rval;
  8079bc:	e0bff917 	ldw	r2,-28(fp)
  8079c0:	e0bffe15 	stw	r2,-8(fp)
  8079c4:	00000b06 	br	8079f4 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  8079c8:	0807a0c0 	call	807a0c <alt_get_errno>
  8079cc:	1007883a 	mov	r3,r2
  8079d0:	00800344 	movi	r2,13
  8079d4:	18800015 	stw	r2,0(r3)
  8079d8:	00000406 	br	8079ec <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  8079dc:	0807a0c0 	call	807a0c <alt_get_errno>
  8079e0:	1007883a 	mov	r3,r2
  8079e4:	00801444 	movi	r2,81
  8079e8:	18800015 	stw	r2,0(r3)
  }
  return -1;
  8079ec:	00bfffc4 	movi	r2,-1
  8079f0:	e0bffe15 	stw	r2,-8(fp)
  8079f4:	e0bffe17 	ldw	r2,-8(fp)
}
  8079f8:	e037883a 	mov	sp,fp
  8079fc:	dfc00117 	ldw	ra,4(sp)
  807a00:	df000017 	ldw	fp,0(sp)
  807a04:	dec00204 	addi	sp,sp,8
  807a08:	f800283a 	ret

00807a0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  807a0c:	defffd04 	addi	sp,sp,-12
  807a10:	dfc00215 	stw	ra,8(sp)
  807a14:	df000115 	stw	fp,4(sp)
  807a18:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  807a1c:	00802074 	movhi	r2,129
  807a20:	10983404 	addi	r2,r2,24784
  807a24:	10800017 	ldw	r2,0(r2)
  807a28:	1005003a 	cmpeq	r2,r2,zero
  807a2c:	1000061e 	bne	r2,zero,807a48 <alt_get_errno+0x3c>
  807a30:	00802074 	movhi	r2,129
  807a34:	10983404 	addi	r2,r2,24784
  807a38:	10800017 	ldw	r2,0(r2)
  807a3c:	103ee83a 	callr	r2
  807a40:	e0bfff15 	stw	r2,-4(fp)
  807a44:	00000306 	br	807a54 <alt_get_errno+0x48>
  807a48:	00802074 	movhi	r2,129
  807a4c:	109f3504 	addi	r2,r2,31956
  807a50:	e0bfff15 	stw	r2,-4(fp)
  807a54:	e0bfff17 	ldw	r2,-4(fp)
}
  807a58:	e037883a 	mov	sp,fp
  807a5c:	dfc00117 	ldw	ra,4(sp)
  807a60:	df000017 	ldw	fp,0(sp)
  807a64:	dec00204 	addi	sp,sp,8
  807a68:	f800283a 	ret

00807a6c <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
  807a6c:	deffdf04 	addi	sp,sp,-132
  807a70:	dfc02015 	stw	ra,128(sp)
  807a74:	df001f15 	stw	fp,124(sp)
  807a78:	df001f04 	addi	fp,sp,124
  807a7c:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  807a80:	e17fe204 	addi	r5,fp,-120
  807a84:	01003fc4 	movi	r4,255
  807a88:	080f8c00 	call	80f8c0 <OSTaskQuery>
  807a8c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  807a90:	e0bffe83 	ldbu	r2,-6(fp)
  807a94:	10803fcc 	andi	r2,r2,255
  807a98:	1004c03a 	cmpne	r2,r2,zero
  807a9c:	1000191e 	bne	r2,zero,807b04 <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
  807aa0:	e0bfee83 	ldbu	r2,-70(fp)
  807aa4:	10803fcc 	andi	r2,r2,255
  807aa8:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  807aac:	d1271117 	ldw	r4,-25532(gp)
  807ab0:	e17ffd04 	addi	r5,fp,-12
  807ab4:	080de0c0 	call	80de0c <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
  807ab8:	e0bffe43 	ldbu	r2,-7(fp)
  807abc:	10803fcc 	andi	r2,r2,255
  807ac0:	1005003a 	cmpeq	r2,r2,zero
  807ac4:	1000071e 	bne	r2,zero,807ae4 <__env_lock+0x78>
  807ac8:	d0e00c17 	ldw	r3,-32720(gp)
  807acc:	e0bfe117 	ldw	r2,-124(fp)
  807ad0:	10c0041e 	bne	r2,r3,807ae4 <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
  807ad4:	d0a71017 	ldw	r2,-25536(gp)
  807ad8:	10800044 	addi	r2,r2,1
  807adc:	d0a71015 	stw	r2,-25536(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
  807ae0:	00000806 	br	807b04 <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
  807ae4:	d1271117 	ldw	r4,-25532(gp)
  807ae8:	e1bffe84 	addi	r6,fp,-6
  807aec:	000b883a 	mov	r5,zero
  807af0:	080d8ec0 	call	80d8ec <OSSemPend>
    locks  = 1;
  807af4:	00800044 	movi	r2,1
  807af8:	d0a71015 	stw	r2,-25536(gp)
    lockid = id;
  807afc:	e0bfe117 	ldw	r2,-124(fp)
  807b00:	d0a00c15 	stw	r2,-32720(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  807b04:	e037883a 	mov	sp,fp
  807b08:	dfc00117 	ldw	ra,4(sp)
  807b0c:	df000017 	ldw	fp,0(sp)
  807b10:	dec00204 	addi	sp,sp,8
  807b14:	f800283a 	ret

00807b18 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
  807b18:	defffd04 	addi	sp,sp,-12
  807b1c:	dfc00215 	stw	ra,8(sp)
  807b20:	df000115 	stw	fp,4(sp)
  807b24:	df000104 	addi	fp,sp,4
  807b28:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
  807b2c:	d0a71017 	ldw	r2,-25536(gp)
  807b30:	1005003a 	cmpeq	r2,r2,zero
  807b34:	10000a1e 	bne	r2,zero,807b60 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
  807b38:	d0a71017 	ldw	r2,-25536(gp)
  807b3c:	10bfffc4 	addi	r2,r2,-1
  807b40:	d0a71015 	stw	r2,-25536(gp)
  807b44:	d0a71017 	ldw	r2,-25536(gp)
  807b48:	1004c03a 	cmpne	r2,r2,zero
  807b4c:	1000041e 	bne	r2,zero,807b60 <__env_unlock+0x48>
  {
    lockid = -1;
  807b50:	00bfffc4 	movi	r2,-1
  807b54:	d0a00c15 	stw	r2,-32720(gp)
    OSSemPost( alt_envsem );
  807b58:	d1271117 	ldw	r4,-25532(gp)
  807b5c:	080dce40 	call	80dce4 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  807b60:	e037883a 	mov	sp,fp
  807b64:	dfc00117 	ldw	ra,4(sp)
  807b68:	df000017 	ldw	fp,0(sp)
  807b6c:	dec00204 	addi	sp,sp,8
  807b70:	f800283a 	ret

00807b74 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
  807b74:	deffdb04 	addi	sp,sp,-148
  807b78:	dfc02415 	stw	ra,144(sp)
  807b7c:	df002315 	stw	fp,140(sp)
  807b80:	df002304 	addi	fp,sp,140
  807b84:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  807b88:	e03fe015 	stw	zero,-128(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
  807b8c:	00802074 	movhi	r2,129
  807b90:	109f3e44 	addi	r2,r2,31993
  807b94:	10800003 	ldbu	r2,0(r2)
  807b98:	10803fcc 	andi	r2,r2,255
  807b9c:	10800058 	cmpnei	r2,r2,1
  807ba0:	1000311e 	bne	r2,zero,807c68 <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  807ba4:	e17fe204 	addi	r5,fp,-120
  807ba8:	01003fc4 	movi	r4,255
  807bac:	080f8c00 	call	80f8c0 <OSTaskQuery>
  807bb0:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  807bb4:	e0bffe83 	ldbu	r2,-6(fp)
  807bb8:	10803fcc 	andi	r2,r2,255
  807bbc:	1004c03a 	cmpne	r2,r2,zero
  807bc0:	1000291e 	bne	r2,zero,807c68 <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
  807bc4:	e0bfee83 	ldbu	r2,-70(fp)
  807bc8:	10803fcc 	andi	r2,r2,255
  807bcc:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
  807bd0:	d1271317 	ldw	r4,-25524(gp)
  807bd4:	e17ffd04 	addi	r5,fp,-12
  807bd8:	080de0c0 	call	80de0c <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807bdc:	0005303a 	rdctl	r2,status
  807be0:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807be4:	e0ffdf17 	ldw	r3,-132(fp)
  807be8:	00bfff84 	movi	r2,-2
  807bec:	1884703a 	and	r2,r3,r2
  807bf0:	1001703a 	wrctl	status,r2
  
  return context;
  807bf4:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
  807bf8:	e0bfe015 	stw	r2,-128(fp)

  if( !semdata.OSCnt && id == lockid ) 
  807bfc:	e0bffd0b 	ldhu	r2,-12(fp)
  807c00:	10bfffcc 	andi	r2,r2,65535
  807c04:	1004c03a 	cmpne	r2,r2,zero
  807c08:	10000b1e 	bne	r2,zero,807c38 <__malloc_lock+0xc4>
  807c0c:	d0e00d17 	ldw	r3,-32716(gp)
  807c10:	e0bfe117 	ldw	r2,-124(fp)
  807c14:	10c0081e 	bne	r2,r3,807c38 <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
  807c18:	d0a71217 	ldw	r2,-25528(gp)
  807c1c:	10800044 	addi	r2,r2,1
  807c20:	d0a71215 	stw	r2,-25528(gp)
  807c24:	e0bfe017 	ldw	r2,-128(fp)
  807c28:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807c2c:	e0bfde17 	ldw	r2,-136(fp)
  807c30:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
  807c34:	00000c06 	br	807c68 <__malloc_lock+0xf4>
  807c38:	e0bfe017 	ldw	r2,-128(fp)
  807c3c:	e0bfdd15 	stw	r2,-140(fp)
  807c40:	e0bfdd17 	ldw	r2,-140(fp)
  807c44:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
  807c48:	d1271317 	ldw	r4,-25524(gp)
  807c4c:	e1bffe84 	addi	r6,fp,-6
  807c50:	000b883a 	mov	r5,zero
  807c54:	080d8ec0 	call	80d8ec <OSSemPend>
    locks  = 1;
  807c58:	00800044 	movi	r2,1
  807c5c:	d0a71215 	stw	r2,-25528(gp)
    lockid = id;
  807c60:	e0bfe117 	ldw	r2,-124(fp)
  807c64:	d0a00d15 	stw	r2,-32716(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  807c68:	e037883a 	mov	sp,fp
  807c6c:	dfc00117 	ldw	ra,4(sp)
  807c70:	df000017 	ldw	fp,0(sp)
  807c74:	dec00204 	addi	sp,sp,8
  807c78:	f800283a 	ret

00807c7c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  807c7c:	defff804 	addi	sp,sp,-32
  807c80:	dfc00715 	stw	ra,28(sp)
  807c84:	df000615 	stw	fp,24(sp)
  807c88:	df000604 	addi	fp,sp,24
  807c8c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  807c90:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
  807c94:	00802074 	movhi	r2,129
  807c98:	109f3e44 	addi	r2,r2,31993
  807c9c:	10800003 	ldbu	r2,0(r2)
  807ca0:	10803fcc 	andi	r2,r2,255
  807ca4:	10800058 	cmpnei	r2,r2,1
  807ca8:	1000231e 	bne	r2,zero,807d38 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807cac:	0005303a 	rdctl	r2,status
  807cb0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807cb4:	e0fffd17 	ldw	r3,-12(fp)
  807cb8:	00bfff84 	movi	r2,-2
  807cbc:	1884703a 	and	r2,r3,r2
  807cc0:	1001703a 	wrctl	status,r2
  
  return context;
  807cc4:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
  807cc8:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
  807ccc:	d0a71217 	ldw	r2,-25528(gp)
  807cd0:	1004c03a 	cmpne	r2,r2,zero
  807cd4:	1000051e 	bne	r2,zero,807cec <__malloc_unlock+0x70>
  807cd8:	e0bffe17 	ldw	r2,-8(fp)
  807cdc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807ce0:	e0bffc17 	ldw	r2,-16(fp)
  807ce4:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
  807ce8:	00001306 	br	807d38 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
  807cec:	d0a71217 	ldw	r2,-25528(gp)
  807cf0:	10bfffc4 	addi	r2,r2,-1
  807cf4:	d0a71215 	stw	r2,-25528(gp)
  807cf8:	d0a71217 	ldw	r2,-25528(gp)
  807cfc:	1004c03a 	cmpne	r2,r2,zero
  807d00:	1000091e 	bne	r2,zero,807d28 <__malloc_unlock+0xac>
  {
    lockid = -1;
  807d04:	00bfffc4 	movi	r2,-1
  807d08:	d0a00d15 	stw	r2,-32716(gp)
  807d0c:	e0bffe17 	ldw	r2,-8(fp)
  807d10:	e0bffb15 	stw	r2,-20(fp)
  807d14:	e0bffb17 	ldw	r2,-20(fp)
  807d18:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
  807d1c:	d1271317 	ldw	r4,-25524(gp)
  807d20:	080dce40 	call	80dce4 <OSSemPost>
  807d24:	00000406 	br	807d38 <__malloc_unlock+0xbc>
  807d28:	e0bffe17 	ldw	r2,-8(fp)
  807d2c:	e0bffa15 	stw	r2,-24(fp)
  807d30:	e0bffa17 	ldw	r2,-24(fp)
  807d34:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  807d38:	e037883a 	mov	sp,fp
  807d3c:	dfc00117 	ldw	ra,4(sp)
  807d40:	df000017 	ldw	fp,0(sp)
  807d44:	dec00204 	addi	sp,sp,8
  807d48:	f800283a 	ret

00807d4c <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  807d4c:	defff604 	addi	sp,sp,-40
  807d50:	dfc00915 	stw	ra,36(sp)
  807d54:	df000815 	stw	fp,32(sp)
  807d58:	df000804 	addi	fp,sp,32
  807d5c:	e13ffc15 	stw	r4,-16(fp)
  807d60:	e17ffd15 	stw	r5,-12(fp)
  807d64:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  807d68:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  807d6c:	e0bffe17 	ldw	r2,-8(fp)
  807d70:	1004c03a 	cmpne	r2,r2,zero
  807d74:	1000021e 	bne	r2,zero,807d80 <OSEventNameGet+0x34>
        return (0);
  807d78:	e03fff15 	stw	zero,-4(fp)
  807d7c:	00003906 	br	807e64 <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  807d80:	e0bffc17 	ldw	r2,-16(fp)
  807d84:	1004c03a 	cmpne	r2,r2,zero
  807d88:	1000051e 	bne	r2,zero,807da0 <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  807d8c:	e0fffe17 	ldw	r3,-8(fp)
  807d90:	00800104 	movi	r2,4
  807d94:	18800005 	stb	r2,0(r3)
        return (0);
  807d98:	e03fff15 	stw	zero,-4(fp)
  807d9c:	00003106 	br	807e64 <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  807da0:	e0bffd17 	ldw	r2,-12(fp)
  807da4:	1004c03a 	cmpne	r2,r2,zero
  807da8:	1000051e 	bne	r2,zero,807dc0 <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  807dac:	e0fffe17 	ldw	r3,-8(fp)
  807db0:	00800304 	movi	r2,12
  807db4:	18800005 	stb	r2,0(r3)
        return (0);
  807db8:	e03fff15 	stw	zero,-4(fp)
  807dbc:	00002906 	br	807e64 <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  807dc0:	d0a72203 	ldbu	r2,-25464(gp)
  807dc4:	10803fcc 	andi	r2,r2,255
  807dc8:	1005003a 	cmpeq	r2,r2,zero
  807dcc:	1000051e 	bne	r2,zero,807de4 <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
  807dd0:	e0fffe17 	ldw	r3,-8(fp)
  807dd4:	00800444 	movi	r2,17
  807dd8:	18800005 	stb	r2,0(r3)
        return (0);
  807ddc:	e03fff15 	stw	zero,-4(fp)
  807de0:	00002006 	br	807e64 <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
  807de4:	e0bffc17 	ldw	r2,-16(fp)
  807de8:	10800003 	ldbu	r2,0(r2)
  807dec:	10803fcc 	andi	r2,r2,255
  807df0:	10bfffc4 	addi	r2,r2,-1
  807df4:	10800128 	cmpgeui	r2,r2,4
  807df8:	1000161e 	bne	r2,zero,807e54 <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807dfc:	0005303a 	rdctl	r2,status
  807e00:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807e04:	e0fff917 	ldw	r3,-28(fp)
  807e08:	00bfff84 	movi	r2,-2
  807e0c:	1884703a 	and	r2,r3,r2
  807e10:	1001703a 	wrctl	status,r2
  
  return context;
  807e14:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
  807e18:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
  807e1c:	e0bffc17 	ldw	r2,-16(fp)
  807e20:	11400384 	addi	r5,r2,14
  807e24:	e13ffd17 	ldw	r4,-12(fp)
  807e28:	08098d00 	call	8098d0 <OS_StrCopy>
  807e2c:	e0bffb05 	stb	r2,-20(fp)
  807e30:	e0bffa17 	ldw	r2,-24(fp)
  807e34:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807e38:	e0bff817 	ldw	r2,-32(fp)
  807e3c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  807e40:	e0bffe17 	ldw	r2,-8(fp)
  807e44:	10000005 	stb	zero,0(r2)
    return (len);
  807e48:	e0bffb03 	ldbu	r2,-20(fp)
  807e4c:	e0bfff15 	stw	r2,-4(fp)
  807e50:	00000406 	br	807e64 <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  807e54:	e0fffe17 	ldw	r3,-8(fp)
  807e58:	00800044 	movi	r2,1
  807e5c:	18800005 	stb	r2,0(r3)
             return (0);
  807e60:	e03fff15 	stw	zero,-4(fp)
  807e64:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
  807e68:	e037883a 	mov	sp,fp
  807e6c:	dfc00117 	ldw	ra,4(sp)
  807e70:	df000017 	ldw	fp,0(sp)
  807e74:	dec00204 	addi	sp,sp,8
  807e78:	f800283a 	ret

00807e7c <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  807e7c:	defff604 	addi	sp,sp,-40
  807e80:	dfc00915 	stw	ra,36(sp)
  807e84:	df000815 	stw	fp,32(sp)
  807e88:	df000804 	addi	fp,sp,32
  807e8c:	e13ffd15 	stw	r4,-12(fp)
  807e90:	e17ffe15 	stw	r5,-8(fp)
  807e94:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  807e98:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  807e9c:	e0bfff17 	ldw	r2,-4(fp)
  807ea0:	1005003a 	cmpeq	r2,r2,zero
  807ea4:	1000411e 	bne	r2,zero,807fac <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  807ea8:	e0bffd17 	ldw	r2,-12(fp)
  807eac:	1004c03a 	cmpne	r2,r2,zero
  807eb0:	1000041e 	bne	r2,zero,807ec4 <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
  807eb4:	e0ffff17 	ldw	r3,-4(fp)
  807eb8:	00800104 	movi	r2,4
  807ebc:	18800005 	stb	r2,0(r3)
        return;
  807ec0:	00003a06 	br	807fac <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  807ec4:	e0bffe17 	ldw	r2,-8(fp)
  807ec8:	1004c03a 	cmpne	r2,r2,zero
  807ecc:	1000041e 	bne	r2,zero,807ee0 <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  807ed0:	e0ffff17 	ldw	r3,-4(fp)
  807ed4:	00800304 	movi	r2,12
  807ed8:	18800005 	stb	r2,0(r3)
        return;
  807edc:	00003306 	br	807fac <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  807ee0:	d0a72203 	ldbu	r2,-25464(gp)
  807ee4:	10803fcc 	andi	r2,r2,255
  807ee8:	1005003a 	cmpeq	r2,r2,zero
  807eec:	1000041e 	bne	r2,zero,807f00 <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
  807ef0:	e0ffff17 	ldw	r3,-4(fp)
  807ef4:	00800484 	movi	r2,18
  807ef8:	18800005 	stb	r2,0(r3)
        return;
  807efc:	00002b06 	br	807fac <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
  807f00:	e0bffd17 	ldw	r2,-12(fp)
  807f04:	10800003 	ldbu	r2,0(r2)
  807f08:	10803fcc 	andi	r2,r2,255
  807f0c:	10bfffc4 	addi	r2,r2,-1
  807f10:	10800128 	cmpgeui	r2,r2,4
  807f14:	10000f1e 	bne	r2,zero,807f54 <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807f18:	0005303a 	rdctl	r2,status
  807f1c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807f20:	e0fffa17 	ldw	r3,-24(fp)
  807f24:	00bfff84 	movi	r2,-2
  807f28:	1884703a 	and	r2,r3,r2
  807f2c:	1001703a 	wrctl	status,r2
  
  return context;
  807f30:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
  807f34:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
  807f38:	e13ffe17 	ldw	r4,-8(fp)
  807f3c:	08099500 	call	809950 <OS_StrLen>
  807f40:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
  807f44:	e0bffc03 	ldbu	r2,-16(fp)
  807f48:	10800828 	cmpgeui	r2,r2,32
  807f4c:	1000051e 	bne	r2,zero,807f64 <OSEventNameSet+0xe8>
  807f50:	00000c06 	br	807f84 <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  807f54:	e0ffff17 	ldw	r3,-4(fp)
  807f58:	00800044 	movi	r2,1
  807f5c:	18800005 	stb	r2,0(r3)
             return;
  807f60:	00001206 	br	807fac <OSEventNameSet+0x130>
  807f64:	e0bffb17 	ldw	r2,-20(fp)
  807f68:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807f6c:	e0bff917 	ldw	r2,-28(fp)
  807f70:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
  807f74:	e0ffff17 	ldw	r3,-4(fp)
  807f78:	008002c4 	movi	r2,11
  807f7c:	18800005 	stb	r2,0(r3)
        return;
  807f80:	00000a06 	br	807fac <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
  807f84:	e0bffd17 	ldw	r2,-12(fp)
  807f88:	11000384 	addi	r4,r2,14
  807f8c:	e17ffe17 	ldw	r5,-8(fp)
  807f90:	08098d00 	call	8098d0 <OS_StrCopy>
  807f94:	e0bffb17 	ldw	r2,-20(fp)
  807f98:	e0bff815 	stw	r2,-32(fp)
  807f9c:	e0bff817 	ldw	r2,-32(fp)
  807fa0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  807fa4:	e0bfff17 	ldw	r2,-4(fp)
  807fa8:	10000005 	stb	zero,0(r2)
}
  807fac:	e037883a 	mov	sp,fp
  807fb0:	dfc00117 	ldw	ra,4(sp)
  807fb4:	df000017 	ldw	fp,0(sp)
  807fb8:	dec00204 	addi	sp,sp,8
  807fbc:	f800283a 	ret

00807fc0 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
  807fc0:	deffe704 	addi	sp,sp,-100
  807fc4:	dfc01815 	stw	ra,96(sp)
  807fc8:	df001715 	stw	fp,92(sp)
  807fcc:	df001704 	addi	fp,sp,92
  807fd0:	e13ff615 	stw	r4,-40(fp)
  807fd4:	e17ff715 	stw	r5,-36(fp)
  807fd8:	e1bff815 	stw	r6,-32(fp)
  807fdc:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
  807fe0:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
  807fe4:	e0800217 	ldw	r2,8(fp)
  807fe8:	1004c03a 	cmpne	r2,r2,zero
  807fec:	1000021e 	bne	r2,zero,807ff8 <OSEventPendMulti+0x38>
        return (0);
  807ff0:	e03fff15 	stw	zero,-4(fp)
  807ff4:	00019906 	br	80865c <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
  807ff8:	e0bff617 	ldw	r2,-40(fp)
  807ffc:	1004c03a 	cmpne	r2,r2,zero
  808000:	1000051e 	bne	r2,zero,808018 <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
  808004:	e0c00217 	ldw	r3,8(fp)
  808008:	00800104 	movi	r2,4
  80800c:	18800005 	stb	r2,0(r3)
        return (0);
  808010:	e03fff15 	stw	zero,-4(fp)
  808014:	00019106 	br	80865c <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
  808018:	e0bff717 	ldw	r2,-36(fp)
  80801c:	1004c03a 	cmpne	r2,r2,zero
  808020:	1000051e 	bne	r2,zero,808038 <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
  808024:	e0c00217 	ldw	r3,8(fp)
  808028:	00800104 	movi	r2,4
  80802c:	18800005 	stb	r2,0(r3)
        return (0);
  808030:	e03fff15 	stw	zero,-4(fp)
  808034:	00018906 	br	80865c <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
  808038:	e0bff817 	ldw	r2,-32(fp)
  80803c:	1004c03a 	cmpne	r2,r2,zero
  808040:	1000051e 	bne	r2,zero,808058 <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
  808044:	e0c00217 	ldw	r3,8(fp)
  808048:	00800104 	movi	r2,4
  80804c:	18800005 	stb	r2,0(r3)
        return (0);
  808050:	e03fff15 	stw	zero,-4(fp)
  808054:	00018106 	br	80865c <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
  808058:	e0bff717 	ldw	r2,-36(fp)
  80805c:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
  808060:	e0bff617 	ldw	r2,-40(fp)
  808064:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
  808068:	e0bff517 	ldw	r2,-44(fp)
  80806c:	10800017 	ldw	r2,0(r2)
  808070:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
  808074:	00001806 	br	8080d8 <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
  808078:	e0bff417 	ldw	r2,-48(fp)
  80807c:	10800003 	ldbu	r2,0(r2)
  808080:	10803fcc 	andi	r2,r2,255
  808084:	e0bffe15 	stw	r2,-8(fp)
  808088:	e0fffe17 	ldw	r3,-8(fp)
  80808c:	188000a0 	cmpeqi	r2,r3,2
  808090:	10000b1e 	bne	r2,zero,8080c0 <OSEventPendMulti+0x100>
  808094:	e0fffe17 	ldw	r3,-8(fp)
  808098:	188000e0 	cmpeqi	r2,r3,3
  80809c:	1000081e 	bne	r2,zero,8080c0 <OSEventPendMulti+0x100>
  8080a0:	e0fffe17 	ldw	r3,-8(fp)
  8080a4:	18800060 	cmpeqi	r2,r3,1
  8080a8:	1000051e 	bne	r2,zero,8080c0 <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
  8080ac:	e0c00217 	ldw	r3,8(fp)
  8080b0:	00800044 	movi	r2,1
  8080b4:	18800005 	stb	r2,0(r3)
                 return (0);
  8080b8:	e03fff15 	stw	zero,-4(fp)
  8080bc:	00016706 	br	80865c <OSEventPendMulti+0x69c>
        }
        pevents++;
  8080c0:	e0bff517 	ldw	r2,-44(fp)
  8080c4:	10800104 	addi	r2,r2,4
  8080c8:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
  8080cc:	e0bff517 	ldw	r2,-44(fp)
  8080d0:	10800017 	ldw	r2,0(r2)
  8080d4:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
  8080d8:	e0bff417 	ldw	r2,-48(fp)
  8080dc:	1004c03a 	cmpne	r2,r2,zero
  8080e0:	103fe51e 	bne	r2,zero,808078 <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
  8080e4:	d0a72203 	ldbu	r2,-25464(gp)
  8080e8:	10803fcc 	andi	r2,r2,255
  8080ec:	1005003a 	cmpeq	r2,r2,zero
  8080f0:	1000051e 	bne	r2,zero,808108 <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
  8080f4:	e0c00217 	ldw	r3,8(fp)
  8080f8:	00800084 	movi	r2,2
  8080fc:	18800005 	stb	r2,0(r3)
        return (0);
  808100:	e03fff15 	stw	zero,-4(fp)
  808104:	00015506 	br	80865c <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
  808108:	d0a71403 	ldbu	r2,-25520(gp)
  80810c:	10803fcc 	andi	r2,r2,255
  808110:	1005003a 	cmpeq	r2,r2,zero
  808114:	1000051e 	bne	r2,zero,80812c <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
  808118:	e0c00217 	ldw	r3,8(fp)
  80811c:	00800344 	movi	r2,13
  808120:	18800005 	stb	r2,0(r3)
        return (0);
  808124:	e03fff15 	stw	zero,-4(fp)
  808128:	00014c06 	br	80865c <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80812c:	0005303a 	rdctl	r2,status
  808130:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808134:	e0ffef17 	ldw	r3,-68(fp)
  808138:	00bfff84 	movi	r2,-2
  80813c:	1884703a 	and	r2,r3,r2
  808140:	1001703a 	wrctl	status,r2
  
  return context;
  808144:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
  808148:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
  80814c:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
  808150:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
  808154:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
  808158:	e0bff617 	ldw	r2,-40(fp)
  80815c:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
  808160:	e0bff517 	ldw	r2,-44(fp)
  808164:	10800017 	ldw	r2,0(r2)
  808168:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  80816c:	00008f06 	br	8083ac <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
  808170:	e0bff417 	ldw	r2,-48(fp)
  808174:	10800003 	ldbu	r2,0(r2)
  808178:	10803fcc 	andi	r2,r2,255
  80817c:	e0bffd15 	stw	r2,-12(fp)
  808180:	e0fffd17 	ldw	r3,-12(fp)
  808184:	188000a0 	cmpeqi	r2,r3,2
  808188:	1000441e 	bne	r2,zero,80829c <OSEventPendMulti+0x2dc>
  80818c:	e0fffd17 	ldw	r3,-12(fp)
  808190:	188000e0 	cmpeqi	r2,r3,3
  808194:	1000041e 	bne	r2,zero,8081a8 <OSEventPendMulti+0x1e8>
  808198:	e0fffd17 	ldw	r3,-12(fp)
  80819c:	18800060 	cmpeqi	r2,r3,1
  8081a0:	1000211e 	bne	r2,zero,808228 <OSEventPendMulti+0x268>
  8081a4:	00006f06 	br	808364 <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
  8081a8:	e0bff417 	ldw	r2,-48(fp)
  8081ac:	1080020b 	ldhu	r2,8(r2)
  8081b0:	10bfffcc 	andi	r2,r2,65535
  8081b4:	1005003a 	cmpeq	r2,r2,zero
  8081b8:	1000171e 	bne	r2,zero,808218 <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
  8081bc:	e0bff417 	ldw	r2,-48(fp)
  8081c0:	1080020b 	ldhu	r2,8(r2)
  8081c4:	10bfffc4 	addi	r2,r2,-1
  8081c8:	1007883a 	mov	r3,r2
  8081cc:	e0bff417 	ldw	r2,-48(fp)
  8081d0:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
  8081d4:	e0fff717 	ldw	r3,-36(fp)
  8081d8:	e0bff417 	ldw	r2,-48(fp)
  8081dc:	18800015 	stw	r2,0(r3)
  8081e0:	e0bff717 	ldw	r2,-36(fp)
  8081e4:	10800104 	addi	r2,r2,4
  8081e8:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
  8081ec:	00800044 	movi	r2,1
  8081f0:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
  8081f4:	e0bff817 	ldw	r2,-32(fp)
  8081f8:	10000015 	stw	zero,0(r2)
  8081fc:	e0bff817 	ldw	r2,-32(fp)
  808200:	10800104 	addi	r2,r2,4
  808204:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
  808208:	e0bff18b 	ldhu	r2,-58(fp)
  80820c:	10800044 	addi	r2,r2,1
  808210:	e0bff18d 	sth	r2,-58(fp)
  808214:	00005f06 	br	808394 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
  808218:	e0bff103 	ldbu	r2,-60(fp)
  80821c:	10800054 	ori	r2,r2,1
  808220:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  808224:	00005b06 	br	808394 <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
  808228:	e0bff417 	ldw	r2,-48(fp)
  80822c:	10800117 	ldw	r2,4(r2)
  808230:	1005003a 	cmpeq	r2,r2,zero
  808234:	1000151e 	bne	r2,zero,80828c <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
  808238:	e0bff417 	ldw	r2,-48(fp)
  80823c:	10c00117 	ldw	r3,4(r2)
  808240:	e0bff817 	ldw	r2,-32(fp)
  808244:	10c00015 	stw	r3,0(r2)
  808248:	e0bff817 	ldw	r2,-32(fp)
  80824c:	10800104 	addi	r2,r2,4
  808250:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
  808254:	e0bff417 	ldw	r2,-48(fp)
  808258:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
  80825c:	e0fff717 	ldw	r3,-36(fp)
  808260:	e0bff417 	ldw	r2,-48(fp)
  808264:	18800015 	stw	r2,0(r3)
  808268:	e0bff717 	ldw	r2,-36(fp)
  80826c:	10800104 	addi	r2,r2,4
  808270:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
  808274:	00800044 	movi	r2,1
  808278:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
  80827c:	e0bff18b 	ldhu	r2,-58(fp)
  808280:	10800044 	addi	r2,r2,1
  808284:	e0bff18d 	sth	r2,-58(fp)
  808288:	00004206 	br	808394 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
  80828c:	e0bff103 	ldbu	r2,-60(fp)
  808290:	10800094 	ori	r2,r2,2
  808294:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  808298:	00003e06 	br	808394 <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
  80829c:	e0bff417 	ldw	r2,-48(fp)
  8082a0:	10800117 	ldw	r2,4(r2)
  8082a4:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
  8082a8:	e0bff317 	ldw	r2,-52(fp)
  8082ac:	1080058b 	ldhu	r2,22(r2)
  8082b0:	10bfffcc 	andi	r2,r2,65535
  8082b4:	1005003a 	cmpeq	r2,r2,zero
  8082b8:	1000261e 	bne	r2,zero,808354 <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
  8082bc:	e0bff317 	ldw	r2,-52(fp)
  8082c0:	11000417 	ldw	r4,16(r2)
  8082c4:	20c00017 	ldw	r3,0(r4)
  8082c8:	e0bff817 	ldw	r2,-32(fp)
  8082cc:	10c00015 	stw	r3,0(r2)
  8082d0:	e0bff817 	ldw	r2,-32(fp)
  8082d4:	10800104 	addi	r2,r2,4
  8082d8:	e0bff815 	stw	r2,-32(fp)
  8082dc:	20c00104 	addi	r3,r4,4
  8082e0:	e0bff317 	ldw	r2,-52(fp)
  8082e4:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
  8082e8:	e0bff317 	ldw	r2,-52(fp)
  8082ec:	10c00417 	ldw	r3,16(r2)
  8082f0:	e0bff317 	ldw	r2,-52(fp)
  8082f4:	10800217 	ldw	r2,8(r2)
  8082f8:	1880041e 	bne	r3,r2,80830c <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
  8082fc:	e0bff317 	ldw	r2,-52(fp)
  808300:	10c00117 	ldw	r3,4(r2)
  808304:	e0bff317 	ldw	r2,-52(fp)
  808308:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
  80830c:	e0bff317 	ldw	r2,-52(fp)
  808310:	1080058b 	ldhu	r2,22(r2)
  808314:	10bfffc4 	addi	r2,r2,-1
  808318:	1007883a 	mov	r3,r2
  80831c:	e0bff317 	ldw	r2,-52(fp)
  808320:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
  808324:	e0fff717 	ldw	r3,-36(fp)
  808328:	e0bff417 	ldw	r2,-48(fp)
  80832c:	18800015 	stw	r2,0(r3)
  808330:	e0bff717 	ldw	r2,-36(fp)
  808334:	10800104 	addi	r2,r2,4
  808338:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
  80833c:	00800044 	movi	r2,1
  808340:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
  808344:	e0bff18b 	ldhu	r2,-58(fp)
  808348:	10800044 	addi	r2,r2,1
  80834c:	e0bff18d 	sth	r2,-58(fp)
  808350:	00001006 	br	808394 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
  808354:	e0bff103 	ldbu	r2,-60(fp)
  808358:	10800114 	ori	r2,r2,4
  80835c:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  808360:	00000c06 	br	808394 <OSEventPendMulti+0x3d4>
  808364:	e0bff017 	ldw	r2,-64(fp)
  808368:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80836c:	e0bfee17 	ldw	r2,-72(fp)
  808370:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
  808374:	e0bff717 	ldw	r2,-36(fp)
  808378:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
  80837c:	e0c00217 	ldw	r3,8(fp)
  808380:	00800044 	movi	r2,1
  808384:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
  808388:	e0bff18b 	ldhu	r2,-58(fp)
  80838c:	e0bfff15 	stw	r2,-4(fp)
  808390:	0000b206 	br	80865c <OSEventPendMulti+0x69c>
        }
        pevents++;
  808394:	e0bff517 	ldw	r2,-44(fp)
  808398:	10800104 	addi	r2,r2,4
  80839c:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
  8083a0:	e0bff517 	ldw	r2,-44(fp)
  8083a4:	10800017 	ldw	r2,0(r2)
  8083a8:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  8083ac:	e0bff417 	ldw	r2,-48(fp)
  8083b0:	1004c03a 	cmpne	r2,r2,zero
  8083b4:	103f6e1e 	bne	r2,zero,808170 <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
  8083b8:	e0bff203 	ldbu	r2,-56(fp)
  8083bc:	10800058 	cmpnei	r2,r2,1
  8083c0:	10000b1e 	bne	r2,zero,8083f0 <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
  8083c4:	e0bff717 	ldw	r2,-36(fp)
  8083c8:	10000015 	stw	zero,0(r2)
  8083cc:	e0bff017 	ldw	r2,-64(fp)
  8083d0:	e0bfed15 	stw	r2,-76(fp)
  8083d4:	e0bfed17 	ldw	r2,-76(fp)
  8083d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
  8083dc:	e0800217 	ldw	r2,8(fp)
  8083e0:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
  8083e4:	e0fff18b 	ldhu	r3,-58(fp)
  8083e8:	e0ffff15 	stw	r3,-4(fp)
  8083ec:	00009b06 	br	80865c <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
  8083f0:	d1272317 	ldw	r4,-25460(gp)
  8083f4:	d0a72317 	ldw	r2,-25460(gp)
  8083f8:	10c00c03 	ldbu	r3,48(r2)
  8083fc:	e0bff103 	ldbu	r2,-60(fp)
  808400:	1884b03a 	or	r2,r3,r2
  808404:	1007883a 	mov	r3,r2
  808408:	00bfe004 	movi	r2,-128
  80840c:	1884b03a 	or	r2,r3,r2
  808410:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  808414:	d0a72317 	ldw	r2,-25460(gp)
  808418:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
  80841c:	d0e72317 	ldw	r3,-25460(gp)
  808420:	e0bff90b 	ldhu	r2,-28(fp)
  808424:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
  808428:	e13ff617 	ldw	r4,-40(fp)
  80842c:	0808ff00 	call	808ff0 <OS_EventTaskWaitMulti>
  808430:	e0bff017 	ldw	r2,-64(fp)
  808434:	e0bfec15 	stw	r2,-80(fp)
  808438:	e0bfec17 	ldw	r2,-80(fp)
  80843c:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
  808440:	080978c0 	call	80978c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808444:	0005303a 	rdctl	r2,status
  808448:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80844c:	e0ffeb17 	ldw	r3,-84(fp)
  808450:	00bfff84 	movi	r2,-2
  808454:	1884703a 	and	r2,r3,r2
  808458:	1001703a 	wrctl	status,r2
  
  return context;
  80845c:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
  808460:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
  808464:	d0a72317 	ldw	r2,-25460(gp)
  808468:	10800c43 	ldbu	r2,49(r2)
  80846c:	10803fcc 	andi	r2,r2,255
  808470:	e0bffc15 	stw	r2,-16(fp)
  808474:	e0fffc17 	ldw	r3,-16(fp)
  808478:	1805003a 	cmpeq	r2,r3,zero
  80847c:	1000041e 	bne	r2,zero,808490 <OSEventPendMulti+0x4d0>
  808480:	e0fffc17 	ldw	r3,-16(fp)
  808484:	188000a0 	cmpeqi	r2,r3,2
  808488:	1000011e 	bne	r2,zero,808490 <OSEventPendMulti+0x4d0>
  80848c:	00001906 	br	8084f4 <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
  808490:	d0a72317 	ldw	r2,-25460(gp)
  808494:	10800717 	ldw	r2,28(r2)
  808498:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
  80849c:	e0bff417 	ldw	r2,-48(fp)
  8084a0:	1005003a 	cmpeq	r2,r2,zero
  8084a4:	10000c1e 	bne	r2,zero,8084d8 <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
  8084a8:	e0fff717 	ldw	r3,-36(fp)
  8084ac:	e0bff417 	ldw	r2,-48(fp)
  8084b0:	18800015 	stw	r2,0(r3)
  8084b4:	e0bff717 	ldw	r2,-36(fp)
  8084b8:	10800104 	addi	r2,r2,4
  8084bc:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
  8084c0:	e0bff717 	ldw	r2,-36(fp)
  8084c4:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
  8084c8:	e0bff18b 	ldhu	r2,-58(fp)
  8084cc:	10800044 	addi	r2,r2,1
  8084d0:	e0bff18d 	sth	r2,-58(fp)
  8084d4:	00000a06 	br	808500 <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
  8084d8:	d0a72317 	ldw	r2,-25460(gp)
  8084dc:	00c00044 	movi	r3,1
  8084e0:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  8084e4:	d1272317 	ldw	r4,-25460(gp)
  8084e8:	e17ff617 	ldw	r5,-40(fp)
  8084ec:	08091fc0 	call	8091fc <OS_EventTaskRemoveMulti>
             }
			 break;
  8084f0:	00000306 	br	808500 <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  8084f4:	d1272317 	ldw	r4,-25460(gp)
  8084f8:	e17ff617 	ldw	r5,-40(fp)
  8084fc:	08091fc0 	call	8091fc <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
  808500:	d0a72317 	ldw	r2,-25460(gp)
  808504:	10800c43 	ldbu	r2,49(r2)
  808508:	10803fcc 	andi	r2,r2,255
  80850c:	e0bffb15 	stw	r2,-20(fp)
  808510:	e0fffb17 	ldw	r3,-20(fp)
  808514:	1805003a 	cmpeq	r2,r3,zero
  808518:	1000041e 	bne	r2,zero,80852c <OSEventPendMulti+0x56c>
  80851c:	e0fffb17 	ldw	r3,-20(fp)
  808520:	188000a0 	cmpeqi	r2,r3,2
  808524:	10002c1e 	bne	r2,zero,8085d8 <OSEventPendMulti+0x618>
  808528:	00003406 	br	8085fc <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
  80852c:	e0bff417 	ldw	r2,-48(fp)
  808530:	10800003 	ldbu	r2,0(r2)
  808534:	10803fcc 	andi	r2,r2,255
  808538:	e0bffa15 	stw	r2,-24(fp)
  80853c:	e0fffa17 	ldw	r3,-24(fp)
  808540:	18800050 	cmplti	r2,r3,1
  808544:	1000151e 	bne	r2,zero,80859c <OSEventPendMulti+0x5dc>
  808548:	e0fffa17 	ldw	r3,-24(fp)
  80854c:	188000d0 	cmplti	r2,r3,3
  808550:	10000a1e 	bne	r2,zero,80857c <OSEventPendMulti+0x5bc>
  808554:	e0fffa17 	ldw	r3,-24(fp)
  808558:	188000e0 	cmpeqi	r2,r3,3
  80855c:	1000011e 	bne	r2,zero,808564 <OSEventPendMulti+0x5a4>
  808560:	00000e06 	br	80859c <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
  808564:	e0bff817 	ldw	r2,-32(fp)
  808568:	10000015 	stw	zero,0(r2)
  80856c:	e0bff817 	ldw	r2,-32(fp)
  808570:	10800104 	addi	r2,r2,4
  808574:	e0bff815 	stw	r2,-32(fp)
                      break;
  808578:	00001406 	br	8085cc <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
  80857c:	d0a72317 	ldw	r2,-25460(gp)
  808580:	10c00917 	ldw	r3,36(r2)
  808584:	e0bff817 	ldw	r2,-32(fp)
  808588:	10c00015 	stw	r3,0(r2)
  80858c:	e0bff817 	ldw	r2,-32(fp)
  808590:	10800104 	addi	r2,r2,4
  808594:	e0bff815 	stw	r2,-32(fp)
                      break;
  808598:	00000c06 	br	8085cc <OSEventPendMulti+0x60c>
  80859c:	e0bff017 	ldw	r2,-64(fp)
  8085a0:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8085a4:	e0bfea17 	ldw	r2,-88(fp)
  8085a8:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
  8085ac:	e0bff717 	ldw	r2,-36(fp)
  8085b0:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
  8085b4:	e0c00217 	ldw	r3,8(fp)
  8085b8:	00800044 	movi	r2,1
  8085bc:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
  8085c0:	e0bff18b 	ldhu	r2,-58(fp)
  8085c4:	e0bfff15 	stw	r2,-4(fp)
  8085c8:	00002406 	br	80865c <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
  8085cc:	e0800217 	ldw	r2,8(fp)
  8085d0:	10000005 	stb	zero,0(r2)
             break;
  8085d4:	00001106 	br	80861c <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
  8085d8:	e0bff817 	ldw	r2,-32(fp)
  8085dc:	10000015 	stw	zero,0(r2)
  8085e0:	e0bff817 	ldw	r2,-32(fp)
  8085e4:	10800104 	addi	r2,r2,4
  8085e8:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
  8085ec:	e0c00217 	ldw	r3,8(fp)
  8085f0:	00800384 	movi	r2,14
  8085f4:	18800005 	stb	r2,0(r3)
             break;
  8085f8:	00000806 	br	80861c <OSEventPendMulti+0x65c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
  8085fc:	e0bff817 	ldw	r2,-32(fp)
  808600:	10000015 	stw	zero,0(r2)
  808604:	e0bff817 	ldw	r2,-32(fp)
  808608:	10800104 	addi	r2,r2,4
  80860c:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
  808610:	e0c00217 	ldw	r3,8(fp)
  808614:	00800284 	movi	r2,10
  808618:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
  80861c:	d0a72317 	ldw	r2,-25460(gp)
  808620:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
  808624:	d0a72317 	ldw	r2,-25460(gp)
  808628:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
  80862c:	d0a72317 	ldw	r2,-25460(gp)
  808630:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  808634:	d0a72317 	ldw	r2,-25460(gp)
  808638:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
  80863c:	d0a72317 	ldw	r2,-25460(gp)
  808640:	10000915 	stw	zero,36(r2)
  808644:	e0bff017 	ldw	r2,-64(fp)
  808648:	e0bfe915 	stw	r2,-92(fp)
  80864c:	e0bfe917 	ldw	r2,-92(fp)
  808650:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
  808654:	e0fff18b 	ldhu	r3,-58(fp)
  808658:	e0ffff15 	stw	r3,-4(fp)
  80865c:	e0bfff17 	ldw	r2,-4(fp)
}
  808660:	e037883a 	mov	sp,fp
  808664:	dfc00117 	ldw	ra,4(sp)
  808668:	df000017 	ldw	fp,0(sp)
  80866c:	dec00204 	addi	sp,sp,8
  808670:	f800283a 	ret

00808674 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
  808674:	defffe04 	addi	sp,sp,-8
  808678:	dfc00115 	stw	ra,4(sp)
  80867c:	df000015 	stw	fp,0(sp)
  808680:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
  808684:	08139bc0 	call	8139bc <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
  808688:	08094440 	call	809444 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
  80868c:	08094880 	call	809488 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
  808690:	08095ec0 	call	8095ec <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
  808694:	08093680 	call	809368 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
  808698:	080b69c0 	call	80b69c <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
  80869c:	080c0740 	call	80c074 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
  8086a0:	080d3cc0 	call	80d3cc <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
  8086a4:	08094f40 	call	8094f4 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
  8086a8:	08095700 	call	809570 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
  8086ac:	08139d80 	call	8139d8 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
  8086b0:	0809e740 	call	809e74 <OSDebugInit>
#endif
}
  8086b4:	e037883a 	mov	sp,fp
  8086b8:	dfc00117 	ldw	ra,4(sp)
  8086bc:	df000017 	ldw	fp,0(sp)
  8086c0:	dec00204 	addi	sp,sp,8
  8086c4:	f800283a 	ret

008086c8 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
  8086c8:	defffc04 	addi	sp,sp,-16
  8086cc:	df000315 	stw	fp,12(sp)
  8086d0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8086d4:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
  8086d8:	d0a71443 	ldbu	r2,-25519(gp)
  8086dc:	10803fcc 	andi	r2,r2,255
  8086e0:	10800058 	cmpnei	r2,r2,1
  8086e4:	1000131e 	bne	r2,zero,808734 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8086e8:	0005303a 	rdctl	r2,status
  8086ec:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8086f0:	e0fffe17 	ldw	r3,-8(fp)
  8086f4:	00bfff84 	movi	r2,-2
  8086f8:	1884703a 	and	r2,r3,r2
  8086fc:	1001703a 	wrctl	status,r2
  
  return context;
  808700:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  808704:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
  808708:	d0a72203 	ldbu	r2,-25464(gp)
  80870c:	10803fcc 	andi	r2,r2,255
  808710:	10803fe0 	cmpeqi	r2,r2,255
  808714:	1000031e 	bne	r2,zero,808724 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
  808718:	d0a72203 	ldbu	r2,-25464(gp)
  80871c:	10800044 	addi	r2,r2,1
  808720:	d0a72205 	stb	r2,-25464(gp)
  808724:	e0bfff17 	ldw	r2,-4(fp)
  808728:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80872c:	e0bffd17 	ldw	r2,-12(fp)
  808730:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
  808734:	e037883a 	mov	sp,fp
  808738:	df000017 	ldw	fp,0(sp)
  80873c:	dec00104 	addi	sp,sp,4
  808740:	f800283a 	ret

00808744 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
  808744:	defffb04 	addi	sp,sp,-20
  808748:	dfc00415 	stw	ra,16(sp)
  80874c:	df000315 	stw	fp,12(sp)
  808750:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  808754:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
  808758:	d0a71443 	ldbu	r2,-25519(gp)
  80875c:	10803fcc 	andi	r2,r2,255
  808760:	10800058 	cmpnei	r2,r2,1
  808764:	1000321e 	bne	r2,zero,808830 <OSIntExit+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808768:	0005303a 	rdctl	r2,status
  80876c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808770:	e0fffe17 	ldw	r3,-8(fp)
  808774:	00bfff84 	movi	r2,-2
  808778:	1884703a 	and	r2,r3,r2
  80877c:	1001703a 	wrctl	status,r2
  
  return context;
  808780:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  808784:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
  808788:	d0a72203 	ldbu	r2,-25464(gp)
  80878c:	10803fcc 	andi	r2,r2,255
  808790:	1005003a 	cmpeq	r2,r2,zero
  808794:	1000031e 	bne	r2,zero,8087a4 <OSIntExit+0x60>
            OSIntNesting--;
  808798:	d0a72203 	ldbu	r2,-25464(gp)
  80879c:	10bfffc4 	addi	r2,r2,-1
  8087a0:	d0a72205 	stb	r2,-25464(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
  8087a4:	d0a72203 	ldbu	r2,-25464(gp)
  8087a8:	10803fcc 	andi	r2,r2,255
  8087ac:	1004c03a 	cmpne	r2,r2,zero
  8087b0:	10001b1e 	bne	r2,zero,808820 <OSIntExit+0xdc>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
  8087b4:	d0a71403 	ldbu	r2,-25520(gp)
  8087b8:	10803fcc 	andi	r2,r2,255
  8087bc:	1004c03a 	cmpne	r2,r2,zero
  8087c0:	1000171e 	bne	r2,zero,808820 <OSIntExit+0xdc>
                OS_SchedNew();
  8087c4:	08098600 	call	809860 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
  8087c8:	d0a71603 	ldbu	r2,-25512(gp)
  8087cc:	d0e71643 	ldbu	r3,-25511(gp)
  8087d0:	11003fcc 	andi	r4,r2,255
  8087d4:	18803fcc 	andi	r2,r3,255
  8087d8:	20801126 	beq	r4,r2,808820 <OSIntExit+0xdc>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
  8087dc:	d0a71603 	ldbu	r2,-25512(gp)
  8087e0:	10803fcc 	andi	r2,r2,255
  8087e4:	00c020b4 	movhi	r3,130
  8087e8:	18fbd304 	addi	r3,r3,-4276
  8087ec:	1085883a 	add	r2,r2,r2
  8087f0:	1085883a 	add	r2,r2,r2
  8087f4:	10c5883a 	add	r2,r2,r3
  8087f8:	10800017 	ldw	r2,0(r2)
  8087fc:	d0a71e15 	stw	r2,-25480(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
  808800:	d0e71e17 	ldw	r3,-25480(gp)
  808804:	18800e17 	ldw	r2,56(r3)
  808808:	10800044 	addi	r2,r2,1
  80880c:	18800e15 	stw	r2,56(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
  808810:	d0a71917 	ldw	r2,-25500(gp)
  808814:	10800044 	addi	r2,r2,1
  808818:	d0a71915 	stw	r2,-25500(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
  80881c:	08135480 	call	813548 <OSCtxSw>
  808820:	e0bfff17 	ldw	r2,-4(fp)
  808824:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808828:	e0bffd17 	ldw	r2,-12(fp)
  80882c:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  808830:	e037883a 	mov	sp,fp
  808834:	dfc00117 	ldw	ra,4(sp)
  808838:	df000017 	ldw	fp,0(sp)
  80883c:	dec00204 	addi	sp,sp,8
  808840:	f800283a 	ret

00808844 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
  808844:	defffc04 	addi	sp,sp,-16
  808848:	df000315 	stw	fp,12(sp)
  80884c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  808850:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
  808854:	d0a71443 	ldbu	r2,-25519(gp)
  808858:	10803fcc 	andi	r2,r2,255
  80885c:	10800058 	cmpnei	r2,r2,1
  808860:	1000171e 	bne	r2,zero,8088c0 <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808864:	0005303a 	rdctl	r2,status
  808868:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80886c:	e0fffe17 	ldw	r3,-8(fp)
  808870:	00bfff84 	movi	r2,-2
  808874:	1884703a 	and	r2,r3,r2
  808878:	1001703a 	wrctl	status,r2
  
  return context;
  80887c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  808880:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
  808884:	d0a72203 	ldbu	r2,-25464(gp)
  808888:	10803fcc 	andi	r2,r2,255
  80888c:	1004c03a 	cmpne	r2,r2,zero
  808890:	1000071e 	bne	r2,zero,8088b0 <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
  808894:	d0a71403 	ldbu	r2,-25520(gp)
  808898:	10803fcc 	andi	r2,r2,255
  80889c:	10803fe0 	cmpeqi	r2,r2,255
  8088a0:	1000031e 	bne	r2,zero,8088b0 <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
  8088a4:	d0a71403 	ldbu	r2,-25520(gp)
  8088a8:	10800044 	addi	r2,r2,1
  8088ac:	d0a71405 	stb	r2,-25520(gp)
  8088b0:	e0bfff17 	ldw	r2,-4(fp)
  8088b4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8088b8:	e0bffd17 	ldw	r2,-12(fp)
  8088bc:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  8088c0:	e037883a 	mov	sp,fp
  8088c4:	df000017 	ldw	fp,0(sp)
  8088c8:	dec00104 	addi	sp,sp,4
  8088cc:	f800283a 	ret

008088d0 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
  8088d0:	defff804 	addi	sp,sp,-32
  8088d4:	dfc00715 	stw	ra,28(sp)
  8088d8:	df000615 	stw	fp,24(sp)
  8088dc:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8088e0:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
  8088e4:	d0a71443 	ldbu	r2,-25519(gp)
  8088e8:	10803fcc 	andi	r2,r2,255
  8088ec:	10800058 	cmpnei	r2,r2,1
  8088f0:	10002b1e 	bne	r2,zero,8089a0 <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8088f4:	0005303a 	rdctl	r2,status
  8088f8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8088fc:	e0fffe17 	ldw	r3,-8(fp)
  808900:	00bfff84 	movi	r2,-2
  808904:	1884703a 	and	r2,r3,r2
  808908:	1001703a 	wrctl	status,r2
  
  return context;
  80890c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  808910:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
  808914:	d0a71403 	ldbu	r2,-25520(gp)
  808918:	10803fcc 	andi	r2,r2,255
  80891c:	1005003a 	cmpeq	r2,r2,zero
  808920:	10001b1e 	bne	r2,zero,808990 <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
  808924:	d0a71403 	ldbu	r2,-25520(gp)
  808928:	10bfffc4 	addi	r2,r2,-1
  80892c:	d0a71405 	stb	r2,-25520(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
  808930:	d0a71403 	ldbu	r2,-25520(gp)
  808934:	10803fcc 	andi	r2,r2,255
  808938:	1004c03a 	cmpne	r2,r2,zero
  80893c:	10000f1e 	bne	r2,zero,80897c <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
  808940:	d0a72203 	ldbu	r2,-25464(gp)
  808944:	10803fcc 	andi	r2,r2,255
  808948:	1004c03a 	cmpne	r2,r2,zero
  80894c:	1000061e 	bne	r2,zero,808968 <OSSchedUnlock+0x98>
  808950:	e0bfff17 	ldw	r2,-4(fp)
  808954:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808958:	e0bffd17 	ldw	r2,-12(fp)
  80895c:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
  808960:	080978c0 	call	80978c <OS_Sched>
  808964:	00000e06 	br	8089a0 <OSSchedUnlock+0xd0>
  808968:	e0bfff17 	ldw	r2,-4(fp)
  80896c:	e0bffc15 	stw	r2,-16(fp)
  808970:	e0bffc17 	ldw	r2,-16(fp)
  808974:	1001703a 	wrctl	status,r2
  808978:	00000906 	br	8089a0 <OSSchedUnlock+0xd0>
  80897c:	e0bfff17 	ldw	r2,-4(fp)
  808980:	e0bffb15 	stw	r2,-20(fp)
  808984:	e0bffb17 	ldw	r2,-20(fp)
  808988:	1001703a 	wrctl	status,r2
  80898c:	00000406 	br	8089a0 <OSSchedUnlock+0xd0>
  808990:	e0bfff17 	ldw	r2,-4(fp)
  808994:	e0bffa15 	stw	r2,-24(fp)
  808998:	e0bffa17 	ldw	r2,-24(fp)
  80899c:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
  8089a0:	e037883a 	mov	sp,fp
  8089a4:	dfc00117 	ldw	ra,4(sp)
  8089a8:	df000017 	ldw	fp,0(sp)
  8089ac:	dec00204 	addi	sp,sp,8
  8089b0:	f800283a 	ret

008089b4 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
  8089b4:	defffe04 	addi	sp,sp,-8
  8089b8:	dfc00115 	stw	ra,4(sp)
  8089bc:	df000015 	stw	fp,0(sp)
  8089c0:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
  8089c4:	d0a71443 	ldbu	r2,-25519(gp)
  8089c8:	10803fcc 	andi	r2,r2,255
  8089cc:	1004c03a 	cmpne	r2,r2,zero
  8089d0:	10000f1e 	bne	r2,zero,808a10 <OSStart+0x5c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
  8089d4:	08098600 	call	809860 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
  8089d8:	d0a71603 	ldbu	r2,-25512(gp)
  8089dc:	d0a71645 	stb	r2,-25511(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
  8089e0:	d0a71603 	ldbu	r2,-25512(gp)
  8089e4:	10803fcc 	andi	r2,r2,255
  8089e8:	00c020b4 	movhi	r3,130
  8089ec:	18fbd304 	addi	r3,r3,-4276
  8089f0:	1085883a 	add	r2,r2,r2
  8089f4:	1085883a 	add	r2,r2,r2
  8089f8:	10c5883a 	add	r2,r2,r3
  8089fc:	10800017 	ldw	r2,0(r2)
  808a00:	d0a71e15 	stw	r2,-25480(gp)
        OSTCBCur      = OSTCBHighRdy;
  808a04:	d0a71e17 	ldw	r2,-25480(gp)
  808a08:	d0a72315 	stw	r2,-25460(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
  808a0c:	08135d40 	call	8135d4 <OSStartHighRdy>
    }
}
  808a10:	e037883a 	mov	sp,fp
  808a14:	dfc00117 	ldw	ra,4(sp)
  808a18:	df000017 	ldw	fp,0(sp)
  808a1c:	dec00204 	addi	sp,sp,8
  808a20:	f800283a 	ret

00808a24 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
  808a24:	defff904 	addi	sp,sp,-28
  808a28:	dfc00615 	stw	ra,24(sp)
  808a2c:	df000515 	stw	fp,20(sp)
  808a30:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  808a34:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
  808a38:	01000084 	movi	r4,2
  808a3c:	080fa800 	call	80fa80 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808a40:	0005303a 	rdctl	r2,status
  808a44:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808a48:	e0fffe17 	ldw	r3,-8(fp)
  808a4c:	00bfff84 	movi	r2,-2
  808a50:	1884703a 	and	r2,r3,r2
  808a54:	1001703a 	wrctl	status,r2
  
  return context;
  808a58:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
  808a5c:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
  808a60:	d0271515 	stw	zero,-25516(gp)
  808a64:	e0bfff17 	ldw	r2,-4(fp)
  808a68:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808a6c:	e0bffd17 	ldw	r2,-12(fp)
  808a70:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
  808a74:	01001904 	movi	r4,100
  808a78:	080fa800 	call	80fa80 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808a7c:	0005303a 	rdctl	r2,status
  808a80:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808a84:	e0fffc17 	ldw	r3,-16(fp)
  808a88:	00bfff84 	movi	r2,-2
  808a8c:	1884703a 	and	r2,r3,r2
  808a90:	1001703a 	wrctl	status,r2
  
  return context;
  808a94:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
  808a98:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
  808a9c:	d0a71517 	ldw	r2,-25516(gp)
  808aa0:	d0a71a15 	stw	r2,-25496(gp)
    OSStatRdy    = OS_TRUE;
  808aa4:	00800044 	movi	r2,1
  808aa8:	d0a72605 	stb	r2,-25448(gp)
  808aac:	e0bfff17 	ldw	r2,-4(fp)
  808ab0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808ab4:	e0bffb17 	ldw	r2,-20(fp)
  808ab8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  808abc:	e037883a 	mov	sp,fp
  808ac0:	dfc00117 	ldw	ra,4(sp)
  808ac4:	df000017 	ldw	fp,0(sp)
  808ac8:	dec00204 	addi	sp,sp,8
  808acc:	f800283a 	ret

00808ad0 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
  808ad0:	defff604 	addi	sp,sp,-40
  808ad4:	dfc00915 	stw	ra,36(sp)
  808ad8:	df000815 	stw	fp,32(sp)
  808adc:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  808ae0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
  808ae4:	08139a00 	call	8139a0 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808ae8:	0005303a 	rdctl	r2,status
  808aec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808af0:	e0fffb17 	ldw	r3,-20(fp)
  808af4:	00bfff84 	movi	r2,-2
  808af8:	1884703a 	and	r2,r3,r2
  808afc:	1001703a 	wrctl	status,r2
  
  return context;
  808b00:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
  808b04:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
  808b08:	d0a72417 	ldw	r2,-25456(gp)
  808b0c:	10800044 	addi	r2,r2,1
  808b10:	d0a72415 	stw	r2,-25456(gp)
  808b14:	e0bffc17 	ldw	r2,-16(fp)
  808b18:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808b1c:	e0bffa17 	ldw	r2,-24(fp)
  808b20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
  808b24:	d0a71443 	ldbu	r2,-25519(gp)
  808b28:	10803fcc 	andi	r2,r2,255
  808b2c:	10800058 	cmpnei	r2,r2,1
  808b30:	1000721e 	bne	r2,zero,808cfc <OSTimeTick+0x22c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
  808b34:	d0a71803 	ldbu	r2,-25504(gp)
  808b38:	10803fcc 	andi	r2,r2,255
  808b3c:	e0bfff15 	stw	r2,-4(fp)
  808b40:	e0ffff17 	ldw	r3,-4(fp)
  808b44:	18800060 	cmpeqi	r2,r3,1
  808b48:	10000a1e 	bne	r2,zero,808b74 <OSTimeTick+0xa4>
  808b4c:	e0ffff17 	ldw	r3,-4(fp)
  808b50:	188000a0 	cmpeqi	r2,r3,2
  808b54:	1000091e 	bne	r2,zero,808b7c <OSTimeTick+0xac>
  808b58:	e0ffff17 	ldw	r3,-4(fp)
  808b5c:	1805003a 	cmpeq	r2,r3,zero
  808b60:	1000011e 	bne	r2,zero,808b68 <OSTimeTick+0x98>
  808b64:	00000a06 	br	808b90 <OSTimeTick+0xc0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
  808b68:	00800044 	movi	r2,1
  808b6c:	e0bffd05 	stb	r2,-12(fp)
                 break;
  808b70:	00000a06 	br	808b9c <OSTimeTick+0xcc>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
  808b74:	e03ffd05 	stb	zero,-12(fp)
                 break;
  808b78:	00000806 	br	808b9c <OSTimeTick+0xcc>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
  808b7c:	00800044 	movi	r2,1
  808b80:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
  808b84:	00800044 	movi	r2,1
  808b88:	d0a71805 	stb	r2,-25504(gp)
                 break;
  808b8c:	00000306 	br	808b9c <OSTimeTick+0xcc>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
  808b90:	00800044 	movi	r2,1
  808b94:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
  808b98:	d0271805 	stb	zero,-25504(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
  808b9c:	e0bffd03 	ldbu	r2,-12(fp)
  808ba0:	1005003a 	cmpeq	r2,r2,zero
  808ba4:	1000551e 	bne	r2,zero,808cfc <OSTimeTick+0x22c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
  808ba8:	d0a71717 	ldw	r2,-25508(gp)
  808bac:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  808bb0:	00004d06 	br	808ce8 <OSTimeTick+0x218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808bb4:	0005303a 	rdctl	r2,status
  808bb8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808bbc:	e0fff917 	ldw	r3,-28(fp)
  808bc0:	00bfff84 	movi	r2,-2
  808bc4:	1884703a 	and	r2,r3,r2
  808bc8:	1001703a 	wrctl	status,r2
  
  return context;
  808bcc:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
  808bd0:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
  808bd4:	e0bffe17 	ldw	r2,-8(fp)
  808bd8:	10800b8b 	ldhu	r2,46(r2)
  808bdc:	10bfffcc 	andi	r2,r2,65535
  808be0:	1005003a 	cmpeq	r2,r2,zero
  808be4:	1000391e 	bne	r2,zero,808ccc <OSTimeTick+0x1fc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
  808be8:	e0bffe17 	ldw	r2,-8(fp)
  808bec:	10800b8b 	ldhu	r2,46(r2)
  808bf0:	10bfffc4 	addi	r2,r2,-1
  808bf4:	1007883a 	mov	r3,r2
  808bf8:	e0bffe17 	ldw	r2,-8(fp)
  808bfc:	10c00b8d 	sth	r3,46(r2)
  808c00:	e0bffe17 	ldw	r2,-8(fp)
  808c04:	10800b8b 	ldhu	r2,46(r2)
  808c08:	10bfffcc 	andi	r2,r2,65535
  808c0c:	1004c03a 	cmpne	r2,r2,zero
  808c10:	10002e1e 	bne	r2,zero,808ccc <OSTimeTick+0x1fc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  808c14:	e0bffe17 	ldw	r2,-8(fp)
  808c18:	10800c03 	ldbu	r2,48(r2)
  808c1c:	10803fcc 	andi	r2,r2,255
  808c20:	10800dcc 	andi	r2,r2,55
  808c24:	1005003a 	cmpeq	r2,r2,zero
  808c28:	10000b1e 	bne	r2,zero,808c58 <OSTimeTick+0x188>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
  808c2c:	e0bffe17 	ldw	r2,-8(fp)
  808c30:	10c00c03 	ldbu	r3,48(r2)
  808c34:	00bff204 	movi	r2,-56
  808c38:	1884703a 	and	r2,r3,r2
  808c3c:	1007883a 	mov	r3,r2
  808c40:	e0bffe17 	ldw	r2,-8(fp)
  808c44:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
  808c48:	e0fffe17 	ldw	r3,-8(fp)
  808c4c:	00800044 	movi	r2,1
  808c50:	18800c45 	stb	r2,49(r3)
  808c54:	00000206 	br	808c60 <OSTimeTick+0x190>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  808c58:	e0bffe17 	ldw	r2,-8(fp)
  808c5c:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
  808c60:	e0bffe17 	ldw	r2,-8(fp)
  808c64:	10800c03 	ldbu	r2,48(r2)
  808c68:	10803fcc 	andi	r2,r2,255
  808c6c:	1080020c 	andi	r2,r2,8
  808c70:	1004c03a 	cmpne	r2,r2,zero
  808c74:	1000151e 	bne	r2,zero,808ccc <OSTimeTick+0x1fc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
  808c78:	e0bffe17 	ldw	r2,-8(fp)
  808c7c:	10c00d83 	ldbu	r3,54(r2)
  808c80:	d0a72003 	ldbu	r2,-25472(gp)
  808c84:	1884b03a 	or	r2,r3,r2
  808c88:	d0a72005 	stb	r2,-25472(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  808c8c:	e0bffe17 	ldw	r2,-8(fp)
  808c90:	10800d03 	ldbu	r2,52(r2)
  808c94:	11003fcc 	andi	r4,r2,255
  808c98:	e0bffe17 	ldw	r2,-8(fp)
  808c9c:	10800d03 	ldbu	r2,52(r2)
  808ca0:	10c03fcc 	andi	r3,r2,255
  808ca4:	d0a72044 	addi	r2,gp,-25471
  808ca8:	1885883a 	add	r2,r3,r2
  808cac:	10c00003 	ldbu	r3,0(r2)
  808cb0:	e0bffe17 	ldw	r2,-8(fp)
  808cb4:	10800d43 	ldbu	r2,53(r2)
  808cb8:	1884b03a 	or	r2,r3,r2
  808cbc:	1007883a 	mov	r3,r2
  808cc0:	d0a72044 	addi	r2,gp,-25471
  808cc4:	2085883a 	add	r2,r4,r2
  808cc8:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
  808ccc:	e0bffe17 	ldw	r2,-8(fp)
  808cd0:	10800517 	ldw	r2,20(r2)
  808cd4:	e0bffe15 	stw	r2,-8(fp)
  808cd8:	e0bffc17 	ldw	r2,-16(fp)
  808cdc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808ce0:	e0bff817 	ldw	r2,-32(fp)
  808ce4:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  808ce8:	e0bffe17 	ldw	r2,-8(fp)
  808cec:	10800c83 	ldbu	r2,50(r2)
  808cf0:	10803fcc 	andi	r2,r2,255
  808cf4:	10800518 	cmpnei	r2,r2,20
  808cf8:	103fae1e 	bne	r2,zero,808bb4 <OSTimeTick+0xe4>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
  808cfc:	e037883a 	mov	sp,fp
  808d00:	dfc00117 	ldw	ra,4(sp)
  808d04:	df000017 	ldw	fp,0(sp)
  808d08:	dec00204 	addi	sp,sp,8
  808d0c:	f800283a 	ret

00808d10 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
  808d10:	deffff04 	addi	sp,sp,-4
  808d14:	df000015 	stw	fp,0(sp)
  808d18:	d839883a 	mov	fp,sp
    return (OS_VERSION);
  808d1c:	00804784 	movi	r2,286
}
  808d20:	e037883a 	mov	sp,fp
  808d24:	df000017 	ldw	fp,0(sp)
  808d28:	dec00104 	addi	sp,sp,4
  808d2c:	f800283a 	ret

00808d30 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
  808d30:	deffff04 	addi	sp,sp,-4
  808d34:	df000015 	stw	fp,0(sp)
  808d38:	d839883a 	mov	fp,sp
}
  808d3c:	e037883a 	mov	sp,fp
  808d40:	df000017 	ldw	fp,0(sp)
  808d44:	dec00104 	addi	sp,sp,4
  808d48:	f800283a 	ret

00808d4c <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
  808d4c:	defff804 	addi	sp,sp,-32
  808d50:	dfc00715 	stw	ra,28(sp)
  808d54:	df000615 	stw	fp,24(sp)
  808d58:	df000604 	addi	fp,sp,24
  808d5c:	e13ffc15 	stw	r4,-16(fp)
  808d60:	e17ffd15 	stw	r5,-12(fp)
  808d64:	e1bffe05 	stb	r6,-8(fp)
  808d68:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
  808d6c:	e0bffc17 	ldw	r2,-16(fp)
  808d70:	10800283 	ldbu	r2,10(r2)
  808d74:	10c03fcc 	andi	r3,r2,255
  808d78:	00802074 	movhi	r2,129
  808d7c:	10912004 	addi	r2,r2,17536
  808d80:	10c5883a 	add	r2,r2,r3
  808d84:	10800003 	ldbu	r2,0(r2)
  808d88:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
  808d8c:	e0fffa83 	ldbu	r3,-22(fp)
  808d90:	e0bffc17 	ldw	r2,-16(fp)
  808d94:	1885883a 	add	r2,r3,r2
  808d98:	10800204 	addi	r2,r2,8
  808d9c:	108000c3 	ldbu	r2,3(r2)
  808da0:	10c03fcc 	andi	r3,r2,255
  808da4:	00802074 	movhi	r2,129
  808da8:	10912004 	addi	r2,r2,17536
  808dac:	10c5883a 	add	r2,r2,r3
  808db0:	10800003 	ldbu	r2,0(r2)
  808db4:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
  808db8:	e0bffa83 	ldbu	r2,-22(fp)
  808dbc:	100490fa 	slli	r2,r2,3
  808dc0:	1007883a 	mov	r3,r2
  808dc4:	e0bffa43 	ldbu	r2,-23(fp)
  808dc8:	1885883a 	add	r2,r3,r2
  808dcc:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
  808dd0:	e0bffa03 	ldbu	r2,-24(fp)
  808dd4:	00c020b4 	movhi	r3,130
  808dd8:	18fbd304 	addi	r3,r3,-4276
  808ddc:	1085883a 	add	r2,r2,r2
  808de0:	1085883a 	add	r2,r2,r2
  808de4:	10c5883a 	add	r2,r2,r3
  808de8:	10800017 	ldw	r2,0(r2)
  808dec:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
  808df0:	e0bffb17 	ldw	r2,-20(fp)
  808df4:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
  808df8:	e0fffb17 	ldw	r3,-20(fp)
  808dfc:	e0bffd17 	ldw	r2,-12(fp)
  808e00:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
  808e04:	e0bffb17 	ldw	r2,-20(fp)
  808e08:	10800c03 	ldbu	r2,48(r2)
  808e0c:	1007883a 	mov	r3,r2
  808e10:	e0bffe03 	ldbu	r2,-8(fp)
  808e14:	0084303a 	nor	r2,zero,r2
  808e18:	1884703a 	and	r2,r3,r2
  808e1c:	1007883a 	mov	r3,r2
  808e20:	e0bffb17 	ldw	r2,-20(fp)
  808e24:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
  808e28:	e0fffb17 	ldw	r3,-20(fp)
  808e2c:	e0bfff03 	ldbu	r2,-4(fp)
  808e30:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
  808e34:	e0bffb17 	ldw	r2,-20(fp)
  808e38:	10800c03 	ldbu	r2,48(r2)
  808e3c:	10803fcc 	andi	r2,r2,255
  808e40:	1080020c 	andi	r2,r2,8
  808e44:	1004c03a 	cmpne	r2,r2,zero
  808e48:	1000111e 	bne	r2,zero,808e90 <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
  808e4c:	e0bffb17 	ldw	r2,-20(fp)
  808e50:	10c00d83 	ldbu	r3,54(r2)
  808e54:	d0a72003 	ldbu	r2,-25472(gp)
  808e58:	1884b03a 	or	r2,r3,r2
  808e5c:	d0a72005 	stb	r2,-25472(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
  808e60:	e13ffa83 	ldbu	r4,-22(fp)
  808e64:	e0fffa83 	ldbu	r3,-22(fp)
  808e68:	d0a72044 	addi	r2,gp,-25471
  808e6c:	1885883a 	add	r2,r3,r2
  808e70:	10c00003 	ldbu	r3,0(r2)
  808e74:	e0bffb17 	ldw	r2,-20(fp)
  808e78:	10800d43 	ldbu	r2,53(r2)
  808e7c:	1884b03a 	or	r2,r3,r2
  808e80:	1007883a 	mov	r3,r2
  808e84:	d0a72044 	addi	r2,gp,-25471
  808e88:	2085883a 	add	r2,r4,r2
  808e8c:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
  808e90:	e13ffb17 	ldw	r4,-20(fp)
  808e94:	e17ffc17 	ldw	r5,-16(fp)
  808e98:	08091440 	call	809144 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
  808e9c:	e0bffb17 	ldw	r2,-20(fp)
  808ea0:	10800817 	ldw	r2,32(r2)
  808ea4:	1005003a 	cmpeq	r2,r2,zero
  808ea8:	1000071e 	bne	r2,zero,808ec8 <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  808eac:	e0bffb17 	ldw	r2,-20(fp)
  808eb0:	11400817 	ldw	r5,32(r2)
  808eb4:	e13ffb17 	ldw	r4,-20(fp)
  808eb8:	08091fc0 	call	8091fc <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
  808ebc:	e0fffb17 	ldw	r3,-20(fp)
  808ec0:	e0bffc17 	ldw	r2,-16(fp)
  808ec4:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
  808ec8:	e0bffa03 	ldbu	r2,-24(fp)
}
  808ecc:	e037883a 	mov	sp,fp
  808ed0:	dfc00117 	ldw	ra,4(sp)
  808ed4:	df000017 	ldw	fp,0(sp)
  808ed8:	dec00204 	addi	sp,sp,8
  808edc:	f800283a 	ret

00808ee0 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
  808ee0:	defffd04 	addi	sp,sp,-12
  808ee4:	df000215 	stw	fp,8(sp)
  808ee8:	df000204 	addi	fp,sp,8
  808eec:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
  808ef0:	d0e72317 	ldw	r3,-25460(gp)
  808ef4:	e0bfff17 	ldw	r2,-4(fp)
  808ef8:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
  808efc:	d0a72317 	ldw	r2,-25460(gp)
  808f00:	10800d03 	ldbu	r2,52(r2)
  808f04:	11003fcc 	andi	r4,r2,255
  808f08:	d0a72317 	ldw	r2,-25460(gp)
  808f0c:	10800d03 	ldbu	r2,52(r2)
  808f10:	10c03fcc 	andi	r3,r2,255
  808f14:	e0bfff17 	ldw	r2,-4(fp)
  808f18:	1885883a 	add	r2,r3,r2
  808f1c:	10800204 	addi	r2,r2,8
  808f20:	10c000c3 	ldbu	r3,3(r2)
  808f24:	d0a72317 	ldw	r2,-25460(gp)
  808f28:	10800d43 	ldbu	r2,53(r2)
  808f2c:	1884b03a 	or	r2,r3,r2
  808f30:	1007883a 	mov	r3,r2
  808f34:	e0bfff17 	ldw	r2,-4(fp)
  808f38:	2085883a 	add	r2,r4,r2
  808f3c:	10800204 	addi	r2,r2,8
  808f40:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  808f44:	e0bfff17 	ldw	r2,-4(fp)
  808f48:	10c00283 	ldbu	r3,10(r2)
  808f4c:	d0a72317 	ldw	r2,-25460(gp)
  808f50:	10800d83 	ldbu	r2,54(r2)
  808f54:	1884b03a 	or	r2,r3,r2
  808f58:	1007883a 	mov	r3,r2
  808f5c:	e0bfff17 	ldw	r2,-4(fp)
  808f60:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  808f64:	d0a72317 	ldw	r2,-25460(gp)
  808f68:	10800d03 	ldbu	r2,52(r2)
  808f6c:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  808f70:	e13ffe03 	ldbu	r4,-8(fp)
  808f74:	e0fffe03 	ldbu	r3,-8(fp)
  808f78:	d0a72044 	addi	r2,gp,-25471
  808f7c:	1885883a 	add	r2,r3,r2
  808f80:	10800003 	ldbu	r2,0(r2)
  808f84:	1007883a 	mov	r3,r2
  808f88:	d0a72317 	ldw	r2,-25460(gp)
  808f8c:	10800d43 	ldbu	r2,53(r2)
  808f90:	0084303a 	nor	r2,zero,r2
  808f94:	1884703a 	and	r2,r3,r2
  808f98:	1007883a 	mov	r3,r2
  808f9c:	d0a72044 	addi	r2,gp,-25471
  808fa0:	2085883a 	add	r2,r4,r2
  808fa4:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  808fa8:	e0fffe03 	ldbu	r3,-8(fp)
  808fac:	d0a72044 	addi	r2,gp,-25471
  808fb0:	1885883a 	add	r2,r3,r2
  808fb4:	10800003 	ldbu	r2,0(r2)
  808fb8:	10803fcc 	andi	r2,r2,255
  808fbc:	1004c03a 	cmpne	r2,r2,zero
  808fc0:	1000071e 	bne	r2,zero,808fe0 <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  808fc4:	d0a72317 	ldw	r2,-25460(gp)
  808fc8:	10800d83 	ldbu	r2,54(r2)
  808fcc:	0084303a 	nor	r2,zero,r2
  808fd0:	1007883a 	mov	r3,r2
  808fd4:	d0a72003 	ldbu	r2,-25472(gp)
  808fd8:	1884703a 	and	r2,r3,r2
  808fdc:	d0a72005 	stb	r2,-25472(gp)
    }
}
  808fe0:	e037883a 	mov	sp,fp
  808fe4:	df000017 	ldw	fp,0(sp)
  808fe8:	dec00104 	addi	sp,sp,4
  808fec:	f800283a 	ret

00808ff0 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
  808ff0:	defffb04 	addi	sp,sp,-20
  808ff4:	df000415 	stw	fp,16(sp)
  808ff8:	df000404 	addi	fp,sp,16
  808ffc:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
  809000:	d0a72317 	ldw	r2,-25460(gp)
  809004:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
  809008:	d0e72317 	ldw	r3,-25460(gp)
  80900c:	e0bfff17 	ldw	r2,-4(fp)
  809010:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
  809014:	e0bfff17 	ldw	r2,-4(fp)
  809018:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
  80901c:	e0bffe17 	ldw	r2,-8(fp)
  809020:	10800017 	ldw	r2,0(r2)
  809024:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  809028:	00002006 	br	8090ac <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
  80902c:	d0a72317 	ldw	r2,-25460(gp)
  809030:	10800d03 	ldbu	r2,52(r2)
  809034:	11003fcc 	andi	r4,r2,255
  809038:	d0a72317 	ldw	r2,-25460(gp)
  80903c:	10800d03 	ldbu	r2,52(r2)
  809040:	10c03fcc 	andi	r3,r2,255
  809044:	e0bffd17 	ldw	r2,-12(fp)
  809048:	1885883a 	add	r2,r3,r2
  80904c:	10800204 	addi	r2,r2,8
  809050:	10c000c3 	ldbu	r3,3(r2)
  809054:	d0a72317 	ldw	r2,-25460(gp)
  809058:	10800d43 	ldbu	r2,53(r2)
  80905c:	1884b03a 	or	r2,r3,r2
  809060:	1007883a 	mov	r3,r2
  809064:	e0bffd17 	ldw	r2,-12(fp)
  809068:	2085883a 	add	r2,r4,r2
  80906c:	10800204 	addi	r2,r2,8
  809070:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  809074:	e0bffd17 	ldw	r2,-12(fp)
  809078:	10c00283 	ldbu	r3,10(r2)
  80907c:	d0a72317 	ldw	r2,-25460(gp)
  809080:	10800d83 	ldbu	r2,54(r2)
  809084:	1884b03a 	or	r2,r3,r2
  809088:	1007883a 	mov	r3,r2
  80908c:	e0bffd17 	ldw	r2,-12(fp)
  809090:	10c00285 	stb	r3,10(r2)
        pevents++;
  809094:	e0bffe17 	ldw	r2,-8(fp)
  809098:	10800104 	addi	r2,r2,4
  80909c:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
  8090a0:	e0bffe17 	ldw	r2,-8(fp)
  8090a4:	10800017 	ldw	r2,0(r2)
  8090a8:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  8090ac:	e0bffd17 	ldw	r2,-12(fp)
  8090b0:	1004c03a 	cmpne	r2,r2,zero
  8090b4:	103fdd1e 	bne	r2,zero,80902c <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  8090b8:	d0a72317 	ldw	r2,-25460(gp)
  8090bc:	10800d03 	ldbu	r2,52(r2)
  8090c0:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  8090c4:	e13ffc03 	ldbu	r4,-16(fp)
  8090c8:	e0fffc03 	ldbu	r3,-16(fp)
  8090cc:	d0a72044 	addi	r2,gp,-25471
  8090d0:	1885883a 	add	r2,r3,r2
  8090d4:	10800003 	ldbu	r2,0(r2)
  8090d8:	1007883a 	mov	r3,r2
  8090dc:	d0a72317 	ldw	r2,-25460(gp)
  8090e0:	10800d43 	ldbu	r2,53(r2)
  8090e4:	0084303a 	nor	r2,zero,r2
  8090e8:	1884703a 	and	r2,r3,r2
  8090ec:	1007883a 	mov	r3,r2
  8090f0:	d0a72044 	addi	r2,gp,-25471
  8090f4:	2085883a 	add	r2,r4,r2
  8090f8:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  8090fc:	e0fffc03 	ldbu	r3,-16(fp)
  809100:	d0a72044 	addi	r2,gp,-25471
  809104:	1885883a 	add	r2,r3,r2
  809108:	10800003 	ldbu	r2,0(r2)
  80910c:	10803fcc 	andi	r2,r2,255
  809110:	1004c03a 	cmpne	r2,r2,zero
  809114:	1000071e 	bne	r2,zero,809134 <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  809118:	d0a72317 	ldw	r2,-25460(gp)
  80911c:	10800d83 	ldbu	r2,54(r2)
  809120:	0084303a 	nor	r2,zero,r2
  809124:	1007883a 	mov	r3,r2
  809128:	d0a72003 	ldbu	r2,-25472(gp)
  80912c:	1884703a 	and	r2,r3,r2
  809130:	d0a72005 	stb	r2,-25472(gp)
    }
}
  809134:	e037883a 	mov	sp,fp
  809138:	df000017 	ldw	fp,0(sp)
  80913c:	dec00104 	addi	sp,sp,4
  809140:	f800283a 	ret

00809144 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
  809144:	defffc04 	addi	sp,sp,-16
  809148:	df000315 	stw	fp,12(sp)
  80914c:	df000304 	addi	fp,sp,12
  809150:	e13ffe15 	stw	r4,-8(fp)
  809154:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
  809158:	e0bffe17 	ldw	r2,-8(fp)
  80915c:	10800d03 	ldbu	r2,52(r2)
  809160:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
  809164:	e13ffd03 	ldbu	r4,-12(fp)
  809168:	e0fffd03 	ldbu	r3,-12(fp)
  80916c:	e0bfff17 	ldw	r2,-4(fp)
  809170:	1885883a 	add	r2,r3,r2
  809174:	10800204 	addi	r2,r2,8
  809178:	108000c3 	ldbu	r2,3(r2)
  80917c:	1007883a 	mov	r3,r2
  809180:	e0bffe17 	ldw	r2,-8(fp)
  809184:	10800d43 	ldbu	r2,53(r2)
  809188:	0084303a 	nor	r2,zero,r2
  80918c:	1884703a 	and	r2,r3,r2
  809190:	1007883a 	mov	r3,r2
  809194:	e0bfff17 	ldw	r2,-4(fp)
  809198:	2085883a 	add	r2,r4,r2
  80919c:	10800204 	addi	r2,r2,8
  8091a0:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
  8091a4:	e0fffd03 	ldbu	r3,-12(fp)
  8091a8:	e0bfff17 	ldw	r2,-4(fp)
  8091ac:	1885883a 	add	r2,r3,r2
  8091b0:	10800204 	addi	r2,r2,8
  8091b4:	108000c3 	ldbu	r2,3(r2)
  8091b8:	10803fcc 	andi	r2,r2,255
  8091bc:	1004c03a 	cmpne	r2,r2,zero
  8091c0:	10000a1e 	bne	r2,zero,8091ec <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
  8091c4:	e0bfff17 	ldw	r2,-4(fp)
  8091c8:	10800283 	ldbu	r2,10(r2)
  8091cc:	1007883a 	mov	r3,r2
  8091d0:	e0bffe17 	ldw	r2,-8(fp)
  8091d4:	10800d83 	ldbu	r2,54(r2)
  8091d8:	0084303a 	nor	r2,zero,r2
  8091dc:	1884703a 	and	r2,r3,r2
  8091e0:	1007883a 	mov	r3,r2
  8091e4:	e0bfff17 	ldw	r2,-4(fp)
  8091e8:	10c00285 	stb	r3,10(r2)
    }
}
  8091ec:	e037883a 	mov	sp,fp
  8091f0:	df000017 	ldw	fp,0(sp)
  8091f4:	dec00104 	addi	sp,sp,4
  8091f8:	f800283a 	ret

008091fc <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
  8091fc:	defffa04 	addi	sp,sp,-24
  809200:	df000515 	stw	fp,20(sp)
  809204:	df000504 	addi	fp,sp,20
  809208:	e13ffe15 	stw	r4,-8(fp)
  80920c:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
  809210:	e0bffe17 	ldw	r2,-8(fp)
  809214:	10800d03 	ldbu	r2,52(r2)
  809218:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
  80921c:	e0bffe17 	ldw	r2,-8(fp)
  809220:	10800d83 	ldbu	r2,54(r2)
  809224:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
  809228:	e0bffe17 	ldw	r2,-8(fp)
  80922c:	10800d43 	ldbu	r2,53(r2)
  809230:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
  809234:	e0bfff17 	ldw	r2,-4(fp)
  809238:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
  80923c:	e0bffd17 	ldw	r2,-12(fp)
  809240:	10800017 	ldw	r2,0(r2)
  809244:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  809248:	00002606 	br	8092e4 <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
  80924c:	e13ffb83 	ldbu	r4,-18(fp)
  809250:	e0fffb83 	ldbu	r3,-18(fp)
  809254:	e0bffc17 	ldw	r2,-16(fp)
  809258:	1885883a 	add	r2,r3,r2
  80925c:	10800204 	addi	r2,r2,8
  809260:	108000c3 	ldbu	r2,3(r2)
  809264:	1007883a 	mov	r3,r2
  809268:	e0bffb03 	ldbu	r2,-20(fp)
  80926c:	0084303a 	nor	r2,zero,r2
  809270:	1884703a 	and	r2,r3,r2
  809274:	1007883a 	mov	r3,r2
  809278:	e0bffc17 	ldw	r2,-16(fp)
  80927c:	2085883a 	add	r2,r4,r2
  809280:	10800204 	addi	r2,r2,8
  809284:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
  809288:	e0fffb83 	ldbu	r3,-18(fp)
  80928c:	e0bffc17 	ldw	r2,-16(fp)
  809290:	1885883a 	add	r2,r3,r2
  809294:	10800204 	addi	r2,r2,8
  809298:	108000c3 	ldbu	r2,3(r2)
  80929c:	10803fcc 	andi	r2,r2,255
  8092a0:	1004c03a 	cmpne	r2,r2,zero
  8092a4:	1000091e 	bne	r2,zero,8092cc <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
  8092a8:	e0bffc17 	ldw	r2,-16(fp)
  8092ac:	10800283 	ldbu	r2,10(r2)
  8092b0:	1007883a 	mov	r3,r2
  8092b4:	e0bffb43 	ldbu	r2,-19(fp)
  8092b8:	0084303a 	nor	r2,zero,r2
  8092bc:	1884703a 	and	r2,r3,r2
  8092c0:	1007883a 	mov	r3,r2
  8092c4:	e0bffc17 	ldw	r2,-16(fp)
  8092c8:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
  8092cc:	e0bffd17 	ldw	r2,-12(fp)
  8092d0:	10800104 	addi	r2,r2,4
  8092d4:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
  8092d8:	e0bffd17 	ldw	r2,-12(fp)
  8092dc:	10800017 	ldw	r2,0(r2)
  8092e0:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  8092e4:	e0bffc17 	ldw	r2,-16(fp)
  8092e8:	1004c03a 	cmpne	r2,r2,zero
  8092ec:	103fd71e 	bne	r2,zero,80924c <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
  8092f0:	e037883a 	mov	sp,fp
  8092f4:	df000017 	ldw	fp,0(sp)
  8092f8:	dec00104 	addi	sp,sp,4
  8092fc:	f800283a 	ret

00809300 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
  809300:	defffc04 	addi	sp,sp,-16
  809304:	df000315 	stw	fp,12(sp)
  809308:	df000304 	addi	fp,sp,12
  80930c:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
  809310:	e0bfff17 	ldw	r2,-4(fp)
  809314:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
  809318:	e0bfff17 	ldw	r2,-4(fp)
  80931c:	108002c4 	addi	r2,r2,11
  809320:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  809324:	e03ffd05 	stb	zero,-12(fp)
  809328:	00000806 	br	80934c <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
  80932c:	e0bffe17 	ldw	r2,-8(fp)
  809330:	10000005 	stb	zero,0(r2)
  809334:	e0bffe17 	ldw	r2,-8(fp)
  809338:	10800044 	addi	r2,r2,1
  80933c:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  809340:	e0bffd03 	ldbu	r2,-12(fp)
  809344:	10800044 	addi	r2,r2,1
  809348:	e0bffd05 	stb	r2,-12(fp)
  80934c:	e0bffd03 	ldbu	r2,-12(fp)
  809350:	108000f0 	cmpltui	r2,r2,3
  809354:	103ff51e 	bne	r2,zero,80932c <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
  809358:	e037883a 	mov	sp,fp
  80935c:	df000017 	ldw	fp,0(sp)
  809360:	dec00104 	addi	sp,sp,4
  809364:	f800283a 	ret

00809368 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
  809368:	defffb04 	addi	sp,sp,-20
  80936c:	dfc00415 	stw	ra,16(sp)
  809370:	df000315 	stw	fp,12(sp)
  809374:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
  809378:	010020b4 	movhi	r4,130
  80937c:	2137bf04 	addi	r4,r4,-8452
  809380:	0142d004 	movi	r5,2880
  809384:	08096cc0 	call	8096cc <OS_MemClr>
    pevent1 = &OSEventTbl[0];
  809388:	008020b4 	movhi	r2,130
  80938c:	10b7bf04 	addi	r2,r2,-8452
  809390:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
  809394:	008020b4 	movhi	r2,130
  809398:	10b7cb04 	addi	r2,r2,-8404
  80939c:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  8093a0:	e03fff0d 	sth	zero,-4(fp)
  8093a4:	00001306 	br	8093f4 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
  8093a8:	e0bffe17 	ldw	r2,-8(fp)
  8093ac:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
  8093b0:	e0fffe17 	ldw	r3,-8(fp)
  8093b4:	e0bffd17 	ldw	r2,-12(fp)
  8093b8:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
  8093bc:	e0fffe17 	ldw	r3,-8(fp)
  8093c0:	00800fc4 	movi	r2,63
  8093c4:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
  8093c8:	e0bffe17 	ldw	r2,-8(fp)
  8093cc:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
  8093d0:	e0bffe17 	ldw	r2,-8(fp)
  8093d4:	10800c04 	addi	r2,r2,48
  8093d8:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
  8093dc:	e0bffd17 	ldw	r2,-12(fp)
  8093e0:	10800c04 	addi	r2,r2,48
  8093e4:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  8093e8:	e0bfff0b 	ldhu	r2,-4(fp)
  8093ec:	10800044 	addi	r2,r2,1
  8093f0:	e0bfff0d 	sth	r2,-4(fp)
  8093f4:	e0bfff0b 	ldhu	r2,-4(fp)
  8093f8:	10800ef0 	cmpltui	r2,r2,59
  8093fc:	103fea1e 	bne	r2,zero,8093a8 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
  809400:	e0bffe17 	ldw	r2,-8(fp)
  809404:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
  809408:	e0bffe17 	ldw	r2,-8(fp)
  80940c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
  809410:	e0fffe17 	ldw	r3,-8(fp)
  809414:	00800fc4 	movi	r2,63
  809418:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
  80941c:	e0bffe17 	ldw	r2,-8(fp)
  809420:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
  809424:	008020b4 	movhi	r2,130
  809428:	10b7bf04 	addi	r2,r2,-8452
  80942c:	d0a72115 	stw	r2,-25468(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
  809430:	e037883a 	mov	sp,fp
  809434:	dfc00117 	ldw	ra,4(sp)
  809438:	df000017 	ldw	fp,0(sp)
  80943c:	dec00204 	addi	sp,sp,8
  809440:	f800283a 	ret

00809444 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
  809444:	deffff04 	addi	sp,sp,-4
  809448:	df000015 	stw	fp,0(sp)
  80944c:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
  809450:	d0272415 	stw	zero,-25456(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
  809454:	d0272205 	stb	zero,-25464(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
  809458:	d0271405 	stb	zero,-25520(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
  80945c:	d0271c45 	stb	zero,-25487(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
  809460:	d0271445 	stb	zero,-25519(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
  809464:	d0271915 	stw	zero,-25500(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
  809468:	d0271515 	stw	zero,-25516(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
  80946c:	d0272715 	stw	zero,-25444(gp)
    OSIdleCtrMax  = 0L;
  809470:	d0271a15 	stw	zero,-25496(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
  809474:	d0272605 	stb	zero,-25448(gp)
#endif
}
  809478:	e037883a 	mov	sp,fp
  80947c:	df000017 	ldw	fp,0(sp)
  809480:	dec00104 	addi	sp,sp,4
  809484:	f800283a 	ret

00809488 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
  809488:	defffd04 	addi	sp,sp,-12
  80948c:	df000215 	stw	fp,8(sp)
  809490:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
  809494:	d0272005 	stb	zero,-25472(gp)
    prdytbl       = &OSRdyTbl[0];
  809498:	d0a72044 	addi	r2,gp,-25471
  80949c:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  8094a0:	e03fff05 	stb	zero,-4(fp)
  8094a4:	00000806 	br	8094c8 <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
  8094a8:	e0bffe17 	ldw	r2,-8(fp)
  8094ac:	10000005 	stb	zero,0(r2)
  8094b0:	e0bffe17 	ldw	r2,-8(fp)
  8094b4:	10800044 	addi	r2,r2,1
  8094b8:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  8094bc:	e0bfff03 	ldbu	r2,-4(fp)
  8094c0:	10800044 	addi	r2,r2,1
  8094c4:	e0bfff05 	stb	r2,-4(fp)
  8094c8:	e0bfff03 	ldbu	r2,-4(fp)
  8094cc:	108000f0 	cmpltui	r2,r2,3
  8094d0:	103ff51e 	bne	r2,zero,8094a8 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
  8094d4:	d0271645 	stb	zero,-25511(gp)
    OSPrioHighRdy = 0;
  8094d8:	d0271605 	stb	zero,-25512(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
  8094dc:	d0271e15 	stw	zero,-25480(gp)
    OSTCBCur      = (OS_TCB *)0;
  8094e0:	d0272315 	stw	zero,-25460(gp)
}
  8094e4:	e037883a 	mov	sp,fp
  8094e8:	df000017 	ldw	fp,0(sp)
  8094ec:	dec00104 	addi	sp,sp,4
  8094f0:	f800283a 	ret

008094f4 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
  8094f4:	defff804 	addi	sp,sp,-32
  8094f8:	dfc00715 	stw	ra,28(sp)
  8094fc:	df000615 	stw	fp,24(sp)
  809500:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
  809504:	018020b4 	movhi	r6,130
  809508:	31b7be04 	addi	r6,r6,-8456
  80950c:	00bfffd4 	movui	r2,65535
  809510:	d8800015 	stw	r2,0(sp)
  809514:	008020b4 	movhi	r2,130
  809518:	10b5bf04 	addi	r2,r2,-10500
  80951c:	d8800115 	stw	r2,4(sp)
  809520:	00808004 	movi	r2,512
  809524:	d8800215 	stw	r2,8(sp)
  809528:	d8000315 	stw	zero,12(sp)
  80952c:	008000c4 	movi	r2,3
  809530:	d8800415 	stw	r2,16(sp)
  809534:	01002074 	movhi	r4,129
  809538:	21266a04 	addi	r4,r4,-26200
  80953c:	000b883a 	mov	r5,zero
  809540:	01c00504 	movi	r7,20
  809544:	080e7880 	call	80e788 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
  809548:	01402074 	movhi	r5,129
  80954c:	29516004 	addi	r5,r5,17792
  809550:	01000504 	movi	r4,20
  809554:	e1bfff04 	addi	r6,fp,-4
  809558:	080f0bc0 	call	80f0bc <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
  80955c:	e037883a 	mov	sp,fp
  809560:	dfc00117 	ldw	ra,4(sp)
  809564:	df000017 	ldw	fp,0(sp)
  809568:	dec00204 	addi	sp,sp,8
  80956c:	f800283a 	ret

00809570 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
  809570:	defff804 	addi	sp,sp,-32
  809574:	dfc00715 	stw	ra,28(sp)
  809578:	df000615 	stw	fp,24(sp)
  80957c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
  809580:	018020b4 	movhi	r6,130
  809584:	31b54604 	addi	r6,r6,-10984
  809588:	00bfff94 	movui	r2,65534
  80958c:	d8800015 	stw	r2,0(sp)
  809590:	008020b4 	movhi	r2,130
  809594:	10b34704 	addi	r2,r2,-13028
  809598:	d8800115 	stw	r2,4(sp)
  80959c:	00808004 	movi	r2,512
  8095a0:	d8800215 	stw	r2,8(sp)
  8095a4:	d8000315 	stw	zero,12(sp)
  8095a8:	008000c4 	movi	r2,3
  8095ac:	d8800415 	stw	r2,16(sp)
  8095b0:	01002074 	movhi	r4,129
  8095b4:	21268104 	addi	r4,r4,-26108
  8095b8:	000b883a 	mov	r5,zero
  8095bc:	01c004c4 	movi	r7,19
  8095c0:	080e7880 	call	80e788 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
  8095c4:	01402074 	movhi	r5,129
  8095c8:	29516404 	addi	r5,r5,17808
  8095cc:	010004c4 	movi	r4,19
  8095d0:	e1bfff04 	addi	r6,fp,-4
  8095d4:	080f0bc0 	call	80f0bc <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
  8095d8:	e037883a 	mov	sp,fp
  8095dc:	dfc00117 	ldw	ra,4(sp)
  8095e0:	df000017 	ldw	fp,0(sp)
  8095e4:	dec00204 	addi	sp,sp,8
  8095e8:	f800283a 	ret

008095ec <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
  8095ec:	defffb04 	addi	sp,sp,-20
  8095f0:	dfc00415 	stw	ra,16(sp)
  8095f4:	df000315 	stw	fp,12(sp)
  8095f8:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
  8095fc:	010020b4 	movhi	r4,130
  809600:	213a8f04 	addi	r4,r4,-5572
  809604:	01414404 	movi	r5,1296
  809608:	08096cc0 	call	8096cc <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
  80960c:	010020b4 	movhi	r4,130
  809610:	213bd304 	addi	r4,r4,-4276
  809614:	01401504 	movi	r5,84
  809618:	08096cc0 	call	8096cc <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
  80961c:	008020b4 	movhi	r2,130
  809620:	10ba8f04 	addi	r2,r2,-5572
  809624:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
  809628:	008020b4 	movhi	r2,130
  80962c:	10baaa04 	addi	r2,r2,-5464
  809630:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  809634:	e03fff05 	stb	zero,-4(fp)
  809638:	00001106 	br	809680 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
  80963c:	e0fffe17 	ldw	r3,-8(fp)
  809640:	e0bffd17 	ldw	r2,-12(fp)
  809644:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
  809648:	e0fffe17 	ldw	r3,-8(fp)
  80964c:	00800fc4 	movi	r2,63
  809650:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  809654:	e0bffe17 	ldw	r2,-8(fp)
  809658:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
  80965c:	e0bffe17 	ldw	r2,-8(fp)
  809660:	10801b04 	addi	r2,r2,108
  809664:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
  809668:	e0bffd17 	ldw	r2,-12(fp)
  80966c:	10801b04 	addi	r2,r2,108
  809670:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  809674:	e0bfff03 	ldbu	r2,-4(fp)
  809678:	10800044 	addi	r2,r2,1
  80967c:	e0bfff05 	stb	r2,-4(fp)
  809680:	e0bfff03 	ldbu	r2,-4(fp)
  809684:	108002f0 	cmpltui	r2,r2,11
  809688:	103fec1e 	bne	r2,zero,80963c <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
  80968c:	e0bffe17 	ldw	r2,-8(fp)
  809690:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
  809694:	e0fffe17 	ldw	r3,-8(fp)
  809698:	00800fc4 	movi	r2,63
  80969c:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  8096a0:	e0bffe17 	ldw	r2,-8(fp)
  8096a4:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
  8096a8:	d0271715 	stw	zero,-25508(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
  8096ac:	008020b4 	movhi	r2,130
  8096b0:	10ba8f04 	addi	r2,r2,-5572
  8096b4:	d0a71b15 	stw	r2,-25492(gp)
}
  8096b8:	e037883a 	mov	sp,fp
  8096bc:	dfc00117 	ldw	ra,4(sp)
  8096c0:	df000017 	ldw	fp,0(sp)
  8096c4:	dec00204 	addi	sp,sp,8
  8096c8:	f800283a 	ret

008096cc <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
  8096cc:	defffd04 	addi	sp,sp,-12
  8096d0:	df000215 	stw	fp,8(sp)
  8096d4:	df000204 	addi	fp,sp,8
  8096d8:	e13ffe15 	stw	r4,-8(fp)
  8096dc:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
  8096e0:	00000806 	br	809704 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
  8096e4:	e0bffe17 	ldw	r2,-8(fp)
  8096e8:	10000005 	stb	zero,0(r2)
  8096ec:	e0bffe17 	ldw	r2,-8(fp)
  8096f0:	10800044 	addi	r2,r2,1
  8096f4:	e0bffe15 	stw	r2,-8(fp)
        size--;
  8096f8:	e0bfff0b 	ldhu	r2,-4(fp)
  8096fc:	10bfffc4 	addi	r2,r2,-1
  809700:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
  809704:	e0bfff0b 	ldhu	r2,-4(fp)
  809708:	1004c03a 	cmpne	r2,r2,zero
  80970c:	103ff51e 	bne	r2,zero,8096e4 <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
  809710:	e037883a 	mov	sp,fp
  809714:	df000017 	ldw	fp,0(sp)
  809718:	dec00104 	addi	sp,sp,4
  80971c:	f800283a 	ret

00809720 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
  809720:	defffc04 	addi	sp,sp,-16
  809724:	df000315 	stw	fp,12(sp)
  809728:	df000304 	addi	fp,sp,12
  80972c:	e13ffd15 	stw	r4,-12(fp)
  809730:	e17ffe15 	stw	r5,-8(fp)
  809734:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
  809738:	00000d06 	br	809770 <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
  80973c:	e0bffe17 	ldw	r2,-8(fp)
  809740:	10c00003 	ldbu	r3,0(r2)
  809744:	e0bffd17 	ldw	r2,-12(fp)
  809748:	10c00005 	stb	r3,0(r2)
  80974c:	e0bffd17 	ldw	r2,-12(fp)
  809750:	10800044 	addi	r2,r2,1
  809754:	e0bffd15 	stw	r2,-12(fp)
  809758:	e0bffe17 	ldw	r2,-8(fp)
  80975c:	10800044 	addi	r2,r2,1
  809760:	e0bffe15 	stw	r2,-8(fp)
        size--;
  809764:	e0bfff0b 	ldhu	r2,-4(fp)
  809768:	10bfffc4 	addi	r2,r2,-1
  80976c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
  809770:	e0bfff0b 	ldhu	r2,-4(fp)
  809774:	1004c03a 	cmpne	r2,r2,zero
  809778:	103ff01e 	bne	r2,zero,80973c <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
  80977c:	e037883a 	mov	sp,fp
  809780:	df000017 	ldw	fp,0(sp)
  809784:	dec00104 	addi	sp,sp,4
  809788:	f800283a 	ret

0080978c <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
  80978c:	defffb04 	addi	sp,sp,-20
  809790:	dfc00415 	stw	ra,16(sp)
  809794:	df000315 	stw	fp,12(sp)
  809798:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  80979c:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8097a0:	0005303a 	rdctl	r2,status
  8097a4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8097a8:	e0fffe17 	ldw	r3,-8(fp)
  8097ac:	00bfff84 	movi	r2,-2
  8097b0:	1884703a 	and	r2,r3,r2
  8097b4:	1001703a 	wrctl	status,r2
  
  return context;
  8097b8:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
  8097bc:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
  8097c0:	d0a72203 	ldbu	r2,-25464(gp)
  8097c4:	10803fcc 	andi	r2,r2,255
  8097c8:	1004c03a 	cmpne	r2,r2,zero
  8097cc:	10001b1e 	bne	r2,zero,80983c <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
  8097d0:	d0a71403 	ldbu	r2,-25520(gp)
  8097d4:	10803fcc 	andi	r2,r2,255
  8097d8:	1004c03a 	cmpne	r2,r2,zero
  8097dc:	1000171e 	bne	r2,zero,80983c <OS_Sched+0xb0>
            OS_SchedNew();
  8097e0:	08098600 	call	809860 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
  8097e4:	d0a71603 	ldbu	r2,-25512(gp)
  8097e8:	d0e71643 	ldbu	r3,-25511(gp)
  8097ec:	11003fcc 	andi	r4,r2,255
  8097f0:	18803fcc 	andi	r2,r3,255
  8097f4:	20801126 	beq	r4,r2,80983c <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
  8097f8:	d0a71603 	ldbu	r2,-25512(gp)
  8097fc:	10803fcc 	andi	r2,r2,255
  809800:	00c020b4 	movhi	r3,130
  809804:	18fbd304 	addi	r3,r3,-4276
  809808:	1085883a 	add	r2,r2,r2
  80980c:	1085883a 	add	r2,r2,r2
  809810:	10c5883a 	add	r2,r2,r3
  809814:	10800017 	ldw	r2,0(r2)
  809818:	d0a71e15 	stw	r2,-25480(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
  80981c:	d0e71e17 	ldw	r3,-25480(gp)
  809820:	18800e17 	ldw	r2,56(r3)
  809824:	10800044 	addi	r2,r2,1
  809828:	18800e15 	stw	r2,56(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
  80982c:	d0a71917 	ldw	r2,-25500(gp)
  809830:	10800044 	addi	r2,r2,1
  809834:	d0a71915 	stw	r2,-25500(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
  809838:	08135480 	call	813548 <OSCtxSw>
  80983c:	e0bfff17 	ldw	r2,-4(fp)
  809840:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809844:	e0bffd17 	ldw	r2,-12(fp)
  809848:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
  80984c:	e037883a 	mov	sp,fp
  809850:	dfc00117 	ldw	ra,4(sp)
  809854:	df000017 	ldw	fp,0(sp)
  809858:	dec00204 	addi	sp,sp,8
  80985c:	f800283a 	ret

00809860 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
  809860:	defffe04 	addi	sp,sp,-8
  809864:	df000115 	stw	fp,4(sp)
  809868:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
  80986c:	d0a72003 	ldbu	r2,-25472(gp)
  809870:	10c03fcc 	andi	r3,r2,255
  809874:	00802074 	movhi	r2,129
  809878:	10912004 	addi	r2,r2,17536
  80987c:	10c5883a 	add	r2,r2,r3
  809880:	10800003 	ldbu	r2,0(r2)
  809884:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  809888:	e0bfff03 	ldbu	r2,-4(fp)
  80988c:	100490fa 	slli	r2,r2,3
  809890:	1009883a 	mov	r4,r2
  809894:	e0ffff03 	ldbu	r3,-4(fp)
  809898:	d0a72044 	addi	r2,gp,-25471
  80989c:	1885883a 	add	r2,r3,r2
  8098a0:	10800003 	ldbu	r2,0(r2)
  8098a4:	10c03fcc 	andi	r3,r2,255
  8098a8:	00802074 	movhi	r2,129
  8098ac:	10912004 	addi	r2,r2,17536
  8098b0:	10c5883a 	add	r2,r2,r3
  8098b4:	10800003 	ldbu	r2,0(r2)
  8098b8:	2085883a 	add	r2,r4,r2
  8098bc:	d0a71605 	stb	r2,-25512(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
  8098c0:	e037883a 	mov	sp,fp
  8098c4:	df000017 	ldw	fp,0(sp)
  8098c8:	dec00104 	addi	sp,sp,4
  8098cc:	f800283a 	ret

008098d0 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
  8098d0:	defffc04 	addi	sp,sp,-16
  8098d4:	df000315 	stw	fp,12(sp)
  8098d8:	df000304 	addi	fp,sp,12
  8098dc:	e13ffe15 	stw	r4,-8(fp)
  8098e0:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
  8098e4:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
  8098e8:	00000d06 	br	809920 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
  8098ec:	e0bfff17 	ldw	r2,-4(fp)
  8098f0:	10c00003 	ldbu	r3,0(r2)
  8098f4:	e0bffe17 	ldw	r2,-8(fp)
  8098f8:	10c00005 	stb	r3,0(r2)
  8098fc:	e0bffe17 	ldw	r2,-8(fp)
  809900:	10800044 	addi	r2,r2,1
  809904:	e0bffe15 	stw	r2,-8(fp)
  809908:	e0bfff17 	ldw	r2,-4(fp)
  80990c:	10800044 	addi	r2,r2,1
  809910:	e0bfff15 	stw	r2,-4(fp)
        len++;
  809914:	e0bffd03 	ldbu	r2,-12(fp)
  809918:	10800044 	addi	r2,r2,1
  80991c:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  809920:	e0bfff17 	ldw	r2,-4(fp)
  809924:	10800003 	ldbu	r2,0(r2)
  809928:	10803fcc 	andi	r2,r2,255
  80992c:	1004c03a 	cmpne	r2,r2,zero
  809930:	103fee1e 	bne	r2,zero,8098ec <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
  809934:	e0bffe17 	ldw	r2,-8(fp)
  809938:	10000005 	stb	zero,0(r2)
    return (len);
  80993c:	e0bffd03 	ldbu	r2,-12(fp)
}
  809940:	e037883a 	mov	sp,fp
  809944:	df000017 	ldw	fp,0(sp)
  809948:	dec00104 	addi	sp,sp,4
  80994c:	f800283a 	ret

00809950 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
  809950:	defffd04 	addi	sp,sp,-12
  809954:	df000215 	stw	fp,8(sp)
  809958:	df000204 	addi	fp,sp,8
  80995c:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
  809960:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
  809964:	00000606 	br	809980 <OS_StrLen+0x30>
        psrc++;
  809968:	e0bfff17 	ldw	r2,-4(fp)
  80996c:	10800044 	addi	r2,r2,1
  809970:	e0bfff15 	stw	r2,-4(fp)
        len++;
  809974:	e0bffe03 	ldbu	r2,-8(fp)
  809978:	10800044 	addi	r2,r2,1
  80997c:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  809980:	e0bfff17 	ldw	r2,-4(fp)
  809984:	10800003 	ldbu	r2,0(r2)
  809988:	10803fcc 	andi	r2,r2,255
  80998c:	1004c03a 	cmpne	r2,r2,zero
  809990:	103ff51e 	bne	r2,zero,809968 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
  809994:	e0bffe03 	ldbu	r2,-8(fp)
}
  809998:	e037883a 	mov	sp,fp
  80999c:	df000017 	ldw	fp,0(sp)
  8099a0:	dec00104 	addi	sp,sp,4
  8099a4:	f800283a 	ret

008099a8 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
  8099a8:	defffa04 	addi	sp,sp,-24
  8099ac:	dfc00515 	stw	ra,20(sp)
  8099b0:	df000415 	stw	fp,16(sp)
  8099b4:	df000404 	addi	fp,sp,16
  8099b8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8099bc:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8099c0:	0005303a 	rdctl	r2,status
  8099c4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8099c8:	e0fffd17 	ldw	r3,-12(fp)
  8099cc:	00bfff84 	movi	r2,-2
  8099d0:	1884703a 	and	r2,r3,r2
  8099d4:	1001703a 	wrctl	status,r2
  
  return context;
  8099d8:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
  8099dc:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
  8099e0:	d0a71517 	ldw	r2,-25516(gp)
  8099e4:	10800044 	addi	r2,r2,1
  8099e8:	d0a71515 	stw	r2,-25516(gp)
  8099ec:	e0bffe17 	ldw	r2,-8(fp)
  8099f0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8099f4:	e0bffc17 	ldw	r2,-16(fp)
  8099f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
  8099fc:	08139f40 	call	8139f4 <OSTaskIdleHook>
    }
  809a00:	003fef06 	br	8099c0 <OS_TaskIdle+0x18>

00809a04 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
  809a04:	defffa04 	addi	sp,sp,-24
  809a08:	dfc00515 	stw	ra,20(sp)
  809a0c:	df000415 	stw	fp,16(sp)
  809a10:	df000404 	addi	fp,sp,16
  809a14:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  809a18:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  809a1c:	00000206 	br	809a28 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
  809a20:	01003204 	movi	r4,200
  809a24:	080fa800 	call	80fa80 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  809a28:	d0a72603 	ldbu	r2,-25448(gp)
  809a2c:	10803fcc 	andi	r2,r2,255
  809a30:	1005003a 	cmpeq	r2,r2,zero
  809a34:	103ffa1e 	bne	r2,zero,809a20 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
  809a38:	d1271a17 	ldw	r4,-25496(gp)
  809a3c:	01401904 	movi	r5,100
  809a40:	08141b80 	call	8141b8 <__udivsi3>
  809a44:	d0a71a15 	stw	r2,-25496(gp)
    if (OSIdleCtrMax == 0L) {
  809a48:	d0a71a17 	ldw	r2,-25496(gp)
  809a4c:	1004c03a 	cmpne	r2,r2,zero
  809a50:	1000031e 	bne	r2,zero,809a60 <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
  809a54:	d0271c05 	stb	zero,-25488(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
  809a58:	01003fc4 	movi	r4,255
  809a5c:	080f6940 	call	80f694 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809a60:	0005303a 	rdctl	r2,status
  809a64:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809a68:	e0fffd17 	ldw	r3,-12(fp)
  809a6c:	00bfff84 	movi	r2,-2
  809a70:	1884703a 	and	r2,r3,r2
  809a74:	1001703a 	wrctl	status,r2
  
  return context;
  809a78:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
  809a7c:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
  809a80:	d0a71517 	ldw	r2,-25516(gp)
  809a84:	d0a72715 	stw	r2,-25444(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
  809a88:	d0271515 	stw	zero,-25516(gp)
  809a8c:	e0bffe17 	ldw	r2,-8(fp)
  809a90:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809a94:	e0bffc17 	ldw	r2,-16(fp)
  809a98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
  809a9c:	d1272717 	ldw	r4,-25444(gp)
  809aa0:	d1671a17 	ldw	r5,-25496(gp)
  809aa4:	08141b80 	call	8141b8 <__udivsi3>
  809aa8:	1007883a 	mov	r3,r2
  809aac:	00801904 	movi	r2,100
  809ab0:	10c5c83a 	sub	r2,r2,r3
  809ab4:	d0a71c05 	stb	r2,-25488(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
  809ab8:	08139840 	call	813984 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
  809abc:	0809acc0 	call	809acc <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
  809ac0:	01001904 	movi	r4,100
  809ac4:	080fa800 	call	80fa80 <OSTimeDly>
    }
  809ac8:	003fe506 	br	809a60 <OS_TaskStat+0x5c>

00809acc <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
  809acc:	defffa04 	addi	sp,sp,-24
  809ad0:	dfc00515 	stw	ra,20(sp)
  809ad4:	df000415 	stw	fp,16(sp)
  809ad8:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  809adc:	e03ffc05 	stb	zero,-16(fp)
  809ae0:	00002406 	br	809b74 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
  809ae4:	e13ffc03 	ldbu	r4,-16(fp)
  809ae8:	e17ffe04 	addi	r5,fp,-8
  809aec:	080f4980 	call	80f498 <OSTaskStkChk>
  809af0:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
  809af4:	e0bffc43 	ldbu	r2,-15(fp)
  809af8:	1004c03a 	cmpne	r2,r2,zero
  809afc:	10001a1e 	bne	r2,zero,809b68 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
  809b00:	e0bffc03 	ldbu	r2,-16(fp)
  809b04:	00c020b4 	movhi	r3,130
  809b08:	18fbd304 	addi	r3,r3,-4276
  809b0c:	1085883a 	add	r2,r2,r2
  809b10:	1085883a 	add	r2,r2,r2
  809b14:	10c5883a 	add	r2,r2,r3
  809b18:	10800017 	ldw	r2,0(r2)
  809b1c:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
  809b20:	e0bffd17 	ldw	r2,-12(fp)
  809b24:	1005003a 	cmpeq	r2,r2,zero
  809b28:	10000f1e 	bne	r2,zero,809b68 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
  809b2c:	e0bffd17 	ldw	r2,-12(fp)
  809b30:	10800060 	cmpeqi	r2,r2,1
  809b34:	10000c1e 	bne	r2,zero,809b68 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
  809b38:	e0bffd17 	ldw	r2,-12(fp)
  809b3c:	10c00217 	ldw	r3,8(r2)
  809b40:	e0bffd17 	ldw	r2,-12(fp)
  809b44:	10800317 	ldw	r2,12(r2)
  809b48:	1085883a 	add	r2,r2,r2
  809b4c:	1085883a 	add	r2,r2,r2
  809b50:	1887883a 	add	r3,r3,r2
  809b54:	e0bffd17 	ldw	r2,-12(fp)
  809b58:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
  809b5c:	e0ffff17 	ldw	r3,-4(fp)
  809b60:	e0bffd17 	ldw	r2,-12(fp)
  809b64:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  809b68:	e0bffc03 	ldbu	r2,-16(fp)
  809b6c:	10800044 	addi	r2,r2,1
  809b70:	e0bffc05 	stb	r2,-16(fp)
  809b74:	e0bffc03 	ldbu	r2,-16(fp)
  809b78:	10800570 	cmpltui	r2,r2,21
  809b7c:	103fd91e 	bne	r2,zero,809ae4 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
  809b80:	e037883a 	mov	sp,fp
  809b84:	dfc00117 	ldw	ra,4(sp)
  809b88:	df000017 	ldw	fp,0(sp)
  809b8c:	dec00204 	addi	sp,sp,8
  809b90:	f800283a 	ret

00809b94 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
  809b94:	defff104 	addi	sp,sp,-60
  809b98:	dfc00e15 	stw	ra,56(sp)
  809b9c:	df000d15 	stw	fp,52(sp)
  809ba0:	df000d04 	addi	fp,sp,52
  809ba4:	e17ffb15 	stw	r5,-20(fp)
  809ba8:	e1bffc15 	stw	r6,-16(fp)
  809bac:	e0800417 	ldw	r2,16(fp)
  809bb0:	e13ffa05 	stb	r4,-24(fp)
  809bb4:	e1fffd0d 	sth	r7,-12(fp)
  809bb8:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  809bbc:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809bc0:	0005303a 	rdctl	r2,status
  809bc4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809bc8:	e0fff717 	ldw	r3,-36(fp)
  809bcc:	00bfff84 	movi	r2,-2
  809bd0:	1884703a 	and	r2,r3,r2
  809bd4:	1001703a 	wrctl	status,r2
  
  return context;
  809bd8:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
  809bdc:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
  809be0:	d0a71b17 	ldw	r2,-25492(gp)
  809be4:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
  809be8:	e0bff917 	ldw	r2,-28(fp)
  809bec:	1005003a 	cmpeq	r2,r2,zero
  809bf0:	1000941e 	bne	r2,zero,809e44 <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
  809bf4:	e0bff917 	ldw	r2,-28(fp)
  809bf8:	10800517 	ldw	r2,20(r2)
  809bfc:	d0a71b15 	stw	r2,-25492(gp)
  809c00:	e0bff817 	ldw	r2,-32(fp)
  809c04:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809c08:	e0bff617 	ldw	r2,-40(fp)
  809c0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
  809c10:	e0fff917 	ldw	r3,-28(fp)
  809c14:	e0bffb17 	ldw	r2,-20(fp)
  809c18:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
  809c1c:	e0fff917 	ldw	r3,-28(fp)
  809c20:	e0bffa03 	ldbu	r2,-24(fp)
  809c24:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
  809c28:	e0bff917 	ldw	r2,-28(fp)
  809c2c:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
  809c30:	e0bff917 	ldw	r2,-28(fp)
  809c34:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
  809c38:	e0bff917 	ldw	r2,-28(fp)
  809c3c:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
  809c40:	e0fff917 	ldw	r3,-28(fp)
  809c44:	e0800317 	ldw	r2,12(fp)
  809c48:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
  809c4c:	e0fff917 	ldw	r3,-28(fp)
  809c50:	e0800217 	ldw	r2,8(fp)
  809c54:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
  809c58:	e0fff917 	ldw	r3,-28(fp)
  809c5c:	e0bffc17 	ldw	r2,-16(fp)
  809c60:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
  809c64:	e0fff917 	ldw	r3,-28(fp)
  809c68:	e0bffe0b 	ldhu	r2,-8(fp)
  809c6c:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
  809c70:	e0fff917 	ldw	r3,-28(fp)
  809c74:	e0bffd0b 	ldhu	r2,-12(fp)
  809c78:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
  809c7c:	e0bff917 	ldw	r2,-28(fp)
  809c80:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
  809c84:	e0bffa03 	ldbu	r2,-24(fp)
  809c88:	1004d0fa 	srli	r2,r2,3
  809c8c:	1007883a 	mov	r3,r2
  809c90:	e0bff917 	ldw	r2,-28(fp)
  809c94:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
  809c98:	e0bffa03 	ldbu	r2,-24(fp)
  809c9c:	108001cc 	andi	r2,r2,7
  809ca0:	1007883a 	mov	r3,r2
  809ca4:	e0bff917 	ldw	r2,-28(fp)
  809ca8:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
  809cac:	e0bff917 	ldw	r2,-28(fp)
  809cb0:	10800d03 	ldbu	r2,52(r2)
  809cb4:	10c03fcc 	andi	r3,r2,255
  809cb8:	00800044 	movi	r2,1
  809cbc:	10c4983a 	sll	r2,r2,r3
  809cc0:	1007883a 	mov	r3,r2
  809cc4:	e0bff917 	ldw	r2,-28(fp)
  809cc8:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
  809ccc:	e0bff917 	ldw	r2,-28(fp)
  809cd0:	10800cc3 	ldbu	r2,51(r2)
  809cd4:	10c03fcc 	andi	r3,r2,255
  809cd8:	00800044 	movi	r2,1
  809cdc:	10c4983a 	sll	r2,r2,r3
  809ce0:	1007883a 	mov	r3,r2
  809ce4:	e0bff917 	ldw	r2,-28(fp)
  809ce8:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
  809cec:	e0bff917 	ldw	r2,-28(fp)
  809cf0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
  809cf4:	e0bff917 	ldw	r2,-28(fp)
  809cf8:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
  809cfc:	e0bff917 	ldw	r2,-28(fp)
  809d00:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
  809d04:	e0bff917 	ldw	r2,-28(fp)
  809d08:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
  809d0c:	e0bff917 	ldw	r2,-28(fp)
  809d10:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
  809d14:	e0bff917 	ldw	r2,-28(fp)
  809d18:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
  809d1c:	e0bff917 	ldw	r2,-28(fp)
  809d20:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
  809d24:	e0bff917 	ldw	r2,-28(fp)
  809d28:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
  809d2c:	e0bff917 	ldw	r2,-28(fp)
  809d30:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
  809d34:	e0fff917 	ldw	r3,-28(fp)
  809d38:	00800fc4 	movi	r2,63
  809d3c:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  809d40:	e0bff917 	ldw	r2,-28(fp)
  809d44:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
  809d48:	e13ff917 	ldw	r4,-28(fp)
  809d4c:	0813a100 	call	813a10 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
  809d50:	e13ff917 	ldw	r4,-28(fp)
  809d54:	08139280 	call	813928 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809d58:	0005303a 	rdctl	r2,status
  809d5c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809d60:	e0fff517 	ldw	r3,-44(fp)
  809d64:	00bfff84 	movi	r2,-2
  809d68:	1884703a 	and	r2,r3,r2
  809d6c:	1001703a 	wrctl	status,r2
  
  return context;
  809d70:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
  809d74:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
  809d78:	e0bffa03 	ldbu	r2,-24(fp)
  809d7c:	00c020b4 	movhi	r3,130
  809d80:	18fbd304 	addi	r3,r3,-4276
  809d84:	1085883a 	add	r2,r2,r2
  809d88:	1085883a 	add	r2,r2,r2
  809d8c:	10c7883a 	add	r3,r2,r3
  809d90:	e0bff917 	ldw	r2,-28(fp)
  809d94:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
  809d98:	d0e71717 	ldw	r3,-25508(gp)
  809d9c:	e0bff917 	ldw	r2,-28(fp)
  809da0:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
  809da4:	e0bff917 	ldw	r2,-28(fp)
  809da8:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
  809dac:	d0a71717 	ldw	r2,-25508(gp)
  809db0:	1005003a 	cmpeq	r2,r2,zero
  809db4:	1000031e 	bne	r2,zero,809dc4 <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
  809db8:	d0e71717 	ldw	r3,-25508(gp)
  809dbc:	e0bff917 	ldw	r2,-28(fp)
  809dc0:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
  809dc4:	e0bff917 	ldw	r2,-28(fp)
  809dc8:	d0a71715 	stw	r2,-25508(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
  809dcc:	e0bff917 	ldw	r2,-28(fp)
  809dd0:	10c00d83 	ldbu	r3,54(r2)
  809dd4:	d0a72003 	ldbu	r2,-25472(gp)
  809dd8:	1884b03a 	or	r2,r3,r2
  809ddc:	d0a72005 	stb	r2,-25472(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  809de0:	e0bff917 	ldw	r2,-28(fp)
  809de4:	10800d03 	ldbu	r2,52(r2)
  809de8:	11003fcc 	andi	r4,r2,255
  809dec:	e0bff917 	ldw	r2,-28(fp)
  809df0:	10800d03 	ldbu	r2,52(r2)
  809df4:	10c03fcc 	andi	r3,r2,255
  809df8:	d0a72044 	addi	r2,gp,-25471
  809dfc:	1885883a 	add	r2,r3,r2
  809e00:	10c00003 	ldbu	r3,0(r2)
  809e04:	e0bff917 	ldw	r2,-28(fp)
  809e08:	10800d43 	ldbu	r2,53(r2)
  809e0c:	1884b03a 	or	r2,r3,r2
  809e10:	1007883a 	mov	r3,r2
  809e14:	d0a72044 	addi	r2,gp,-25471
  809e18:	2085883a 	add	r2,r4,r2
  809e1c:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
  809e20:	d0a71c43 	ldbu	r2,-25487(gp)
  809e24:	10800044 	addi	r2,r2,1
  809e28:	d0a71c45 	stb	r2,-25487(gp)
  809e2c:	e0bff817 	ldw	r2,-32(fp)
  809e30:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809e34:	e0bff417 	ldw	r2,-48(fp)
  809e38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  809e3c:	e03fff15 	stw	zero,-4(fp)
  809e40:	00000606 	br	809e5c <OS_TCBInit+0x2c8>
  809e44:	e0bff817 	ldw	r2,-32(fp)
  809e48:	e0bff315 	stw	r2,-52(fp)
  809e4c:	e0bff317 	ldw	r2,-52(fp)
  809e50:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
  809e54:	00801084 	movi	r2,66
  809e58:	e0bfff15 	stw	r2,-4(fp)
  809e5c:	e0bfff17 	ldw	r2,-4(fp)
}
  809e60:	e037883a 	mov	sp,fp
  809e64:	dfc00117 	ldw	ra,4(sp)
  809e68:	df000017 	ldw	fp,0(sp)
  809e6c:	dec00204 	addi	sp,sp,8
  809e70:	f800283a 	ret

00809e74 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
  809e74:	defffe04 	addi	sp,sp,-8
  809e78:	df000115 	stw	fp,4(sp)
  809e7c:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
  809e80:	d0a00e04 	addi	r2,gp,-32712
  809e84:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
  809e88:	d0a00f04 	addi	r2,gp,-32708
  809e8c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
  809e90:	d0a01084 	addi	r2,gp,-32702
  809e94:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
  809e98:	d0a01104 	addi	r2,gp,-32700
  809e9c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
  809ea0:	d0a01004 	addi	r2,gp,-32704
  809ea4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
  809ea8:	d0a01184 	addi	r2,gp,-32698
  809eac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
  809eb0:	d0a01204 	addi	r2,gp,-32696
  809eb4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
  809eb8:	d0a01284 	addi	r2,gp,-32694
  809ebc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
  809ec0:	d0a01304 	addi	r2,gp,-32692
  809ec4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
  809ec8:	d0a01384 	addi	r2,gp,-32690
  809ecc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
  809ed0:	d0a01404 	addi	r2,gp,-32688
  809ed4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
  809ed8:	d0a01484 	addi	r2,gp,-32686
  809edc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
  809ee0:	d0a01504 	addi	r2,gp,-32684
  809ee4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
  809ee8:	d0a01584 	addi	r2,gp,-32682
  809eec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
  809ef0:	d0a01604 	addi	r2,gp,-32680
  809ef4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
  809ef8:	d0a01684 	addi	r2,gp,-32678
  809efc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
  809f00:	d0a01704 	addi	r2,gp,-32676
  809f04:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
  809f08:	d0a01784 	addi	r2,gp,-32674
  809f0c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
  809f10:	d0a01804 	addi	r2,gp,-32672
  809f14:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
  809f18:	d0a01884 	addi	r2,gp,-32670
  809f1c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
  809f20:	d0a01904 	addi	r2,gp,-32668
  809f24:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
  809f28:	d0a01984 	addi	r2,gp,-32666
  809f2c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
  809f30:	d0a01a04 	addi	r2,gp,-32664
  809f34:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
  809f38:	d0a01a84 	addi	r2,gp,-32662
  809f3c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
  809f40:	d0a01b04 	addi	r2,gp,-32660
  809f44:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
  809f48:	d0a01b84 	addi	r2,gp,-32658
  809f4c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
  809f50:	d0a01c04 	addi	r2,gp,-32656
  809f54:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
  809f58:	d0a01c84 	addi	r2,gp,-32654
  809f5c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
  809f60:	d0a01d04 	addi	r2,gp,-32652
  809f64:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
  809f68:	d0a01d84 	addi	r2,gp,-32650
  809f6c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
  809f70:	d0a01e04 	addi	r2,gp,-32648
  809f74:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
  809f78:	d0a01e84 	addi	r2,gp,-32646
  809f7c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
  809f80:	d0a01f04 	addi	r2,gp,-32644
  809f84:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
  809f88:	d0a01f84 	addi	r2,gp,-32642
  809f8c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
  809f90:	d0a02004 	addi	r2,gp,-32640
  809f94:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
  809f98:	d0a02084 	addi	r2,gp,-32638
  809f9c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
  809fa0:	d0a02104 	addi	r2,gp,-32636
  809fa4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
  809fa8:	d0a02184 	addi	r2,gp,-32634
  809fac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
  809fb0:	d0a02204 	addi	r2,gp,-32632
  809fb4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
  809fb8:	d0a02284 	addi	r2,gp,-32630
  809fbc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
  809fc0:	d0a02304 	addi	r2,gp,-32628
  809fc4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
  809fc8:	d0a02384 	addi	r2,gp,-32626
  809fcc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
  809fd0:	d0a02404 	addi	r2,gp,-32624
  809fd4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
  809fd8:	d0a02484 	addi	r2,gp,-32622
  809fdc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
  809fe0:	d0a02504 	addi	r2,gp,-32620
  809fe4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
  809fe8:	d0a02a04 	addi	r2,gp,-32600
  809fec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
  809ff0:	e037883a 	mov	sp,fp
  809ff4:	df000017 	ldw	fp,0(sp)
  809ff8:	dec00104 	addi	sp,sp,4
  809ffc:	f800283a 	ret

0080a000 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
  80a000:	defff104 	addi	sp,sp,-60
  80a004:	df000e15 	stw	fp,56(sp)
  80a008:	df000e04 	addi	fp,sp,56
  80a00c:	e13ffa15 	stw	r4,-24(fp)
  80a010:	e1fffd15 	stw	r7,-12(fp)
  80a014:	e17ffb0d 	sth	r5,-20(fp)
  80a018:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  80a01c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80a020:	e0bffd17 	ldw	r2,-12(fp)
  80a024:	1004c03a 	cmpne	r2,r2,zero
  80a028:	1000021e 	bne	r2,zero,80a034 <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
  80a02c:	e03fff15 	stw	zero,-4(fp)
  80a030:	0000bb06 	br	80a320 <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  80a034:	e0bffa17 	ldw	r2,-24(fp)
  80a038:	1004c03a 	cmpne	r2,r2,zero
  80a03c:	1000051e 	bne	r2,zero,80a054 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80a040:	e0fffd17 	ldw	r3,-12(fp)
  80a044:	00801b84 	movi	r2,110
  80a048:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80a04c:	e03fff15 	stw	zero,-4(fp)
  80a050:	0000b306 	br	80a320 <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  80a054:	e0bffa17 	ldw	r2,-24(fp)
  80a058:	10800003 	ldbu	r2,0(r2)
  80a05c:	10803fcc 	andi	r2,r2,255
  80a060:	10800160 	cmpeqi	r2,r2,5
  80a064:	1000051e 	bne	r2,zero,80a07c <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  80a068:	e0fffd17 	ldw	r3,-12(fp)
  80a06c:	00800044 	movi	r2,1
  80a070:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80a074:	e03fff15 	stw	zero,-4(fp)
  80a078:	0000a906 	br	80a320 <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  80a07c:	e0fffc03 	ldbu	r3,-16(fp)
  80a080:	00bfe004 	movi	r2,-128
  80a084:	1884703a 	and	r2,r3,r2
  80a088:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
  80a08c:	e0bff943 	ldbu	r2,-27(fp)
  80a090:	1005003a 	cmpeq	r2,r2,zero
  80a094:	1000061e 	bne	r2,zero,80a0b0 <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
  80a098:	e0bffc03 	ldbu	r2,-16(fp)
  80a09c:	10801fcc 	andi	r2,r2,127
  80a0a0:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
  80a0a4:	00800044 	movi	r2,1
  80a0a8:	e0bff905 	stb	r2,-28(fp)
  80a0ac:	00000106 	br	80a0b4 <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
  80a0b0:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
  80a0b4:	e0bffd17 	ldw	r2,-12(fp)
  80a0b8:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a0bc:	0005303a 	rdctl	r2,status
  80a0c0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a0c4:	e0fff717 	ldw	r3,-36(fp)
  80a0c8:	00bfff84 	movi	r2,-2
  80a0cc:	1884703a 	and	r2,r3,r2
  80a0d0:	1001703a 	wrctl	status,r2
  
  return context;
  80a0d4:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  80a0d8:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
  80a0dc:	e0bffc03 	ldbu	r2,-16(fp)
  80a0e0:	e0bffe15 	stw	r2,-8(fp)
  80a0e4:	e0fffe17 	ldw	r3,-8(fp)
  80a0e8:	18800060 	cmpeqi	r2,r3,1
  80a0ec:	1000651e 	bne	r2,zero,80a284 <OSFlagAccept+0x284>
  80a0f0:	e0fffe17 	ldw	r3,-8(fp)
  80a0f4:	18800088 	cmpgei	r2,r3,2
  80a0f8:	1000041e 	bne	r2,zero,80a10c <OSFlagAccept+0x10c>
  80a0fc:	e0fffe17 	ldw	r3,-8(fp)
  80a100:	1805003a 	cmpeq	r2,r3,zero
  80a104:	1000421e 	bne	r2,zero,80a210 <OSFlagAccept+0x210>
  80a108:	00007b06 	br	80a2f8 <OSFlagAccept+0x2f8>
  80a10c:	e0fffe17 	ldw	r3,-8(fp)
  80a110:	188000a0 	cmpeqi	r2,r3,2
  80a114:	1000041e 	bne	r2,zero,80a128 <OSFlagAccept+0x128>
  80a118:	e0fffe17 	ldw	r3,-8(fp)
  80a11c:	188000e0 	cmpeqi	r2,r3,3
  80a120:	10001e1e 	bne	r2,zero,80a19c <OSFlagAccept+0x19c>
  80a124:	00007406 	br	80a2f8 <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  80a128:	e0bffa17 	ldw	r2,-24(fp)
  80a12c:	10c0020b 	ldhu	r3,8(r2)
  80a130:	e0bffb0b 	ldhu	r2,-20(fp)
  80a134:	1884703a 	and	r2,r3,r2
  80a138:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  80a13c:	e0fff98b 	ldhu	r3,-26(fp)
  80a140:	e0bffb0b 	ldhu	r2,-20(fp)
  80a144:	18800d1e 	bne	r3,r2,80a17c <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80a148:	e0bff903 	ldbu	r2,-28(fp)
  80a14c:	10800058 	cmpnei	r2,r2,1
  80a150:	10000d1e 	bne	r2,zero,80a188 <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  80a154:	e0bffa17 	ldw	r2,-24(fp)
  80a158:	1080020b 	ldhu	r2,8(r2)
  80a15c:	1007883a 	mov	r3,r2
  80a160:	e0bff98b 	ldhu	r2,-26(fp)
  80a164:	0084303a 	nor	r2,zero,r2
  80a168:	1884703a 	and	r2,r3,r2
  80a16c:	1007883a 	mov	r3,r2
  80a170:	e0bffa17 	ldw	r2,-24(fp)
  80a174:	10c0020d 	sth	r3,8(r2)
  80a178:	00000306 	br	80a188 <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80a17c:	e0fffd17 	ldw	r3,-12(fp)
  80a180:	00801c04 	movi	r2,112
  80a184:	18800005 	stb	r2,0(r3)
  80a188:	e0bff817 	ldw	r2,-32(fp)
  80a18c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a190:	e0bff617 	ldw	r2,-40(fp)
  80a194:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80a198:	00005f06 	br	80a318 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  80a19c:	e0bffa17 	ldw	r2,-24(fp)
  80a1a0:	10c0020b 	ldhu	r3,8(r2)
  80a1a4:	e0bffb0b 	ldhu	r2,-20(fp)
  80a1a8:	1884703a 	and	r2,r3,r2
  80a1ac:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  80a1b0:	e0bff98b 	ldhu	r2,-26(fp)
  80a1b4:	1005003a 	cmpeq	r2,r2,zero
  80a1b8:	10000d1e 	bne	r2,zero,80a1f0 <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80a1bc:	e0bff903 	ldbu	r2,-28(fp)
  80a1c0:	10800058 	cmpnei	r2,r2,1
  80a1c4:	10000d1e 	bne	r2,zero,80a1fc <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  80a1c8:	e0bffa17 	ldw	r2,-24(fp)
  80a1cc:	1080020b 	ldhu	r2,8(r2)
  80a1d0:	1007883a 	mov	r3,r2
  80a1d4:	e0bff98b 	ldhu	r2,-26(fp)
  80a1d8:	0084303a 	nor	r2,zero,r2
  80a1dc:	1884703a 	and	r2,r3,r2
  80a1e0:	1007883a 	mov	r3,r2
  80a1e4:	e0bffa17 	ldw	r2,-24(fp)
  80a1e8:	10c0020d 	sth	r3,8(r2)
  80a1ec:	00000306 	br	80a1fc <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80a1f0:	e0fffd17 	ldw	r3,-12(fp)
  80a1f4:	00801c04 	movi	r2,112
  80a1f8:	18800005 	stb	r2,0(r3)
  80a1fc:	e0bff817 	ldw	r2,-32(fp)
  80a200:	e0bff515 	stw	r2,-44(fp)
  80a204:	e0bff517 	ldw	r2,-44(fp)
  80a208:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80a20c:	00004206 	br	80a318 <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  80a210:	e0bffa17 	ldw	r2,-24(fp)
  80a214:	1080020b 	ldhu	r2,8(r2)
  80a218:	0084303a 	nor	r2,zero,r2
  80a21c:	1007883a 	mov	r3,r2
  80a220:	e0bffb0b 	ldhu	r2,-20(fp)
  80a224:	1884703a 	and	r2,r3,r2
  80a228:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  80a22c:	e0fff98b 	ldhu	r3,-26(fp)
  80a230:	e0bffb0b 	ldhu	r2,-20(fp)
  80a234:	18800b1e 	bne	r3,r2,80a264 <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80a238:	e0bff903 	ldbu	r2,-28(fp)
  80a23c:	10800058 	cmpnei	r2,r2,1
  80a240:	10000b1e 	bne	r2,zero,80a270 <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  80a244:	e0bffa17 	ldw	r2,-24(fp)
  80a248:	10c0020b 	ldhu	r3,8(r2)
  80a24c:	e0bff98b 	ldhu	r2,-26(fp)
  80a250:	1884b03a 	or	r2,r3,r2
  80a254:	1007883a 	mov	r3,r2
  80a258:	e0bffa17 	ldw	r2,-24(fp)
  80a25c:	10c0020d 	sth	r3,8(r2)
  80a260:	00000306 	br	80a270 <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80a264:	e0fffd17 	ldw	r3,-12(fp)
  80a268:	00801c04 	movi	r2,112
  80a26c:	18800005 	stb	r2,0(r3)
  80a270:	e0bff817 	ldw	r2,-32(fp)
  80a274:	e0bff415 	stw	r2,-48(fp)
  80a278:	e0bff417 	ldw	r2,-48(fp)
  80a27c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80a280:	00002506 	br	80a318 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  80a284:	e0bffa17 	ldw	r2,-24(fp)
  80a288:	1080020b 	ldhu	r2,8(r2)
  80a28c:	0084303a 	nor	r2,zero,r2
  80a290:	1007883a 	mov	r3,r2
  80a294:	e0bffb0b 	ldhu	r2,-20(fp)
  80a298:	1884703a 	and	r2,r3,r2
  80a29c:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  80a2a0:	e0bff98b 	ldhu	r2,-26(fp)
  80a2a4:	1005003a 	cmpeq	r2,r2,zero
  80a2a8:	10000b1e 	bne	r2,zero,80a2d8 <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80a2ac:	e0bff903 	ldbu	r2,-28(fp)
  80a2b0:	10800058 	cmpnei	r2,r2,1
  80a2b4:	10000b1e 	bne	r2,zero,80a2e4 <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  80a2b8:	e0bffa17 	ldw	r2,-24(fp)
  80a2bc:	10c0020b 	ldhu	r3,8(r2)
  80a2c0:	e0bff98b 	ldhu	r2,-26(fp)
  80a2c4:	1884b03a 	or	r2,r3,r2
  80a2c8:	1007883a 	mov	r3,r2
  80a2cc:	e0bffa17 	ldw	r2,-24(fp)
  80a2d0:	10c0020d 	sth	r3,8(r2)
  80a2d4:	00000306 	br	80a2e4 <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80a2d8:	e0fffd17 	ldw	r3,-12(fp)
  80a2dc:	00801c04 	movi	r2,112
  80a2e0:	18800005 	stb	r2,0(r3)
  80a2e4:	e0bff817 	ldw	r2,-32(fp)
  80a2e8:	e0bff315 	stw	r2,-52(fp)
  80a2ec:	e0bff317 	ldw	r2,-52(fp)
  80a2f0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80a2f4:	00000806 	br	80a318 <OSFlagAccept+0x318>
  80a2f8:	e0bff817 	ldw	r2,-32(fp)
  80a2fc:	e0bff215 	stw	r2,-56(fp)
  80a300:	e0bff217 	ldw	r2,-56(fp)
  80a304:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  80a308:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
  80a30c:	e0fffd17 	ldw	r3,-12(fp)
  80a310:	00801bc4 	movi	r2,111
  80a314:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
  80a318:	e0bff98b 	ldhu	r2,-26(fp)
  80a31c:	e0bfff15 	stw	r2,-4(fp)
  80a320:	e0bfff17 	ldw	r2,-4(fp)
}
  80a324:	e037883a 	mov	sp,fp
  80a328:	df000017 	ldw	fp,0(sp)
  80a32c:	dec00104 	addi	sp,sp,4
  80a330:	f800283a 	ret

0080a334 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
  80a334:	defff704 	addi	sp,sp,-36
  80a338:	df000815 	stw	fp,32(sp)
  80a33c:	df000804 	addi	fp,sp,32
  80a340:	e17ffe15 	stw	r5,-8(fp)
  80a344:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
  80a348:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
  80a34c:	e0bffe17 	ldw	r2,-8(fp)
  80a350:	1004c03a 	cmpne	r2,r2,zero
  80a354:	1000021e 	bne	r2,zero,80a360 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
  80a358:	e03fff15 	stw	zero,-4(fp)
  80a35c:	00003f06 	br	80a45c <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
  80a360:	00802074 	movhi	r2,129
  80a364:	109f4c04 	addi	r2,r2,32048
  80a368:	10800003 	ldbu	r2,0(r2)
  80a36c:	10803fcc 	andi	r2,r2,255
  80a370:	1005003a 	cmpeq	r2,r2,zero
  80a374:	1000051e 	bne	r2,zero,80a38c <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
  80a378:	e0fffe17 	ldw	r3,-8(fp)
  80a37c:	00800404 	movi	r2,16
  80a380:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
  80a384:	e03fff15 	stw	zero,-4(fp)
  80a388:	00003406 	br	80a45c <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a38c:	0005303a 	rdctl	r2,status
  80a390:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a394:	e0fffa17 	ldw	r3,-24(fp)
  80a398:	00bfff84 	movi	r2,-2
  80a39c:	1884703a 	and	r2,r3,r2
  80a3a0:	1001703a 	wrctl	status,r2
  
  return context;
  80a3a4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80a3a8:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
  80a3ac:	00802074 	movhi	r2,129
  80a3b0:	109f4f04 	addi	r2,r2,32060
  80a3b4:	10800017 	ldw	r2,0(r2)
  80a3b8:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
  80a3bc:	e0bffc17 	ldw	r2,-16(fp)
  80a3c0:	1005003a 	cmpeq	r2,r2,zero
  80a3c4:	10001c1e 	bne	r2,zero,80a438 <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
  80a3c8:	00802074 	movhi	r2,129
  80a3cc:	109f4f04 	addi	r2,r2,32060
  80a3d0:	10800017 	ldw	r2,0(r2)
  80a3d4:	10800117 	ldw	r2,4(r2)
  80a3d8:	1007883a 	mov	r3,r2
  80a3dc:	00802074 	movhi	r2,129
  80a3e0:	109f4f04 	addi	r2,r2,32060
  80a3e4:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
  80a3e8:	e0fffc17 	ldw	r3,-16(fp)
  80a3ec:	00800144 	movi	r2,5
  80a3f0:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
  80a3f4:	e0fffc17 	ldw	r3,-16(fp)
  80a3f8:	e0bffd0b 	ldhu	r2,-12(fp)
  80a3fc:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
  80a400:	e0bffc17 	ldw	r2,-16(fp)
  80a404:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
  80a408:	e0fffc17 	ldw	r3,-16(fp)
  80a40c:	00800fc4 	movi	r2,63
  80a410:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  80a414:	e0bffc17 	ldw	r2,-16(fp)
  80a418:	100002c5 	stb	zero,11(r2)
  80a41c:	e0bffb17 	ldw	r2,-20(fp)
  80a420:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a424:	e0bff917 	ldw	r2,-28(fp)
  80a428:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
  80a42c:	e0bffe17 	ldw	r2,-8(fp)
  80a430:	10000005 	stb	zero,0(r2)
  80a434:	00000706 	br	80a454 <OSFlagCreate+0x120>
  80a438:	e0bffb17 	ldw	r2,-20(fp)
  80a43c:	e0bff815 	stw	r2,-32(fp)
  80a440:	e0bff817 	ldw	r2,-32(fp)
  80a444:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
  80a448:	e0fffe17 	ldw	r3,-8(fp)
  80a44c:	00801c84 	movi	r2,114
  80a450:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
  80a454:	e0bffc17 	ldw	r2,-16(fp)
  80a458:	e0bfff15 	stw	r2,-4(fp)
  80a45c:	e0bfff17 	ldw	r2,-4(fp)
}
  80a460:	e037883a 	mov	sp,fp
  80a464:	df000017 	ldw	fp,0(sp)
  80a468:	dec00104 	addi	sp,sp,4
  80a46c:	f800283a 	ret

0080a470 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
  80a470:	defff004 	addi	sp,sp,-64
  80a474:	dfc00f15 	stw	ra,60(sp)
  80a478:	df000e15 	stw	fp,56(sp)
  80a47c:	df000e04 	addi	fp,sp,56
  80a480:	e13ffb15 	stw	r4,-20(fp)
  80a484:	e1bffd15 	stw	r6,-12(fp)
  80a488:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  80a48c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80a490:	e0bffd17 	ldw	r2,-12(fp)
  80a494:	1004c03a 	cmpne	r2,r2,zero
  80a498:	1000031e 	bne	r2,zero,80a4a8 <OSFlagDel+0x38>
        return (pgrp);
  80a49c:	e0bffb17 	ldw	r2,-20(fp)
  80a4a0:	e0bfff15 	stw	r2,-4(fp)
  80a4a4:	00009606 	br	80a700 <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  80a4a8:	e0bffb17 	ldw	r2,-20(fp)
  80a4ac:	1004c03a 	cmpne	r2,r2,zero
  80a4b0:	1000061e 	bne	r2,zero,80a4cc <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80a4b4:	e0fffd17 	ldw	r3,-12(fp)
  80a4b8:	00801b84 	movi	r2,110
  80a4bc:	18800005 	stb	r2,0(r3)
        return (pgrp);
  80a4c0:	e0fffb17 	ldw	r3,-20(fp)
  80a4c4:	e0ffff15 	stw	r3,-4(fp)
  80a4c8:	00008d06 	br	80a700 <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  80a4cc:	00802074 	movhi	r2,129
  80a4d0:	109f4c04 	addi	r2,r2,32048
  80a4d4:	10800003 	ldbu	r2,0(r2)
  80a4d8:	10803fcc 	andi	r2,r2,255
  80a4dc:	1005003a 	cmpeq	r2,r2,zero
  80a4e0:	1000061e 	bne	r2,zero,80a4fc <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  80a4e4:	e0fffd17 	ldw	r3,-12(fp)
  80a4e8:	008003c4 	movi	r2,15
  80a4ec:	18800005 	stb	r2,0(r3)
        return (pgrp);
  80a4f0:	e0bffb17 	ldw	r2,-20(fp)
  80a4f4:	e0bfff15 	stw	r2,-4(fp)
  80a4f8:	00008106 	br	80a700 <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
  80a4fc:	e0bffb17 	ldw	r2,-20(fp)
  80a500:	10800003 	ldbu	r2,0(r2)
  80a504:	10803fcc 	andi	r2,r2,255
  80a508:	10800160 	cmpeqi	r2,r2,5
  80a50c:	1000061e 	bne	r2,zero,80a528 <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
  80a510:	e0fffd17 	ldw	r3,-12(fp)
  80a514:	00800044 	movi	r2,1
  80a518:	18800005 	stb	r2,0(r3)
        return (pgrp);
  80a51c:	e0fffb17 	ldw	r3,-20(fp)
  80a520:	e0ffff15 	stw	r3,-4(fp)
  80a524:	00007606 	br	80a700 <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a528:	0005303a 	rdctl	r2,status
  80a52c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a530:	e0fff617 	ldw	r3,-40(fp)
  80a534:	00bfff84 	movi	r2,-2
  80a538:	1884703a 	and	r2,r3,r2
  80a53c:	1001703a 	wrctl	status,r2
  
  return context;
  80a540:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  80a544:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
  80a548:	e0bffb17 	ldw	r2,-20(fp)
  80a54c:	10800117 	ldw	r2,4(r2)
  80a550:	1005003a 	cmpeq	r2,r2,zero
  80a554:	1000031e 	bne	r2,zero,80a564 <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  80a558:	00800044 	movi	r2,1
  80a55c:	e0bffa05 	stb	r2,-24(fp)
  80a560:	00000106 	br	80a568 <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  80a564:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  80a568:	e0bffc03 	ldbu	r2,-16(fp)
  80a56c:	e0bffe15 	stw	r2,-8(fp)
  80a570:	e0fffe17 	ldw	r3,-8(fp)
  80a574:	1805003a 	cmpeq	r2,r3,zero
  80a578:	1000041e 	bne	r2,zero,80a58c <OSFlagDel+0x11c>
  80a57c:	e0fffe17 	ldw	r3,-8(fp)
  80a580:	18800060 	cmpeqi	r2,r3,1
  80a584:	1000281e 	bne	r2,zero,80a628 <OSFlagDel+0x1b8>
  80a588:	00005206 	br	80a6d4 <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
  80a58c:	e0bffa03 	ldbu	r2,-24(fp)
  80a590:	1004c03a 	cmpne	r2,r2,zero
  80a594:	10001a1e 	bne	r2,zero,80a600 <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
  80a598:	e0fffb17 	ldw	r3,-20(fp)
  80a59c:	00800fc4 	movi	r2,63
  80a5a0:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  80a5a4:	e0bffb17 	ldw	r2,-20(fp)
  80a5a8:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  80a5ac:	e0bffb17 	ldw	r2,-20(fp)
  80a5b0:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
  80a5b4:	00802074 	movhi	r2,129
  80a5b8:	109f4f04 	addi	r2,r2,32060
  80a5bc:	10c00017 	ldw	r3,0(r2)
  80a5c0:	e0bffb17 	ldw	r2,-20(fp)
  80a5c4:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
  80a5c8:	e0bffb17 	ldw	r2,-20(fp)
  80a5cc:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
  80a5d0:	00c02074 	movhi	r3,129
  80a5d4:	18df4f04 	addi	r3,r3,32060
  80a5d8:	e0bffb17 	ldw	r2,-20(fp)
  80a5dc:	18800015 	stw	r2,0(r3)
  80a5e0:	e0bff717 	ldw	r2,-36(fp)
  80a5e4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a5e8:	e0bff517 	ldw	r2,-44(fp)
  80a5ec:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
  80a5f0:	e0bffd17 	ldw	r2,-12(fp)
  80a5f4:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
  80a5f8:	e03ff815 	stw	zero,-32(fp)
  80a5fc:	00003e06 	br	80a6f8 <OSFlagDel+0x288>
  80a600:	e0bff717 	ldw	r2,-36(fp)
  80a604:	e0bff415 	stw	r2,-48(fp)
  80a608:	e0bff417 	ldw	r2,-48(fp)
  80a60c:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
  80a610:	e0fffd17 	ldw	r3,-12(fp)
  80a614:	00801244 	movi	r2,73
  80a618:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
  80a61c:	e0bffb17 	ldw	r2,-20(fp)
  80a620:	e0bff815 	stw	r2,-32(fp)
             }
             break;
  80a624:	00003406 	br	80a6f8 <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  80a628:	e0bffb17 	ldw	r2,-20(fp)
  80a62c:	10800117 	ldw	r2,4(r2)
  80a630:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  80a634:	00000606 	br	80a650 <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
  80a638:	e13ff917 	ldw	r4,-28(fp)
  80a63c:	000b883a 	mov	r5,zero
  80a640:	080b7800 	call	80b780 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  80a644:	e0bff917 	ldw	r2,-28(fp)
  80a648:	10800017 	ldw	r2,0(r2)
  80a64c:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  80a650:	e0bff917 	ldw	r2,-28(fp)
  80a654:	1004c03a 	cmpne	r2,r2,zero
  80a658:	103ff71e 	bne	r2,zero,80a638 <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
  80a65c:	e0fffb17 	ldw	r3,-20(fp)
  80a660:	00800fc4 	movi	r2,63
  80a664:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  80a668:	e0bffb17 	ldw	r2,-20(fp)
  80a66c:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  80a670:	e0bffb17 	ldw	r2,-20(fp)
  80a674:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
  80a678:	00802074 	movhi	r2,129
  80a67c:	109f4f04 	addi	r2,r2,32060
  80a680:	10c00017 	ldw	r3,0(r2)
  80a684:	e0bffb17 	ldw	r2,-20(fp)
  80a688:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
  80a68c:	e0bffb17 	ldw	r2,-20(fp)
  80a690:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
  80a694:	00c02074 	movhi	r3,129
  80a698:	18df4f04 	addi	r3,r3,32060
  80a69c:	e0bffb17 	ldw	r2,-20(fp)
  80a6a0:	18800015 	stw	r2,0(r3)
  80a6a4:	e0bff717 	ldw	r2,-36(fp)
  80a6a8:	e0bff315 	stw	r2,-52(fp)
  80a6ac:	e0bff317 	ldw	r2,-52(fp)
  80a6b0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  80a6b4:	e0bffa03 	ldbu	r2,-24(fp)
  80a6b8:	10800058 	cmpnei	r2,r2,1
  80a6bc:	1000011e 	bne	r2,zero,80a6c4 <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  80a6c0:	080978c0 	call	80978c <OS_Sched>
             }
             *perr = OS_ERR_NONE;
  80a6c4:	e0bffd17 	ldw	r2,-12(fp)
  80a6c8:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
  80a6cc:	e03ff815 	stw	zero,-32(fp)
             break;
  80a6d0:	00000906 	br	80a6f8 <OSFlagDel+0x288>
  80a6d4:	e0bff717 	ldw	r2,-36(fp)
  80a6d8:	e0bff215 	stw	r2,-56(fp)
  80a6dc:	e0bff217 	ldw	r2,-56(fp)
  80a6e0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
  80a6e4:	e0fffd17 	ldw	r3,-12(fp)
  80a6e8:	008001c4 	movi	r2,7
  80a6ec:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
  80a6f0:	e0bffb17 	ldw	r2,-20(fp)
  80a6f4:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
  80a6f8:	e0bff817 	ldw	r2,-32(fp)
  80a6fc:	e0bfff15 	stw	r2,-4(fp)
  80a700:	e0bfff17 	ldw	r2,-4(fp)
}
  80a704:	e037883a 	mov	sp,fp
  80a708:	dfc00117 	ldw	ra,4(sp)
  80a70c:	df000017 	ldw	fp,0(sp)
  80a710:	dec00204 	addi	sp,sp,8
  80a714:	f800283a 	ret

0080a718 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  80a718:	defff504 	addi	sp,sp,-44
  80a71c:	dfc00a15 	stw	ra,40(sp)
  80a720:	df000915 	stw	fp,36(sp)
  80a724:	df000904 	addi	fp,sp,36
  80a728:	e13ffc15 	stw	r4,-16(fp)
  80a72c:	e17ffd15 	stw	r5,-12(fp)
  80a730:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80a734:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80a738:	e0bffe17 	ldw	r2,-8(fp)
  80a73c:	1004c03a 	cmpne	r2,r2,zero
  80a740:	1000021e 	bne	r2,zero,80a74c <OSFlagNameGet+0x34>
        return (0);
  80a744:	e03fff15 	stw	zero,-4(fp)
  80a748:	00003e06 	br	80a844 <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  80a74c:	e0bffc17 	ldw	r2,-16(fp)
  80a750:	1004c03a 	cmpne	r2,r2,zero
  80a754:	1000051e 	bne	r2,zero,80a76c <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80a758:	e0fffe17 	ldw	r3,-8(fp)
  80a75c:	00801b84 	movi	r2,110
  80a760:	18800005 	stb	r2,0(r3)
        return (0);
  80a764:	e03fff15 	stw	zero,-4(fp)
  80a768:	00003606 	br	80a844 <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80a76c:	e0bffd17 	ldw	r2,-12(fp)
  80a770:	1004c03a 	cmpne	r2,r2,zero
  80a774:	1000051e 	bne	r2,zero,80a78c <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  80a778:	e0fffe17 	ldw	r3,-8(fp)
  80a77c:	00800304 	movi	r2,12
  80a780:	18800005 	stb	r2,0(r3)
        return (0);
  80a784:	e03fff15 	stw	zero,-4(fp)
  80a788:	00002e06 	br	80a844 <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80a78c:	00802074 	movhi	r2,129
  80a790:	109f4c04 	addi	r2,r2,32048
  80a794:	10800003 	ldbu	r2,0(r2)
  80a798:	10803fcc 	andi	r2,r2,255
  80a79c:	1005003a 	cmpeq	r2,r2,zero
  80a7a0:	1000051e 	bne	r2,zero,80a7b8 <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
  80a7a4:	e0fffe17 	ldw	r3,-8(fp)
  80a7a8:	00800444 	movi	r2,17
  80a7ac:	18800005 	stb	r2,0(r3)
        return (0);
  80a7b0:	e03fff15 	stw	zero,-4(fp)
  80a7b4:	00002306 	br	80a844 <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a7b8:	0005303a 	rdctl	r2,status
  80a7bc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a7c0:	e0fff917 	ldw	r3,-28(fp)
  80a7c4:	00bfff84 	movi	r2,-2
  80a7c8:	1884703a 	and	r2,r3,r2
  80a7cc:	1001703a 	wrctl	status,r2
  
  return context;
  80a7d0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80a7d4:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  80a7d8:	e0bffc17 	ldw	r2,-16(fp)
  80a7dc:	10800003 	ldbu	r2,0(r2)
  80a7e0:	10803fcc 	andi	r2,r2,255
  80a7e4:	10800160 	cmpeqi	r2,r2,5
  80a7e8:	1000091e 	bne	r2,zero,80a810 <OSFlagNameGet+0xf8>
  80a7ec:	e0bffa17 	ldw	r2,-24(fp)
  80a7f0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a7f4:	e0bff817 	ldw	r2,-32(fp)
  80a7f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  80a7fc:	e0fffe17 	ldw	r3,-8(fp)
  80a800:	00800044 	movi	r2,1
  80a804:	18800005 	stb	r2,0(r3)
        return (0);
  80a808:	e03fff15 	stw	zero,-4(fp)
  80a80c:	00000d06 	br	80a844 <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
  80a810:	e0bffc17 	ldw	r2,-16(fp)
  80a814:	11400284 	addi	r5,r2,10
  80a818:	e13ffd17 	ldw	r4,-12(fp)
  80a81c:	08098d00 	call	8098d0 <OS_StrCopy>
  80a820:	e0bffb05 	stb	r2,-20(fp)
  80a824:	e0bffa17 	ldw	r2,-24(fp)
  80a828:	e0bff715 	stw	r2,-36(fp)
  80a82c:	e0bff717 	ldw	r2,-36(fp)
  80a830:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80a834:	e0bffe17 	ldw	r2,-8(fp)
  80a838:	10000005 	stb	zero,0(r2)
    return (len);
  80a83c:	e0bffb03 	ldbu	r2,-20(fp)
  80a840:	e0bfff15 	stw	r2,-4(fp)
  80a844:	e0bfff17 	ldw	r2,-4(fp)
}
  80a848:	e037883a 	mov	sp,fp
  80a84c:	dfc00117 	ldw	ra,4(sp)
  80a850:	df000017 	ldw	fp,0(sp)
  80a854:	dec00204 	addi	sp,sp,8
  80a858:	f800283a 	ret

0080a85c <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  80a85c:	defff504 	addi	sp,sp,-44
  80a860:	dfc00a15 	stw	ra,40(sp)
  80a864:	df000915 	stw	fp,36(sp)
  80a868:	df000904 	addi	fp,sp,36
  80a86c:	e13ffd15 	stw	r4,-12(fp)
  80a870:	e17ffe15 	stw	r5,-8(fp)
  80a874:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80a878:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80a87c:	e0bfff17 	ldw	r2,-4(fp)
  80a880:	1005003a 	cmpeq	r2,r2,zero
  80a884:	1000451e 	bne	r2,zero,80a99c <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  80a888:	e0bffd17 	ldw	r2,-12(fp)
  80a88c:	1004c03a 	cmpne	r2,r2,zero
  80a890:	1000041e 	bne	r2,zero,80a8a4 <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80a894:	e0ffff17 	ldw	r3,-4(fp)
  80a898:	00801b84 	movi	r2,110
  80a89c:	18800005 	stb	r2,0(r3)
        return;
  80a8a0:	00003e06 	br	80a99c <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80a8a4:	e0bffe17 	ldw	r2,-8(fp)
  80a8a8:	1004c03a 	cmpne	r2,r2,zero
  80a8ac:	1000041e 	bne	r2,zero,80a8c0 <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  80a8b0:	e0ffff17 	ldw	r3,-4(fp)
  80a8b4:	00800304 	movi	r2,12
  80a8b8:	18800005 	stb	r2,0(r3)
        return;
  80a8bc:	00003706 	br	80a99c <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80a8c0:	00802074 	movhi	r2,129
  80a8c4:	109f4c04 	addi	r2,r2,32048
  80a8c8:	10800003 	ldbu	r2,0(r2)
  80a8cc:	10803fcc 	andi	r2,r2,255
  80a8d0:	1005003a 	cmpeq	r2,r2,zero
  80a8d4:	1000041e 	bne	r2,zero,80a8e8 <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
  80a8d8:	e0ffff17 	ldw	r3,-4(fp)
  80a8dc:	00800484 	movi	r2,18
  80a8e0:	18800005 	stb	r2,0(r3)
        return;
  80a8e4:	00002d06 	br	80a99c <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a8e8:	0005303a 	rdctl	r2,status
  80a8ec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a8f0:	e0fffa17 	ldw	r3,-24(fp)
  80a8f4:	00bfff84 	movi	r2,-2
  80a8f8:	1884703a 	and	r2,r3,r2
  80a8fc:	1001703a 	wrctl	status,r2
  
  return context;
  80a900:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80a904:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  80a908:	e0bffd17 	ldw	r2,-12(fp)
  80a90c:	10800003 	ldbu	r2,0(r2)
  80a910:	10803fcc 	andi	r2,r2,255
  80a914:	10800160 	cmpeqi	r2,r2,5
  80a918:	1000081e 	bne	r2,zero,80a93c <OSFlagNameSet+0xe0>
  80a91c:	e0bffb17 	ldw	r2,-20(fp)
  80a920:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a924:	e0bff917 	ldw	r2,-28(fp)
  80a928:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  80a92c:	e0ffff17 	ldw	r3,-4(fp)
  80a930:	00800044 	movi	r2,1
  80a934:	18800005 	stb	r2,0(r3)
        return;
  80a938:	00001806 	br	80a99c <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  80a93c:	e13ffe17 	ldw	r4,-8(fp)
  80a940:	08099500 	call	809950 <OS_StrLen>
  80a944:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
  80a948:	e0bffc03 	ldbu	r2,-16(fp)
  80a94c:	10800830 	cmpltui	r2,r2,32
  80a950:	1000081e 	bne	r2,zero,80a974 <OSFlagNameSet+0x118>
  80a954:	e0bffb17 	ldw	r2,-20(fp)
  80a958:	e0bff815 	stw	r2,-32(fp)
  80a95c:	e0bff817 	ldw	r2,-32(fp)
  80a960:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
  80a964:	e0ffff17 	ldw	r3,-4(fp)
  80a968:	00801cc4 	movi	r2,115
  80a96c:	18800005 	stb	r2,0(r3)
        return;
  80a970:	00000a06 	br	80a99c <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
  80a974:	e0bffd17 	ldw	r2,-12(fp)
  80a978:	11000284 	addi	r4,r2,10
  80a97c:	e17ffe17 	ldw	r5,-8(fp)
  80a980:	08098d00 	call	8098d0 <OS_StrCopy>
  80a984:	e0bffb17 	ldw	r2,-20(fp)
  80a988:	e0bff715 	stw	r2,-36(fp)
  80a98c:	e0bff717 	ldw	r2,-36(fp)
  80a990:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80a994:	e0bfff17 	ldw	r2,-4(fp)
  80a998:	10000005 	stb	zero,0(r2)
    return;
}
  80a99c:	e037883a 	mov	sp,fp
  80a9a0:	dfc00117 	ldw	ra,4(sp)
  80a9a4:	df000017 	ldw	fp,0(sp)
  80a9a8:	dec00204 	addi	sp,sp,8
  80a9ac:	f800283a 	ret

0080a9b0 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
  80a9b0:	deffe004 	addi	sp,sp,-128
  80a9b4:	dfc01f15 	stw	ra,124(sp)
  80a9b8:	df001e15 	stw	fp,120(sp)
  80a9bc:	df001e04 	addi	fp,sp,120
  80a9c0:	e13ff915 	stw	r4,-28(fp)
  80a9c4:	e17ffa0d 	sth	r5,-24(fp)
  80a9c8:	e1bffb05 	stb	r6,-20(fp)
  80a9cc:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  80a9d0:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80a9d4:	e0800217 	ldw	r2,8(fp)
  80a9d8:	1004c03a 	cmpne	r2,r2,zero
  80a9dc:	1000021e 	bne	r2,zero,80a9e8 <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
  80a9e0:	e03fff15 	stw	zero,-4(fp)
  80a9e4:	00017d06 	br	80afdc <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  80a9e8:	e0bff917 	ldw	r2,-28(fp)
  80a9ec:	1004c03a 	cmpne	r2,r2,zero
  80a9f0:	1000051e 	bne	r2,zero,80aa08 <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80a9f4:	e0c00217 	ldw	r3,8(fp)
  80a9f8:	00801b84 	movi	r2,110
  80a9fc:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80aa00:	e03fff15 	stw	zero,-4(fp)
  80aa04:	00017506 	br	80afdc <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  80aa08:	00802074 	movhi	r2,129
  80aa0c:	109f4c04 	addi	r2,r2,32048
  80aa10:	10800003 	ldbu	r2,0(r2)
  80aa14:	10803fcc 	andi	r2,r2,255
  80aa18:	1005003a 	cmpeq	r2,r2,zero
  80aa1c:	1000051e 	bne	r2,zero,80aa34 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
  80aa20:	e0c00217 	ldw	r3,8(fp)
  80aa24:	00800084 	movi	r2,2
  80aa28:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80aa2c:	e03fff15 	stw	zero,-4(fp)
  80aa30:	00016a06 	br	80afdc <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
  80aa34:	00802074 	movhi	r2,129
  80aa38:	109f3e04 	addi	r2,r2,31992
  80aa3c:	10800003 	ldbu	r2,0(r2)
  80aa40:	10803fcc 	andi	r2,r2,255
  80aa44:	1005003a 	cmpeq	r2,r2,zero
  80aa48:	1000051e 	bne	r2,zero,80aa60 <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
  80aa4c:	e0c00217 	ldw	r3,8(fp)
  80aa50:	00800344 	movi	r2,13
  80aa54:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80aa58:	e03fff15 	stw	zero,-4(fp)
  80aa5c:	00015f06 	br	80afdc <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  80aa60:	e0bff917 	ldw	r2,-28(fp)
  80aa64:	10800003 	ldbu	r2,0(r2)
  80aa68:	10803fcc 	andi	r2,r2,255
  80aa6c:	10800160 	cmpeqi	r2,r2,5
  80aa70:	1000051e 	bne	r2,zero,80aa88 <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
  80aa74:	e0c00217 	ldw	r3,8(fp)
  80aa78:	00800044 	movi	r2,1
  80aa7c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80aa80:	e03fff15 	stw	zero,-4(fp)
  80aa84:	00015506 	br	80afdc <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  80aa88:	e0fffb03 	ldbu	r3,-20(fp)
  80aa8c:	00bfe004 	movi	r2,-128
  80aa90:	1884703a 	and	r2,r3,r2
  80aa94:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
  80aa98:	e0bff283 	ldbu	r2,-54(fp)
  80aa9c:	1005003a 	cmpeq	r2,r2,zero
  80aaa0:	1000071e 	bne	r2,zero,80aac0 <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
  80aaa4:	00c01fc4 	movi	r3,127
  80aaa8:	e0bffb03 	ldbu	r2,-20(fp)
  80aaac:	10c4703a 	and	r2,r2,r3
  80aab0:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
  80aab4:	00800044 	movi	r2,1
  80aab8:	e0bff205 	stb	r2,-56(fp)
  80aabc:	00000106 	br	80aac4 <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
  80aac0:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80aac4:	0005303a 	rdctl	r2,status
  80aac8:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80aacc:	e0fff017 	ldw	r3,-64(fp)
  80aad0:	00bfff84 	movi	r2,-2
  80aad4:	1884703a 	and	r2,r3,r2
  80aad8:	1001703a 	wrctl	status,r2
  
  return context;
  80aadc:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  80aae0:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
  80aae4:	e0bffb03 	ldbu	r2,-20(fp)
  80aae8:	e0bffe15 	stw	r2,-8(fp)
  80aaec:	e0fffe17 	ldw	r3,-8(fp)
  80aaf0:	18800060 	cmpeqi	r2,r3,1
  80aaf4:	1000981e 	bne	r2,zero,80ad58 <OSFlagPend+0x3a8>
  80aaf8:	e0fffe17 	ldw	r3,-8(fp)
  80aafc:	18800088 	cmpgei	r2,r3,2
  80ab00:	1000041e 	bne	r2,zero,80ab14 <OSFlagPend+0x164>
  80ab04:	e0fffe17 	ldw	r3,-8(fp)
  80ab08:	1805003a 	cmpeq	r2,r3,zero
  80ab0c:	1000641e 	bne	r2,zero,80aca0 <OSFlagPend+0x2f0>
  80ab10:	0000bf06 	br	80ae10 <OSFlagPend+0x460>
  80ab14:	e0fffe17 	ldw	r3,-8(fp)
  80ab18:	188000a0 	cmpeqi	r2,r3,2
  80ab1c:	1000041e 	bne	r2,zero,80ab30 <OSFlagPend+0x180>
  80ab20:	e0fffe17 	ldw	r3,-8(fp)
  80ab24:	188000e0 	cmpeqi	r2,r3,3
  80ab28:	10002f1e 	bne	r2,zero,80abe8 <OSFlagPend+0x238>
  80ab2c:	0000b806 	br	80ae10 <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
  80ab30:	e0bff917 	ldw	r2,-28(fp)
  80ab34:	10c0020b 	ldhu	r3,8(r2)
  80ab38:	e0bffa0b 	ldhu	r2,-24(fp)
  80ab3c:	1884703a 	and	r2,r3,r2
  80ab40:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  80ab44:	e0fff30b 	ldhu	r3,-52(fp)
  80ab48:	e0bffa0b 	ldhu	r2,-24(fp)
  80ab4c:	18801a1e 	bne	r3,r2,80abb8 <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80ab50:	e0bff203 	ldbu	r2,-56(fp)
  80ab54:	10800058 	cmpnei	r2,r2,1
  80ab58:	1000091e 	bne	r2,zero,80ab80 <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  80ab5c:	e0bff917 	ldw	r2,-28(fp)
  80ab60:	1080020b 	ldhu	r2,8(r2)
  80ab64:	1007883a 	mov	r3,r2
  80ab68:	e0bff30b 	ldhu	r2,-52(fp)
  80ab6c:	0084303a 	nor	r2,zero,r2
  80ab70:	1884703a 	and	r2,r3,r2
  80ab74:	1007883a 	mov	r3,r2
  80ab78:	e0bff917 	ldw	r2,-28(fp)
  80ab7c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  80ab80:	00802074 	movhi	r2,129
  80ab84:	109f4d04 	addi	r2,r2,32052
  80ab88:	10c00017 	ldw	r3,0(r2)
  80ab8c:	e0bff30b 	ldhu	r2,-52(fp)
  80ab90:	18800b0d 	sth	r2,44(r3)
  80ab94:	e0bff117 	ldw	r2,-60(fp)
  80ab98:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ab9c:	e0bfef17 	ldw	r2,-68(fp)
  80aba0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  80aba4:	e0800217 	ldw	r2,8(fp)
  80aba8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  80abac:	e0bff30b 	ldhu	r2,-52(fp)
  80abb0:	e0bfff15 	stw	r2,-4(fp)
  80abb4:	00010906 	br	80afdc <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  80abb8:	e1bffa0b 	ldhu	r6,-24(fp)
  80abbc:	e1fffb03 	ldbu	r7,-20(fp)
  80abc0:	e0bffc0b 	ldhu	r2,-16(fp)
  80abc4:	e17ff404 	addi	r5,fp,-48
  80abc8:	d8800015 	stw	r2,0(sp)
  80abcc:	e13ff917 	ldw	r4,-28(fp)
  80abd0:	080b4d80 	call	80b4d8 <OS_FlagBlock>
  80abd4:	e0bff117 	ldw	r2,-60(fp)
  80abd8:	e0bfee15 	stw	r2,-72(fp)
  80abdc:	e0bfee17 	ldw	r2,-72(fp)
  80abe0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  80abe4:	00009506 	br	80ae3c <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
  80abe8:	e0bff917 	ldw	r2,-28(fp)
  80abec:	10c0020b 	ldhu	r3,8(r2)
  80abf0:	e0bffa0b 	ldhu	r2,-24(fp)
  80abf4:	1884703a 	and	r2,r3,r2
  80abf8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  80abfc:	e0bff30b 	ldhu	r2,-52(fp)
  80ac00:	1005003a 	cmpeq	r2,r2,zero
  80ac04:	10001a1e 	bne	r2,zero,80ac70 <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80ac08:	e0bff203 	ldbu	r2,-56(fp)
  80ac0c:	10800058 	cmpnei	r2,r2,1
  80ac10:	1000091e 	bne	r2,zero,80ac38 <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  80ac14:	e0bff917 	ldw	r2,-28(fp)
  80ac18:	1080020b 	ldhu	r2,8(r2)
  80ac1c:	1007883a 	mov	r3,r2
  80ac20:	e0bff30b 	ldhu	r2,-52(fp)
  80ac24:	0084303a 	nor	r2,zero,r2
  80ac28:	1884703a 	and	r2,r3,r2
  80ac2c:	1007883a 	mov	r3,r2
  80ac30:	e0bff917 	ldw	r2,-28(fp)
  80ac34:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  80ac38:	00802074 	movhi	r2,129
  80ac3c:	109f4d04 	addi	r2,r2,32052
  80ac40:	10c00017 	ldw	r3,0(r2)
  80ac44:	e0bff30b 	ldhu	r2,-52(fp)
  80ac48:	18800b0d 	sth	r2,44(r3)
  80ac4c:	e0bff117 	ldw	r2,-60(fp)
  80ac50:	e0bfed15 	stw	r2,-76(fp)
  80ac54:	e0bfed17 	ldw	r2,-76(fp)
  80ac58:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  80ac5c:	e0800217 	ldw	r2,8(fp)
  80ac60:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  80ac64:	e0fff30b 	ldhu	r3,-52(fp)
  80ac68:	e0ffff15 	stw	r3,-4(fp)
  80ac6c:	0000db06 	br	80afdc <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  80ac70:	e1bffa0b 	ldhu	r6,-24(fp)
  80ac74:	e1fffb03 	ldbu	r7,-20(fp)
  80ac78:	e0bffc0b 	ldhu	r2,-16(fp)
  80ac7c:	e17ff404 	addi	r5,fp,-48
  80ac80:	d8800015 	stw	r2,0(sp)
  80ac84:	e13ff917 	ldw	r4,-28(fp)
  80ac88:	080b4d80 	call	80b4d8 <OS_FlagBlock>
  80ac8c:	e0bff117 	ldw	r2,-60(fp)
  80ac90:	e0bfec15 	stw	r2,-80(fp)
  80ac94:	e0bfec17 	ldw	r2,-80(fp)
  80ac98:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  80ac9c:	00006706 	br	80ae3c <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  80aca0:	e0bff917 	ldw	r2,-28(fp)
  80aca4:	1080020b 	ldhu	r2,8(r2)
  80aca8:	0084303a 	nor	r2,zero,r2
  80acac:	1007883a 	mov	r3,r2
  80acb0:	e0bffa0b 	ldhu	r2,-24(fp)
  80acb4:	1884703a 	and	r2,r3,r2
  80acb8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  80acbc:	e0fff30b 	ldhu	r3,-52(fp)
  80acc0:	e0bffa0b 	ldhu	r2,-24(fp)
  80acc4:	1880181e 	bne	r3,r2,80ad28 <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80acc8:	e0bff203 	ldbu	r2,-56(fp)
  80accc:	10800058 	cmpnei	r2,r2,1
  80acd0:	1000071e 	bne	r2,zero,80acf0 <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  80acd4:	e0bff917 	ldw	r2,-28(fp)
  80acd8:	10c0020b 	ldhu	r3,8(r2)
  80acdc:	e0bff30b 	ldhu	r2,-52(fp)
  80ace0:	1884b03a 	or	r2,r3,r2
  80ace4:	1007883a 	mov	r3,r2
  80ace8:	e0bff917 	ldw	r2,-28(fp)
  80acec:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  80acf0:	00802074 	movhi	r2,129
  80acf4:	109f4d04 	addi	r2,r2,32052
  80acf8:	10c00017 	ldw	r3,0(r2)
  80acfc:	e0bff30b 	ldhu	r2,-52(fp)
  80ad00:	18800b0d 	sth	r2,44(r3)
  80ad04:	e0bff117 	ldw	r2,-60(fp)
  80ad08:	e0bfeb15 	stw	r2,-84(fp)
  80ad0c:	e0bfeb17 	ldw	r2,-84(fp)
  80ad10:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  80ad14:	e0800217 	ldw	r2,8(fp)
  80ad18:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  80ad1c:	e0bff30b 	ldhu	r2,-52(fp)
  80ad20:	e0bfff15 	stw	r2,-4(fp)
  80ad24:	0000ad06 	br	80afdc <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  80ad28:	e1bffa0b 	ldhu	r6,-24(fp)
  80ad2c:	e1fffb03 	ldbu	r7,-20(fp)
  80ad30:	e0bffc0b 	ldhu	r2,-16(fp)
  80ad34:	e17ff404 	addi	r5,fp,-48
  80ad38:	d8800015 	stw	r2,0(sp)
  80ad3c:	e13ff917 	ldw	r4,-28(fp)
  80ad40:	080b4d80 	call	80b4d8 <OS_FlagBlock>
  80ad44:	e0bff117 	ldw	r2,-60(fp)
  80ad48:	e0bfea15 	stw	r2,-88(fp)
  80ad4c:	e0bfea17 	ldw	r2,-88(fp)
  80ad50:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  80ad54:	00003906 	br	80ae3c <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  80ad58:	e0bff917 	ldw	r2,-28(fp)
  80ad5c:	1080020b 	ldhu	r2,8(r2)
  80ad60:	0084303a 	nor	r2,zero,r2
  80ad64:	1007883a 	mov	r3,r2
  80ad68:	e0bffa0b 	ldhu	r2,-24(fp)
  80ad6c:	1884703a 	and	r2,r3,r2
  80ad70:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  80ad74:	e0bff30b 	ldhu	r2,-52(fp)
  80ad78:	1005003a 	cmpeq	r2,r2,zero
  80ad7c:	1000181e 	bne	r2,zero,80ade0 <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80ad80:	e0bff203 	ldbu	r2,-56(fp)
  80ad84:	10800058 	cmpnei	r2,r2,1
  80ad88:	1000071e 	bne	r2,zero,80ada8 <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  80ad8c:	e0bff917 	ldw	r2,-28(fp)
  80ad90:	10c0020b 	ldhu	r3,8(r2)
  80ad94:	e0bff30b 	ldhu	r2,-52(fp)
  80ad98:	1884b03a 	or	r2,r3,r2
  80ad9c:	1007883a 	mov	r3,r2
  80ada0:	e0bff917 	ldw	r2,-28(fp)
  80ada4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  80ada8:	00802074 	movhi	r2,129
  80adac:	109f4d04 	addi	r2,r2,32052
  80adb0:	10c00017 	ldw	r3,0(r2)
  80adb4:	e0bff30b 	ldhu	r2,-52(fp)
  80adb8:	18800b0d 	sth	r2,44(r3)
  80adbc:	e0bff117 	ldw	r2,-60(fp)
  80adc0:	e0bfe915 	stw	r2,-92(fp)
  80adc4:	e0bfe917 	ldw	r2,-92(fp)
  80adc8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  80adcc:	e0800217 	ldw	r2,8(fp)
  80add0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  80add4:	e0fff30b 	ldhu	r3,-52(fp)
  80add8:	e0ffff15 	stw	r3,-4(fp)
  80addc:	00007f06 	br	80afdc <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  80ade0:	e1bffa0b 	ldhu	r6,-24(fp)
  80ade4:	e1fffb03 	ldbu	r7,-20(fp)
  80ade8:	e0bffc0b 	ldhu	r2,-16(fp)
  80adec:	e17ff404 	addi	r5,fp,-48
  80adf0:	d8800015 	stw	r2,0(sp)
  80adf4:	e13ff917 	ldw	r4,-28(fp)
  80adf8:	080b4d80 	call	80b4d8 <OS_FlagBlock>
  80adfc:	e0bff117 	ldw	r2,-60(fp)
  80ae00:	e0bfe815 	stw	r2,-96(fp)
  80ae04:	e0bfe817 	ldw	r2,-96(fp)
  80ae08:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  80ae0c:	00000b06 	br	80ae3c <OSFlagPend+0x48c>
  80ae10:	e0bff117 	ldw	r2,-60(fp)
  80ae14:	e0bfe715 	stw	r2,-100(fp)
  80ae18:	e0bfe717 	ldw	r2,-100(fp)
  80ae1c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  80ae20:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
  80ae24:	e0c00217 	ldw	r3,8(fp)
  80ae28:	00801bc4 	movi	r2,111
  80ae2c:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
  80ae30:	e0bff30b 	ldhu	r2,-52(fp)
  80ae34:	e0bfff15 	stw	r2,-4(fp)
  80ae38:	00006806 	br	80afdc <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
  80ae3c:	080978c0 	call	80978c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ae40:	0005303a 	rdctl	r2,status
  80ae44:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ae48:	e0ffe617 	ldw	r3,-104(fp)
  80ae4c:	00bfff84 	movi	r2,-2
  80ae50:	1884703a 	and	r2,r3,r2
  80ae54:	1001703a 	wrctl	status,r2
  
  return context;
  80ae58:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
  80ae5c:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
  80ae60:	00802074 	movhi	r2,129
  80ae64:	109f4d04 	addi	r2,r2,32052
  80ae68:	10800017 	ldw	r2,0(r2)
  80ae6c:	10800c43 	ldbu	r2,49(r2)
  80ae70:	10803fcc 	andi	r2,r2,255
  80ae74:	1005003a 	cmpeq	r2,r2,zero
  80ae78:	1000221e 	bne	r2,zero,80af04 <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
  80ae7c:	00802074 	movhi	r2,129
  80ae80:	109f4d04 	addi	r2,r2,32052
  80ae84:	10800017 	ldw	r2,0(r2)
  80ae88:	10800c43 	ldbu	r2,49(r2)
  80ae8c:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  80ae90:	00802074 	movhi	r2,129
  80ae94:	109f4d04 	addi	r2,r2,32052
  80ae98:	10800017 	ldw	r2,0(r2)
  80ae9c:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
  80aea0:	e13ff404 	addi	r4,fp,-48
  80aea4:	080b8900 	call	80b890 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
  80aea8:	00802074 	movhi	r2,129
  80aeac:	109f4d04 	addi	r2,r2,32052
  80aeb0:	10800017 	ldw	r2,0(r2)
  80aeb4:	10000c05 	stb	zero,48(r2)
  80aeb8:	e0bff117 	ldw	r2,-60(fp)
  80aebc:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80aec0:	e0bfe517 	ldw	r2,-108(fp)
  80aec4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
  80aec8:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
  80aecc:	e0bff243 	ldbu	r2,-55(fp)
  80aed0:	108000a0 	cmpeqi	r2,r2,2
  80aed4:	1000011e 	bne	r2,zero,80aedc <OSFlagPend+0x52c>
  80aed8:	00000406 	br	80aeec <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
  80aedc:	e0c00217 	ldw	r3,8(fp)
  80aee0:	00800384 	movi	r2,14
  80aee4:	18800005 	stb	r2,0(r3)
                 break;
  80aee8:	00000306 	br	80aef8 <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
  80aeec:	e0c00217 	ldw	r3,8(fp)
  80aef0:	00800284 	movi	r2,10
  80aef4:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
  80aef8:	e0fff30b 	ldhu	r3,-52(fp)
  80aefc:	e0ffff15 	stw	r3,-4(fp)
  80af00:	00003606 	br	80afdc <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
  80af04:	00802074 	movhi	r2,129
  80af08:	109f4d04 	addi	r2,r2,32052
  80af0c:	10800017 	ldw	r2,0(r2)
  80af10:	10800b0b 	ldhu	r2,44(r2)
  80af14:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
  80af18:	e0bff203 	ldbu	r2,-56(fp)
  80af1c:	10800058 	cmpnei	r2,r2,1
  80af20:	1000261e 	bne	r2,zero,80afbc <OSFlagPend+0x60c>
        switch (wait_type) {
  80af24:	e0bffb03 	ldbu	r2,-20(fp)
  80af28:	e0bffd15 	stw	r2,-12(fp)
  80af2c:	e0fffd17 	ldw	r3,-12(fp)
  80af30:	1804803a 	cmplt	r2,r3,zero
  80af34:	1000181e 	bne	r2,zero,80af98 <OSFlagPend+0x5e8>
  80af38:	e0fffd17 	ldw	r3,-12(fp)
  80af3c:	18800090 	cmplti	r2,r3,2
  80af40:	10000d1e 	bne	r2,zero,80af78 <OSFlagPend+0x5c8>
  80af44:	e0fffd17 	ldw	r3,-12(fp)
  80af48:	18800108 	cmpgei	r2,r3,4
  80af4c:	1000121e 	bne	r2,zero,80af98 <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
  80af50:	e0bff917 	ldw	r2,-28(fp)
  80af54:	1080020b 	ldhu	r2,8(r2)
  80af58:	1007883a 	mov	r3,r2
  80af5c:	e0bff30b 	ldhu	r2,-52(fp)
  80af60:	0084303a 	nor	r2,zero,r2
  80af64:	1884703a 	and	r2,r3,r2
  80af68:	1007883a 	mov	r3,r2
  80af6c:	e0bff917 	ldw	r2,-28(fp)
  80af70:	10c0020d 	sth	r3,8(r2)
                 break;
  80af74:	00001106 	br	80afbc <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
  80af78:	e0bff917 	ldw	r2,-28(fp)
  80af7c:	10c0020b 	ldhu	r3,8(r2)
  80af80:	e0bff30b 	ldhu	r2,-52(fp)
  80af84:	1884b03a 	or	r2,r3,r2
  80af88:	1007883a 	mov	r3,r2
  80af8c:	e0bff917 	ldw	r2,-28(fp)
  80af90:	10c0020d 	sth	r3,8(r2)
                 break;
  80af94:	00000906 	br	80afbc <OSFlagPend+0x60c>
  80af98:	e0bff117 	ldw	r2,-60(fp)
  80af9c:	e0bfe415 	stw	r2,-112(fp)
  80afa0:	e0bfe417 	ldw	r2,-112(fp)
  80afa4:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  80afa8:	e0c00217 	ldw	r3,8(fp)
  80afac:	00801bc4 	movi	r2,111
  80afb0:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
  80afb4:	e03fff15 	stw	zero,-4(fp)
  80afb8:	00000806 	br	80afdc <OSFlagPend+0x62c>
  80afbc:	e0bff117 	ldw	r2,-60(fp)
  80afc0:	e0bfe315 	stw	r2,-116(fp)
  80afc4:	e0bfe317 	ldw	r2,-116(fp)
  80afc8:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
  80afcc:	e0800217 	ldw	r2,8(fp)
  80afd0:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
  80afd4:	e0bff30b 	ldhu	r2,-52(fp)
  80afd8:	e0bfff15 	stw	r2,-4(fp)
  80afdc:	e0bfff17 	ldw	r2,-4(fp)
}
  80afe0:	e037883a 	mov	sp,fp
  80afe4:	dfc00117 	ldw	ra,4(sp)
  80afe8:	df000017 	ldw	fp,0(sp)
  80afec:	dec00204 	addi	sp,sp,8
  80aff0:	f800283a 	ret

0080aff4 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
  80aff4:	defffb04 	addi	sp,sp,-20
  80aff8:	df000415 	stw	fp,16(sp)
  80affc:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  80b000:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b004:	0005303a 	rdctl	r2,status
  80b008:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b00c:	e0fffd17 	ldw	r3,-12(fp)
  80b010:	00bfff84 	movi	r2,-2
  80b014:	1884703a 	and	r2,r3,r2
  80b018:	1001703a 	wrctl	status,r2
  
  return context;
  80b01c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  80b020:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
  80b024:	00802074 	movhi	r2,129
  80b028:	109f4d04 	addi	r2,r2,32052
  80b02c:	10800017 	ldw	r2,0(r2)
  80b030:	10800b0b 	ldhu	r2,44(r2)
  80b034:	e0bfff0d 	sth	r2,-4(fp)
  80b038:	e0bffe17 	ldw	r2,-8(fp)
  80b03c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b040:	e0bffc17 	ldw	r2,-16(fp)
  80b044:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
  80b048:	e0bfff0b 	ldhu	r2,-4(fp)
}
  80b04c:	e037883a 	mov	sp,fp
  80b050:	df000017 	ldw	fp,0(sp)
  80b054:	dec00104 	addi	sp,sp,4
  80b058:	f800283a 	ret

0080b05c <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
  80b05c:	deffed04 	addi	sp,sp,-76
  80b060:	dfc01215 	stw	ra,72(sp)
  80b064:	df001115 	stw	fp,68(sp)
  80b068:	df001104 	addi	fp,sp,68
  80b06c:	e13ff915 	stw	r4,-28(fp)
  80b070:	e1fffc15 	stw	r7,-16(fp)
  80b074:	e17ffa0d 	sth	r5,-24(fp)
  80b078:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
  80b07c:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  80b080:	e0bffc17 	ldw	r2,-16(fp)
  80b084:	1004c03a 	cmpne	r2,r2,zero
  80b088:	1000021e 	bne	r2,zero,80b094 <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
  80b08c:	e03fff15 	stw	zero,-4(fp)
  80b090:	0000d606 	br	80b3ec <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
  80b094:	e0bff917 	ldw	r2,-28(fp)
  80b098:	1004c03a 	cmpne	r2,r2,zero
  80b09c:	1000051e 	bne	r2,zero,80b0b4 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80b0a0:	e0fffc17 	ldw	r3,-16(fp)
  80b0a4:	00801b84 	movi	r2,110
  80b0a8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80b0ac:	e03fff15 	stw	zero,-4(fp)
  80b0b0:	0000ce06 	br	80b3ec <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
  80b0b4:	e0bff917 	ldw	r2,-28(fp)
  80b0b8:	10800003 	ldbu	r2,0(r2)
  80b0bc:	10803fcc 	andi	r2,r2,255
  80b0c0:	10800160 	cmpeqi	r2,r2,5
  80b0c4:	1000051e 	bne	r2,zero,80b0dc <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
  80b0c8:	e0fffc17 	ldw	r3,-16(fp)
  80b0cc:	00800044 	movi	r2,1
  80b0d0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80b0d4:	e03fff15 	stw	zero,-4(fp)
  80b0d8:	0000c406 	br	80b3ec <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b0dc:	0005303a 	rdctl	r2,status
  80b0e0:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b0e4:	e0fff417 	ldw	r3,-48(fp)
  80b0e8:	00bfff84 	movi	r2,-2
  80b0ec:	1884703a 	and	r2,r3,r2
  80b0f0:	1001703a 	wrctl	status,r2
  
  return context;
  80b0f4:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  80b0f8:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
  80b0fc:	e0bffb03 	ldbu	r2,-20(fp)
  80b100:	e0bffe15 	stw	r2,-8(fp)
  80b104:	e0fffe17 	ldw	r3,-8(fp)
  80b108:	1805003a 	cmpeq	r2,r3,zero
  80b10c:	1000041e 	bne	r2,zero,80b120 <OSFlagPost+0xc4>
  80b110:	e0fffe17 	ldw	r3,-8(fp)
  80b114:	18800060 	cmpeqi	r2,r3,1
  80b118:	10000b1e 	bne	r2,zero,80b148 <OSFlagPost+0xec>
  80b11c:	00001206 	br	80b168 <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
  80b120:	e0bff917 	ldw	r2,-28(fp)
  80b124:	1080020b 	ldhu	r2,8(r2)
  80b128:	1007883a 	mov	r3,r2
  80b12c:	e0bffa0b 	ldhu	r2,-24(fp)
  80b130:	0084303a 	nor	r2,zero,r2
  80b134:	1884703a 	and	r2,r3,r2
  80b138:	1007883a 	mov	r3,r2
  80b13c:	e0bff917 	ldw	r2,-28(fp)
  80b140:	10c0020d 	sth	r3,8(r2)
             break;
  80b144:	00001106 	br	80b18c <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
  80b148:	e0bff917 	ldw	r2,-28(fp)
  80b14c:	10c0020b 	ldhu	r3,8(r2)
  80b150:	e0bffa0b 	ldhu	r2,-24(fp)
  80b154:	1884b03a 	or	r2,r3,r2
  80b158:	1007883a 	mov	r3,r2
  80b15c:	e0bff917 	ldw	r2,-28(fp)
  80b160:	10c0020d 	sth	r3,8(r2)
             break;
  80b164:	00000906 	br	80b18c <OSFlagPost+0x130>
  80b168:	e0bff517 	ldw	r2,-44(fp)
  80b16c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b170:	e0bff317 	ldw	r2,-52(fp)
  80b174:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
  80b178:	e0fffc17 	ldw	r3,-16(fp)
  80b17c:	00801c44 	movi	r2,113
  80b180:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
  80b184:	e03fff15 	stw	zero,-4(fp)
  80b188:	00009806 	br	80b3ec <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
  80b18c:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  80b190:	e0bff917 	ldw	r2,-28(fp)
  80b194:	10800117 	ldw	r2,4(r2)
  80b198:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  80b19c:	00007506 	br	80b374 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
  80b1a0:	e0bff817 	ldw	r2,-32(fp)
  80b1a4:	10800483 	ldbu	r2,18(r2)
  80b1a8:	10803fcc 	andi	r2,r2,255
  80b1ac:	e0bffd15 	stw	r2,-12(fp)
  80b1b0:	e0fffd17 	ldw	r3,-12(fp)
  80b1b4:	18800060 	cmpeqi	r2,r3,1
  80b1b8:	10004d1e 	bne	r2,zero,80b2f0 <OSFlagPost+0x294>
  80b1bc:	e0fffd17 	ldw	r3,-12(fp)
  80b1c0:	18800088 	cmpgei	r2,r3,2
  80b1c4:	1000041e 	bne	r2,zero,80b1d8 <OSFlagPost+0x17c>
  80b1c8:	e0fffd17 	ldw	r3,-12(fp)
  80b1cc:	1805003a 	cmpeq	r2,r3,zero
  80b1d0:	1000301e 	bne	r2,zero,80b294 <OSFlagPost+0x238>
  80b1d4:	00005b06 	br	80b344 <OSFlagPost+0x2e8>
  80b1d8:	e0fffd17 	ldw	r3,-12(fp)
  80b1dc:	188000a0 	cmpeqi	r2,r3,2
  80b1e0:	1000041e 	bne	r2,zero,80b1f4 <OSFlagPost+0x198>
  80b1e4:	e0fffd17 	ldw	r3,-12(fp)
  80b1e8:	188000e0 	cmpeqi	r2,r3,3
  80b1ec:	1000161e 	bne	r2,zero,80b248 <OSFlagPost+0x1ec>
  80b1f0:	00005406 	br	80b344 <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  80b1f4:	e0bff917 	ldw	r2,-28(fp)
  80b1f8:	10c0020b 	ldhu	r3,8(r2)
  80b1fc:	e0bff817 	ldw	r2,-32(fp)
  80b200:	1080040b 	ldhu	r2,16(r2)
  80b204:	1884703a 	and	r2,r3,r2
  80b208:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  80b20c:	e0bff817 	ldw	r2,-32(fp)
  80b210:	1080040b 	ldhu	r2,16(r2)
  80b214:	10ffffcc 	andi	r3,r2,65535
  80b218:	e0bff68b 	ldhu	r2,-38(fp)
  80b21c:	1880521e 	bne	r3,r2,80b368 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  80b220:	e17ff68b 	ldhu	r5,-38(fp)
  80b224:	e13ff817 	ldw	r4,-32(fp)
  80b228:	080b7800 	call	80b780 <OS_FlagTaskRdy>
  80b22c:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  80b230:	e0bff603 	ldbu	r2,-40(fp)
  80b234:	10800058 	cmpnei	r2,r2,1
  80b238:	10004b1e 	bne	r2,zero,80b368 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  80b23c:	00800044 	movi	r2,1
  80b240:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  80b244:	00004806 	br	80b368 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  80b248:	e0bff917 	ldw	r2,-28(fp)
  80b24c:	10c0020b 	ldhu	r3,8(r2)
  80b250:	e0bff817 	ldw	r2,-32(fp)
  80b254:	1080040b 	ldhu	r2,16(r2)
  80b258:	1884703a 	and	r2,r3,r2
  80b25c:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  80b260:	e0bff68b 	ldhu	r2,-38(fp)
  80b264:	1005003a 	cmpeq	r2,r2,zero
  80b268:	10003f1e 	bne	r2,zero,80b368 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  80b26c:	e17ff68b 	ldhu	r5,-38(fp)
  80b270:	e13ff817 	ldw	r4,-32(fp)
  80b274:	080b7800 	call	80b780 <OS_FlagTaskRdy>
  80b278:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  80b27c:	e0bff603 	ldbu	r2,-40(fp)
  80b280:	10800058 	cmpnei	r2,r2,1
  80b284:	1000381e 	bne	r2,zero,80b368 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  80b288:	00800044 	movi	r2,1
  80b28c:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  80b290:	00003506 	br	80b368 <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  80b294:	e0bff917 	ldw	r2,-28(fp)
  80b298:	1080020b 	ldhu	r2,8(r2)
  80b29c:	0084303a 	nor	r2,zero,r2
  80b2a0:	1007883a 	mov	r3,r2
  80b2a4:	e0bff817 	ldw	r2,-32(fp)
  80b2a8:	1080040b 	ldhu	r2,16(r2)
  80b2ac:	1884703a 	and	r2,r3,r2
  80b2b0:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  80b2b4:	e0bff817 	ldw	r2,-32(fp)
  80b2b8:	1080040b 	ldhu	r2,16(r2)
  80b2bc:	10ffffcc 	andi	r3,r2,65535
  80b2c0:	e0bff68b 	ldhu	r2,-38(fp)
  80b2c4:	1880281e 	bne	r3,r2,80b368 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  80b2c8:	e17ff68b 	ldhu	r5,-38(fp)
  80b2cc:	e13ff817 	ldw	r4,-32(fp)
  80b2d0:	080b7800 	call	80b780 <OS_FlagTaskRdy>
  80b2d4:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  80b2d8:	e0bff603 	ldbu	r2,-40(fp)
  80b2dc:	10800058 	cmpnei	r2,r2,1
  80b2e0:	1000211e 	bne	r2,zero,80b368 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  80b2e4:	00800044 	movi	r2,1
  80b2e8:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  80b2ec:	00001e06 	br	80b368 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  80b2f0:	e0bff917 	ldw	r2,-28(fp)
  80b2f4:	1080020b 	ldhu	r2,8(r2)
  80b2f8:	0084303a 	nor	r2,zero,r2
  80b2fc:	1007883a 	mov	r3,r2
  80b300:	e0bff817 	ldw	r2,-32(fp)
  80b304:	1080040b 	ldhu	r2,16(r2)
  80b308:	1884703a 	and	r2,r3,r2
  80b30c:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  80b310:	e0bff68b 	ldhu	r2,-38(fp)
  80b314:	1005003a 	cmpeq	r2,r2,zero
  80b318:	1000131e 	bne	r2,zero,80b368 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  80b31c:	e17ff68b 	ldhu	r5,-38(fp)
  80b320:	e13ff817 	ldw	r4,-32(fp)
  80b324:	080b7800 	call	80b780 <OS_FlagTaskRdy>
  80b328:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  80b32c:	e0bff603 	ldbu	r2,-40(fp)
  80b330:	10800058 	cmpnei	r2,r2,1
  80b334:	10000c1e 	bne	r2,zero,80b368 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  80b338:	00800044 	movi	r2,1
  80b33c:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  80b340:	00000906 	br	80b368 <OSFlagPost+0x30c>
  80b344:	e0bff517 	ldw	r2,-44(fp)
  80b348:	e0bff215 	stw	r2,-56(fp)
  80b34c:	e0bff217 	ldw	r2,-56(fp)
  80b350:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  80b354:	e0fffc17 	ldw	r3,-16(fp)
  80b358:	00801bc4 	movi	r2,111
  80b35c:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
  80b360:	e03fff15 	stw	zero,-4(fp)
  80b364:	00002106 	br	80b3ec <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
  80b368:	e0bff817 	ldw	r2,-32(fp)
  80b36c:	10800017 	ldw	r2,0(r2)
  80b370:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  80b374:	e0bff817 	ldw	r2,-32(fp)
  80b378:	1004c03a 	cmpne	r2,r2,zero
  80b37c:	103f881e 	bne	r2,zero,80b1a0 <OSFlagPost+0x144>
  80b380:	e0bff517 	ldw	r2,-44(fp)
  80b384:	e0bff115 	stw	r2,-60(fp)
  80b388:	e0bff117 	ldw	r2,-60(fp)
  80b38c:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
  80b390:	e0bff783 	ldbu	r2,-34(fp)
  80b394:	10800058 	cmpnei	r2,r2,1
  80b398:	1000011e 	bne	r2,zero,80b3a0 <OSFlagPost+0x344>
        OS_Sched();
  80b39c:	080978c0 	call	80978c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b3a0:	0005303a 	rdctl	r2,status
  80b3a4:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b3a8:	e0fff017 	ldw	r3,-64(fp)
  80b3ac:	00bfff84 	movi	r2,-2
  80b3b0:	1884703a 	and	r2,r3,r2
  80b3b4:	1001703a 	wrctl	status,r2
  
  return context;
  80b3b8:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
  80b3bc:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
  80b3c0:	e0bff917 	ldw	r2,-28(fp)
  80b3c4:	1080020b 	ldhu	r2,8(r2)
  80b3c8:	e0bff70d 	sth	r2,-36(fp)
  80b3cc:	e0bff517 	ldw	r2,-44(fp)
  80b3d0:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b3d4:	e0bfef17 	ldw	r2,-68(fp)
  80b3d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
  80b3dc:	e0bffc17 	ldw	r2,-16(fp)
  80b3e0:	10000005 	stb	zero,0(r2)
    return (flags_cur);
  80b3e4:	e0bff70b 	ldhu	r2,-36(fp)
  80b3e8:	e0bfff15 	stw	r2,-4(fp)
  80b3ec:	e0bfff17 	ldw	r2,-4(fp)
}
  80b3f0:	e037883a 	mov	sp,fp
  80b3f4:	dfc00117 	ldw	ra,4(sp)
  80b3f8:	df000017 	ldw	fp,0(sp)
  80b3fc:	dec00204 	addi	sp,sp,8
  80b400:	f800283a 	ret

0080b404 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
  80b404:	defff804 	addi	sp,sp,-32
  80b408:	df000715 	stw	fp,28(sp)
  80b40c:	df000704 	addi	fp,sp,28
  80b410:	e13ffd15 	stw	r4,-12(fp)
  80b414:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
  80b418:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
  80b41c:	e0bffe17 	ldw	r2,-8(fp)
  80b420:	1004c03a 	cmpne	r2,r2,zero
  80b424:	1000021e 	bne	r2,zero,80b430 <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
  80b428:	e03fff15 	stw	zero,-4(fp)
  80b42c:	00002506 	br	80b4c4 <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
  80b430:	e0bffd17 	ldw	r2,-12(fp)
  80b434:	1004c03a 	cmpne	r2,r2,zero
  80b438:	1000051e 	bne	r2,zero,80b450 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80b43c:	e0fffe17 	ldw	r3,-8(fp)
  80b440:	00801b84 	movi	r2,110
  80b444:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80b448:	e03fff15 	stw	zero,-4(fp)
  80b44c:	00001d06 	br	80b4c4 <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
  80b450:	e0bffd17 	ldw	r2,-12(fp)
  80b454:	10800003 	ldbu	r2,0(r2)
  80b458:	10803fcc 	andi	r2,r2,255
  80b45c:	10800160 	cmpeqi	r2,r2,5
  80b460:	1000051e 	bne	r2,zero,80b478 <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
  80b464:	e0fffe17 	ldw	r3,-8(fp)
  80b468:	00800044 	movi	r2,1
  80b46c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80b470:	e03fff15 	stw	zero,-4(fp)
  80b474:	00001306 	br	80b4c4 <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b478:	0005303a 	rdctl	r2,status
  80b47c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b480:	e0fffa17 	ldw	r3,-24(fp)
  80b484:	00bfff84 	movi	r2,-2
  80b488:	1884703a 	and	r2,r3,r2
  80b48c:	1001703a 	wrctl	status,r2
  
  return context;
  80b490:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80b494:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
  80b498:	e0bffd17 	ldw	r2,-12(fp)
  80b49c:	1080020b 	ldhu	r2,8(r2)
  80b4a0:	e0bffc0d 	sth	r2,-16(fp)
  80b4a4:	e0bffb17 	ldw	r2,-20(fp)
  80b4a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b4ac:	e0bff917 	ldw	r2,-28(fp)
  80b4b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80b4b4:	e0bffe17 	ldw	r2,-8(fp)
  80b4b8:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
  80b4bc:	e0bffc0b 	ldhu	r2,-16(fp)
  80b4c0:	e0bfff15 	stw	r2,-4(fp)
  80b4c4:	e0bfff17 	ldw	r2,-4(fp)
}
  80b4c8:	e037883a 	mov	sp,fp
  80b4cc:	df000017 	ldw	fp,0(sp)
  80b4d0:	dec00104 	addi	sp,sp,4
  80b4d4:	f800283a 	ret

0080b4d8 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
  80b4d8:	defff804 	addi	sp,sp,-32
  80b4dc:	df000715 	stw	fp,28(sp)
  80b4e0:	df000704 	addi	fp,sp,28
  80b4e4:	e13ffb15 	stw	r4,-20(fp)
  80b4e8:	e17ffc15 	stw	r5,-16(fp)
  80b4ec:	e0800117 	ldw	r2,4(fp)
  80b4f0:	e1bffd0d 	sth	r6,-12(fp)
  80b4f4:	e1fffe05 	stb	r7,-8(fp)
  80b4f8:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
  80b4fc:	00802074 	movhi	r2,129
  80b500:	109f4d04 	addi	r2,r2,32052
  80b504:	10c00017 	ldw	r3,0(r2)
  80b508:	00802074 	movhi	r2,129
  80b50c:	109f4d04 	addi	r2,r2,32052
  80b510:	10800017 	ldw	r2,0(r2)
  80b514:	10800c03 	ldbu	r2,48(r2)
  80b518:	10800814 	ori	r2,r2,32
  80b51c:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
  80b520:	00802074 	movhi	r2,129
  80b524:	109f4d04 	addi	r2,r2,32052
  80b528:	10800017 	ldw	r2,0(r2)
  80b52c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
  80b530:	00802074 	movhi	r2,129
  80b534:	109f4d04 	addi	r2,r2,32052
  80b538:	10c00017 	ldw	r3,0(r2)
  80b53c:	e0bfff0b 	ldhu	r2,-4(fp)
  80b540:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
  80b544:	00802074 	movhi	r2,129
  80b548:	109f4d04 	addi	r2,r2,32052
  80b54c:	10c00017 	ldw	r3,0(r2)
  80b550:	e0bffc17 	ldw	r2,-16(fp)
  80b554:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
  80b558:	e0fffc17 	ldw	r3,-16(fp)
  80b55c:	e0bffd0b 	ldhu	r2,-12(fp)
  80b560:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
  80b564:	e0fffc17 	ldw	r3,-16(fp)
  80b568:	e0bffe03 	ldbu	r2,-8(fp)
  80b56c:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
  80b570:	00802074 	movhi	r2,129
  80b574:	109f4d04 	addi	r2,r2,32052
  80b578:	10c00017 	ldw	r3,0(r2)
  80b57c:	e0bffc17 	ldw	r2,-16(fp)
  80b580:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
  80b584:	e0bffb17 	ldw	r2,-20(fp)
  80b588:	10c00117 	ldw	r3,4(r2)
  80b58c:	e0bffc17 	ldw	r2,-16(fp)
  80b590:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
  80b594:	e0bffc17 	ldw	r2,-16(fp)
  80b598:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
  80b59c:	e0fffc17 	ldw	r3,-16(fp)
  80b5a0:	e0bffb17 	ldw	r2,-20(fp)
  80b5a4:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  80b5a8:	e0bffb17 	ldw	r2,-20(fp)
  80b5ac:	10800117 	ldw	r2,4(r2)
  80b5b0:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
  80b5b4:	e0bffa17 	ldw	r2,-24(fp)
  80b5b8:	1005003a 	cmpeq	r2,r2,zero
  80b5bc:	1000031e 	bne	r2,zero,80b5cc <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
  80b5c0:	e0fffa17 	ldw	r3,-24(fp)
  80b5c4:	e0bffc17 	ldw	r2,-16(fp)
  80b5c8:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
  80b5cc:	e0fffb17 	ldw	r3,-20(fp)
  80b5d0:	e0bffc17 	ldw	r2,-16(fp)
  80b5d4:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
  80b5d8:	00802074 	movhi	r2,129
  80b5dc:	109f4d04 	addi	r2,r2,32052
  80b5e0:	10800017 	ldw	r2,0(r2)
  80b5e4:	10800d03 	ldbu	r2,52(r2)
  80b5e8:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  80b5ec:	e13ff903 	ldbu	r4,-28(fp)
  80b5f0:	e0fff903 	ldbu	r3,-28(fp)
  80b5f4:	00802074 	movhi	r2,129
  80b5f8:	109f4a44 	addi	r2,r2,32041
  80b5fc:	10c5883a 	add	r2,r2,r3
  80b600:	10800003 	ldbu	r2,0(r2)
  80b604:	1007883a 	mov	r3,r2
  80b608:	00802074 	movhi	r2,129
  80b60c:	109f4d04 	addi	r2,r2,32052
  80b610:	10800017 	ldw	r2,0(r2)
  80b614:	10800d43 	ldbu	r2,53(r2)
  80b618:	0084303a 	nor	r2,zero,r2
  80b61c:	1884703a 	and	r2,r3,r2
  80b620:	1007883a 	mov	r3,r2
  80b624:	00802074 	movhi	r2,129
  80b628:	109f4a44 	addi	r2,r2,32041
  80b62c:	1105883a 	add	r2,r2,r4
  80b630:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
  80b634:	e0fff903 	ldbu	r3,-28(fp)
  80b638:	00802074 	movhi	r2,129
  80b63c:	109f4a44 	addi	r2,r2,32041
  80b640:	10c5883a 	add	r2,r2,r3
  80b644:	10800003 	ldbu	r2,0(r2)
  80b648:	10803fcc 	andi	r2,r2,255
  80b64c:	1004c03a 	cmpne	r2,r2,zero
  80b650:	10000e1e 	bne	r2,zero,80b68c <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  80b654:	00802074 	movhi	r2,129
  80b658:	109f4d04 	addi	r2,r2,32052
  80b65c:	10800017 	ldw	r2,0(r2)
  80b660:	10800d83 	ldbu	r2,54(r2)
  80b664:	0084303a 	nor	r2,zero,r2
  80b668:	1007883a 	mov	r3,r2
  80b66c:	00802074 	movhi	r2,129
  80b670:	109f4a04 	addi	r2,r2,32040
  80b674:	10800003 	ldbu	r2,0(r2)
  80b678:	1884703a 	and	r2,r3,r2
  80b67c:	1007883a 	mov	r3,r2
  80b680:	00802074 	movhi	r2,129
  80b684:	109f4a04 	addi	r2,r2,32040
  80b688:	10c00005 	stb	r3,0(r2)
    }
}
  80b68c:	e037883a 	mov	sp,fp
  80b690:	df000017 	ldw	fp,0(sp)
  80b694:	dec00104 	addi	sp,sp,4
  80b698:	f800283a 	ret

0080b69c <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
  80b69c:	defffb04 	addi	sp,sp,-20
  80b6a0:	dfc00415 	stw	ra,16(sp)
  80b6a4:	df000315 	stw	fp,12(sp)
  80b6a8:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
  80b6ac:	010020b4 	movhi	r4,130
  80b6b0:	212f5f04 	addi	r4,r4,-17028
  80b6b4:	0140dc04 	movi	r5,880
  80b6b8:	08096cc0 	call	8096cc <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
  80b6bc:	008020b4 	movhi	r2,130
  80b6c0:	10af5f04 	addi	r2,r2,-17028
  80b6c4:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
  80b6c8:	008020b4 	movhi	r2,130
  80b6cc:	10af6a04 	addi	r2,r2,-16984
  80b6d0:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  80b6d4:	e03fff0d 	sth	zero,-4(fp)
  80b6d8:	00001306 	br	80b728 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  80b6dc:	e0bffe17 	ldw	r2,-8(fp)
  80b6e0:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
  80b6e4:	e0fffe17 	ldw	r3,-8(fp)
  80b6e8:	e0bffd17 	ldw	r2,-12(fp)
  80b6ec:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
  80b6f0:	e0fffe17 	ldw	r3,-8(fp)
  80b6f4:	00800fc4 	movi	r2,63
  80b6f8:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  80b6fc:	e0bffe17 	ldw	r2,-8(fp)
  80b700:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
  80b704:	e0bffe17 	ldw	r2,-8(fp)
  80b708:	10800b04 	addi	r2,r2,44
  80b70c:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
  80b710:	e0bffd17 	ldw	r2,-12(fp)
  80b714:	10800b04 	addi	r2,r2,44
  80b718:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  80b71c:	e0bfff0b 	ldhu	r2,-4(fp)
  80b720:	10800044 	addi	r2,r2,1
  80b724:	e0bfff0d 	sth	r2,-4(fp)
  80b728:	e0bfff0b 	ldhu	r2,-4(fp)
  80b72c:	108004f0 	cmpltui	r2,r2,19
  80b730:	103fea1e 	bne	r2,zero,80b6dc <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  80b734:	e0bffe17 	ldw	r2,-8(fp)
  80b738:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
  80b73c:	e0bffe17 	ldw	r2,-8(fp)
  80b740:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
  80b744:	e0fffe17 	ldw	r3,-8(fp)
  80b748:	00800fc4 	movi	r2,63
  80b74c:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  80b750:	e0bffe17 	ldw	r2,-8(fp)
  80b754:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
  80b758:	00c02074 	movhi	r3,129
  80b75c:	18df4f04 	addi	r3,r3,32060
  80b760:	008020b4 	movhi	r2,130
  80b764:	10af5f04 	addi	r2,r2,-17028
  80b768:	18800015 	stw	r2,0(r3)
#endif
}
  80b76c:	e037883a 	mov	sp,fp
  80b770:	dfc00117 	ldw	ra,4(sp)
  80b774:	df000017 	ldw	fp,0(sp)
  80b778:	dec00204 	addi	sp,sp,8
  80b77c:	f800283a 	ret

0080b780 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
  80b780:	defffa04 	addi	sp,sp,-24
  80b784:	dfc00515 	stw	ra,20(sp)
  80b788:	df000415 	stw	fp,16(sp)
  80b78c:	df000404 	addi	fp,sp,16
  80b790:	e13ffe15 	stw	r4,-8(fp)
  80b794:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
  80b798:	e0bffe17 	ldw	r2,-8(fp)
  80b79c:	10800217 	ldw	r2,8(r2)
  80b7a0:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
  80b7a4:	e0bffd17 	ldw	r2,-12(fp)
  80b7a8:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
  80b7ac:	e0fffd17 	ldw	r3,-12(fp)
  80b7b0:	e0bfff0b 	ldhu	r2,-4(fp)
  80b7b4:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
  80b7b8:	e0bffd17 	ldw	r2,-12(fp)
  80b7bc:	10c00c03 	ldbu	r3,48(r2)
  80b7c0:	00bff7c4 	movi	r2,-33
  80b7c4:	1884703a 	and	r2,r3,r2
  80b7c8:	1007883a 	mov	r3,r2
  80b7cc:	e0bffd17 	ldw	r2,-12(fp)
  80b7d0:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
  80b7d4:	e0bffd17 	ldw	r2,-12(fp)
  80b7d8:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
  80b7dc:	e0bffd17 	ldw	r2,-12(fp)
  80b7e0:	10800c03 	ldbu	r2,48(r2)
  80b7e4:	10803fcc 	andi	r2,r2,255
  80b7e8:	1004c03a 	cmpne	r2,r2,zero
  80b7ec:	10001f1e 	bne	r2,zero,80b86c <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
  80b7f0:	e0bffd17 	ldw	r2,-12(fp)
  80b7f4:	10c00d83 	ldbu	r3,54(r2)
  80b7f8:	00802074 	movhi	r2,129
  80b7fc:	109f4a04 	addi	r2,r2,32040
  80b800:	10800003 	ldbu	r2,0(r2)
  80b804:	1884b03a 	or	r2,r3,r2
  80b808:	1007883a 	mov	r3,r2
  80b80c:	00802074 	movhi	r2,129
  80b810:	109f4a04 	addi	r2,r2,32040
  80b814:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  80b818:	e0bffd17 	ldw	r2,-12(fp)
  80b81c:	10800d03 	ldbu	r2,52(r2)
  80b820:	11003fcc 	andi	r4,r2,255
  80b824:	e0bffd17 	ldw	r2,-12(fp)
  80b828:	10800d03 	ldbu	r2,52(r2)
  80b82c:	10c03fcc 	andi	r3,r2,255
  80b830:	00802074 	movhi	r2,129
  80b834:	109f4a44 	addi	r2,r2,32041
  80b838:	10c5883a 	add	r2,r2,r3
  80b83c:	10c00003 	ldbu	r3,0(r2)
  80b840:	e0bffd17 	ldw	r2,-12(fp)
  80b844:	10800d43 	ldbu	r2,53(r2)
  80b848:	1884b03a 	or	r2,r3,r2
  80b84c:	1007883a 	mov	r3,r2
  80b850:	00802074 	movhi	r2,129
  80b854:	109f4a44 	addi	r2,r2,32041
  80b858:	1105883a 	add	r2,r2,r4
  80b85c:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
  80b860:	00800044 	movi	r2,1
  80b864:	e0bffc05 	stb	r2,-16(fp)
  80b868:	00000106 	br	80b870 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
  80b86c:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
  80b870:	e13ffe17 	ldw	r4,-8(fp)
  80b874:	080b8900 	call	80b890 <OS_FlagUnlink>
    return (sched);
  80b878:	e0bffc03 	ldbu	r2,-16(fp)
}
  80b87c:	e037883a 	mov	sp,fp
  80b880:	dfc00117 	ldw	ra,4(sp)
  80b884:	df000017 	ldw	fp,0(sp)
  80b888:	dec00204 	addi	sp,sp,8
  80b88c:	f800283a 	ret

0080b890 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
  80b890:	defffa04 	addi	sp,sp,-24
  80b894:	df000515 	stw	fp,20(sp)
  80b898:	df000504 	addi	fp,sp,20
  80b89c:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
  80b8a0:	e0bfff17 	ldw	r2,-4(fp)
  80b8a4:	10800117 	ldw	r2,4(r2)
  80b8a8:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  80b8ac:	e0bfff17 	ldw	r2,-4(fp)
  80b8b0:	10800017 	ldw	r2,0(r2)
  80b8b4:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
  80b8b8:	e0bffc17 	ldw	r2,-16(fp)
  80b8bc:	1004c03a 	cmpne	r2,r2,zero
  80b8c0:	10000c1e 	bne	r2,zero,80b8f4 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
  80b8c4:	e0bfff17 	ldw	r2,-4(fp)
  80b8c8:	10800317 	ldw	r2,12(r2)
  80b8cc:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
  80b8d0:	e0fffd17 	ldw	r3,-12(fp)
  80b8d4:	e0bffb17 	ldw	r2,-20(fp)
  80b8d8:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
  80b8dc:	e0bffb17 	ldw	r2,-20(fp)
  80b8e0:	1005003a 	cmpeq	r2,r2,zero
  80b8e4:	10000c1e 	bne	r2,zero,80b918 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
  80b8e8:	e0bffb17 	ldw	r2,-20(fp)
  80b8ec:	10000115 	stw	zero,4(r2)
  80b8f0:	00000906 	br	80b918 <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
  80b8f4:	e0fffc17 	ldw	r3,-16(fp)
  80b8f8:	e0bffb17 	ldw	r2,-20(fp)
  80b8fc:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
  80b900:	e0bffb17 	ldw	r2,-20(fp)
  80b904:	1005003a 	cmpeq	r2,r2,zero
  80b908:	1000031e 	bne	r2,zero,80b918 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
  80b90c:	e0fffb17 	ldw	r3,-20(fp)
  80b910:	e0bffc17 	ldw	r2,-16(fp)
  80b914:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
  80b918:	e0bfff17 	ldw	r2,-4(fp)
  80b91c:	10800217 	ldw	r2,8(r2)
  80b920:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
  80b924:	e0bffe17 	ldw	r2,-8(fp)
  80b928:	10000a15 	stw	zero,40(r2)
#endif
}
  80b92c:	e037883a 	mov	sp,fp
  80b930:	df000017 	ldw	fp,0(sp)
  80b934:	dec00104 	addi	sp,sp,4
  80b938:	f800283a 	ret

0080b93c <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
  80b93c:	defff304 	addi	sp,sp,-52
  80b940:	df000c15 	stw	fp,48(sp)
  80b944:	df000c04 	addi	fp,sp,48
  80b948:	e13ffb15 	stw	r4,-20(fp)
  80b94c:	e17ffc15 	stw	r5,-16(fp)
  80b950:	e1bffd15 	stw	r6,-12(fp)
  80b954:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80b958:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  80b95c:	e0bffe17 	ldw	r2,-8(fp)
  80b960:	1004c03a 	cmpne	r2,r2,zero
  80b964:	1000021e 	bne	r2,zero,80b970 <OSMemCreate+0x34>
        return ((OS_MEM *)0);
  80b968:	e03fff15 	stw	zero,-4(fp)
  80b96c:	00007506 	br	80bb44 <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
  80b970:	e0bffb17 	ldw	r2,-20(fp)
  80b974:	1004c03a 	cmpne	r2,r2,zero
  80b978:	1000051e 	bne	r2,zero,80b990 <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  80b97c:	e0fffe17 	ldw	r3,-8(fp)
  80b980:	00801884 	movi	r2,98
  80b984:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  80b988:	e03fff15 	stw	zero,-4(fp)
  80b98c:	00006d06 	br	80bb44 <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
  80b990:	e0bffb17 	ldw	r2,-20(fp)
  80b994:	108000cc 	andi	r2,r2,3
  80b998:	1005003a 	cmpeq	r2,r2,zero
  80b99c:	1000051e 	bne	r2,zero,80b9b4 <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  80b9a0:	e0fffe17 	ldw	r3,-8(fp)
  80b9a4:	00801884 	movi	r2,98
  80b9a8:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  80b9ac:	e03fff15 	stw	zero,-4(fp)
  80b9b0:	00006406 	br	80bb44 <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
  80b9b4:	e0bffc17 	ldw	r2,-16(fp)
  80b9b8:	108000a8 	cmpgeui	r2,r2,2
  80b9bc:	1000051e 	bne	r2,zero,80b9d4 <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
  80b9c0:	e0fffe17 	ldw	r3,-8(fp)
  80b9c4:	008016c4 	movi	r2,91
  80b9c8:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  80b9cc:	e03fff15 	stw	zero,-4(fp)
  80b9d0:	00005c06 	br	80bb44 <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
  80b9d4:	e0bffd17 	ldw	r2,-12(fp)
  80b9d8:	10800128 	cmpgeui	r2,r2,4
  80b9dc:	1000051e 	bne	r2,zero,80b9f4 <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
  80b9e0:	e0fffe17 	ldw	r3,-8(fp)
  80b9e4:	00801704 	movi	r2,92
  80b9e8:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  80b9ec:	e03fff15 	stw	zero,-4(fp)
  80b9f0:	00005406 	br	80bb44 <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b9f4:	0005303a 	rdctl	r2,status
  80b9f8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b9fc:	e0fff517 	ldw	r3,-44(fp)
  80ba00:	00bfff84 	movi	r2,-2
  80ba04:	1884703a 	and	r2,r3,r2
  80ba08:	1001703a 	wrctl	status,r2
  
  return context;
  80ba0c:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80ba10:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
  80ba14:	00802074 	movhi	r2,129
  80ba18:	109f4704 	addi	r2,r2,32028
  80ba1c:	10800017 	ldw	r2,0(r2)
  80ba20:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
  80ba24:	00802074 	movhi	r2,129
  80ba28:	109f4704 	addi	r2,r2,32028
  80ba2c:	10800017 	ldw	r2,0(r2)
  80ba30:	1005003a 	cmpeq	r2,r2,zero
  80ba34:	1000081e 	bne	r2,zero,80ba58 <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
  80ba38:	00802074 	movhi	r2,129
  80ba3c:	109f4704 	addi	r2,r2,32028
  80ba40:	10800017 	ldw	r2,0(r2)
  80ba44:	10800117 	ldw	r2,4(r2)
  80ba48:	1007883a 	mov	r3,r2
  80ba4c:	00802074 	movhi	r2,129
  80ba50:	109f4704 	addi	r2,r2,32028
  80ba54:	10c00015 	stw	r3,0(r2)
  80ba58:	e0bff617 	ldw	r2,-40(fp)
  80ba5c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ba60:	e0bff417 	ldw	r2,-48(fp)
  80ba64:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
  80ba68:	e0bffa17 	ldw	r2,-24(fp)
  80ba6c:	1004c03a 	cmpne	r2,r2,zero
  80ba70:	1000051e 	bne	r2,zero,80ba88 <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
  80ba74:	e0fffe17 	ldw	r3,-8(fp)
  80ba78:	00801684 	movi	r2,90
  80ba7c:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  80ba80:	e03fff15 	stw	zero,-4(fp)
  80ba84:	00002f06 	br	80bb44 <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
  80ba88:	e0bffb17 	ldw	r2,-20(fp)
  80ba8c:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
  80ba90:	e0bffb17 	ldw	r2,-20(fp)
  80ba94:	1007883a 	mov	r3,r2
  80ba98:	e0bffd17 	ldw	r2,-12(fp)
  80ba9c:	1885883a 	add	r2,r3,r2
  80baa0:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
  80baa4:	e03ff715 	stw	zero,-36(fp)
  80baa8:	00000d06 	br	80bae0 <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
  80baac:	e0fff817 	ldw	r3,-32(fp)
  80bab0:	e0bff917 	ldw	r2,-28(fp)
  80bab4:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
  80bab8:	e0bff917 	ldw	r2,-28(fp)
  80babc:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
  80bac0:	e0bff917 	ldw	r2,-28(fp)
  80bac4:	1007883a 	mov	r3,r2
  80bac8:	e0bffd17 	ldw	r2,-12(fp)
  80bacc:	1885883a 	add	r2,r3,r2
  80bad0:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
  80bad4:	e0bff717 	ldw	r2,-36(fp)
  80bad8:	10800044 	addi	r2,r2,1
  80badc:	e0bff715 	stw	r2,-36(fp)
  80bae0:	e0bffc17 	ldw	r2,-16(fp)
  80bae4:	10ffffc4 	addi	r3,r2,-1
  80bae8:	e0bff717 	ldw	r2,-36(fp)
  80baec:	10ffef36 	bltu	r2,r3,80baac <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
  80baf0:	e0bff817 	ldw	r2,-32(fp)
  80baf4:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
  80baf8:	e0fffa17 	ldw	r3,-24(fp)
  80bafc:	e0bffb17 	ldw	r2,-20(fp)
  80bb00:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
  80bb04:	e0fffa17 	ldw	r3,-24(fp)
  80bb08:	e0bffb17 	ldw	r2,-20(fp)
  80bb0c:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
  80bb10:	e0fffa17 	ldw	r3,-24(fp)
  80bb14:	e0bffc17 	ldw	r2,-16(fp)
  80bb18:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
  80bb1c:	e0fffa17 	ldw	r3,-24(fp)
  80bb20:	e0bffc17 	ldw	r2,-16(fp)
  80bb24:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
  80bb28:	e0fffa17 	ldw	r3,-24(fp)
  80bb2c:	e0bffd17 	ldw	r2,-12(fp)
  80bb30:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
  80bb34:	e0bffe17 	ldw	r2,-8(fp)
  80bb38:	10000005 	stb	zero,0(r2)
    return (pmem);
  80bb3c:	e0bffa17 	ldw	r2,-24(fp)
  80bb40:	e0bfff15 	stw	r2,-4(fp)
  80bb44:	e0bfff17 	ldw	r2,-4(fp)
}
  80bb48:	e037883a 	mov	sp,fp
  80bb4c:	df000017 	ldw	fp,0(sp)
  80bb50:	dec00104 	addi	sp,sp,4
  80bb54:	f800283a 	ret

0080bb58 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
  80bb58:	defff704 	addi	sp,sp,-36
  80bb5c:	df000815 	stw	fp,32(sp)
  80bb60:	df000804 	addi	fp,sp,32
  80bb64:	e13ffd15 	stw	r4,-12(fp)
  80bb68:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80bb6c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  80bb70:	e0bffe17 	ldw	r2,-8(fp)
  80bb74:	1004c03a 	cmpne	r2,r2,zero
  80bb78:	1000021e 	bne	r2,zero,80bb84 <OSMemGet+0x2c>
        return ((void *)0);
  80bb7c:	e03fff15 	stw	zero,-4(fp)
  80bb80:	00003106 	br	80bc48 <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
  80bb84:	e0bffd17 	ldw	r2,-12(fp)
  80bb88:	1004c03a 	cmpne	r2,r2,zero
  80bb8c:	1000051e 	bne	r2,zero,80bba4 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  80bb90:	e0fffe17 	ldw	r3,-8(fp)
  80bb94:	00801804 	movi	r2,96
  80bb98:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80bb9c:	e03fff15 	stw	zero,-4(fp)
  80bba0:	00002906 	br	80bc48 <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bba4:	0005303a 	rdctl	r2,status
  80bba8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bbac:	e0fffa17 	ldw	r3,-24(fp)
  80bbb0:	00bfff84 	movi	r2,-2
  80bbb4:	1884703a 	and	r2,r3,r2
  80bbb8:	1001703a 	wrctl	status,r2
  
  return context;
  80bbbc:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80bbc0:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
  80bbc4:	e0bffd17 	ldw	r2,-12(fp)
  80bbc8:	10800417 	ldw	r2,16(r2)
  80bbcc:	1005003a 	cmpeq	r2,r2,zero
  80bbd0:	1000151e 	bne	r2,zero,80bc28 <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
  80bbd4:	e0bffd17 	ldw	r2,-12(fp)
  80bbd8:	10800117 	ldw	r2,4(r2)
  80bbdc:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
  80bbe0:	e0bffc17 	ldw	r2,-16(fp)
  80bbe4:	10c00017 	ldw	r3,0(r2)
  80bbe8:	e0bffd17 	ldw	r2,-12(fp)
  80bbec:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
  80bbf0:	e0bffd17 	ldw	r2,-12(fp)
  80bbf4:	10800417 	ldw	r2,16(r2)
  80bbf8:	10ffffc4 	addi	r3,r2,-1
  80bbfc:	e0bffd17 	ldw	r2,-12(fp)
  80bc00:	10c00415 	stw	r3,16(r2)
  80bc04:	e0bffb17 	ldw	r2,-20(fp)
  80bc08:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bc0c:	e0bff917 	ldw	r2,-28(fp)
  80bc10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
  80bc14:	e0bffe17 	ldw	r2,-8(fp)
  80bc18:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
  80bc1c:	e0bffc17 	ldw	r2,-16(fp)
  80bc20:	e0bfff15 	stw	r2,-4(fp)
  80bc24:	00000806 	br	80bc48 <OSMemGet+0xf0>
  80bc28:	e0bffb17 	ldw	r2,-20(fp)
  80bc2c:	e0bff815 	stw	r2,-32(fp)
  80bc30:	e0bff817 	ldw	r2,-32(fp)
  80bc34:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
  80bc38:	e0fffe17 	ldw	r3,-8(fp)
  80bc3c:	00801744 	movi	r2,93
  80bc40:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
  80bc44:	e03fff15 	stw	zero,-4(fp)
  80bc48:	e0bfff17 	ldw	r2,-4(fp)
}
  80bc4c:	e037883a 	mov	sp,fp
  80bc50:	df000017 	ldw	fp,0(sp)
  80bc54:	dec00104 	addi	sp,sp,4
  80bc58:	f800283a 	ret

0080bc5c <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  80bc5c:	defff604 	addi	sp,sp,-40
  80bc60:	dfc00915 	stw	ra,36(sp)
  80bc64:	df000815 	stw	fp,32(sp)
  80bc68:	df000804 	addi	fp,sp,32
  80bc6c:	e13ffc15 	stw	r4,-16(fp)
  80bc70:	e17ffd15 	stw	r5,-12(fp)
  80bc74:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80bc78:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80bc7c:	e0bffe17 	ldw	r2,-8(fp)
  80bc80:	1004c03a 	cmpne	r2,r2,zero
  80bc84:	1000021e 	bne	r2,zero,80bc90 <OSMemNameGet+0x34>
        return (0);
  80bc88:	e03fff15 	stw	zero,-4(fp)
  80bc8c:	00003006 	br	80bd50 <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  80bc90:	e0bffc17 	ldw	r2,-16(fp)
  80bc94:	1004c03a 	cmpne	r2,r2,zero
  80bc98:	1000051e 	bne	r2,zero,80bcb0 <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  80bc9c:	e0fffe17 	ldw	r3,-8(fp)
  80bca0:	00801804 	movi	r2,96
  80bca4:	18800005 	stb	r2,0(r3)
        return (0);
  80bca8:	e03fff15 	stw	zero,-4(fp)
  80bcac:	00002806 	br	80bd50 <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80bcb0:	e0bffd17 	ldw	r2,-12(fp)
  80bcb4:	1004c03a 	cmpne	r2,r2,zero
  80bcb8:	1000051e 	bne	r2,zero,80bcd0 <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  80bcbc:	e0fffe17 	ldw	r3,-8(fp)
  80bcc0:	00800304 	movi	r2,12
  80bcc4:	18800005 	stb	r2,0(r3)
        return (0);
  80bcc8:	e03fff15 	stw	zero,-4(fp)
  80bccc:	00002006 	br	80bd50 <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80bcd0:	00802074 	movhi	r2,129
  80bcd4:	109f4c04 	addi	r2,r2,32048
  80bcd8:	10800003 	ldbu	r2,0(r2)
  80bcdc:	10803fcc 	andi	r2,r2,255
  80bce0:	1005003a 	cmpeq	r2,r2,zero
  80bce4:	1000051e 	bne	r2,zero,80bcfc <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
  80bce8:	e0fffe17 	ldw	r3,-8(fp)
  80bcec:	00800444 	movi	r2,17
  80bcf0:	18800005 	stb	r2,0(r3)
        return (0);
  80bcf4:	e03fff15 	stw	zero,-4(fp)
  80bcf8:	00001506 	br	80bd50 <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bcfc:	0005303a 	rdctl	r2,status
  80bd00:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bd04:	e0fff917 	ldw	r3,-28(fp)
  80bd08:	00bfff84 	movi	r2,-2
  80bd0c:	1884703a 	and	r2,r3,r2
  80bd10:	1001703a 	wrctl	status,r2
  
  return context;
  80bd14:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80bd18:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
  80bd1c:	e0bffc17 	ldw	r2,-16(fp)
  80bd20:	11400504 	addi	r5,r2,20
  80bd24:	e13ffd17 	ldw	r4,-12(fp)
  80bd28:	08098d00 	call	8098d0 <OS_StrCopy>
  80bd2c:	e0bffb05 	stb	r2,-20(fp)
  80bd30:	e0bffa17 	ldw	r2,-24(fp)
  80bd34:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bd38:	e0bff817 	ldw	r2,-32(fp)
  80bd3c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80bd40:	e0bffe17 	ldw	r2,-8(fp)
  80bd44:	10000005 	stb	zero,0(r2)
    return (len);
  80bd48:	e0bffb03 	ldbu	r2,-20(fp)
  80bd4c:	e0bfff15 	stw	r2,-4(fp)
  80bd50:	e0bfff17 	ldw	r2,-4(fp)
}
  80bd54:	e037883a 	mov	sp,fp
  80bd58:	dfc00117 	ldw	ra,4(sp)
  80bd5c:	df000017 	ldw	fp,0(sp)
  80bd60:	dec00204 	addi	sp,sp,8
  80bd64:	f800283a 	ret

0080bd68 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  80bd68:	defff604 	addi	sp,sp,-40
  80bd6c:	dfc00915 	stw	ra,36(sp)
  80bd70:	df000815 	stw	fp,32(sp)
  80bd74:	df000804 	addi	fp,sp,32
  80bd78:	e13ffd15 	stw	r4,-12(fp)
  80bd7c:	e17ffe15 	stw	r5,-8(fp)
  80bd80:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80bd84:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80bd88:	e0bfff17 	ldw	r2,-4(fp)
  80bd8c:	1005003a 	cmpeq	r2,r2,zero
  80bd90:	1000381e 	bne	r2,zero,80be74 <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  80bd94:	e0bffd17 	ldw	r2,-12(fp)
  80bd98:	1004c03a 	cmpne	r2,r2,zero
  80bd9c:	1000041e 	bne	r2,zero,80bdb0 <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  80bda0:	e0ffff17 	ldw	r3,-4(fp)
  80bda4:	00801804 	movi	r2,96
  80bda8:	18800005 	stb	r2,0(r3)
        return;
  80bdac:	00003106 	br	80be74 <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80bdb0:	e0bffe17 	ldw	r2,-8(fp)
  80bdb4:	1004c03a 	cmpne	r2,r2,zero
  80bdb8:	1000041e 	bne	r2,zero,80bdcc <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  80bdbc:	e0ffff17 	ldw	r3,-4(fp)
  80bdc0:	00800304 	movi	r2,12
  80bdc4:	18800005 	stb	r2,0(r3)
        return;
  80bdc8:	00002a06 	br	80be74 <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80bdcc:	00802074 	movhi	r2,129
  80bdd0:	109f4c04 	addi	r2,r2,32048
  80bdd4:	10800003 	ldbu	r2,0(r2)
  80bdd8:	10803fcc 	andi	r2,r2,255
  80bddc:	1005003a 	cmpeq	r2,r2,zero
  80bde0:	1000041e 	bne	r2,zero,80bdf4 <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
  80bde4:	e0ffff17 	ldw	r3,-4(fp)
  80bde8:	00800484 	movi	r2,18
  80bdec:	18800005 	stb	r2,0(r3)
        return;
  80bdf0:	00002006 	br	80be74 <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bdf4:	0005303a 	rdctl	r2,status
  80bdf8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bdfc:	e0fffa17 	ldw	r3,-24(fp)
  80be00:	00bfff84 	movi	r2,-2
  80be04:	1884703a 	and	r2,r3,r2
  80be08:	1001703a 	wrctl	status,r2
  
  return context;
  80be0c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80be10:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  80be14:	e13ffe17 	ldw	r4,-8(fp)
  80be18:	08099500 	call	809950 <OS_StrLen>
  80be1c:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
  80be20:	e0bffc03 	ldbu	r2,-16(fp)
  80be24:	10800830 	cmpltui	r2,r2,32
  80be28:	1000081e 	bne	r2,zero,80be4c <OSMemNameSet+0xe4>
  80be2c:	e0bffb17 	ldw	r2,-20(fp)
  80be30:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80be34:	e0bff917 	ldw	r2,-28(fp)
  80be38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
  80be3c:	e0ffff17 	ldw	r3,-4(fp)
  80be40:	008018c4 	movi	r2,99
  80be44:	18800005 	stb	r2,0(r3)
        return;
  80be48:	00000a06 	br	80be74 <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
  80be4c:	e0bffd17 	ldw	r2,-12(fp)
  80be50:	11000504 	addi	r4,r2,20
  80be54:	e17ffe17 	ldw	r5,-8(fp)
  80be58:	08098d00 	call	8098d0 <OS_StrCopy>
  80be5c:	e0bffb17 	ldw	r2,-20(fp)
  80be60:	e0bff815 	stw	r2,-32(fp)
  80be64:	e0bff817 	ldw	r2,-32(fp)
  80be68:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80be6c:	e0bfff17 	ldw	r2,-4(fp)
  80be70:	10000005 	stb	zero,0(r2)
}
  80be74:	e037883a 	mov	sp,fp
  80be78:	dfc00117 	ldw	ra,4(sp)
  80be7c:	df000017 	ldw	fp,0(sp)
  80be80:	dec00204 	addi	sp,sp,8
  80be84:	f800283a 	ret

0080be88 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
  80be88:	defff804 	addi	sp,sp,-32
  80be8c:	df000715 	stw	fp,28(sp)
  80be90:	df000704 	addi	fp,sp,28
  80be94:	e13ffd15 	stw	r4,-12(fp)
  80be98:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80be9c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  80bea0:	e0bffd17 	ldw	r2,-12(fp)
  80bea4:	1004c03a 	cmpne	r2,r2,zero
  80bea8:	1000031e 	bne	r2,zero,80beb8 <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
  80beac:	00801804 	movi	r2,96
  80beb0:	e0bfff15 	stw	r2,-4(fp)
  80beb4:	00002b06 	br	80bf64 <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
  80beb8:	e0bffe17 	ldw	r2,-8(fp)
  80bebc:	1004c03a 	cmpne	r2,r2,zero
  80bec0:	1000031e 	bne	r2,zero,80bed0 <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
  80bec4:	008017c4 	movi	r2,95
  80bec8:	e0bfff15 	stw	r2,-4(fp)
  80becc:	00002506 	br	80bf64 <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bed0:	0005303a 	rdctl	r2,status
  80bed4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bed8:	e0fffb17 	ldw	r3,-20(fp)
  80bedc:	00bfff84 	movi	r2,-2
  80bee0:	1884703a 	and	r2,r3,r2
  80bee4:	1001703a 	wrctl	status,r2
  
  return context;
  80bee8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80beec:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
  80bef0:	e0bffd17 	ldw	r2,-12(fp)
  80bef4:	10c00417 	ldw	r3,16(r2)
  80bef8:	e0bffd17 	ldw	r2,-12(fp)
  80befc:	10800317 	ldw	r2,12(r2)
  80bf00:	18800736 	bltu	r3,r2,80bf20 <OSMemPut+0x98>
  80bf04:	e0bffc17 	ldw	r2,-16(fp)
  80bf08:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bf0c:	e0bffa17 	ldw	r2,-24(fp)
  80bf10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
  80bf14:	00801784 	movi	r2,94
  80bf18:	e0bfff15 	stw	r2,-4(fp)
  80bf1c:	00001106 	br	80bf64 <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
  80bf20:	e0fffe17 	ldw	r3,-8(fp)
  80bf24:	e0bffd17 	ldw	r2,-12(fp)
  80bf28:	10800117 	ldw	r2,4(r2)
  80bf2c:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
  80bf30:	e0fffd17 	ldw	r3,-12(fp)
  80bf34:	e0bffe17 	ldw	r2,-8(fp)
  80bf38:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
  80bf3c:	e0bffd17 	ldw	r2,-12(fp)
  80bf40:	10800417 	ldw	r2,16(r2)
  80bf44:	10c00044 	addi	r3,r2,1
  80bf48:	e0bffd17 	ldw	r2,-12(fp)
  80bf4c:	10c00415 	stw	r3,16(r2)
  80bf50:	e0bffc17 	ldw	r2,-16(fp)
  80bf54:	e0bff915 	stw	r2,-28(fp)
  80bf58:	e0bff917 	ldw	r2,-28(fp)
  80bf5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
  80bf60:	e03fff15 	stw	zero,-4(fp)
  80bf64:	e0bfff17 	ldw	r2,-4(fp)
}
  80bf68:	e037883a 	mov	sp,fp
  80bf6c:	df000017 	ldw	fp,0(sp)
  80bf70:	dec00104 	addi	sp,sp,4
  80bf74:	f800283a 	ret

0080bf78 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
  80bf78:	defff904 	addi	sp,sp,-28
  80bf7c:	df000615 	stw	fp,24(sp)
  80bf80:	df000604 	addi	fp,sp,24
  80bf84:	e13ffd15 	stw	r4,-12(fp)
  80bf88:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80bf8c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  80bf90:	e0bffd17 	ldw	r2,-12(fp)
  80bf94:	1004c03a 	cmpne	r2,r2,zero
  80bf98:	1000031e 	bne	r2,zero,80bfa8 <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
  80bf9c:	00801804 	movi	r2,96
  80bfa0:	e0bfff15 	stw	r2,-4(fp)
  80bfa4:	00002e06 	br	80c060 <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
  80bfa8:	e0bffe17 	ldw	r2,-8(fp)
  80bfac:	1004c03a 	cmpne	r2,r2,zero
  80bfb0:	1000031e 	bne	r2,zero,80bfc0 <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
  80bfb4:	00801844 	movi	r2,97
  80bfb8:	e0bfff15 	stw	r2,-4(fp)
  80bfbc:	00002806 	br	80c060 <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bfc0:	0005303a 	rdctl	r2,status
  80bfc4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bfc8:	e0fffb17 	ldw	r3,-20(fp)
  80bfcc:	00bfff84 	movi	r2,-2
  80bfd0:	1884703a 	and	r2,r3,r2
  80bfd4:	1001703a 	wrctl	status,r2
  
  return context;
  80bfd8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80bfdc:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
  80bfe0:	e0bffd17 	ldw	r2,-12(fp)
  80bfe4:	10c00017 	ldw	r3,0(r2)
  80bfe8:	e0bffe17 	ldw	r2,-8(fp)
  80bfec:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
  80bff0:	e0bffd17 	ldw	r2,-12(fp)
  80bff4:	10c00117 	ldw	r3,4(r2)
  80bff8:	e0bffe17 	ldw	r2,-8(fp)
  80bffc:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
  80c000:	e0bffd17 	ldw	r2,-12(fp)
  80c004:	10c00217 	ldw	r3,8(r2)
  80c008:	e0bffe17 	ldw	r2,-8(fp)
  80c00c:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
  80c010:	e0bffd17 	ldw	r2,-12(fp)
  80c014:	10c00317 	ldw	r3,12(r2)
  80c018:	e0bffe17 	ldw	r2,-8(fp)
  80c01c:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
  80c020:	e0bffd17 	ldw	r2,-12(fp)
  80c024:	10c00417 	ldw	r3,16(r2)
  80c028:	e0bffe17 	ldw	r2,-8(fp)
  80c02c:	10c00415 	stw	r3,16(r2)
  80c030:	e0bffc17 	ldw	r2,-16(fp)
  80c034:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c038:	e0bffa17 	ldw	r2,-24(fp)
  80c03c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
  80c040:	e0bffe17 	ldw	r2,-8(fp)
  80c044:	10c00317 	ldw	r3,12(r2)
  80c048:	e0bffe17 	ldw	r2,-8(fp)
  80c04c:	10800417 	ldw	r2,16(r2)
  80c050:	1887c83a 	sub	r3,r3,r2
  80c054:	e0bffe17 	ldw	r2,-8(fp)
  80c058:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
  80c05c:	e03fff15 	stw	zero,-4(fp)
  80c060:	e0bfff17 	ldw	r2,-4(fp)
}
  80c064:	e037883a 	mov	sp,fp
  80c068:	df000017 	ldw	fp,0(sp)
  80c06c:	dec00104 	addi	sp,sp,4
  80c070:	f800283a 	ret

0080c074 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
  80c074:	defffc04 	addi	sp,sp,-16
  80c078:	dfc00315 	stw	ra,12(sp)
  80c07c:	df000215 	stw	fp,8(sp)
  80c080:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
  80c084:	010020b4 	movhi	r4,130
  80c088:	21303b04 	addi	r4,r4,-16148
  80c08c:	01430c04 	movi	r5,3120
  80c090:	08096cc0 	call	8096cc <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
  80c094:	008020b4 	movhi	r2,130
  80c098:	10b03b04 	addi	r2,r2,-16148
  80c09c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  80c0a0:	e03ffe0d 	sth	zero,-8(fp)
  80c0a4:	00001306 	br	80c0f4 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
  80c0a8:	e0bffe0b 	ldhu	r2,-8(fp)
  80c0ac:	10800d24 	muli	r2,r2,52
  80c0b0:	1007883a 	mov	r3,r2
  80c0b4:	008020b4 	movhi	r2,130
  80c0b8:	10b04804 	addi	r2,r2,-16096
  80c0bc:	1887883a 	add	r3,r3,r2
  80c0c0:	e0bfff17 	ldw	r2,-4(fp)
  80c0c4:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
  80c0c8:	e0ffff17 	ldw	r3,-4(fp)
  80c0cc:	00800fc4 	movi	r2,63
  80c0d0:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
  80c0d4:	e0bfff17 	ldw	r2,-4(fp)
  80c0d8:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
  80c0dc:	e0bfff17 	ldw	r2,-4(fp)
  80c0e0:	10800d04 	addi	r2,r2,52
  80c0e4:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  80c0e8:	e0bffe0b 	ldhu	r2,-8(fp)
  80c0ec:	10800044 	addi	r2,r2,1
  80c0f0:	e0bffe0d 	sth	r2,-8(fp)
  80c0f4:	e0bffe0b 	ldhu	r2,-8(fp)
  80c0f8:	10800ef0 	cmpltui	r2,r2,59
  80c0fc:	103fea1e 	bne	r2,zero,80c0a8 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
  80c100:	e0bfff17 	ldw	r2,-4(fp)
  80c104:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
  80c108:	e0ffff17 	ldw	r3,-4(fp)
  80c10c:	00800fc4 	movi	r2,63
  80c110:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
  80c114:	e0bfff17 	ldw	r2,-4(fp)
  80c118:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
  80c11c:	00c02074 	movhi	r3,129
  80c120:	18df4704 	addi	r3,r3,32028
  80c124:	008020b4 	movhi	r2,130
  80c128:	10b03b04 	addi	r2,r2,-16148
  80c12c:	18800015 	stw	r2,0(r3)
#endif
}
  80c130:	e037883a 	mov	sp,fp
  80c134:	dfc00117 	ldw	ra,4(sp)
  80c138:	df000017 	ldw	fp,0(sp)
  80c13c:	dec00204 	addi	sp,sp,8
  80c140:	f800283a 	ret

0080c144 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
  80c144:	defff704 	addi	sp,sp,-36
  80c148:	df000815 	stw	fp,32(sp)
  80c14c:	df000804 	addi	fp,sp,32
  80c150:	e13ffd15 	stw	r4,-12(fp)
  80c154:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80c158:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80c15c:	e0bffe17 	ldw	r2,-8(fp)
  80c160:	1004c03a 	cmpne	r2,r2,zero
  80c164:	1000021e 	bne	r2,zero,80c170 <OSQAccept+0x2c>
        return ((void *)0);
  80c168:	e03fff15 	stw	zero,-4(fp)
  80c16c:	00004506 	br	80c284 <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  80c170:	e0bffd17 	ldw	r2,-12(fp)
  80c174:	1004c03a 	cmpne	r2,r2,zero
  80c178:	1000051e 	bne	r2,zero,80c190 <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
  80c17c:	e0fffe17 	ldw	r3,-8(fp)
  80c180:	00800104 	movi	r2,4
  80c184:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80c188:	e03fff15 	stw	zero,-4(fp)
  80c18c:	00003d06 	br	80c284 <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  80c190:	e0bffd17 	ldw	r2,-12(fp)
  80c194:	10800003 	ldbu	r2,0(r2)
  80c198:	10803fcc 	andi	r2,r2,255
  80c19c:	108000a0 	cmpeqi	r2,r2,2
  80c1a0:	1000051e 	bne	r2,zero,80c1b8 <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
  80c1a4:	e0fffe17 	ldw	r3,-8(fp)
  80c1a8:	00800044 	movi	r2,1
  80c1ac:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80c1b0:	e03fff15 	stw	zero,-4(fp)
  80c1b4:	00003306 	br	80c284 <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c1b8:	0005303a 	rdctl	r2,status
  80c1bc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c1c0:	e0fff917 	ldw	r3,-28(fp)
  80c1c4:	00bfff84 	movi	r2,-2
  80c1c8:	1884703a 	and	r2,r3,r2
  80c1cc:	1001703a 	wrctl	status,r2
  
  return context;
  80c1d0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80c1d4:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  80c1d8:	e0bffd17 	ldw	r2,-12(fp)
  80c1dc:	10800117 	ldw	r2,4(r2)
  80c1e0:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  80c1e4:	e0bffb17 	ldw	r2,-20(fp)
  80c1e8:	1080058b 	ldhu	r2,22(r2)
  80c1ec:	10bfffcc 	andi	r2,r2,65535
  80c1f0:	1005003a 	cmpeq	r2,r2,zero
  80c1f4:	1000191e 	bne	r2,zero,80c25c <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  80c1f8:	e0bffb17 	ldw	r2,-20(fp)
  80c1fc:	10c00417 	ldw	r3,16(r2)
  80c200:	18800017 	ldw	r2,0(r3)
  80c204:	e0bffc15 	stw	r2,-16(fp)
  80c208:	18c00104 	addi	r3,r3,4
  80c20c:	e0bffb17 	ldw	r2,-20(fp)
  80c210:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  80c214:	e0bffb17 	ldw	r2,-20(fp)
  80c218:	1080058b 	ldhu	r2,22(r2)
  80c21c:	10bfffc4 	addi	r2,r2,-1
  80c220:	1007883a 	mov	r3,r2
  80c224:	e0bffb17 	ldw	r2,-20(fp)
  80c228:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  80c22c:	e0bffb17 	ldw	r2,-20(fp)
  80c230:	10c00417 	ldw	r3,16(r2)
  80c234:	e0bffb17 	ldw	r2,-20(fp)
  80c238:	10800217 	ldw	r2,8(r2)
  80c23c:	1880041e 	bne	r3,r2,80c250 <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
  80c240:	e0bffb17 	ldw	r2,-20(fp)
  80c244:	10c00117 	ldw	r3,4(r2)
  80c248:	e0bffb17 	ldw	r2,-20(fp)
  80c24c:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
  80c250:	e0bffe17 	ldw	r2,-8(fp)
  80c254:	10000005 	stb	zero,0(r2)
  80c258:	00000406 	br	80c26c <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
  80c25c:	e0fffe17 	ldw	r3,-8(fp)
  80c260:	008007c4 	movi	r2,31
  80c264:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
  80c268:	e03ffc15 	stw	zero,-16(fp)
  80c26c:	e0bffa17 	ldw	r2,-24(fp)
  80c270:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c274:	e0bff817 	ldw	r2,-32(fp)
  80c278:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
  80c27c:	e0bffc17 	ldw	r2,-16(fp)
  80c280:	e0bfff15 	stw	r2,-4(fp)
  80c284:	e0bfff17 	ldw	r2,-4(fp)
}
  80c288:	e037883a 	mov	sp,fp
  80c28c:	df000017 	ldw	fp,0(sp)
  80c290:	dec00104 	addi	sp,sp,4
  80c294:	f800283a 	ret

0080c298 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
  80c298:	defff304 	addi	sp,sp,-52
  80c29c:	dfc00c15 	stw	ra,48(sp)
  80c2a0:	df000b15 	stw	fp,44(sp)
  80c2a4:	df000b04 	addi	fp,sp,44
  80c2a8:	e13ffd15 	stw	r4,-12(fp)
  80c2ac:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80c2b0:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  80c2b4:	00802074 	movhi	r2,129
  80c2b8:	109f4c04 	addi	r2,r2,32048
  80c2bc:	10800003 	ldbu	r2,0(r2)
  80c2c0:	10803fcc 	andi	r2,r2,255
  80c2c4:	1005003a 	cmpeq	r2,r2,zero
  80c2c8:	1000021e 	bne	r2,zero,80c2d4 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
  80c2cc:	e03fff15 	stw	zero,-4(fp)
  80c2d0:	00007006 	br	80c494 <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c2d4:	0005303a 	rdctl	r2,status
  80c2d8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c2dc:	e0fff917 	ldw	r3,-28(fp)
  80c2e0:	00bfff84 	movi	r2,-2
  80c2e4:	1884703a 	and	r2,r3,r2
  80c2e8:	1001703a 	wrctl	status,r2
  
  return context;
  80c2ec:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80c2f0:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
  80c2f4:	00802074 	movhi	r2,129
  80c2f8:	109f4b04 	addi	r2,r2,32044
  80c2fc:	10800017 	ldw	r2,0(r2)
  80c300:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
  80c304:	00802074 	movhi	r2,129
  80c308:	109f4b04 	addi	r2,r2,32044
  80c30c:	10800017 	ldw	r2,0(r2)
  80c310:	1005003a 	cmpeq	r2,r2,zero
  80c314:	1000081e 	bne	r2,zero,80c338 <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  80c318:	00802074 	movhi	r2,129
  80c31c:	109f4b04 	addi	r2,r2,32044
  80c320:	10800017 	ldw	r2,0(r2)
  80c324:	10800117 	ldw	r2,4(r2)
  80c328:	1007883a 	mov	r3,r2
  80c32c:	00802074 	movhi	r2,129
  80c330:	109f4b04 	addi	r2,r2,32044
  80c334:	10c00015 	stw	r3,0(r2)
  80c338:	e0bffa17 	ldw	r2,-24(fp)
  80c33c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c340:	e0bff817 	ldw	r2,-32(fp)
  80c344:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
  80c348:	e0bffc17 	ldw	r2,-16(fp)
  80c34c:	1005003a 	cmpeq	r2,r2,zero
  80c350:	10004e1e 	bne	r2,zero,80c48c <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c354:	0005303a 	rdctl	r2,status
  80c358:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c35c:	e0fff717 	ldw	r3,-36(fp)
  80c360:	00bfff84 	movi	r2,-2
  80c364:	1884703a 	and	r2,r3,r2
  80c368:	1001703a 	wrctl	status,r2
  
  return context;
  80c36c:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
  80c370:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
  80c374:	00802074 	movhi	r2,129
  80c378:	109f4904 	addi	r2,r2,32036
  80c37c:	10800017 	ldw	r2,0(r2)
  80c380:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
  80c384:	e0bffb17 	ldw	r2,-20(fp)
  80c388:	1005003a 	cmpeq	r2,r2,zero
  80c38c:	1000311e 	bne	r2,zero,80c454 <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
  80c390:	00802074 	movhi	r2,129
  80c394:	109f4904 	addi	r2,r2,32036
  80c398:	10800017 	ldw	r2,0(r2)
  80c39c:	10c00017 	ldw	r3,0(r2)
  80c3a0:	00802074 	movhi	r2,129
  80c3a4:	109f4904 	addi	r2,r2,32036
  80c3a8:	10c00015 	stw	r3,0(r2)
  80c3ac:	e0bffa17 	ldw	r2,-24(fp)
  80c3b0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c3b4:	e0bff617 	ldw	r2,-40(fp)
  80c3b8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
  80c3bc:	e0fffb17 	ldw	r3,-20(fp)
  80c3c0:	e0bffd17 	ldw	r2,-12(fp)
  80c3c4:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
  80c3c8:	e0bffe0b 	ldhu	r2,-8(fp)
  80c3cc:	1085883a 	add	r2,r2,r2
  80c3d0:	1085883a 	add	r2,r2,r2
  80c3d4:	1007883a 	mov	r3,r2
  80c3d8:	e0bffd17 	ldw	r2,-12(fp)
  80c3dc:	1887883a 	add	r3,r3,r2
  80c3e0:	e0bffb17 	ldw	r2,-20(fp)
  80c3e4:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
  80c3e8:	e0fffb17 	ldw	r3,-20(fp)
  80c3ec:	e0bffd17 	ldw	r2,-12(fp)
  80c3f0:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
  80c3f4:	e0fffb17 	ldw	r3,-20(fp)
  80c3f8:	e0bffd17 	ldw	r2,-12(fp)
  80c3fc:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
  80c400:	e0fffb17 	ldw	r3,-20(fp)
  80c404:	e0bffe0b 	ldhu	r2,-8(fp)
  80c408:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
  80c40c:	e0bffb17 	ldw	r2,-20(fp)
  80c410:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
  80c414:	e0fffc17 	ldw	r3,-16(fp)
  80c418:	00800084 	movi	r2,2
  80c41c:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
  80c420:	e0bffc17 	ldw	r2,-16(fp)
  80c424:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
  80c428:	e0fffc17 	ldw	r3,-16(fp)
  80c42c:	e0bffb17 	ldw	r2,-20(fp)
  80c430:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
  80c434:	e0fffc17 	ldw	r3,-16(fp)
  80c438:	00800fc4 	movi	r2,63
  80c43c:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
  80c440:	e0bffc17 	ldw	r2,-16(fp)
  80c444:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
  80c448:	e13ffc17 	ldw	r4,-16(fp)
  80c44c:	08093000 	call	809300 <OS_EventWaitListInit>
  80c450:	00000e06 	br	80c48c <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
  80c454:	00802074 	movhi	r2,129
  80c458:	109f4b04 	addi	r2,r2,32044
  80c45c:	10c00017 	ldw	r3,0(r2)
  80c460:	e0bffc17 	ldw	r2,-16(fp)
  80c464:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
  80c468:	00c02074 	movhi	r3,129
  80c46c:	18df4b04 	addi	r3,r3,32044
  80c470:	e0bffc17 	ldw	r2,-16(fp)
  80c474:	18800015 	stw	r2,0(r3)
  80c478:	e0bffa17 	ldw	r2,-24(fp)
  80c47c:	e0bff515 	stw	r2,-44(fp)
  80c480:	e0bff517 	ldw	r2,-44(fp)
  80c484:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
  80c488:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
  80c48c:	e0bffc17 	ldw	r2,-16(fp)
  80c490:	e0bfff15 	stw	r2,-4(fp)
  80c494:	e0bfff17 	ldw	r2,-4(fp)
}
  80c498:	e037883a 	mov	sp,fp
  80c49c:	dfc00117 	ldw	ra,4(sp)
  80c4a0:	df000017 	ldw	fp,0(sp)
  80c4a4:	dec00204 	addi	sp,sp,8
  80c4a8:	f800283a 	ret

0080c4ac <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  80c4ac:	defff004 	addi	sp,sp,-64
  80c4b0:	dfc00f15 	stw	ra,60(sp)
  80c4b4:	df000e15 	stw	fp,56(sp)
  80c4b8:	df000e04 	addi	fp,sp,56
  80c4bc:	e13ffb15 	stw	r4,-20(fp)
  80c4c0:	e1bffd15 	stw	r6,-12(fp)
  80c4c4:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80c4c8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80c4cc:	e0bffd17 	ldw	r2,-12(fp)
  80c4d0:	1004c03a 	cmpne	r2,r2,zero
  80c4d4:	1000031e 	bne	r2,zero,80c4e4 <OSQDel+0x38>
        return (pevent);
  80c4d8:	e0bffb17 	ldw	r2,-20(fp)
  80c4dc:	e0bfff15 	stw	r2,-4(fp)
  80c4e0:	0000ac06 	br	80c794 <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  80c4e4:	e0bffb17 	ldw	r2,-20(fp)
  80c4e8:	1004c03a 	cmpne	r2,r2,zero
  80c4ec:	1000061e 	bne	r2,zero,80c508 <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
  80c4f0:	e0fffd17 	ldw	r3,-12(fp)
  80c4f4:	00800104 	movi	r2,4
  80c4f8:	18800005 	stb	r2,0(r3)
        return (pevent);
  80c4fc:	e0fffb17 	ldw	r3,-20(fp)
  80c500:	e0ffff15 	stw	r3,-4(fp)
  80c504:	0000a306 	br	80c794 <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  80c508:	e0bffb17 	ldw	r2,-20(fp)
  80c50c:	10800003 	ldbu	r2,0(r2)
  80c510:	10803fcc 	andi	r2,r2,255
  80c514:	108000a0 	cmpeqi	r2,r2,2
  80c518:	1000061e 	bne	r2,zero,80c534 <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
  80c51c:	e0fffd17 	ldw	r3,-12(fp)
  80c520:	00800044 	movi	r2,1
  80c524:	18800005 	stb	r2,0(r3)
        return (pevent);
  80c528:	e0bffb17 	ldw	r2,-20(fp)
  80c52c:	e0bfff15 	stw	r2,-4(fp)
  80c530:	00009806 	br	80c794 <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  80c534:	00802074 	movhi	r2,129
  80c538:	109f4c04 	addi	r2,r2,32048
  80c53c:	10800003 	ldbu	r2,0(r2)
  80c540:	10803fcc 	andi	r2,r2,255
  80c544:	1005003a 	cmpeq	r2,r2,zero
  80c548:	1000061e 	bne	r2,zero,80c564 <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  80c54c:	e0fffd17 	ldw	r3,-12(fp)
  80c550:	008003c4 	movi	r2,15
  80c554:	18800005 	stb	r2,0(r3)
        return (pevent);
  80c558:	e0fffb17 	ldw	r3,-20(fp)
  80c55c:	e0ffff15 	stw	r3,-4(fp)
  80c560:	00008c06 	br	80c794 <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c564:	0005303a 	rdctl	r2,status
  80c568:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c56c:	e0fff617 	ldw	r3,-40(fp)
  80c570:	00bfff84 	movi	r2,-2
  80c574:	1884703a 	and	r2,r3,r2
  80c578:	1001703a 	wrctl	status,r2
  
  return context;
  80c57c:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  80c580:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
  80c584:	e0bffb17 	ldw	r2,-20(fp)
  80c588:	10800283 	ldbu	r2,10(r2)
  80c58c:	10803fcc 	andi	r2,r2,255
  80c590:	1005003a 	cmpeq	r2,r2,zero
  80c594:	1000031e 	bne	r2,zero,80c5a4 <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  80c598:	00800044 	movi	r2,1
  80c59c:	e0bffa05 	stb	r2,-24(fp)
  80c5a0:	00000106 	br	80c5a8 <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  80c5a4:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  80c5a8:	e0bffc03 	ldbu	r2,-16(fp)
  80c5ac:	e0bffe15 	stw	r2,-8(fp)
  80c5b0:	e0fffe17 	ldw	r3,-8(fp)
  80c5b4:	1805003a 	cmpeq	r2,r3,zero
  80c5b8:	1000041e 	bne	r2,zero,80c5cc <OSQDel+0x120>
  80c5bc:	e0fffe17 	ldw	r3,-8(fp)
  80c5c0:	18800060 	cmpeqi	r2,r3,1
  80c5c4:	1000391e 	bne	r2,zero,80c6ac <OSQDel+0x200>
  80c5c8:	00006706 	br	80c768 <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
  80c5cc:	e0bffa03 	ldbu	r2,-24(fp)
  80c5d0:	1004c03a 	cmpne	r2,r2,zero
  80c5d4:	1000261e 	bne	r2,zero,80c670 <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  80c5d8:	e0fffb17 	ldw	r3,-20(fp)
  80c5dc:	00800fc4 	movi	r2,63
  80c5e0:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  80c5e4:	e0bffb17 	ldw	r2,-20(fp)
  80c5e8:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
  80c5ec:	e0bffb17 	ldw	r2,-20(fp)
  80c5f0:	10800117 	ldw	r2,4(r2)
  80c5f4:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
  80c5f8:	00802074 	movhi	r2,129
  80c5fc:	109f4904 	addi	r2,r2,32036
  80c600:	10c00017 	ldw	r3,0(r2)
  80c604:	e0bff817 	ldw	r2,-32(fp)
  80c608:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
  80c60c:	00c02074 	movhi	r3,129
  80c610:	18df4904 	addi	r3,r3,32036
  80c614:	e0bff817 	ldw	r2,-32(fp)
  80c618:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  80c61c:	e0bffb17 	ldw	r2,-20(fp)
  80c620:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  80c624:	00802074 	movhi	r2,129
  80c628:	109f4b04 	addi	r2,r2,32044
  80c62c:	10c00017 	ldw	r3,0(r2)
  80c630:	e0bffb17 	ldw	r2,-20(fp)
  80c634:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  80c638:	e0bffb17 	ldw	r2,-20(fp)
  80c63c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  80c640:	00c02074 	movhi	r3,129
  80c644:	18df4b04 	addi	r3,r3,32044
  80c648:	e0bffb17 	ldw	r2,-20(fp)
  80c64c:	18800015 	stw	r2,0(r3)
  80c650:	e0bff717 	ldw	r2,-36(fp)
  80c654:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c658:	e0bff517 	ldw	r2,-44(fp)
  80c65c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  80c660:	e0bffd17 	ldw	r2,-12(fp)
  80c664:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
  80c668:	e03ff915 	stw	zero,-28(fp)
  80c66c:	00004706 	br	80c78c <OSQDel+0x2e0>
  80c670:	e0bff717 	ldw	r2,-36(fp)
  80c674:	e0bff415 	stw	r2,-48(fp)
  80c678:	e0bff417 	ldw	r2,-48(fp)
  80c67c:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  80c680:	e0fffd17 	ldw	r3,-12(fp)
  80c684:	00801244 	movi	r2,73
  80c688:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
  80c68c:	e0bffb17 	ldw	r2,-20(fp)
  80c690:	e0bff915 	stw	r2,-28(fp)
             }
             break;
  80c694:	00003d06 	br	80c78c <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
  80c698:	e13ffb17 	ldw	r4,-20(fp)
  80c69c:	000b883a 	mov	r5,zero
  80c6a0:	01800104 	movi	r6,4
  80c6a4:	000f883a 	mov	r7,zero
  80c6a8:	0808d4c0 	call	808d4c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
  80c6ac:	e0bffb17 	ldw	r2,-20(fp)
  80c6b0:	10800283 	ldbu	r2,10(r2)
  80c6b4:	10803fcc 	andi	r2,r2,255
  80c6b8:	1004c03a 	cmpne	r2,r2,zero
  80c6bc:	103ff61e 	bne	r2,zero,80c698 <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  80c6c0:	e0fffb17 	ldw	r3,-20(fp)
  80c6c4:	00800fc4 	movi	r2,63
  80c6c8:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  80c6cc:	e0bffb17 	ldw	r2,-20(fp)
  80c6d0:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
  80c6d4:	e0bffb17 	ldw	r2,-20(fp)
  80c6d8:	10800117 	ldw	r2,4(r2)
  80c6dc:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
  80c6e0:	00802074 	movhi	r2,129
  80c6e4:	109f4904 	addi	r2,r2,32036
  80c6e8:	10c00017 	ldw	r3,0(r2)
  80c6ec:	e0bff817 	ldw	r2,-32(fp)
  80c6f0:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
  80c6f4:	00c02074 	movhi	r3,129
  80c6f8:	18df4904 	addi	r3,r3,32036
  80c6fc:	e0bff817 	ldw	r2,-32(fp)
  80c700:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  80c704:	e0bffb17 	ldw	r2,-20(fp)
  80c708:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  80c70c:	00802074 	movhi	r2,129
  80c710:	109f4b04 	addi	r2,r2,32044
  80c714:	10c00017 	ldw	r3,0(r2)
  80c718:	e0bffb17 	ldw	r2,-20(fp)
  80c71c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  80c720:	e0bffb17 	ldw	r2,-20(fp)
  80c724:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  80c728:	00c02074 	movhi	r3,129
  80c72c:	18df4b04 	addi	r3,r3,32044
  80c730:	e0bffb17 	ldw	r2,-20(fp)
  80c734:	18800015 	stw	r2,0(r3)
  80c738:	e0bff717 	ldw	r2,-36(fp)
  80c73c:	e0bff315 	stw	r2,-52(fp)
  80c740:	e0bff317 	ldw	r2,-52(fp)
  80c744:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  80c748:	e0bffa03 	ldbu	r2,-24(fp)
  80c74c:	10800058 	cmpnei	r2,r2,1
  80c750:	1000011e 	bne	r2,zero,80c758 <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  80c754:	080978c0 	call	80978c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  80c758:	e0bffd17 	ldw	r2,-12(fp)
  80c75c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
  80c760:	e03ff915 	stw	zero,-28(fp)
             break;
  80c764:	00000906 	br	80c78c <OSQDel+0x2e0>
  80c768:	e0bff717 	ldw	r2,-36(fp)
  80c76c:	e0bff215 	stw	r2,-56(fp)
  80c770:	e0bff217 	ldw	r2,-56(fp)
  80c774:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  80c778:	e0fffd17 	ldw	r3,-12(fp)
  80c77c:	008001c4 	movi	r2,7
  80c780:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
  80c784:	e0bffb17 	ldw	r2,-20(fp)
  80c788:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
  80c78c:	e0bff917 	ldw	r2,-28(fp)
  80c790:	e0bfff15 	stw	r2,-4(fp)
  80c794:	e0bfff17 	ldw	r2,-4(fp)
}
  80c798:	e037883a 	mov	sp,fp
  80c79c:	dfc00117 	ldw	ra,4(sp)
  80c7a0:	df000017 	ldw	fp,0(sp)
  80c7a4:	dec00204 	addi	sp,sp,8
  80c7a8:	f800283a 	ret

0080c7ac <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
  80c7ac:	defff904 	addi	sp,sp,-28
  80c7b0:	df000615 	stw	fp,24(sp)
  80c7b4:	df000604 	addi	fp,sp,24
  80c7b8:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80c7bc:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  80c7c0:	e0bffe17 	ldw	r2,-8(fp)
  80c7c4:	1004c03a 	cmpne	r2,r2,zero
  80c7c8:	1000031e 	bne	r2,zero,80c7d8 <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
  80c7cc:	00800104 	movi	r2,4
  80c7d0:	e0bfff15 	stw	r2,-4(fp)
  80c7d4:	00002206 	br	80c860 <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  80c7d8:	e0bffe17 	ldw	r2,-8(fp)
  80c7dc:	10800003 	ldbu	r2,0(r2)
  80c7e0:	10803fcc 	andi	r2,r2,255
  80c7e4:	108000a0 	cmpeqi	r2,r2,2
  80c7e8:	1000031e 	bne	r2,zero,80c7f8 <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
  80c7ec:	00800044 	movi	r2,1
  80c7f0:	e0bfff15 	stw	r2,-4(fp)
  80c7f4:	00001a06 	br	80c860 <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c7f8:	0005303a 	rdctl	r2,status
  80c7fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c800:	e0fffb17 	ldw	r3,-20(fp)
  80c804:	00bfff84 	movi	r2,-2
  80c808:	1884703a 	and	r2,r3,r2
  80c80c:	1001703a 	wrctl	status,r2
  
  return context;
  80c810:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80c814:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
  80c818:	e0bffe17 	ldw	r2,-8(fp)
  80c81c:	10800117 	ldw	r2,4(r2)
  80c820:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
  80c824:	e0bffd17 	ldw	r2,-12(fp)
  80c828:	10c00117 	ldw	r3,4(r2)
  80c82c:	e0bffd17 	ldw	r2,-12(fp)
  80c830:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
  80c834:	e0bffd17 	ldw	r2,-12(fp)
  80c838:	10c00117 	ldw	r3,4(r2)
  80c83c:	e0bffd17 	ldw	r2,-12(fp)
  80c840:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
  80c844:	e0bffd17 	ldw	r2,-12(fp)
  80c848:	1000058d 	sth	zero,22(r2)
  80c84c:	e0bffc17 	ldw	r2,-16(fp)
  80c850:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c854:	e0bffa17 	ldw	r2,-24(fp)
  80c858:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80c85c:	e03fff15 	stw	zero,-4(fp)
  80c860:	e0bfff17 	ldw	r2,-4(fp)
}
  80c864:	e037883a 	mov	sp,fp
  80c868:	df000017 	ldw	fp,0(sp)
  80c86c:	dec00104 	addi	sp,sp,4
  80c870:	f800283a 	ret

0080c874 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  80c874:	defff104 	addi	sp,sp,-60
  80c878:	dfc00e15 	stw	ra,56(sp)
  80c87c:	df000d15 	stw	fp,52(sp)
  80c880:	df000d04 	addi	fp,sp,52
  80c884:	e13ffb15 	stw	r4,-20(fp)
  80c888:	e1bffd15 	stw	r6,-12(fp)
  80c88c:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80c890:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80c894:	e0bffd17 	ldw	r2,-12(fp)
  80c898:	1004c03a 	cmpne	r2,r2,zero
  80c89c:	1000021e 	bne	r2,zero,80c8a8 <OSQPend+0x34>
        return ((void *)0);
  80c8a0:	e03fff15 	stw	zero,-4(fp)
  80c8a4:	0000b506 	br	80cb7c <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  80c8a8:	e0bffb17 	ldw	r2,-20(fp)
  80c8ac:	1004c03a 	cmpne	r2,r2,zero
  80c8b0:	1000051e 	bne	r2,zero,80c8c8 <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  80c8b4:	e0fffd17 	ldw	r3,-12(fp)
  80c8b8:	00800104 	movi	r2,4
  80c8bc:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80c8c0:	e03fff15 	stw	zero,-4(fp)
  80c8c4:	0000ad06 	br	80cb7c <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  80c8c8:	e0bffb17 	ldw	r2,-20(fp)
  80c8cc:	10800003 	ldbu	r2,0(r2)
  80c8d0:	10803fcc 	andi	r2,r2,255
  80c8d4:	108000a0 	cmpeqi	r2,r2,2
  80c8d8:	1000051e 	bne	r2,zero,80c8f0 <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  80c8dc:	e0fffd17 	ldw	r3,-12(fp)
  80c8e0:	00800044 	movi	r2,1
  80c8e4:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80c8e8:	e03fff15 	stw	zero,-4(fp)
  80c8ec:	0000a306 	br	80cb7c <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  80c8f0:	00802074 	movhi	r2,129
  80c8f4:	109f4c04 	addi	r2,r2,32048
  80c8f8:	10800003 	ldbu	r2,0(r2)
  80c8fc:	10803fcc 	andi	r2,r2,255
  80c900:	1005003a 	cmpeq	r2,r2,zero
  80c904:	1000051e 	bne	r2,zero,80c91c <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
  80c908:	e0fffd17 	ldw	r3,-12(fp)
  80c90c:	00800084 	movi	r2,2
  80c910:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80c914:	e03fff15 	stw	zero,-4(fp)
  80c918:	00009806 	br	80cb7c <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
  80c91c:	00802074 	movhi	r2,129
  80c920:	109f3e04 	addi	r2,r2,31992
  80c924:	10800003 	ldbu	r2,0(r2)
  80c928:	10803fcc 	andi	r2,r2,255
  80c92c:	1005003a 	cmpeq	r2,r2,zero
  80c930:	1000051e 	bne	r2,zero,80c948 <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
  80c934:	e0fffd17 	ldw	r3,-12(fp)
  80c938:	00800344 	movi	r2,13
  80c93c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80c940:	e03fff15 	stw	zero,-4(fp)
  80c944:	00008d06 	br	80cb7c <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c948:	0005303a 	rdctl	r2,status
  80c94c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c950:	e0fff717 	ldw	r3,-36(fp)
  80c954:	00bfff84 	movi	r2,-2
  80c958:	1884703a 	and	r2,r3,r2
  80c95c:	1001703a 	wrctl	status,r2
  
  return context;
  80c960:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  80c964:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  80c968:	e0bffb17 	ldw	r2,-20(fp)
  80c96c:	10800117 	ldw	r2,4(r2)
  80c970:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  80c974:	e0bff917 	ldw	r2,-28(fp)
  80c978:	1080058b 	ldhu	r2,22(r2)
  80c97c:	10bfffcc 	andi	r2,r2,65535
  80c980:	1005003a 	cmpeq	r2,r2,zero
  80c984:	10001f1e 	bne	r2,zero,80ca04 <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  80c988:	e0bff917 	ldw	r2,-28(fp)
  80c98c:	10c00417 	ldw	r3,16(r2)
  80c990:	18800017 	ldw	r2,0(r3)
  80c994:	e0bffa15 	stw	r2,-24(fp)
  80c998:	18c00104 	addi	r3,r3,4
  80c99c:	e0bff917 	ldw	r2,-28(fp)
  80c9a0:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  80c9a4:	e0bff917 	ldw	r2,-28(fp)
  80c9a8:	1080058b 	ldhu	r2,22(r2)
  80c9ac:	10bfffc4 	addi	r2,r2,-1
  80c9b0:	1007883a 	mov	r3,r2
  80c9b4:	e0bff917 	ldw	r2,-28(fp)
  80c9b8:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  80c9bc:	e0bff917 	ldw	r2,-28(fp)
  80c9c0:	10c00417 	ldw	r3,16(r2)
  80c9c4:	e0bff917 	ldw	r2,-28(fp)
  80c9c8:	10800217 	ldw	r2,8(r2)
  80c9cc:	1880041e 	bne	r3,r2,80c9e0 <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
  80c9d0:	e0bff917 	ldw	r2,-28(fp)
  80c9d4:	10c00117 	ldw	r3,4(r2)
  80c9d8:	e0bff917 	ldw	r2,-28(fp)
  80c9dc:	10c00415 	stw	r3,16(r2)
  80c9e0:	e0bff817 	ldw	r2,-32(fp)
  80c9e4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c9e8:	e0bff617 	ldw	r2,-40(fp)
  80c9ec:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  80c9f0:	e0bffd17 	ldw	r2,-12(fp)
  80c9f4:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
  80c9f8:	e0bffa17 	ldw	r2,-24(fp)
  80c9fc:	e0bfff15 	stw	r2,-4(fp)
  80ca00:	00005e06 	br	80cb7c <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
  80ca04:	00802074 	movhi	r2,129
  80ca08:	109f4d04 	addi	r2,r2,32052
  80ca0c:	10c00017 	ldw	r3,0(r2)
  80ca10:	00802074 	movhi	r2,129
  80ca14:	109f4d04 	addi	r2,r2,32052
  80ca18:	10800017 	ldw	r2,0(r2)
  80ca1c:	10800c03 	ldbu	r2,48(r2)
  80ca20:	10800114 	ori	r2,r2,4
  80ca24:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  80ca28:	00802074 	movhi	r2,129
  80ca2c:	109f4d04 	addi	r2,r2,32052
  80ca30:	10800017 	ldw	r2,0(r2)
  80ca34:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
  80ca38:	00802074 	movhi	r2,129
  80ca3c:	109f4d04 	addi	r2,r2,32052
  80ca40:	10c00017 	ldw	r3,0(r2)
  80ca44:	e0bffc0b 	ldhu	r2,-16(fp)
  80ca48:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
  80ca4c:	e13ffb17 	ldw	r4,-20(fp)
  80ca50:	0808ee00 	call	808ee0 <OS_EventTaskWait>
  80ca54:	e0bff817 	ldw	r2,-32(fp)
  80ca58:	e0bff515 	stw	r2,-44(fp)
  80ca5c:	e0bff517 	ldw	r2,-44(fp)
  80ca60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
  80ca64:	080978c0 	call	80978c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ca68:	0005303a 	rdctl	r2,status
  80ca6c:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ca70:	e0fff417 	ldw	r3,-48(fp)
  80ca74:	00bfff84 	movi	r2,-2
  80ca78:	1884703a 	and	r2,r3,r2
  80ca7c:	1001703a 	wrctl	status,r2
  
  return context;
  80ca80:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
  80ca84:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  80ca88:	00802074 	movhi	r2,129
  80ca8c:	109f4d04 	addi	r2,r2,32052
  80ca90:	10800017 	ldw	r2,0(r2)
  80ca94:	10800c43 	ldbu	r2,49(r2)
  80ca98:	10803fcc 	andi	r2,r2,255
  80ca9c:	e0bffe15 	stw	r2,-8(fp)
  80caa0:	e0fffe17 	ldw	r3,-8(fp)
  80caa4:	1805003a 	cmpeq	r2,r3,zero
  80caa8:	1000041e 	bne	r2,zero,80cabc <OSQPend+0x248>
  80caac:	e0fffe17 	ldw	r3,-8(fp)
  80cab0:	188000a0 	cmpeqi	r2,r3,2
  80cab4:	1000091e 	bne	r2,zero,80cadc <OSQPend+0x268>
  80cab8:	00000d06 	br	80caf0 <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
  80cabc:	00802074 	movhi	r2,129
  80cac0:	109f4d04 	addi	r2,r2,32052
  80cac4:	10800017 	ldw	r2,0(r2)
  80cac8:	10800917 	ldw	r2,36(r2)
  80cacc:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
  80cad0:	e0bffd17 	ldw	r2,-12(fp)
  80cad4:	10000005 	stb	zero,0(r2)
             break;
  80cad8:	00000e06 	br	80cb14 <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
  80cadc:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  80cae0:	e0fffd17 	ldw	r3,-12(fp)
  80cae4:	00800384 	movi	r2,14
  80cae8:	18800005 	stb	r2,0(r3)
             break;
  80caec:	00000906 	br	80cb14 <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
  80caf0:	00802074 	movhi	r2,129
  80caf4:	109f4d04 	addi	r2,r2,32052
  80caf8:	11000017 	ldw	r4,0(r2)
  80cafc:	e17ffb17 	ldw	r5,-20(fp)
  80cb00:	08091440 	call	809144 <OS_EventTaskRemove>
             pmsg = (void *)0;
  80cb04:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  80cb08:	e0fffd17 	ldw	r3,-12(fp)
  80cb0c:	00800284 	movi	r2,10
  80cb10:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  80cb14:	00802074 	movhi	r2,129
  80cb18:	109f4d04 	addi	r2,r2,32052
  80cb1c:	10800017 	ldw	r2,0(r2)
  80cb20:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  80cb24:	00802074 	movhi	r2,129
  80cb28:	109f4d04 	addi	r2,r2,32052
  80cb2c:	10800017 	ldw	r2,0(r2)
  80cb30:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  80cb34:	00802074 	movhi	r2,129
  80cb38:	109f4d04 	addi	r2,r2,32052
  80cb3c:	10800017 	ldw	r2,0(r2)
  80cb40:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  80cb44:	00802074 	movhi	r2,129
  80cb48:	109f4d04 	addi	r2,r2,32052
  80cb4c:	10800017 	ldw	r2,0(r2)
  80cb50:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
  80cb54:	00802074 	movhi	r2,129
  80cb58:	109f4d04 	addi	r2,r2,32052
  80cb5c:	10800017 	ldw	r2,0(r2)
  80cb60:	10000915 	stw	zero,36(r2)
  80cb64:	e0bff817 	ldw	r2,-32(fp)
  80cb68:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cb6c:	e0bff317 	ldw	r2,-52(fp)
  80cb70:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
  80cb74:	e0bffa17 	ldw	r2,-24(fp)
  80cb78:	e0bfff15 	stw	r2,-4(fp)
  80cb7c:	e0bfff17 	ldw	r2,-4(fp)
}
  80cb80:	e037883a 	mov	sp,fp
  80cb84:	dfc00117 	ldw	ra,4(sp)
  80cb88:	df000017 	ldw	fp,0(sp)
  80cb8c:	dec00204 	addi	sp,sp,8
  80cb90:	f800283a 	ret

0080cb94 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  80cb94:	defff504 	addi	sp,sp,-44
  80cb98:	dfc00a15 	stw	ra,40(sp)
  80cb9c:	df000915 	stw	fp,36(sp)
  80cba0:	df000904 	addi	fp,sp,36
  80cba4:	e13ffc15 	stw	r4,-16(fp)
  80cba8:	e1bffe15 	stw	r6,-8(fp)
  80cbac:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80cbb0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80cbb4:	e0bffe17 	ldw	r2,-8(fp)
  80cbb8:	1004c03a 	cmpne	r2,r2,zero
  80cbbc:	1000021e 	bne	r2,zero,80cbc8 <OSQPendAbort+0x34>
        return (0);
  80cbc0:	e03fff15 	stw	zero,-4(fp)
  80cbc4:	00004c06 	br	80ccf8 <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  80cbc8:	e0bffc17 	ldw	r2,-16(fp)
  80cbcc:	1004c03a 	cmpne	r2,r2,zero
  80cbd0:	1000051e 	bne	r2,zero,80cbe8 <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  80cbd4:	e0fffe17 	ldw	r3,-8(fp)
  80cbd8:	00800104 	movi	r2,4
  80cbdc:	18800005 	stb	r2,0(r3)
        return (0);
  80cbe0:	e03fff15 	stw	zero,-4(fp)
  80cbe4:	00004406 	br	80ccf8 <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  80cbe8:	e0bffc17 	ldw	r2,-16(fp)
  80cbec:	10800003 	ldbu	r2,0(r2)
  80cbf0:	10803fcc 	andi	r2,r2,255
  80cbf4:	108000a0 	cmpeqi	r2,r2,2
  80cbf8:	1000051e 	bne	r2,zero,80cc10 <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  80cbfc:	e0fffe17 	ldw	r3,-8(fp)
  80cc00:	00800044 	movi	r2,1
  80cc04:	18800005 	stb	r2,0(r3)
        return (0);
  80cc08:	e03fff15 	stw	zero,-4(fp)
  80cc0c:	00003a06 	br	80ccf8 <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cc10:	0005303a 	rdctl	r2,status
  80cc14:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cc18:	e0fff917 	ldw	r3,-28(fp)
  80cc1c:	00bfff84 	movi	r2,-2
  80cc20:	1884703a 	and	r2,r3,r2
  80cc24:	1001703a 	wrctl	status,r2
  
  return context;
  80cc28:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80cc2c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
  80cc30:	e0bffc17 	ldw	r2,-16(fp)
  80cc34:	10800283 	ldbu	r2,10(r2)
  80cc38:	10803fcc 	andi	r2,r2,255
  80cc3c:	1005003a 	cmpeq	r2,r2,zero
  80cc40:	1000261e 	bne	r2,zero,80ccdc <OSQPendAbort+0x148>
        nbr_tasks = 0;
  80cc44:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
  80cc48:	e0bffd03 	ldbu	r2,-12(fp)
  80cc4c:	10800060 	cmpeqi	r2,r2,1
  80cc50:	1000091e 	bne	r2,zero,80cc78 <OSQPendAbort+0xe4>
  80cc54:	00000e06 	br	80cc90 <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  80cc58:	e13ffc17 	ldw	r4,-16(fp)
  80cc5c:	000b883a 	mov	r5,zero
  80cc60:	01800104 	movi	r6,4
  80cc64:	01c00084 	movi	r7,2
  80cc68:	0808d4c0 	call	808d4c <OS_EventTaskRdy>
                     nbr_tasks++;
  80cc6c:	e0bffb03 	ldbu	r2,-20(fp)
  80cc70:	10800044 	addi	r2,r2,1
  80cc74:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  80cc78:	e0bffc17 	ldw	r2,-16(fp)
  80cc7c:	10800283 	ldbu	r2,10(r2)
  80cc80:	10803fcc 	andi	r2,r2,255
  80cc84:	1004c03a 	cmpne	r2,r2,zero
  80cc88:	103ff31e 	bne	r2,zero,80cc58 <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  80cc8c:	00000806 	br	80ccb0 <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  80cc90:	e13ffc17 	ldw	r4,-16(fp)
  80cc94:	000b883a 	mov	r5,zero
  80cc98:	01800104 	movi	r6,4
  80cc9c:	01c00084 	movi	r7,2
  80cca0:	0808d4c0 	call	808d4c <OS_EventTaskRdy>
                 nbr_tasks++;
  80cca4:	e0bffb03 	ldbu	r2,-20(fp)
  80cca8:	10800044 	addi	r2,r2,1
  80ccac:	e0bffb05 	stb	r2,-20(fp)
  80ccb0:	e0bffa17 	ldw	r2,-24(fp)
  80ccb4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ccb8:	e0bff817 	ldw	r2,-32(fp)
  80ccbc:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
  80ccc0:	080978c0 	call	80978c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  80ccc4:	e0fffe17 	ldw	r3,-8(fp)
  80ccc8:	00800384 	movi	r2,14
  80cccc:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
  80ccd0:	e0bffb03 	ldbu	r2,-20(fp)
  80ccd4:	e0bfff15 	stw	r2,-4(fp)
  80ccd8:	00000706 	br	80ccf8 <OSQPendAbort+0x164>
  80ccdc:	e0bffa17 	ldw	r2,-24(fp)
  80cce0:	e0bff715 	stw	r2,-36(fp)
  80cce4:	e0bff717 	ldw	r2,-36(fp)
  80cce8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80ccec:	e0bffe17 	ldw	r2,-8(fp)
  80ccf0:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
  80ccf4:	e03fff15 	stw	zero,-4(fp)
  80ccf8:	e0bfff17 	ldw	r2,-4(fp)
}
  80ccfc:	e037883a 	mov	sp,fp
  80cd00:	dfc00117 	ldw	ra,4(sp)
  80cd04:	df000017 	ldw	fp,0(sp)
  80cd08:	dec00204 	addi	sp,sp,8
  80cd0c:	f800283a 	ret

0080cd10 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
  80cd10:	defff504 	addi	sp,sp,-44
  80cd14:	dfc00a15 	stw	ra,40(sp)
  80cd18:	df000915 	stw	fp,36(sp)
  80cd1c:	df000904 	addi	fp,sp,36
  80cd20:	e13ffd15 	stw	r4,-12(fp)
  80cd24:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  80cd28:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  80cd2c:	e0bffd17 	ldw	r2,-12(fp)
  80cd30:	1004c03a 	cmpne	r2,r2,zero
  80cd34:	1000031e 	bne	r2,zero,80cd44 <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
  80cd38:	00800104 	movi	r2,4
  80cd3c:	e0bfff15 	stw	r2,-4(fp)
  80cd40:	00004d06 	br	80ce78 <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  80cd44:	e0bffd17 	ldw	r2,-12(fp)
  80cd48:	10800003 	ldbu	r2,0(r2)
  80cd4c:	10803fcc 	andi	r2,r2,255
  80cd50:	108000a0 	cmpeqi	r2,r2,2
  80cd54:	1000031e 	bne	r2,zero,80cd64 <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
  80cd58:	00800044 	movi	r2,1
  80cd5c:	e0bfff15 	stw	r2,-4(fp)
  80cd60:	00004506 	br	80ce78 <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cd64:	0005303a 	rdctl	r2,status
  80cd68:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cd6c:	e0fffa17 	ldw	r3,-24(fp)
  80cd70:	00bfff84 	movi	r2,-2
  80cd74:	1884703a 	and	r2,r3,r2
  80cd78:	1001703a 	wrctl	status,r2
  
  return context;
  80cd7c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80cd80:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
  80cd84:	e0bffd17 	ldw	r2,-12(fp)
  80cd88:	10800283 	ldbu	r2,10(r2)
  80cd8c:	10803fcc 	andi	r2,r2,255
  80cd90:	1005003a 	cmpeq	r2,r2,zero
  80cd94:	10000c1e 	bne	r2,zero,80cdc8 <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  80cd98:	e13ffd17 	ldw	r4,-12(fp)
  80cd9c:	e17ffe17 	ldw	r5,-8(fp)
  80cda0:	01800104 	movi	r6,4
  80cda4:	000f883a 	mov	r7,zero
  80cda8:	0808d4c0 	call	808d4c <OS_EventTaskRdy>
  80cdac:	e0bffb17 	ldw	r2,-20(fp)
  80cdb0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cdb4:	e0bff917 	ldw	r2,-28(fp)
  80cdb8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
  80cdbc:	080978c0 	call	80978c <OS_Sched>
        return (OS_ERR_NONE);
  80cdc0:	e03fff15 	stw	zero,-4(fp)
  80cdc4:	00002c06 	br	80ce78 <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
  80cdc8:	e0bffd17 	ldw	r2,-12(fp)
  80cdcc:	10800117 	ldw	r2,4(r2)
  80cdd0:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
  80cdd4:	e0bffc17 	ldw	r2,-16(fp)
  80cdd8:	10c0058b 	ldhu	r3,22(r2)
  80cddc:	e0bffc17 	ldw	r2,-16(fp)
  80cde0:	1080050b 	ldhu	r2,20(r2)
  80cde4:	18ffffcc 	andi	r3,r3,65535
  80cde8:	10bfffcc 	andi	r2,r2,65535
  80cdec:	18800736 	bltu	r3,r2,80ce0c <OSQPost+0xfc>
  80cdf0:	e0bffb17 	ldw	r2,-20(fp)
  80cdf4:	e0bff815 	stw	r2,-32(fp)
  80cdf8:	e0bff817 	ldw	r2,-32(fp)
  80cdfc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  80ce00:	00800784 	movi	r2,30
  80ce04:	e0bfff15 	stw	r2,-4(fp)
  80ce08:	00001b06 	br	80ce78 <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
  80ce0c:	e0bffc17 	ldw	r2,-16(fp)
  80ce10:	10c00317 	ldw	r3,12(r2)
  80ce14:	e0bffe17 	ldw	r2,-8(fp)
  80ce18:	18800015 	stw	r2,0(r3)
  80ce1c:	18c00104 	addi	r3,r3,4
  80ce20:	e0bffc17 	ldw	r2,-16(fp)
  80ce24:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
  80ce28:	e0bffc17 	ldw	r2,-16(fp)
  80ce2c:	1080058b 	ldhu	r2,22(r2)
  80ce30:	10800044 	addi	r2,r2,1
  80ce34:	1007883a 	mov	r3,r2
  80ce38:	e0bffc17 	ldw	r2,-16(fp)
  80ce3c:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
  80ce40:	e0bffc17 	ldw	r2,-16(fp)
  80ce44:	10c00317 	ldw	r3,12(r2)
  80ce48:	e0bffc17 	ldw	r2,-16(fp)
  80ce4c:	10800217 	ldw	r2,8(r2)
  80ce50:	1880041e 	bne	r3,r2,80ce64 <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
  80ce54:	e0bffc17 	ldw	r2,-16(fp)
  80ce58:	10c00117 	ldw	r3,4(r2)
  80ce5c:	e0bffc17 	ldw	r2,-16(fp)
  80ce60:	10c00315 	stw	r3,12(r2)
  80ce64:	e0bffb17 	ldw	r2,-20(fp)
  80ce68:	e0bff715 	stw	r2,-36(fp)
  80ce6c:	e0bff717 	ldw	r2,-36(fp)
  80ce70:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80ce74:	e03fff15 	stw	zero,-4(fp)
  80ce78:	e0bfff17 	ldw	r2,-4(fp)
}
  80ce7c:	e037883a 	mov	sp,fp
  80ce80:	dfc00117 	ldw	ra,4(sp)
  80ce84:	df000017 	ldw	fp,0(sp)
  80ce88:	dec00204 	addi	sp,sp,8
  80ce8c:	f800283a 	ret

0080ce90 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
  80ce90:	defff504 	addi	sp,sp,-44
  80ce94:	dfc00a15 	stw	ra,40(sp)
  80ce98:	df000915 	stw	fp,36(sp)
  80ce9c:	df000904 	addi	fp,sp,36
  80cea0:	e13ffd15 	stw	r4,-12(fp)
  80cea4:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80cea8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  80ceac:	e0bffd17 	ldw	r2,-12(fp)
  80ceb0:	1004c03a 	cmpne	r2,r2,zero
  80ceb4:	1000031e 	bne	r2,zero,80cec4 <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
  80ceb8:	00800104 	movi	r2,4
  80cebc:	e0bfff15 	stw	r2,-4(fp)
  80cec0:	00004f06 	br	80d000 <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  80cec4:	e0bffd17 	ldw	r2,-12(fp)
  80cec8:	10800003 	ldbu	r2,0(r2)
  80cecc:	10803fcc 	andi	r2,r2,255
  80ced0:	108000a0 	cmpeqi	r2,r2,2
  80ced4:	1000031e 	bne	r2,zero,80cee4 <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
  80ced8:	00800044 	movi	r2,1
  80cedc:	e0bfff15 	stw	r2,-4(fp)
  80cee0:	00004706 	br	80d000 <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cee4:	0005303a 	rdctl	r2,status
  80cee8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ceec:	e0fffa17 	ldw	r3,-24(fp)
  80cef0:	00bfff84 	movi	r2,-2
  80cef4:	1884703a 	and	r2,r3,r2
  80cef8:	1001703a 	wrctl	status,r2
  
  return context;
  80cefc:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80cf00:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
  80cf04:	e0bffd17 	ldw	r2,-12(fp)
  80cf08:	10800283 	ldbu	r2,10(r2)
  80cf0c:	10803fcc 	andi	r2,r2,255
  80cf10:	1005003a 	cmpeq	r2,r2,zero
  80cf14:	10000c1e 	bne	r2,zero,80cf48 <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  80cf18:	e13ffd17 	ldw	r4,-12(fp)
  80cf1c:	e17ffe17 	ldw	r5,-8(fp)
  80cf20:	01800104 	movi	r6,4
  80cf24:	000f883a 	mov	r7,zero
  80cf28:	0808d4c0 	call	808d4c <OS_EventTaskRdy>
  80cf2c:	e0bffb17 	ldw	r2,-20(fp)
  80cf30:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cf34:	e0bff917 	ldw	r2,-28(fp)
  80cf38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
  80cf3c:	080978c0 	call	80978c <OS_Sched>
        return (OS_ERR_NONE);
  80cf40:	e03fff15 	stw	zero,-4(fp)
  80cf44:	00002e06 	br	80d000 <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  80cf48:	e0bffd17 	ldw	r2,-12(fp)
  80cf4c:	10800117 	ldw	r2,4(r2)
  80cf50:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  80cf54:	e0bffc17 	ldw	r2,-16(fp)
  80cf58:	10c0058b 	ldhu	r3,22(r2)
  80cf5c:	e0bffc17 	ldw	r2,-16(fp)
  80cf60:	1080050b 	ldhu	r2,20(r2)
  80cf64:	18ffffcc 	andi	r3,r3,65535
  80cf68:	10bfffcc 	andi	r2,r2,65535
  80cf6c:	18800736 	bltu	r3,r2,80cf8c <OSQPostFront+0xfc>
  80cf70:	e0bffb17 	ldw	r2,-20(fp)
  80cf74:	e0bff815 	stw	r2,-32(fp)
  80cf78:	e0bff817 	ldw	r2,-32(fp)
  80cf7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  80cf80:	00800784 	movi	r2,30
  80cf84:	e0bfff15 	stw	r2,-4(fp)
  80cf88:	00001d06 	br	80d000 <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
  80cf8c:	e0bffc17 	ldw	r2,-16(fp)
  80cf90:	10c00417 	ldw	r3,16(r2)
  80cf94:	e0bffc17 	ldw	r2,-16(fp)
  80cf98:	10800117 	ldw	r2,4(r2)
  80cf9c:	1880041e 	bne	r3,r2,80cfb0 <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
  80cfa0:	e0bffc17 	ldw	r2,-16(fp)
  80cfa4:	10c00217 	ldw	r3,8(r2)
  80cfa8:	e0bffc17 	ldw	r2,-16(fp)
  80cfac:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
  80cfb0:	e0bffc17 	ldw	r2,-16(fp)
  80cfb4:	10800417 	ldw	r2,16(r2)
  80cfb8:	10ffff04 	addi	r3,r2,-4
  80cfbc:	e0bffc17 	ldw	r2,-16(fp)
  80cfc0:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
  80cfc4:	e0bffc17 	ldw	r2,-16(fp)
  80cfc8:	10c00417 	ldw	r3,16(r2)
  80cfcc:	e0bffe17 	ldw	r2,-8(fp)
  80cfd0:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  80cfd4:	e0bffc17 	ldw	r2,-16(fp)
  80cfd8:	1080058b 	ldhu	r2,22(r2)
  80cfdc:	10800044 	addi	r2,r2,1
  80cfe0:	1007883a 	mov	r3,r2
  80cfe4:	e0bffc17 	ldw	r2,-16(fp)
  80cfe8:	10c0058d 	sth	r3,22(r2)
  80cfec:	e0bffb17 	ldw	r2,-20(fp)
  80cff0:	e0bff715 	stw	r2,-36(fp)
  80cff4:	e0bff717 	ldw	r2,-36(fp)
  80cff8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80cffc:	e03fff15 	stw	zero,-4(fp)
  80d000:	e0bfff17 	ldw	r2,-4(fp)
}
  80d004:	e037883a 	mov	sp,fp
  80d008:	dfc00117 	ldw	ra,4(sp)
  80d00c:	df000017 	ldw	fp,0(sp)
  80d010:	dec00204 	addi	sp,sp,8
  80d014:	f800283a 	ret

0080d018 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
  80d018:	defff404 	addi	sp,sp,-48
  80d01c:	dfc00b15 	stw	ra,44(sp)
  80d020:	df000a15 	stw	fp,40(sp)
  80d024:	df000a04 	addi	fp,sp,40
  80d028:	e13ffc15 	stw	r4,-16(fp)
  80d02c:	e17ffd15 	stw	r5,-12(fp)
  80d030:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80d034:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  80d038:	e0bffc17 	ldw	r2,-16(fp)
  80d03c:	1004c03a 	cmpne	r2,r2,zero
  80d040:	1000031e 	bne	r2,zero,80d050 <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
  80d044:	00800104 	movi	r2,4
  80d048:	e0bfff15 	stw	r2,-4(fp)
  80d04c:	00007906 	br	80d234 <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  80d050:	e0bffc17 	ldw	r2,-16(fp)
  80d054:	10800003 	ldbu	r2,0(r2)
  80d058:	10803fcc 	andi	r2,r2,255
  80d05c:	108000a0 	cmpeqi	r2,r2,2
  80d060:	1000031e 	bne	r2,zero,80d070 <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
  80d064:	00800044 	movi	r2,1
  80d068:	e0bfff15 	stw	r2,-4(fp)
  80d06c:	00007106 	br	80d234 <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d070:	0005303a 	rdctl	r2,status
  80d074:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d078:	e0fff917 	ldw	r3,-28(fp)
  80d07c:	00bfff84 	movi	r2,-2
  80d080:	1884703a 	and	r2,r3,r2
  80d084:	1001703a 	wrctl	status,r2
  
  return context;
  80d088:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80d08c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
  80d090:	e0bffc17 	ldw	r2,-16(fp)
  80d094:	10800283 	ldbu	r2,10(r2)
  80d098:	10803fcc 	andi	r2,r2,255
  80d09c:	1005003a 	cmpeq	r2,r2,zero
  80d0a0:	1000211e 	bne	r2,zero,80d128 <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
  80d0a4:	e0bffe03 	ldbu	r2,-8(fp)
  80d0a8:	1080004c 	andi	r2,r2,1
  80d0ac:	10803fcc 	andi	r2,r2,255
  80d0b0:	1005003a 	cmpeq	r2,r2,zero
  80d0b4:	10000c1e 	bne	r2,zero,80d0e8 <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  80d0b8:	00000506 	br	80d0d0 <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  80d0bc:	e13ffc17 	ldw	r4,-16(fp)
  80d0c0:	e17ffd17 	ldw	r5,-12(fp)
  80d0c4:	01800104 	movi	r6,4
  80d0c8:	000f883a 	mov	r7,zero
  80d0cc:	0808d4c0 	call	808d4c <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  80d0d0:	e0bffc17 	ldw	r2,-16(fp)
  80d0d4:	10800283 	ldbu	r2,10(r2)
  80d0d8:	10803fcc 	andi	r2,r2,255
  80d0dc:	1004c03a 	cmpne	r2,r2,zero
  80d0e0:	103ff61e 	bne	r2,zero,80d0bc <OSQPostOpt+0xa4>
  80d0e4:	00000506 	br	80d0fc <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  80d0e8:	e13ffc17 	ldw	r4,-16(fp)
  80d0ec:	e17ffd17 	ldw	r5,-12(fp)
  80d0f0:	01800104 	movi	r6,4
  80d0f4:	000f883a 	mov	r7,zero
  80d0f8:	0808d4c0 	call	808d4c <OS_EventTaskRdy>
  80d0fc:	e0bffa17 	ldw	r2,-24(fp)
  80d100:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d104:	e0bff817 	ldw	r2,-32(fp)
  80d108:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
  80d10c:	e0bffe03 	ldbu	r2,-8(fp)
  80d110:	1080010c 	andi	r2,r2,4
  80d114:	1004c03a 	cmpne	r2,r2,zero
  80d118:	1000011e 	bne	r2,zero,80d120 <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
  80d11c:	080978c0 	call	80978c <OS_Sched>
        }
        return (OS_ERR_NONE);
  80d120:	e03fff15 	stw	zero,-4(fp)
  80d124:	00004306 	br	80d234 <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  80d128:	e0bffc17 	ldw	r2,-16(fp)
  80d12c:	10800117 	ldw	r2,4(r2)
  80d130:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  80d134:	e0bffb17 	ldw	r2,-20(fp)
  80d138:	10c0058b 	ldhu	r3,22(r2)
  80d13c:	e0bffb17 	ldw	r2,-20(fp)
  80d140:	1080050b 	ldhu	r2,20(r2)
  80d144:	18ffffcc 	andi	r3,r3,65535
  80d148:	10bfffcc 	andi	r2,r2,65535
  80d14c:	18800736 	bltu	r3,r2,80d16c <OSQPostOpt+0x154>
  80d150:	e0bffa17 	ldw	r2,-24(fp)
  80d154:	e0bff715 	stw	r2,-36(fp)
  80d158:	e0bff717 	ldw	r2,-36(fp)
  80d15c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  80d160:	00800784 	movi	r2,30
  80d164:	e0bfff15 	stw	r2,-4(fp)
  80d168:	00003206 	br	80d234 <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
  80d16c:	e0bffe03 	ldbu	r2,-8(fp)
  80d170:	1080008c 	andi	r2,r2,2
  80d174:	1005003a 	cmpeq	r2,r2,zero
  80d178:	1000131e 	bne	r2,zero,80d1c8 <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
  80d17c:	e0bffb17 	ldw	r2,-20(fp)
  80d180:	10c00417 	ldw	r3,16(r2)
  80d184:	e0bffb17 	ldw	r2,-20(fp)
  80d188:	10800117 	ldw	r2,4(r2)
  80d18c:	1880041e 	bne	r3,r2,80d1a0 <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
  80d190:	e0bffb17 	ldw	r2,-20(fp)
  80d194:	10c00217 	ldw	r3,8(r2)
  80d198:	e0bffb17 	ldw	r2,-20(fp)
  80d19c:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
  80d1a0:	e0bffb17 	ldw	r2,-20(fp)
  80d1a4:	10800417 	ldw	r2,16(r2)
  80d1a8:	10ffff04 	addi	r3,r2,-4
  80d1ac:	e0bffb17 	ldw	r2,-20(fp)
  80d1b0:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
  80d1b4:	e0bffb17 	ldw	r2,-20(fp)
  80d1b8:	10c00417 	ldw	r3,16(r2)
  80d1bc:	e0bffd17 	ldw	r2,-12(fp)
  80d1c0:	18800015 	stw	r2,0(r3)
  80d1c4:	00001006 	br	80d208 <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
  80d1c8:	e0bffb17 	ldw	r2,-20(fp)
  80d1cc:	10c00317 	ldw	r3,12(r2)
  80d1d0:	e0bffd17 	ldw	r2,-12(fp)
  80d1d4:	18800015 	stw	r2,0(r3)
  80d1d8:	18c00104 	addi	r3,r3,4
  80d1dc:	e0bffb17 	ldw	r2,-20(fp)
  80d1e0:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
  80d1e4:	e0bffb17 	ldw	r2,-20(fp)
  80d1e8:	10c00317 	ldw	r3,12(r2)
  80d1ec:	e0bffb17 	ldw	r2,-20(fp)
  80d1f0:	10800217 	ldw	r2,8(r2)
  80d1f4:	1880041e 	bne	r3,r2,80d208 <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
  80d1f8:	e0bffb17 	ldw	r2,-20(fp)
  80d1fc:	10c00117 	ldw	r3,4(r2)
  80d200:	e0bffb17 	ldw	r2,-20(fp)
  80d204:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  80d208:	e0bffb17 	ldw	r2,-20(fp)
  80d20c:	1080058b 	ldhu	r2,22(r2)
  80d210:	10800044 	addi	r2,r2,1
  80d214:	1007883a 	mov	r3,r2
  80d218:	e0bffb17 	ldw	r2,-20(fp)
  80d21c:	10c0058d 	sth	r3,22(r2)
  80d220:	e0bffa17 	ldw	r2,-24(fp)
  80d224:	e0bff615 	stw	r2,-40(fp)
  80d228:	e0bff617 	ldw	r2,-40(fp)
  80d22c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80d230:	e03fff15 	stw	zero,-4(fp)
  80d234:	e0bfff17 	ldw	r2,-4(fp)
}
  80d238:	e037883a 	mov	sp,fp
  80d23c:	dfc00117 	ldw	ra,4(sp)
  80d240:	df000017 	ldw	fp,0(sp)
  80d244:	dec00204 	addi	sp,sp,8
  80d248:	f800283a 	ret

0080d24c <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
  80d24c:	defff504 	addi	sp,sp,-44
  80d250:	df000a15 	stw	fp,40(sp)
  80d254:	df000a04 	addi	fp,sp,40
  80d258:	e13ffd15 	stw	r4,-12(fp)
  80d25c:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  80d260:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  80d264:	e0bffd17 	ldw	r2,-12(fp)
  80d268:	1004c03a 	cmpne	r2,r2,zero
  80d26c:	1000031e 	bne	r2,zero,80d27c <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
  80d270:	00800104 	movi	r2,4
  80d274:	e0bfff15 	stw	r2,-4(fp)
  80d278:	00004f06 	br	80d3b8 <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
  80d27c:	e0bffe17 	ldw	r2,-8(fp)
  80d280:	1004c03a 	cmpne	r2,r2,zero
  80d284:	1000031e 	bne	r2,zero,80d294 <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
  80d288:	00800244 	movi	r2,9
  80d28c:	e0bfff15 	stw	r2,-4(fp)
  80d290:	00004906 	br	80d3b8 <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  80d294:	e0bffd17 	ldw	r2,-12(fp)
  80d298:	10800003 	ldbu	r2,0(r2)
  80d29c:	10803fcc 	andi	r2,r2,255
  80d2a0:	108000a0 	cmpeqi	r2,r2,2
  80d2a4:	1000031e 	bne	r2,zero,80d2b4 <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
  80d2a8:	00800044 	movi	r2,1
  80d2ac:	e0bfff15 	stw	r2,-4(fp)
  80d2b0:	00004106 	br	80d3b8 <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d2b4:	0005303a 	rdctl	r2,status
  80d2b8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d2bc:	e0fff717 	ldw	r3,-36(fp)
  80d2c0:	00bfff84 	movi	r2,-2
  80d2c4:	1884703a 	and	r2,r3,r2
  80d2c8:	1001703a 	wrctl	status,r2
  
  return context;
  80d2cc:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  80d2d0:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
  80d2d4:	e0bffd17 	ldw	r2,-12(fp)
  80d2d8:	10c00283 	ldbu	r3,10(r2)
  80d2dc:	e0bffe17 	ldw	r2,-8(fp)
  80d2e0:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
  80d2e4:	e0bffd17 	ldw	r2,-12(fp)
  80d2e8:	108002c4 	addi	r2,r2,11
  80d2ec:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
  80d2f0:	e0bffe17 	ldw	r2,-8(fp)
  80d2f4:	10800204 	addi	r2,r2,8
  80d2f8:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  80d2fc:	e03ffb05 	stb	zero,-20(fp)
  80d300:	00000d06 	br	80d338 <OSQQuery+0xec>
        *pdest++ = *psrc++;
  80d304:	e0bffa17 	ldw	r2,-24(fp)
  80d308:	10c00003 	ldbu	r3,0(r2)
  80d30c:	e0bff917 	ldw	r2,-28(fp)
  80d310:	10c00005 	stb	r3,0(r2)
  80d314:	e0bff917 	ldw	r2,-28(fp)
  80d318:	10800044 	addi	r2,r2,1
  80d31c:	e0bff915 	stw	r2,-28(fp)
  80d320:	e0bffa17 	ldw	r2,-24(fp)
  80d324:	10800044 	addi	r2,r2,1
  80d328:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  80d32c:	e0bffb03 	ldbu	r2,-20(fp)
  80d330:	10800044 	addi	r2,r2,1
  80d334:	e0bffb05 	stb	r2,-20(fp)
  80d338:	e0bffb03 	ldbu	r2,-20(fp)
  80d33c:	108000f0 	cmpltui	r2,r2,3
  80d340:	103ff01e 	bne	r2,zero,80d304 <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
  80d344:	e0bffd17 	ldw	r2,-12(fp)
  80d348:	10800117 	ldw	r2,4(r2)
  80d34c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
  80d350:	e0bffc17 	ldw	r2,-16(fp)
  80d354:	1080058b 	ldhu	r2,22(r2)
  80d358:	10bfffcc 	andi	r2,r2,65535
  80d35c:	1005003a 	cmpeq	r2,r2,zero
  80d360:	1000061e 	bne	r2,zero,80d37c <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
  80d364:	e0bffc17 	ldw	r2,-16(fp)
  80d368:	10800417 	ldw	r2,16(r2)
  80d36c:	10c00017 	ldw	r3,0(r2)
  80d370:	e0bffe17 	ldw	r2,-8(fp)
  80d374:	10c00015 	stw	r3,0(r2)
  80d378:	00000206 	br	80d384 <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
  80d37c:	e0bffe17 	ldw	r2,-8(fp)
  80d380:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
  80d384:	e0bffc17 	ldw	r2,-16(fp)
  80d388:	10c0058b 	ldhu	r3,22(r2)
  80d38c:	e0bffe17 	ldw	r2,-8(fp)
  80d390:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
  80d394:	e0bffc17 	ldw	r2,-16(fp)
  80d398:	10c0050b 	ldhu	r3,20(r2)
  80d39c:	e0bffe17 	ldw	r2,-8(fp)
  80d3a0:	10c0018d 	sth	r3,6(r2)
  80d3a4:	e0bff817 	ldw	r2,-32(fp)
  80d3a8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d3ac:	e0bff617 	ldw	r2,-40(fp)
  80d3b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80d3b4:	e03fff15 	stw	zero,-4(fp)
  80d3b8:	e0bfff17 	ldw	r2,-4(fp)
}
  80d3bc:	e037883a 	mov	sp,fp
  80d3c0:	df000017 	ldw	fp,0(sp)
  80d3c4:	dec00104 	addi	sp,sp,4
  80d3c8:	f800283a 	ret

0080d3cc <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
  80d3cc:	defffb04 	addi	sp,sp,-20
  80d3d0:	dfc00415 	stw	ra,16(sp)
  80d3d4:	df000315 	stw	fp,12(sp)
  80d3d8:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
  80d3dc:	010020b4 	movhi	r4,130
  80d3e0:	21354704 	addi	r4,r4,-10980
  80d3e4:	01407804 	movi	r5,480
  80d3e8:	08096cc0 	call	8096cc <OS_MemClr>
    pq1 = &OSQTbl[0];
  80d3ec:	008020b4 	movhi	r2,130
  80d3f0:	10b54704 	addi	r2,r2,-10980
  80d3f4:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
  80d3f8:	008020b4 	movhi	r2,130
  80d3fc:	10b54d04 	addi	r2,r2,-10956
  80d400:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  80d404:	e03fff0d 	sth	zero,-4(fp)
  80d408:	00000c06 	br	80d43c <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
  80d40c:	e0fffe17 	ldw	r3,-8(fp)
  80d410:	e0bffd17 	ldw	r2,-12(fp)
  80d414:	18800015 	stw	r2,0(r3)
        pq1++;
  80d418:	e0bffe17 	ldw	r2,-8(fp)
  80d41c:	10800604 	addi	r2,r2,24
  80d420:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
  80d424:	e0bffd17 	ldw	r2,-12(fp)
  80d428:	10800604 	addi	r2,r2,24
  80d42c:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  80d430:	e0bfff0b 	ldhu	r2,-4(fp)
  80d434:	10800044 	addi	r2,r2,1
  80d438:	e0bfff0d 	sth	r2,-4(fp)
  80d43c:	e0bfff0b 	ldhu	r2,-4(fp)
  80d440:	108004f0 	cmpltui	r2,r2,19
  80d444:	103ff11e 	bne	r2,zero,80d40c <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
  80d448:	e0bffe17 	ldw	r2,-8(fp)
  80d44c:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
  80d450:	00c02074 	movhi	r3,129
  80d454:	18df4904 	addi	r3,r3,32036
  80d458:	008020b4 	movhi	r2,130
  80d45c:	10b54704 	addi	r2,r2,-10980
  80d460:	18800015 	stw	r2,0(r3)
#endif
}
  80d464:	e037883a 	mov	sp,fp
  80d468:	dfc00117 	ldw	ra,4(sp)
  80d46c:	df000017 	ldw	fp,0(sp)
  80d470:	dec00204 	addi	sp,sp,8
  80d474:	f800283a 	ret

0080d478 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
  80d478:	defff904 	addi	sp,sp,-28
  80d47c:	df000615 	stw	fp,24(sp)
  80d480:	df000604 	addi	fp,sp,24
  80d484:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80d488:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  80d48c:	e0bffe17 	ldw	r2,-8(fp)
  80d490:	1004c03a 	cmpne	r2,r2,zero
  80d494:	1000021e 	bne	r2,zero,80d4a0 <OSSemAccept+0x28>
        return (0);
  80d498:	e03fff15 	stw	zero,-4(fp)
  80d49c:	00002106 	br	80d524 <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  80d4a0:	e0bffe17 	ldw	r2,-8(fp)
  80d4a4:	10800003 	ldbu	r2,0(r2)
  80d4a8:	10803fcc 	andi	r2,r2,255
  80d4ac:	108000e0 	cmpeqi	r2,r2,3
  80d4b0:	1000021e 	bne	r2,zero,80d4bc <OSSemAccept+0x44>
        return (0);
  80d4b4:	e03fff15 	stw	zero,-4(fp)
  80d4b8:	00001a06 	br	80d524 <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d4bc:	0005303a 	rdctl	r2,status
  80d4c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d4c4:	e0fffb17 	ldw	r3,-20(fp)
  80d4c8:	00bfff84 	movi	r2,-2
  80d4cc:	1884703a 	and	r2,r3,r2
  80d4d0:	1001703a 	wrctl	status,r2
  
  return context;
  80d4d4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  80d4d8:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
  80d4dc:	e0bffe17 	ldw	r2,-8(fp)
  80d4e0:	1080020b 	ldhu	r2,8(r2)
  80d4e4:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
  80d4e8:	e0bffd0b 	ldhu	r2,-12(fp)
  80d4ec:	1005003a 	cmpeq	r2,r2,zero
  80d4f0:	1000061e 	bne	r2,zero,80d50c <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
  80d4f4:	e0bffe17 	ldw	r2,-8(fp)
  80d4f8:	1080020b 	ldhu	r2,8(r2)
  80d4fc:	10bfffc4 	addi	r2,r2,-1
  80d500:	1007883a 	mov	r3,r2
  80d504:	e0bffe17 	ldw	r2,-8(fp)
  80d508:	10c0020d 	sth	r3,8(r2)
  80d50c:	e0bffc17 	ldw	r2,-16(fp)
  80d510:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d514:	e0bffa17 	ldw	r2,-24(fp)
  80d518:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
  80d51c:	e0bffd0b 	ldhu	r2,-12(fp)
  80d520:	e0bfff15 	stw	r2,-4(fp)
  80d524:	e0bfff17 	ldw	r2,-4(fp)
}
  80d528:	e037883a 	mov	sp,fp
  80d52c:	df000017 	ldw	fp,0(sp)
  80d530:	dec00104 	addi	sp,sp,4
  80d534:	f800283a 	ret

0080d538 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
  80d538:	defff804 	addi	sp,sp,-32
  80d53c:	dfc00715 	stw	ra,28(sp)
  80d540:	df000615 	stw	fp,24(sp)
  80d544:	df000604 	addi	fp,sp,24
  80d548:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80d54c:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  80d550:	00802074 	movhi	r2,129
  80d554:	109f4c04 	addi	r2,r2,32048
  80d558:	10800003 	ldbu	r2,0(r2)
  80d55c:	10803fcc 	andi	r2,r2,255
  80d560:	1005003a 	cmpeq	r2,r2,zero
  80d564:	1000021e 	bne	r2,zero,80d570 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
  80d568:	e03fff15 	stw	zero,-4(fp)
  80d56c:	00003106 	br	80d634 <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d570:	0005303a 	rdctl	r2,status
  80d574:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d578:	e0fffb17 	ldw	r3,-20(fp)
  80d57c:	00bfff84 	movi	r2,-2
  80d580:	1884703a 	and	r2,r3,r2
  80d584:	1001703a 	wrctl	status,r2
  
  return context;
  80d588:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  80d58c:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
  80d590:	00802074 	movhi	r2,129
  80d594:	109f4b04 	addi	r2,r2,32044
  80d598:	10800017 	ldw	r2,0(r2)
  80d59c:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
  80d5a0:	00802074 	movhi	r2,129
  80d5a4:	109f4b04 	addi	r2,r2,32044
  80d5a8:	10800017 	ldw	r2,0(r2)
  80d5ac:	1005003a 	cmpeq	r2,r2,zero
  80d5b0:	1000081e 	bne	r2,zero,80d5d4 <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  80d5b4:	00802074 	movhi	r2,129
  80d5b8:	109f4b04 	addi	r2,r2,32044
  80d5bc:	10800017 	ldw	r2,0(r2)
  80d5c0:	10800117 	ldw	r2,4(r2)
  80d5c4:	1007883a 	mov	r3,r2
  80d5c8:	00802074 	movhi	r2,129
  80d5cc:	109f4b04 	addi	r2,r2,32044
  80d5d0:	10c00015 	stw	r3,0(r2)
  80d5d4:	e0bffc17 	ldw	r2,-16(fp)
  80d5d8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d5dc:	e0bffa17 	ldw	r2,-24(fp)
  80d5e0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
  80d5e4:	e0bffd17 	ldw	r2,-12(fp)
  80d5e8:	1005003a 	cmpeq	r2,r2,zero
  80d5ec:	10000f1e 	bne	r2,zero,80d62c <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
  80d5f0:	e0fffd17 	ldw	r3,-12(fp)
  80d5f4:	008000c4 	movi	r2,3
  80d5f8:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
  80d5fc:	e0fffd17 	ldw	r3,-12(fp)
  80d600:	e0bffe0b 	ldhu	r2,-8(fp)
  80d604:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
  80d608:	e0bffd17 	ldw	r2,-12(fp)
  80d60c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
  80d610:	e0fffd17 	ldw	r3,-12(fp)
  80d614:	00800fc4 	movi	r2,63
  80d618:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
  80d61c:	e0bffd17 	ldw	r2,-12(fp)
  80d620:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
  80d624:	e13ffd17 	ldw	r4,-12(fp)
  80d628:	08093000 	call	809300 <OS_EventWaitListInit>
    }
    return (pevent);
  80d62c:	e0bffd17 	ldw	r2,-12(fp)
  80d630:	e0bfff15 	stw	r2,-4(fp)
  80d634:	e0bfff17 	ldw	r2,-4(fp)
}
  80d638:	e037883a 	mov	sp,fp
  80d63c:	dfc00117 	ldw	ra,4(sp)
  80d640:	df000017 	ldw	fp,0(sp)
  80d644:	dec00204 	addi	sp,sp,8
  80d648:	f800283a 	ret

0080d64c <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  80d64c:	defff104 	addi	sp,sp,-60
  80d650:	dfc00e15 	stw	ra,56(sp)
  80d654:	df000d15 	stw	fp,52(sp)
  80d658:	df000d04 	addi	fp,sp,52
  80d65c:	e13ffb15 	stw	r4,-20(fp)
  80d660:	e1bffd15 	stw	r6,-12(fp)
  80d664:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80d668:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80d66c:	e0bffd17 	ldw	r2,-12(fp)
  80d670:	1004c03a 	cmpne	r2,r2,zero
  80d674:	1000031e 	bne	r2,zero,80d684 <OSSemDel+0x38>
        return (pevent);
  80d678:	e0bffb17 	ldw	r2,-20(fp)
  80d67c:	e0bfff15 	stw	r2,-4(fp)
  80d680:	00009406 	br	80d8d4 <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  80d684:	e0bffb17 	ldw	r2,-20(fp)
  80d688:	1004c03a 	cmpne	r2,r2,zero
  80d68c:	1000061e 	bne	r2,zero,80d6a8 <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
  80d690:	e0fffd17 	ldw	r3,-12(fp)
  80d694:	00800104 	movi	r2,4
  80d698:	18800005 	stb	r2,0(r3)
        return (pevent);
  80d69c:	e0fffb17 	ldw	r3,-20(fp)
  80d6a0:	e0ffff15 	stw	r3,-4(fp)
  80d6a4:	00008b06 	br	80d8d4 <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  80d6a8:	e0bffb17 	ldw	r2,-20(fp)
  80d6ac:	10800003 	ldbu	r2,0(r2)
  80d6b0:	10803fcc 	andi	r2,r2,255
  80d6b4:	108000e0 	cmpeqi	r2,r2,3
  80d6b8:	1000061e 	bne	r2,zero,80d6d4 <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
  80d6bc:	e0fffd17 	ldw	r3,-12(fp)
  80d6c0:	00800044 	movi	r2,1
  80d6c4:	18800005 	stb	r2,0(r3)
        return (pevent);
  80d6c8:	e0bffb17 	ldw	r2,-20(fp)
  80d6cc:	e0bfff15 	stw	r2,-4(fp)
  80d6d0:	00008006 	br	80d8d4 <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  80d6d4:	00802074 	movhi	r2,129
  80d6d8:	109f4c04 	addi	r2,r2,32048
  80d6dc:	10800003 	ldbu	r2,0(r2)
  80d6e0:	10803fcc 	andi	r2,r2,255
  80d6e4:	1005003a 	cmpeq	r2,r2,zero
  80d6e8:	1000061e 	bne	r2,zero,80d704 <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
  80d6ec:	e0fffd17 	ldw	r3,-12(fp)
  80d6f0:	008003c4 	movi	r2,15
  80d6f4:	18800005 	stb	r2,0(r3)
        return (pevent);
  80d6f8:	e0fffb17 	ldw	r3,-20(fp)
  80d6fc:	e0ffff15 	stw	r3,-4(fp)
  80d700:	00007406 	br	80d8d4 <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d704:	0005303a 	rdctl	r2,status
  80d708:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d70c:	e0fff717 	ldw	r3,-36(fp)
  80d710:	00bfff84 	movi	r2,-2
  80d714:	1884703a 	and	r2,r3,r2
  80d718:	1001703a 	wrctl	status,r2
  
  return context;
  80d71c:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  80d720:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
  80d724:	e0bffb17 	ldw	r2,-20(fp)
  80d728:	10800283 	ldbu	r2,10(r2)
  80d72c:	10803fcc 	andi	r2,r2,255
  80d730:	1005003a 	cmpeq	r2,r2,zero
  80d734:	1000031e 	bne	r2,zero,80d744 <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  80d738:	00800044 	movi	r2,1
  80d73c:	e0bffa05 	stb	r2,-24(fp)
  80d740:	00000106 	br	80d748 <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  80d744:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  80d748:	e0bffc03 	ldbu	r2,-16(fp)
  80d74c:	e0bffe15 	stw	r2,-8(fp)
  80d750:	e0fffe17 	ldw	r3,-8(fp)
  80d754:	1805003a 	cmpeq	r2,r3,zero
  80d758:	1000041e 	bne	r2,zero,80d76c <OSSemDel+0x120>
  80d75c:	e0fffe17 	ldw	r3,-8(fp)
  80d760:	18800060 	cmpeqi	r2,r3,1
  80d764:	10002d1e 	bne	r2,zero,80d81c <OSSemDel+0x1d0>
  80d768:	00004f06 	br	80d8a8 <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
  80d76c:	e0bffa03 	ldbu	r2,-24(fp)
  80d770:	1004c03a 	cmpne	r2,r2,zero
  80d774:	10001a1e 	bne	r2,zero,80d7e0 <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  80d778:	e0fffb17 	ldw	r3,-20(fp)
  80d77c:	00800fc4 	movi	r2,63
  80d780:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  80d784:	e0bffb17 	ldw	r2,-20(fp)
  80d788:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  80d78c:	e0bffb17 	ldw	r2,-20(fp)
  80d790:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  80d794:	00802074 	movhi	r2,129
  80d798:	109f4b04 	addi	r2,r2,32044
  80d79c:	10c00017 	ldw	r3,0(r2)
  80d7a0:	e0bffb17 	ldw	r2,-20(fp)
  80d7a4:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  80d7a8:	e0bffb17 	ldw	r2,-20(fp)
  80d7ac:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  80d7b0:	00c02074 	movhi	r3,129
  80d7b4:	18df4b04 	addi	r3,r3,32044
  80d7b8:	e0bffb17 	ldw	r2,-20(fp)
  80d7bc:	18800015 	stw	r2,0(r3)
  80d7c0:	e0bff817 	ldw	r2,-32(fp)
  80d7c4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d7c8:	e0bff617 	ldw	r2,-40(fp)
  80d7cc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  80d7d0:	e0bffd17 	ldw	r2,-12(fp)
  80d7d4:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
  80d7d8:	e03ff915 	stw	zero,-28(fp)
  80d7dc:	00003b06 	br	80d8cc <OSSemDel+0x280>
  80d7e0:	e0bff817 	ldw	r2,-32(fp)
  80d7e4:	e0bff515 	stw	r2,-44(fp)
  80d7e8:	e0bff517 	ldw	r2,-44(fp)
  80d7ec:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  80d7f0:	e0fffd17 	ldw	r3,-12(fp)
  80d7f4:	00801244 	movi	r2,73
  80d7f8:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
  80d7fc:	e0bffb17 	ldw	r2,-20(fp)
  80d800:	e0bff915 	stw	r2,-28(fp)
             }
             break;
  80d804:	00003106 	br	80d8cc <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  80d808:	e13ffb17 	ldw	r4,-20(fp)
  80d80c:	000b883a 	mov	r5,zero
  80d810:	01800044 	movi	r6,1
  80d814:	000f883a 	mov	r7,zero
  80d818:	0808d4c0 	call	808d4c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
  80d81c:	e0bffb17 	ldw	r2,-20(fp)
  80d820:	10800283 	ldbu	r2,10(r2)
  80d824:	10803fcc 	andi	r2,r2,255
  80d828:	1004c03a 	cmpne	r2,r2,zero
  80d82c:	103ff61e 	bne	r2,zero,80d808 <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  80d830:	e0fffb17 	ldw	r3,-20(fp)
  80d834:	00800fc4 	movi	r2,63
  80d838:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  80d83c:	e0bffb17 	ldw	r2,-20(fp)
  80d840:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  80d844:	e0bffb17 	ldw	r2,-20(fp)
  80d848:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  80d84c:	00802074 	movhi	r2,129
  80d850:	109f4b04 	addi	r2,r2,32044
  80d854:	10c00017 	ldw	r3,0(r2)
  80d858:	e0bffb17 	ldw	r2,-20(fp)
  80d85c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  80d860:	e0bffb17 	ldw	r2,-20(fp)
  80d864:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  80d868:	00c02074 	movhi	r3,129
  80d86c:	18df4b04 	addi	r3,r3,32044
  80d870:	e0bffb17 	ldw	r2,-20(fp)
  80d874:	18800015 	stw	r2,0(r3)
  80d878:	e0bff817 	ldw	r2,-32(fp)
  80d87c:	e0bff415 	stw	r2,-48(fp)
  80d880:	e0bff417 	ldw	r2,-48(fp)
  80d884:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  80d888:	e0bffa03 	ldbu	r2,-24(fp)
  80d88c:	10800058 	cmpnei	r2,r2,1
  80d890:	1000011e 	bne	r2,zero,80d898 <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  80d894:	080978c0 	call	80978c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  80d898:	e0bffd17 	ldw	r2,-12(fp)
  80d89c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
  80d8a0:	e03ff915 	stw	zero,-28(fp)
             break;
  80d8a4:	00000906 	br	80d8cc <OSSemDel+0x280>
  80d8a8:	e0bff817 	ldw	r2,-32(fp)
  80d8ac:	e0bff315 	stw	r2,-52(fp)
  80d8b0:	e0bff317 	ldw	r2,-52(fp)
  80d8b4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  80d8b8:	e0fffd17 	ldw	r3,-12(fp)
  80d8bc:	008001c4 	movi	r2,7
  80d8c0:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
  80d8c4:	e0bffb17 	ldw	r2,-20(fp)
  80d8c8:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
  80d8cc:	e0bff917 	ldw	r2,-28(fp)
  80d8d0:	e0bfff15 	stw	r2,-4(fp)
  80d8d4:	e0bfff17 	ldw	r2,-4(fp)
}
  80d8d8:	e037883a 	mov	sp,fp
  80d8dc:	dfc00117 	ldw	ra,4(sp)
  80d8e0:	df000017 	ldw	fp,0(sp)
  80d8e4:	dec00204 	addi	sp,sp,8
  80d8e8:	f800283a 	ret

0080d8ec <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  80d8ec:	defff404 	addi	sp,sp,-48
  80d8f0:	dfc00b15 	stw	ra,44(sp)
  80d8f4:	df000a15 	stw	fp,40(sp)
  80d8f8:	df000a04 	addi	fp,sp,40
  80d8fc:	e13ffc15 	stw	r4,-16(fp)
  80d900:	e1bffe15 	stw	r6,-8(fp)
  80d904:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80d908:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  80d90c:	e0bffe17 	ldw	r2,-8(fp)
  80d910:	1005003a 	cmpeq	r2,r2,zero
  80d914:	10008f1e 	bne	r2,zero,80db54 <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  80d918:	e0bffc17 	ldw	r2,-16(fp)
  80d91c:	1004c03a 	cmpne	r2,r2,zero
  80d920:	1000041e 	bne	r2,zero,80d934 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
  80d924:	e0fffe17 	ldw	r3,-8(fp)
  80d928:	00800104 	movi	r2,4
  80d92c:	18800005 	stb	r2,0(r3)
        return;
  80d930:	00008806 	br	80db54 <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  80d934:	e0bffc17 	ldw	r2,-16(fp)
  80d938:	10800003 	ldbu	r2,0(r2)
  80d93c:	10803fcc 	andi	r2,r2,255
  80d940:	108000e0 	cmpeqi	r2,r2,3
  80d944:	1000041e 	bne	r2,zero,80d958 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  80d948:	e0fffe17 	ldw	r3,-8(fp)
  80d94c:	00800044 	movi	r2,1
  80d950:	18800005 	stb	r2,0(r3)
        return;
  80d954:	00007f06 	br	80db54 <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
  80d958:	00802074 	movhi	r2,129
  80d95c:	109f4c04 	addi	r2,r2,32048
  80d960:	10800003 	ldbu	r2,0(r2)
  80d964:	10803fcc 	andi	r2,r2,255
  80d968:	1005003a 	cmpeq	r2,r2,zero
  80d96c:	1000041e 	bne	r2,zero,80d980 <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
  80d970:	e0fffe17 	ldw	r3,-8(fp)
  80d974:	00800084 	movi	r2,2
  80d978:	18800005 	stb	r2,0(r3)
        return;
  80d97c:	00007506 	br	80db54 <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
  80d980:	00802074 	movhi	r2,129
  80d984:	109f3e04 	addi	r2,r2,31992
  80d988:	10800003 	ldbu	r2,0(r2)
  80d98c:	10803fcc 	andi	r2,r2,255
  80d990:	1005003a 	cmpeq	r2,r2,zero
  80d994:	1000041e 	bne	r2,zero,80d9a8 <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
  80d998:	e0fffe17 	ldw	r3,-8(fp)
  80d99c:	00800344 	movi	r2,13
  80d9a0:	18800005 	stb	r2,0(r3)
        return;
  80d9a4:	00006b06 	br	80db54 <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d9a8:	0005303a 	rdctl	r2,status
  80d9ac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d9b0:	e0fffa17 	ldw	r3,-24(fp)
  80d9b4:	00bfff84 	movi	r2,-2
  80d9b8:	1884703a 	and	r2,r3,r2
  80d9bc:	1001703a 	wrctl	status,r2
  
  return context;
  80d9c0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80d9c4:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
  80d9c8:	e0bffc17 	ldw	r2,-16(fp)
  80d9cc:	1080020b 	ldhu	r2,8(r2)
  80d9d0:	10bfffcc 	andi	r2,r2,65535
  80d9d4:	1005003a 	cmpeq	r2,r2,zero
  80d9d8:	10000d1e 	bne	r2,zero,80da10 <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
  80d9dc:	e0bffc17 	ldw	r2,-16(fp)
  80d9e0:	1080020b 	ldhu	r2,8(r2)
  80d9e4:	10bfffc4 	addi	r2,r2,-1
  80d9e8:	1007883a 	mov	r3,r2
  80d9ec:	e0bffc17 	ldw	r2,-16(fp)
  80d9f0:	10c0020d 	sth	r3,8(r2)
  80d9f4:	e0bffb17 	ldw	r2,-20(fp)
  80d9f8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d9fc:	e0bff917 	ldw	r2,-28(fp)
  80da00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  80da04:	e0bffe17 	ldw	r2,-8(fp)
  80da08:	10000005 	stb	zero,0(r2)
        return;
  80da0c:	00005106 	br	80db54 <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
  80da10:	00802074 	movhi	r2,129
  80da14:	109f4d04 	addi	r2,r2,32052
  80da18:	10c00017 	ldw	r3,0(r2)
  80da1c:	00802074 	movhi	r2,129
  80da20:	109f4d04 	addi	r2,r2,32052
  80da24:	10800017 	ldw	r2,0(r2)
  80da28:	10800c03 	ldbu	r2,48(r2)
  80da2c:	10800054 	ori	r2,r2,1
  80da30:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  80da34:	00802074 	movhi	r2,129
  80da38:	109f4d04 	addi	r2,r2,32052
  80da3c:	10800017 	ldw	r2,0(r2)
  80da40:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
  80da44:	00802074 	movhi	r2,129
  80da48:	109f4d04 	addi	r2,r2,32052
  80da4c:	10c00017 	ldw	r3,0(r2)
  80da50:	e0bffd0b 	ldhu	r2,-12(fp)
  80da54:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
  80da58:	e13ffc17 	ldw	r4,-16(fp)
  80da5c:	0808ee00 	call	808ee0 <OS_EventTaskWait>
  80da60:	e0bffb17 	ldw	r2,-20(fp)
  80da64:	e0bff815 	stw	r2,-32(fp)
  80da68:	e0bff817 	ldw	r2,-32(fp)
  80da6c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
  80da70:	080978c0 	call	80978c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80da74:	0005303a 	rdctl	r2,status
  80da78:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80da7c:	e0fff717 	ldw	r3,-36(fp)
  80da80:	00bfff84 	movi	r2,-2
  80da84:	1884703a 	and	r2,r3,r2
  80da88:	1001703a 	wrctl	status,r2
  
  return context;
  80da8c:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  80da90:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  80da94:	00802074 	movhi	r2,129
  80da98:	109f4d04 	addi	r2,r2,32052
  80da9c:	10800017 	ldw	r2,0(r2)
  80daa0:	10800c43 	ldbu	r2,49(r2)
  80daa4:	10803fcc 	andi	r2,r2,255
  80daa8:	e0bfff15 	stw	r2,-4(fp)
  80daac:	e0ffff17 	ldw	r3,-4(fp)
  80dab0:	1805003a 	cmpeq	r2,r3,zero
  80dab4:	1000041e 	bne	r2,zero,80dac8 <OSSemPend+0x1dc>
  80dab8:	e0ffff17 	ldw	r3,-4(fp)
  80dabc:	188000a0 	cmpeqi	r2,r3,2
  80dac0:	1000041e 	bne	r2,zero,80dad4 <OSSemPend+0x1e8>
  80dac4:	00000706 	br	80dae4 <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
  80dac8:	e0bffe17 	ldw	r2,-8(fp)
  80dacc:	10000005 	stb	zero,0(r2)
             break;
  80dad0:	00000c06 	br	80db04 <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  80dad4:	e0fffe17 	ldw	r3,-8(fp)
  80dad8:	00800384 	movi	r2,14
  80dadc:	18800005 	stb	r2,0(r3)
             break;
  80dae0:	00000806 	br	80db04 <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
  80dae4:	00802074 	movhi	r2,129
  80dae8:	109f4d04 	addi	r2,r2,32052
  80daec:	11000017 	ldw	r4,0(r2)
  80daf0:	e17ffc17 	ldw	r5,-16(fp)
  80daf4:	08091440 	call	809144 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  80daf8:	e0fffe17 	ldw	r3,-8(fp)
  80dafc:	00800284 	movi	r2,10
  80db00:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  80db04:	00802074 	movhi	r2,129
  80db08:	109f4d04 	addi	r2,r2,32052
  80db0c:	10800017 	ldw	r2,0(r2)
  80db10:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  80db14:	00802074 	movhi	r2,129
  80db18:	109f4d04 	addi	r2,r2,32052
  80db1c:	10800017 	ldw	r2,0(r2)
  80db20:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  80db24:	00802074 	movhi	r2,129
  80db28:	109f4d04 	addi	r2,r2,32052
  80db2c:	10800017 	ldw	r2,0(r2)
  80db30:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  80db34:	00802074 	movhi	r2,129
  80db38:	109f4d04 	addi	r2,r2,32052
  80db3c:	10800017 	ldw	r2,0(r2)
  80db40:	10000815 	stw	zero,32(r2)
  80db44:	e0bffb17 	ldw	r2,-20(fp)
  80db48:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80db4c:	e0bff617 	ldw	r2,-40(fp)
  80db50:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
  80db54:	e037883a 	mov	sp,fp
  80db58:	dfc00117 	ldw	ra,4(sp)
  80db5c:	df000017 	ldw	fp,0(sp)
  80db60:	dec00204 	addi	sp,sp,8
  80db64:	f800283a 	ret

0080db68 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  80db68:	defff504 	addi	sp,sp,-44
  80db6c:	dfc00a15 	stw	ra,40(sp)
  80db70:	df000915 	stw	fp,36(sp)
  80db74:	df000904 	addi	fp,sp,36
  80db78:	e13ffc15 	stw	r4,-16(fp)
  80db7c:	e1bffe15 	stw	r6,-8(fp)
  80db80:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80db84:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  80db88:	e0bffe17 	ldw	r2,-8(fp)
  80db8c:	1004c03a 	cmpne	r2,r2,zero
  80db90:	1000021e 	bne	r2,zero,80db9c <OSSemPendAbort+0x34>
        return (0);
  80db94:	e03fff15 	stw	zero,-4(fp)
  80db98:	00004c06 	br	80dccc <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  80db9c:	e0bffc17 	ldw	r2,-16(fp)
  80dba0:	1004c03a 	cmpne	r2,r2,zero
  80dba4:	1000051e 	bne	r2,zero,80dbbc <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  80dba8:	e0fffe17 	ldw	r3,-8(fp)
  80dbac:	00800104 	movi	r2,4
  80dbb0:	18800005 	stb	r2,0(r3)
        return (0);
  80dbb4:	e03fff15 	stw	zero,-4(fp)
  80dbb8:	00004406 	br	80dccc <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  80dbbc:	e0bffc17 	ldw	r2,-16(fp)
  80dbc0:	10800003 	ldbu	r2,0(r2)
  80dbc4:	10803fcc 	andi	r2,r2,255
  80dbc8:	108000e0 	cmpeqi	r2,r2,3
  80dbcc:	1000051e 	bne	r2,zero,80dbe4 <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  80dbd0:	e0fffe17 	ldw	r3,-8(fp)
  80dbd4:	00800044 	movi	r2,1
  80dbd8:	18800005 	stb	r2,0(r3)
        return (0);
  80dbdc:	e03fff15 	stw	zero,-4(fp)
  80dbe0:	00003a06 	br	80dccc <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80dbe4:	0005303a 	rdctl	r2,status
  80dbe8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80dbec:	e0fff917 	ldw	r3,-28(fp)
  80dbf0:	00bfff84 	movi	r2,-2
  80dbf4:	1884703a 	and	r2,r3,r2
  80dbf8:	1001703a 	wrctl	status,r2
  
  return context;
  80dbfc:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80dc00:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
  80dc04:	e0bffc17 	ldw	r2,-16(fp)
  80dc08:	10800283 	ldbu	r2,10(r2)
  80dc0c:	10803fcc 	andi	r2,r2,255
  80dc10:	1005003a 	cmpeq	r2,r2,zero
  80dc14:	1000261e 	bne	r2,zero,80dcb0 <OSSemPendAbort+0x148>
        nbr_tasks = 0;
  80dc18:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
  80dc1c:	e0bffd03 	ldbu	r2,-12(fp)
  80dc20:	10800060 	cmpeqi	r2,r2,1
  80dc24:	1000091e 	bne	r2,zero,80dc4c <OSSemPendAbort+0xe4>
  80dc28:	00000e06 	br	80dc64 <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  80dc2c:	e13ffc17 	ldw	r4,-16(fp)
  80dc30:	000b883a 	mov	r5,zero
  80dc34:	01800044 	movi	r6,1
  80dc38:	01c00084 	movi	r7,2
  80dc3c:	0808d4c0 	call	808d4c <OS_EventTaskRdy>
                     nbr_tasks++;
  80dc40:	e0bffb03 	ldbu	r2,-20(fp)
  80dc44:	10800044 	addi	r2,r2,1
  80dc48:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  80dc4c:	e0bffc17 	ldw	r2,-16(fp)
  80dc50:	10800283 	ldbu	r2,10(r2)
  80dc54:	10803fcc 	andi	r2,r2,255
  80dc58:	1004c03a 	cmpne	r2,r2,zero
  80dc5c:	103ff31e 	bne	r2,zero,80dc2c <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  80dc60:	00000806 	br	80dc84 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  80dc64:	e13ffc17 	ldw	r4,-16(fp)
  80dc68:	000b883a 	mov	r5,zero
  80dc6c:	01800044 	movi	r6,1
  80dc70:	01c00084 	movi	r7,2
  80dc74:	0808d4c0 	call	808d4c <OS_EventTaskRdy>
                 nbr_tasks++;
  80dc78:	e0bffb03 	ldbu	r2,-20(fp)
  80dc7c:	10800044 	addi	r2,r2,1
  80dc80:	e0bffb05 	stb	r2,-20(fp)
  80dc84:	e0bffa17 	ldw	r2,-24(fp)
  80dc88:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80dc8c:	e0bff817 	ldw	r2,-32(fp)
  80dc90:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  80dc94:	080978c0 	call	80978c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  80dc98:	e0fffe17 	ldw	r3,-8(fp)
  80dc9c:	00800384 	movi	r2,14
  80dca0:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
  80dca4:	e0bffb03 	ldbu	r2,-20(fp)
  80dca8:	e0bfff15 	stw	r2,-4(fp)
  80dcac:	00000706 	br	80dccc <OSSemPendAbort+0x164>
  80dcb0:	e0bffa17 	ldw	r2,-24(fp)
  80dcb4:	e0bff715 	stw	r2,-36(fp)
  80dcb8:	e0bff717 	ldw	r2,-36(fp)
  80dcbc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80dcc0:	e0bffe17 	ldw	r2,-8(fp)
  80dcc4:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
  80dcc8:	e03fff15 	stw	zero,-4(fp)
  80dccc:	e0bfff17 	ldw	r2,-4(fp)
}
  80dcd0:	e037883a 	mov	sp,fp
  80dcd4:	dfc00117 	ldw	ra,4(sp)
  80dcd8:	df000017 	ldw	fp,0(sp)
  80dcdc:	dec00204 	addi	sp,sp,8
  80dce0:	f800283a 	ret

0080dce4 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
  80dce4:	defff704 	addi	sp,sp,-36
  80dce8:	dfc00815 	stw	ra,32(sp)
  80dcec:	df000715 	stw	fp,28(sp)
  80dcf0:	df000704 	addi	fp,sp,28
  80dcf4:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80dcf8:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  80dcfc:	e0bffe17 	ldw	r2,-8(fp)
  80dd00:	1004c03a 	cmpne	r2,r2,zero
  80dd04:	1000031e 	bne	r2,zero,80dd14 <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
  80dd08:	00800104 	movi	r2,4
  80dd0c:	e0bfff15 	stw	r2,-4(fp)
  80dd10:	00003806 	br	80ddf4 <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  80dd14:	e0bffe17 	ldw	r2,-8(fp)
  80dd18:	10800003 	ldbu	r2,0(r2)
  80dd1c:	10803fcc 	andi	r2,r2,255
  80dd20:	108000e0 	cmpeqi	r2,r2,3
  80dd24:	1000031e 	bne	r2,zero,80dd34 <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
  80dd28:	00800044 	movi	r2,1
  80dd2c:	e0bfff15 	stw	r2,-4(fp)
  80dd30:	00003006 	br	80ddf4 <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80dd34:	0005303a 	rdctl	r2,status
  80dd38:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80dd3c:	e0fffc17 	ldw	r3,-16(fp)
  80dd40:	00bfff84 	movi	r2,-2
  80dd44:	1884703a 	and	r2,r3,r2
  80dd48:	1001703a 	wrctl	status,r2
  
  return context;
  80dd4c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  80dd50:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
  80dd54:	e0bffe17 	ldw	r2,-8(fp)
  80dd58:	10800283 	ldbu	r2,10(r2)
  80dd5c:	10803fcc 	andi	r2,r2,255
  80dd60:	1005003a 	cmpeq	r2,r2,zero
  80dd64:	10000c1e 	bne	r2,zero,80dd98 <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  80dd68:	e13ffe17 	ldw	r4,-8(fp)
  80dd6c:	000b883a 	mov	r5,zero
  80dd70:	01800044 	movi	r6,1
  80dd74:	000f883a 	mov	r7,zero
  80dd78:	0808d4c0 	call	808d4c <OS_EventTaskRdy>
  80dd7c:	e0bffd17 	ldw	r2,-12(fp)
  80dd80:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80dd84:	e0bffb17 	ldw	r2,-20(fp)
  80dd88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  80dd8c:	080978c0 	call	80978c <OS_Sched>
        return (OS_ERR_NONE);
  80dd90:	e03fff15 	stw	zero,-4(fp)
  80dd94:	00001706 	br	80ddf4 <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
  80dd98:	e0bffe17 	ldw	r2,-8(fp)
  80dd9c:	1080020b 	ldhu	r2,8(r2)
  80dda0:	10ffffcc 	andi	r3,r2,65535
  80dda4:	00bfffd4 	movui	r2,65535
  80dda8:	18800c26 	beq	r3,r2,80dddc <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
  80ddac:	e0bffe17 	ldw	r2,-8(fp)
  80ddb0:	1080020b 	ldhu	r2,8(r2)
  80ddb4:	10800044 	addi	r2,r2,1
  80ddb8:	1007883a 	mov	r3,r2
  80ddbc:	e0bffe17 	ldw	r2,-8(fp)
  80ddc0:	10c0020d 	sth	r3,8(r2)
  80ddc4:	e0bffd17 	ldw	r2,-12(fp)
  80ddc8:	e0bffa15 	stw	r2,-24(fp)
  80ddcc:	e0bffa17 	ldw	r2,-24(fp)
  80ddd0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  80ddd4:	e03fff15 	stw	zero,-4(fp)
  80ddd8:	00000606 	br	80ddf4 <OSSemPost+0x110>
  80dddc:	e0bffd17 	ldw	r2,-12(fp)
  80dde0:	e0bff915 	stw	r2,-28(fp)
  80dde4:	e0bff917 	ldw	r2,-28(fp)
  80dde8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
  80ddec:	00800c84 	movi	r2,50
  80ddf0:	e0bfff15 	stw	r2,-4(fp)
  80ddf4:	e0bfff17 	ldw	r2,-4(fp)
}
  80ddf8:	e037883a 	mov	sp,fp
  80ddfc:	dfc00117 	ldw	ra,4(sp)
  80de00:	df000017 	ldw	fp,0(sp)
  80de04:	dec00204 	addi	sp,sp,8
  80de08:	f800283a 	ret

0080de0c <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
  80de0c:	defff604 	addi	sp,sp,-40
  80de10:	df000915 	stw	fp,36(sp)
  80de14:	df000904 	addi	fp,sp,36
  80de18:	e13ffd15 	stw	r4,-12(fp)
  80de1c:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80de20:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  80de24:	e0bffd17 	ldw	r2,-12(fp)
  80de28:	1004c03a 	cmpne	r2,r2,zero
  80de2c:	1000031e 	bne	r2,zero,80de3c <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
  80de30:	00800104 	movi	r2,4
  80de34:	e0bfff15 	stw	r2,-4(fp)
  80de38:	00003b06 	br	80df28 <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
  80de3c:	e0bffe17 	ldw	r2,-8(fp)
  80de40:	1004c03a 	cmpne	r2,r2,zero
  80de44:	1000031e 	bne	r2,zero,80de54 <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
  80de48:	00800244 	movi	r2,9
  80de4c:	e0bfff15 	stw	r2,-4(fp)
  80de50:	00003506 	br	80df28 <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  80de54:	e0bffd17 	ldw	r2,-12(fp)
  80de58:	10800003 	ldbu	r2,0(r2)
  80de5c:	10803fcc 	andi	r2,r2,255
  80de60:	108000e0 	cmpeqi	r2,r2,3
  80de64:	1000031e 	bne	r2,zero,80de74 <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
  80de68:	00800044 	movi	r2,1
  80de6c:	e0bfff15 	stw	r2,-4(fp)
  80de70:	00002d06 	br	80df28 <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80de74:	0005303a 	rdctl	r2,status
  80de78:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80de7c:	e0fff817 	ldw	r3,-32(fp)
  80de80:	00bfff84 	movi	r2,-2
  80de84:	1884703a 	and	r2,r3,r2
  80de88:	1001703a 	wrctl	status,r2
  
  return context;
  80de8c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  80de90:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
  80de94:	e0bffd17 	ldw	r2,-12(fp)
  80de98:	10c00283 	ldbu	r3,10(r2)
  80de9c:	e0bffe17 	ldw	r2,-8(fp)
  80dea0:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
  80dea4:	e0bffd17 	ldw	r2,-12(fp)
  80dea8:	108002c4 	addi	r2,r2,11
  80deac:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
  80deb0:	e0bffe17 	ldw	r2,-8(fp)
  80deb4:	10800084 	addi	r2,r2,2
  80deb8:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  80debc:	e03ffa05 	stb	zero,-24(fp)
  80dec0:	00000d06 	br	80def8 <OSSemQuery+0xec>
        *pdest++ = *psrc++;
  80dec4:	e0bffc17 	ldw	r2,-16(fp)
  80dec8:	10c00003 	ldbu	r3,0(r2)
  80decc:	e0bffb17 	ldw	r2,-20(fp)
  80ded0:	10c00005 	stb	r3,0(r2)
  80ded4:	e0bffb17 	ldw	r2,-20(fp)
  80ded8:	10800044 	addi	r2,r2,1
  80dedc:	e0bffb15 	stw	r2,-20(fp)
  80dee0:	e0bffc17 	ldw	r2,-16(fp)
  80dee4:	10800044 	addi	r2,r2,1
  80dee8:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  80deec:	e0bffa03 	ldbu	r2,-24(fp)
  80def0:	10800044 	addi	r2,r2,1
  80def4:	e0bffa05 	stb	r2,-24(fp)
  80def8:	e0bffa03 	ldbu	r2,-24(fp)
  80defc:	108000f0 	cmpltui	r2,r2,3
  80df00:	103ff01e 	bne	r2,zero,80dec4 <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
  80df04:	e0bffd17 	ldw	r2,-12(fp)
  80df08:	10c0020b 	ldhu	r3,8(r2)
  80df0c:	e0bffe17 	ldw	r2,-8(fp)
  80df10:	10c0000d 	sth	r3,0(r2)
  80df14:	e0bff917 	ldw	r2,-28(fp)
  80df18:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80df1c:	e0bff717 	ldw	r2,-36(fp)
  80df20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80df24:	e03fff15 	stw	zero,-4(fp)
  80df28:	e0bfff17 	ldw	r2,-4(fp)
}
  80df2c:	e037883a 	mov	sp,fp
  80df30:	df000017 	ldw	fp,0(sp)
  80df34:	dec00104 	addi	sp,sp,4
  80df38:	f800283a 	ret

0080df3c <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
  80df3c:	defff904 	addi	sp,sp,-28
  80df40:	df000615 	stw	fp,24(sp)
  80df44:	df000604 	addi	fp,sp,24
  80df48:	e13ffd15 	stw	r4,-12(fp)
  80df4c:	e1bfff15 	stw	r6,-4(fp)
  80df50:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80df54:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  80df58:	e0bfff17 	ldw	r2,-4(fp)
  80df5c:	1005003a 	cmpeq	r2,r2,zero
  80df60:	1000331e 	bne	r2,zero,80e030 <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  80df64:	e0bffd17 	ldw	r2,-12(fp)
  80df68:	1004c03a 	cmpne	r2,r2,zero
  80df6c:	1000041e 	bne	r2,zero,80df80 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  80df70:	e0ffff17 	ldw	r3,-4(fp)
  80df74:	00800104 	movi	r2,4
  80df78:	18800005 	stb	r2,0(r3)
        return;
  80df7c:	00002c06 	br	80e030 <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  80df80:	e0bffd17 	ldw	r2,-12(fp)
  80df84:	10800003 	ldbu	r2,0(r2)
  80df88:	10803fcc 	andi	r2,r2,255
  80df8c:	108000e0 	cmpeqi	r2,r2,3
  80df90:	1000041e 	bne	r2,zero,80dfa4 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
  80df94:	e0ffff17 	ldw	r3,-4(fp)
  80df98:	00800044 	movi	r2,1
  80df9c:	18800005 	stb	r2,0(r3)
        return;
  80dfa0:	00002306 	br	80e030 <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80dfa4:	0005303a 	rdctl	r2,status
  80dfa8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80dfac:	e0fffb17 	ldw	r3,-20(fp)
  80dfb0:	00bfff84 	movi	r2,-2
  80dfb4:	1884703a 	and	r2,r3,r2
  80dfb8:	1001703a 	wrctl	status,r2
  
  return context;
  80dfbc:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  80dfc0:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
  80dfc4:	e0bfff17 	ldw	r2,-4(fp)
  80dfc8:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
  80dfcc:	e0bffd17 	ldw	r2,-12(fp)
  80dfd0:	1080020b 	ldhu	r2,8(r2)
  80dfd4:	10bfffcc 	andi	r2,r2,65535
  80dfd8:	1005003a 	cmpeq	r2,r2,zero
  80dfdc:	1000041e 	bne	r2,zero,80dff0 <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
  80dfe0:	e0fffd17 	ldw	r3,-12(fp)
  80dfe4:	e0bffe0b 	ldhu	r2,-8(fp)
  80dfe8:	1880020d 	sth	r2,8(r3)
  80dfec:	00000c06 	br	80e020 <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
  80dff0:	e0bffd17 	ldw	r2,-12(fp)
  80dff4:	10800283 	ldbu	r2,10(r2)
  80dff8:	10803fcc 	andi	r2,r2,255
  80dffc:	1004c03a 	cmpne	r2,r2,zero
  80e000:	1000041e 	bne	r2,zero,80e014 <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
  80e004:	e0fffd17 	ldw	r3,-12(fp)
  80e008:	e0bffe0b 	ldhu	r2,-8(fp)
  80e00c:	1880020d 	sth	r2,8(r3)
  80e010:	00000306 	br	80e020 <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
  80e014:	e0ffff17 	ldw	r3,-4(fp)
  80e018:	00801244 	movi	r2,73
  80e01c:	18800005 	stb	r2,0(r3)
  80e020:	e0bffc17 	ldw	r2,-16(fp)
  80e024:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e028:	e0bffa17 	ldw	r2,-24(fp)
  80e02c:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
  80e030:	e037883a 	mov	sp,fp
  80e034:	df000017 	ldw	fp,0(sp)
  80e038:	dec00104 	addi	sp,sp,4
  80e03c:	f800283a 	ret

0080e040 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
  80e040:	defff004 	addi	sp,sp,-64
  80e044:	dfc00f15 	stw	ra,60(sp)
  80e048:	df000e15 	stw	fp,56(sp)
  80e04c:	df000e04 	addi	fp,sp,56
  80e050:	e13ffd05 	stb	r4,-12(fp)
  80e054:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
  80e058:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
  80e05c:	e0bffd03 	ldbu	r2,-12(fp)
  80e060:	10800530 	cmpltui	r2,r2,20
  80e064:	1000061e 	bne	r2,zero,80e080 <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
  80e068:	e0bffd03 	ldbu	r2,-12(fp)
  80e06c:	10803fe0 	cmpeqi	r2,r2,255
  80e070:	1000031e 	bne	r2,zero,80e080 <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
  80e074:	00800a84 	movi	r2,42
  80e078:	e0bfff15 	stw	r2,-4(fp)
  80e07c:	00014706 	br	80e59c <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
  80e080:	e0bffe03 	ldbu	r2,-8(fp)
  80e084:	10800530 	cmpltui	r2,r2,20
  80e088:	1000031e 	bne	r2,zero,80e098 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
  80e08c:	00800a84 	movi	r2,42
  80e090:	e0bfff15 	stw	r2,-4(fp)
  80e094:	00014106 	br	80e59c <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e098:	0005303a 	rdctl	r2,status
  80e09c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e0a0:	e0fff617 	ldw	r3,-40(fp)
  80e0a4:	00bfff84 	movi	r2,-2
  80e0a8:	1884703a 	and	r2,r3,r2
  80e0ac:	1001703a 	wrctl	status,r2
  
  return context;
  80e0b0:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80e0b4:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
  80e0b8:	e0bffe03 	ldbu	r2,-8(fp)
  80e0bc:	00c020b4 	movhi	r3,130
  80e0c0:	18fbd304 	addi	r3,r3,-4276
  80e0c4:	1085883a 	add	r2,r2,r2
  80e0c8:	1085883a 	add	r2,r2,r2
  80e0cc:	10c5883a 	add	r2,r2,r3
  80e0d0:	10800017 	ldw	r2,0(r2)
  80e0d4:	1005003a 	cmpeq	r2,r2,zero
  80e0d8:	1000071e 	bne	r2,zero,80e0f8 <OSTaskChangePrio+0xb8>
  80e0dc:	e0bff717 	ldw	r2,-36(fp)
  80e0e0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e0e4:	e0bff517 	ldw	r2,-44(fp)
  80e0e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
  80e0ec:	00800a04 	movi	r2,40
  80e0f0:	e0bfff15 	stw	r2,-4(fp)
  80e0f4:	00012906 	br	80e59c <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
  80e0f8:	e0bffd03 	ldbu	r2,-12(fp)
  80e0fc:	10803fd8 	cmpnei	r2,r2,255
  80e100:	1000051e 	bne	r2,zero,80e118 <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
  80e104:	00802074 	movhi	r2,129
  80e108:	109f4d04 	addi	r2,r2,32052
  80e10c:	10800017 	ldw	r2,0(r2)
  80e110:	10800c83 	ldbu	r2,50(r2)
  80e114:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
  80e118:	e0bffd03 	ldbu	r2,-12(fp)
  80e11c:	00c020b4 	movhi	r3,130
  80e120:	18fbd304 	addi	r3,r3,-4276
  80e124:	1085883a 	add	r2,r2,r2
  80e128:	1085883a 	add	r2,r2,r2
  80e12c:	10c5883a 	add	r2,r2,r3
  80e130:	10800017 	ldw	r2,0(r2)
  80e134:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
  80e138:	e0bffa17 	ldw	r2,-24(fp)
  80e13c:	1004c03a 	cmpne	r2,r2,zero
  80e140:	1000071e 	bne	r2,zero,80e160 <OSTaskChangePrio+0x120>
  80e144:	e0bff717 	ldw	r2,-36(fp)
  80e148:	e0bff415 	stw	r2,-48(fp)
  80e14c:	e0bff417 	ldw	r2,-48(fp)
  80e150:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
  80e154:	00800a44 	movi	r2,41
  80e158:	e0bfff15 	stw	r2,-4(fp)
  80e15c:	00010f06 	br	80e59c <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
  80e160:	e0bffa17 	ldw	r2,-24(fp)
  80e164:	10800058 	cmpnei	r2,r2,1
  80e168:	1000071e 	bne	r2,zero,80e188 <OSTaskChangePrio+0x148>
  80e16c:	e0bff717 	ldw	r2,-36(fp)
  80e170:	e0bff315 	stw	r2,-52(fp)
  80e174:	e0bff317 	ldw	r2,-52(fp)
  80e178:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
  80e17c:	008010c4 	movi	r2,67
  80e180:	e0bfff15 	stw	r2,-4(fp)
  80e184:	00010506 	br	80e59c <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
  80e188:	e0bffe03 	ldbu	r2,-8(fp)
  80e18c:	1004d0fa 	srli	r2,r2,3
  80e190:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
  80e194:	e0bffe03 	ldbu	r2,-8(fp)
  80e198:	108001cc 	andi	r2,r2,7
  80e19c:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
  80e1a0:	e0fff983 	ldbu	r3,-26(fp)
  80e1a4:	00800044 	movi	r2,1
  80e1a8:	10c4983a 	sll	r2,r2,r3
  80e1ac:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
  80e1b0:	e0fff943 	ldbu	r3,-27(fp)
  80e1b4:	00800044 	movi	r2,1
  80e1b8:	10c4983a 	sll	r2,r2,r3
  80e1bc:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
  80e1c0:	e0bffd03 	ldbu	r2,-12(fp)
  80e1c4:	00c020b4 	movhi	r3,130
  80e1c8:	18fbd304 	addi	r3,r3,-4276
  80e1cc:	1085883a 	add	r2,r2,r2
  80e1d0:	1085883a 	add	r2,r2,r2
  80e1d4:	10c5883a 	add	r2,r2,r3
  80e1d8:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
  80e1dc:	e0bffe03 	ldbu	r2,-8(fp)
  80e1e0:	00c020b4 	movhi	r3,130
  80e1e4:	18fbd304 	addi	r3,r3,-4276
  80e1e8:	1085883a 	add	r2,r2,r2
  80e1ec:	1085883a 	add	r2,r2,r2
  80e1f0:	10c7883a 	add	r3,r2,r3
  80e1f4:	e0bffa17 	ldw	r2,-24(fp)
  80e1f8:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
  80e1fc:	e0bffa17 	ldw	r2,-24(fp)
  80e200:	10800d03 	ldbu	r2,52(r2)
  80e204:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
  80e208:	e0bffa17 	ldw	r2,-24(fp)
  80e20c:	10800d83 	ldbu	r2,54(r2)
  80e210:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
  80e214:	e0bffa17 	ldw	r2,-24(fp)
  80e218:	10800d43 	ldbu	r2,53(r2)
  80e21c:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
  80e220:	e0fff903 	ldbu	r3,-28(fp)
  80e224:	00802074 	movhi	r2,129
  80e228:	109f4a44 	addi	r2,r2,32041
  80e22c:	10c5883a 	add	r2,r2,r3
  80e230:	10c00003 	ldbu	r3,0(r2)
  80e234:	e0bff803 	ldbu	r2,-32(fp)
  80e238:	1884703a 	and	r2,r3,r2
  80e23c:	10803fcc 	andi	r2,r2,255
  80e240:	1005003a 	cmpeq	r2,r2,zero
  80e244:	1000381e 	bne	r2,zero,80e328 <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
  80e248:	e13ff903 	ldbu	r4,-28(fp)
  80e24c:	e0fff903 	ldbu	r3,-28(fp)
  80e250:	00802074 	movhi	r2,129
  80e254:	109f4a44 	addi	r2,r2,32041
  80e258:	10c5883a 	add	r2,r2,r3
  80e25c:	10800003 	ldbu	r2,0(r2)
  80e260:	1007883a 	mov	r3,r2
  80e264:	e0bff803 	ldbu	r2,-32(fp)
  80e268:	0084303a 	nor	r2,zero,r2
  80e26c:	1884703a 	and	r2,r3,r2
  80e270:	1007883a 	mov	r3,r2
  80e274:	00802074 	movhi	r2,129
  80e278:	109f4a44 	addi	r2,r2,32041
  80e27c:	1105883a 	add	r2,r2,r4
  80e280:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
  80e284:	e0fff903 	ldbu	r3,-28(fp)
  80e288:	00802074 	movhi	r2,129
  80e28c:	109f4a44 	addi	r2,r2,32041
  80e290:	10c5883a 	add	r2,r2,r3
  80e294:	10800003 	ldbu	r2,0(r2)
  80e298:	10803fcc 	andi	r2,r2,255
  80e29c:	1004c03a 	cmpne	r2,r2,zero
  80e2a0:	10000b1e 	bne	r2,zero,80e2d0 <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
  80e2a4:	e0bff843 	ldbu	r2,-31(fp)
  80e2a8:	0084303a 	nor	r2,zero,r2
  80e2ac:	1007883a 	mov	r3,r2
  80e2b0:	00802074 	movhi	r2,129
  80e2b4:	109f4a04 	addi	r2,r2,32040
  80e2b8:	10800003 	ldbu	r2,0(r2)
  80e2bc:	1884703a 	and	r2,r3,r2
  80e2c0:	1007883a 	mov	r3,r2
  80e2c4:	00802074 	movhi	r2,129
  80e2c8:	109f4a04 	addi	r2,r2,32040
  80e2cc:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
  80e2d0:	00802074 	movhi	r2,129
  80e2d4:	109f4a04 	addi	r2,r2,32040
  80e2d8:	10c00003 	ldbu	r3,0(r2)
  80e2dc:	e0bff8c3 	ldbu	r2,-29(fp)
  80e2e0:	1884b03a 	or	r2,r3,r2
  80e2e4:	1007883a 	mov	r3,r2
  80e2e8:	00802074 	movhi	r2,129
  80e2ec:	109f4a04 	addi	r2,r2,32040
  80e2f0:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
  80e2f4:	e13ff983 	ldbu	r4,-26(fp)
  80e2f8:	e0fff983 	ldbu	r3,-26(fp)
  80e2fc:	00802074 	movhi	r2,129
  80e300:	109f4a44 	addi	r2,r2,32041
  80e304:	10c5883a 	add	r2,r2,r3
  80e308:	10c00003 	ldbu	r3,0(r2)
  80e30c:	e0bff883 	ldbu	r2,-30(fp)
  80e310:	1884b03a 	or	r2,r3,r2
  80e314:	1007883a 	mov	r3,r2
  80e318:	00802074 	movhi	r2,129
  80e31c:	109f4a44 	addi	r2,r2,32041
  80e320:	1105883a 	add	r2,r2,r4
  80e324:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
  80e328:	e0bffa17 	ldw	r2,-24(fp)
  80e32c:	10800717 	ldw	r2,28(r2)
  80e330:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
  80e334:	e0bffc17 	ldw	r2,-16(fp)
  80e338:	1005003a 	cmpeq	r2,r2,zero
  80e33c:	1000341e 	bne	r2,zero,80e410 <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
  80e340:	e13ff903 	ldbu	r4,-28(fp)
  80e344:	e0fff903 	ldbu	r3,-28(fp)
  80e348:	e0bffc17 	ldw	r2,-16(fp)
  80e34c:	1885883a 	add	r2,r3,r2
  80e350:	10800204 	addi	r2,r2,8
  80e354:	108000c3 	ldbu	r2,3(r2)
  80e358:	1007883a 	mov	r3,r2
  80e35c:	e0bff803 	ldbu	r2,-32(fp)
  80e360:	0084303a 	nor	r2,zero,r2
  80e364:	1884703a 	and	r2,r3,r2
  80e368:	1007883a 	mov	r3,r2
  80e36c:	e0bffc17 	ldw	r2,-16(fp)
  80e370:	2085883a 	add	r2,r4,r2
  80e374:	10800204 	addi	r2,r2,8
  80e378:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
  80e37c:	e0fff903 	ldbu	r3,-28(fp)
  80e380:	e0bffc17 	ldw	r2,-16(fp)
  80e384:	1885883a 	add	r2,r3,r2
  80e388:	10800204 	addi	r2,r2,8
  80e38c:	108000c3 	ldbu	r2,3(r2)
  80e390:	10803fcc 	andi	r2,r2,255
  80e394:	1004c03a 	cmpne	r2,r2,zero
  80e398:	1000091e 	bne	r2,zero,80e3c0 <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
  80e39c:	e0bffc17 	ldw	r2,-16(fp)
  80e3a0:	10800283 	ldbu	r2,10(r2)
  80e3a4:	1007883a 	mov	r3,r2
  80e3a8:	e0bff843 	ldbu	r2,-31(fp)
  80e3ac:	0084303a 	nor	r2,zero,r2
  80e3b0:	1884703a 	and	r2,r3,r2
  80e3b4:	1007883a 	mov	r3,r2
  80e3b8:	e0bffc17 	ldw	r2,-16(fp)
  80e3bc:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
  80e3c0:	e0bffc17 	ldw	r2,-16(fp)
  80e3c4:	10c00283 	ldbu	r3,10(r2)
  80e3c8:	e0bff8c3 	ldbu	r2,-29(fp)
  80e3cc:	1884b03a 	or	r2,r3,r2
  80e3d0:	1007883a 	mov	r3,r2
  80e3d4:	e0bffc17 	ldw	r2,-16(fp)
  80e3d8:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
  80e3dc:	e13ff983 	ldbu	r4,-26(fp)
  80e3e0:	e0fff983 	ldbu	r3,-26(fp)
  80e3e4:	e0bffc17 	ldw	r2,-16(fp)
  80e3e8:	1885883a 	add	r2,r3,r2
  80e3ec:	10800204 	addi	r2,r2,8
  80e3f0:	10c000c3 	ldbu	r3,3(r2)
  80e3f4:	e0bff883 	ldbu	r2,-30(fp)
  80e3f8:	1884b03a 	or	r2,r3,r2
  80e3fc:	1007883a 	mov	r3,r2
  80e400:	e0bffc17 	ldw	r2,-16(fp)
  80e404:	2085883a 	add	r2,r4,r2
  80e408:	10800204 	addi	r2,r2,8
  80e40c:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
  80e410:	e0bffa17 	ldw	r2,-24(fp)
  80e414:	10800817 	ldw	r2,32(r2)
  80e418:	1005003a 	cmpeq	r2,r2,zero
  80e41c:	1000441e 	bne	r2,zero,80e530 <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
  80e420:	e0bffa17 	ldw	r2,-24(fp)
  80e424:	10800817 	ldw	r2,32(r2)
  80e428:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
  80e42c:	e0bffb17 	ldw	r2,-20(fp)
  80e430:	10800017 	ldw	r2,0(r2)
  80e434:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
  80e438:	00003a06 	br	80e524 <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
  80e43c:	e13ff903 	ldbu	r4,-28(fp)
  80e440:	e0fff903 	ldbu	r3,-28(fp)
  80e444:	e0bffc17 	ldw	r2,-16(fp)
  80e448:	1885883a 	add	r2,r3,r2
  80e44c:	10800204 	addi	r2,r2,8
  80e450:	108000c3 	ldbu	r2,3(r2)
  80e454:	1007883a 	mov	r3,r2
  80e458:	e0bff803 	ldbu	r2,-32(fp)
  80e45c:	0084303a 	nor	r2,zero,r2
  80e460:	1884703a 	and	r2,r3,r2
  80e464:	1007883a 	mov	r3,r2
  80e468:	e0bffc17 	ldw	r2,-16(fp)
  80e46c:	2085883a 	add	r2,r4,r2
  80e470:	10800204 	addi	r2,r2,8
  80e474:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
  80e478:	e0fff903 	ldbu	r3,-28(fp)
  80e47c:	e0bffc17 	ldw	r2,-16(fp)
  80e480:	1885883a 	add	r2,r3,r2
  80e484:	10800204 	addi	r2,r2,8
  80e488:	108000c3 	ldbu	r2,3(r2)
  80e48c:	10803fcc 	andi	r2,r2,255
  80e490:	1004c03a 	cmpne	r2,r2,zero
  80e494:	1000091e 	bne	r2,zero,80e4bc <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
  80e498:	e0bffc17 	ldw	r2,-16(fp)
  80e49c:	10800283 	ldbu	r2,10(r2)
  80e4a0:	1007883a 	mov	r3,r2
  80e4a4:	e0bff843 	ldbu	r2,-31(fp)
  80e4a8:	0084303a 	nor	r2,zero,r2
  80e4ac:	1884703a 	and	r2,r3,r2
  80e4b0:	1007883a 	mov	r3,r2
  80e4b4:	e0bffc17 	ldw	r2,-16(fp)
  80e4b8:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
  80e4bc:	e0bffc17 	ldw	r2,-16(fp)
  80e4c0:	10c00283 	ldbu	r3,10(r2)
  80e4c4:	e0bff8c3 	ldbu	r2,-29(fp)
  80e4c8:	1884b03a 	or	r2,r3,r2
  80e4cc:	1007883a 	mov	r3,r2
  80e4d0:	e0bffc17 	ldw	r2,-16(fp)
  80e4d4:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
  80e4d8:	e13ff983 	ldbu	r4,-26(fp)
  80e4dc:	e0fff983 	ldbu	r3,-26(fp)
  80e4e0:	e0bffc17 	ldw	r2,-16(fp)
  80e4e4:	1885883a 	add	r2,r3,r2
  80e4e8:	10800204 	addi	r2,r2,8
  80e4ec:	10c000c3 	ldbu	r3,3(r2)
  80e4f0:	e0bff883 	ldbu	r2,-30(fp)
  80e4f4:	1884b03a 	or	r2,r3,r2
  80e4f8:	1007883a 	mov	r3,r2
  80e4fc:	e0bffc17 	ldw	r2,-16(fp)
  80e500:	2085883a 	add	r2,r4,r2
  80e504:	10800204 	addi	r2,r2,8
  80e508:	10c000c5 	stb	r3,3(r2)
            pevents++;
  80e50c:	e0bffb17 	ldw	r2,-20(fp)
  80e510:	10800104 	addi	r2,r2,4
  80e514:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
  80e518:	e0bffb17 	ldw	r2,-20(fp)
  80e51c:	10800017 	ldw	r2,0(r2)
  80e520:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
  80e524:	e0bffc17 	ldw	r2,-16(fp)
  80e528:	1004c03a 	cmpne	r2,r2,zero
  80e52c:	103fc31e 	bne	r2,zero,80e43c <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
  80e530:	e0fffa17 	ldw	r3,-24(fp)
  80e534:	e0bffe03 	ldbu	r2,-8(fp)
  80e538:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
  80e53c:	e0fffa17 	ldw	r3,-24(fp)
  80e540:	e0bff983 	ldbu	r2,-26(fp)
  80e544:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
  80e548:	e0fffa17 	ldw	r3,-24(fp)
  80e54c:	e0bff943 	ldbu	r2,-27(fp)
  80e550:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
  80e554:	e0fffa17 	ldw	r3,-24(fp)
  80e558:	e0bff8c3 	ldbu	r2,-29(fp)
  80e55c:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
  80e560:	e0fffa17 	ldw	r3,-24(fp)
  80e564:	e0bff883 	ldbu	r2,-30(fp)
  80e568:	18800d45 	stb	r2,53(r3)
  80e56c:	e0bff717 	ldw	r2,-36(fp)
  80e570:	e0bff215 	stw	r2,-56(fp)
  80e574:	e0bff217 	ldw	r2,-56(fp)
  80e578:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  80e57c:	00802074 	movhi	r2,129
  80e580:	109f3e44 	addi	r2,r2,31993
  80e584:	10800003 	ldbu	r2,0(r2)
  80e588:	10803fcc 	andi	r2,r2,255
  80e58c:	10800058 	cmpnei	r2,r2,1
  80e590:	1000011e 	bne	r2,zero,80e598 <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
  80e594:	080978c0 	call	80978c <OS_Sched>
    }
    return (OS_ERR_NONE);
  80e598:	e03fff15 	stw	zero,-4(fp)
  80e59c:	e0bfff17 	ldw	r2,-4(fp)
}
  80e5a0:	e037883a 	mov	sp,fp
  80e5a4:	dfc00117 	ldw	ra,4(sp)
  80e5a8:	df000017 	ldw	fp,0(sp)
  80e5ac:	dec00204 	addi	sp,sp,8
  80e5b0:	f800283a 	ret

0080e5b4 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
  80e5b4:	deffed04 	addi	sp,sp,-76
  80e5b8:	dfc01215 	stw	ra,72(sp)
  80e5bc:	df001115 	stw	fp,68(sp)
  80e5c0:	df001104 	addi	fp,sp,68
  80e5c4:	e13ffb15 	stw	r4,-20(fp)
  80e5c8:	e17ffc15 	stw	r5,-16(fp)
  80e5cc:	e1bffd15 	stw	r6,-12(fp)
  80e5d0:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  80e5d4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  80e5d8:	e0bffe03 	ldbu	r2,-8(fp)
  80e5dc:	10800570 	cmpltui	r2,r2,21
  80e5e0:	1000031e 	bne	r2,zero,80e5f0 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
  80e5e4:	00800a84 	movi	r2,42
  80e5e8:	e0bfff15 	stw	r2,-4(fp)
  80e5ec:	00006006 	br	80e770 <OSTaskCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e5f0:	0005303a 	rdctl	r2,status
  80e5f4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e5f8:	e0fff717 	ldw	r3,-36(fp)
  80e5fc:	00bfff84 	movi	r2,-2
  80e600:	1884703a 	and	r2,r3,r2
  80e604:	1001703a 	wrctl	status,r2
  
  return context;
  80e608:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80e60c:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  80e610:	00802074 	movhi	r2,129
  80e614:	109f4c04 	addi	r2,r2,32048
  80e618:	10800003 	ldbu	r2,0(r2)
  80e61c:	10803fcc 	andi	r2,r2,255
  80e620:	1005003a 	cmpeq	r2,r2,zero
  80e624:	1000071e 	bne	r2,zero,80e644 <OSTaskCreate+0x90>
  80e628:	e0bff817 	ldw	r2,-32(fp)
  80e62c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e630:	e0bff617 	ldw	r2,-40(fp)
  80e634:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  80e638:	00800f04 	movi	r2,60
  80e63c:	e0bfff15 	stw	r2,-4(fp)
  80e640:	00004b06 	br	80e770 <OSTaskCreate+0x1bc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  80e644:	e0bffe03 	ldbu	r2,-8(fp)
  80e648:	00c020b4 	movhi	r3,130
  80e64c:	18fbd304 	addi	r3,r3,-4276
  80e650:	1085883a 	add	r2,r2,r2
  80e654:	1085883a 	add	r2,r2,r2
  80e658:	10c5883a 	add	r2,r2,r3
  80e65c:	10800017 	ldw	r2,0(r2)
  80e660:	1004c03a 	cmpne	r2,r2,zero
  80e664:	10003c1e 	bne	r2,zero,80e758 <OSTaskCreate+0x1a4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  80e668:	e0bffe03 	ldbu	r2,-8(fp)
  80e66c:	00c020b4 	movhi	r3,130
  80e670:	18fbd304 	addi	r3,r3,-4276
  80e674:	1085883a 	add	r2,r2,r2
  80e678:	1085883a 	add	r2,r2,r2
  80e67c:	10c7883a 	add	r3,r2,r3
  80e680:	00800044 	movi	r2,1
  80e684:	18800015 	stw	r2,0(r3)
  80e688:	e0bff817 	ldw	r2,-32(fp)
  80e68c:	e0bff515 	stw	r2,-44(fp)
  80e690:	e0bff517 	ldw	r2,-44(fp)
  80e694:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
  80e698:	e13ffb17 	ldw	r4,-20(fp)
  80e69c:	e17ffc17 	ldw	r5,-16(fp)
  80e6a0:	e1bffd17 	ldw	r6,-12(fp)
  80e6a4:	000f883a 	mov	r7,zero
  80e6a8:	08136180 	call	813618 <OSTaskStkInit>
  80e6ac:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
  80e6b0:	e13ffe03 	ldbu	r4,-8(fp)
  80e6b4:	d8000015 	stw	zero,0(sp)
  80e6b8:	d8000115 	stw	zero,4(sp)
  80e6bc:	d8000215 	stw	zero,8(sp)
  80e6c0:	e17ffa17 	ldw	r5,-24(fp)
  80e6c4:	000d883a 	mov	r6,zero
  80e6c8:	000f883a 	mov	r7,zero
  80e6cc:	0809b940 	call	809b94 <OS_TCBInit>
  80e6d0:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
  80e6d4:	e0bff903 	ldbu	r2,-28(fp)
  80e6d8:	1004c03a 	cmpne	r2,r2,zero
  80e6dc:	1000081e 	bne	r2,zero,80e700 <OSTaskCreate+0x14c>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
  80e6e0:	00802074 	movhi	r2,129
  80e6e4:	109f3e44 	addi	r2,r2,31993
  80e6e8:	10800003 	ldbu	r2,0(r2)
  80e6ec:	10803fcc 	andi	r2,r2,255
  80e6f0:	10800058 	cmpnei	r2,r2,1
  80e6f4:	1000151e 	bne	r2,zero,80e74c <OSTaskCreate+0x198>
                OS_Sched();
  80e6f8:	080978c0 	call	80978c <OS_Sched>
  80e6fc:	00001306 	br	80e74c <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e700:	0005303a 	rdctl	r2,status
  80e704:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e708:	e0fff417 	ldw	r3,-48(fp)
  80e70c:	00bfff84 	movi	r2,-2
  80e710:	1884703a 	and	r2,r3,r2
  80e714:	1001703a 	wrctl	status,r2
  
  return context;
  80e718:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  80e71c:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
  80e720:	e0bffe03 	ldbu	r2,-8(fp)
  80e724:	00c020b4 	movhi	r3,130
  80e728:	18fbd304 	addi	r3,r3,-4276
  80e72c:	1085883a 	add	r2,r2,r2
  80e730:	1085883a 	add	r2,r2,r2
  80e734:	10c5883a 	add	r2,r2,r3
  80e738:	10000015 	stw	zero,0(r2)
  80e73c:	e0bff817 	ldw	r2,-32(fp)
  80e740:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e744:	e0bff317 	ldw	r2,-52(fp)
  80e748:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  80e74c:	e0bff903 	ldbu	r2,-28(fp)
  80e750:	e0bfff15 	stw	r2,-4(fp)
  80e754:	00000606 	br	80e770 <OSTaskCreate+0x1bc>
  80e758:	e0bff817 	ldw	r2,-32(fp)
  80e75c:	e0bff215 	stw	r2,-56(fp)
  80e760:	e0bff217 	ldw	r2,-56(fp)
  80e764:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  80e768:	00800a04 	movi	r2,40
  80e76c:	e0bfff15 	stw	r2,-4(fp)
  80e770:	e0bfff17 	ldw	r2,-4(fp)
}
  80e774:	e037883a 	mov	sp,fp
  80e778:	dfc00117 	ldw	ra,4(sp)
  80e77c:	df000017 	ldw	fp,0(sp)
  80e780:	dec00204 	addi	sp,sp,8
  80e784:	f800283a 	ret

0080e788 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
  80e788:	deffeb04 	addi	sp,sp,-84
  80e78c:	dfc01415 	stw	ra,80(sp)
  80e790:	df001315 	stw	fp,76(sp)
  80e794:	df001304 	addi	fp,sp,76
  80e798:	e13ff915 	stw	r4,-28(fp)
  80e79c:	e17ffa15 	stw	r5,-24(fp)
  80e7a0:	e1bffb15 	stw	r6,-20(fp)
  80e7a4:	e0800217 	ldw	r2,8(fp)
  80e7a8:	e0c00617 	ldw	r3,24(fp)
  80e7ac:	e1fffc05 	stb	r7,-16(fp)
  80e7b0:	e0bffd0d 	sth	r2,-12(fp)
  80e7b4:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  80e7b8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  80e7bc:	e0bffc03 	ldbu	r2,-16(fp)
  80e7c0:	10800570 	cmpltui	r2,r2,21
  80e7c4:	1000031e 	bne	r2,zero,80e7d4 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
  80e7c8:	00800a84 	movi	r2,42
  80e7cc:	e0bfff15 	stw	r2,-4(fp)
  80e7d0:	00006706 	br	80e970 <OSTaskCreateExt+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e7d4:	0005303a 	rdctl	r2,status
  80e7d8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e7dc:	e0fff517 	ldw	r3,-44(fp)
  80e7e0:	00bfff84 	movi	r2,-2
  80e7e4:	1884703a 	and	r2,r3,r2
  80e7e8:	1001703a 	wrctl	status,r2
  
  return context;
  80e7ec:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80e7f0:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  80e7f4:	00802074 	movhi	r2,129
  80e7f8:	109f4c04 	addi	r2,r2,32048
  80e7fc:	10800003 	ldbu	r2,0(r2)
  80e800:	10803fcc 	andi	r2,r2,255
  80e804:	1005003a 	cmpeq	r2,r2,zero
  80e808:	1000071e 	bne	r2,zero,80e828 <OSTaskCreateExt+0xa0>
  80e80c:	e0bff617 	ldw	r2,-40(fp)
  80e810:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e814:	e0bff417 	ldw	r2,-48(fp)
  80e818:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  80e81c:	00800f04 	movi	r2,60
  80e820:	e0bfff15 	stw	r2,-4(fp)
  80e824:	00005206 	br	80e970 <OSTaskCreateExt+0x1e8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  80e828:	e0bffc03 	ldbu	r2,-16(fp)
  80e82c:	00c020b4 	movhi	r3,130
  80e830:	18fbd304 	addi	r3,r3,-4276
  80e834:	1085883a 	add	r2,r2,r2
  80e838:	1085883a 	add	r2,r2,r2
  80e83c:	10c5883a 	add	r2,r2,r3
  80e840:	10800017 	ldw	r2,0(r2)
  80e844:	1004c03a 	cmpne	r2,r2,zero
  80e848:	1000431e 	bne	r2,zero,80e958 <OSTaskCreateExt+0x1d0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  80e84c:	e0bffc03 	ldbu	r2,-16(fp)
  80e850:	00c020b4 	movhi	r3,130
  80e854:	18fbd304 	addi	r3,r3,-4276
  80e858:	1085883a 	add	r2,r2,r2
  80e85c:	1085883a 	add	r2,r2,r2
  80e860:	10c7883a 	add	r3,r2,r3
  80e864:	00800044 	movi	r2,1
  80e868:	18800015 	stw	r2,0(r3)
  80e86c:	e0bff617 	ldw	r2,-40(fp)
  80e870:	e0bff315 	stw	r2,-52(fp)
  80e874:	e0bff317 	ldw	r2,-52(fp)
  80e878:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
  80e87c:	e1bffe0b 	ldhu	r6,-8(fp)
  80e880:	e1000317 	ldw	r4,12(fp)
  80e884:	e1400417 	ldw	r5,16(fp)
  80e888:	080fa040 	call	80fa04 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
  80e88c:	e1fffe0b 	ldhu	r7,-8(fp)
  80e890:	e13ff917 	ldw	r4,-28(fp)
  80e894:	e17ffa17 	ldw	r5,-24(fp)
  80e898:	e1bffb17 	ldw	r6,-20(fp)
  80e89c:	08136180 	call	813618 <OSTaskStkInit>
  80e8a0:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
  80e8a4:	e13ffc03 	ldbu	r4,-16(fp)
  80e8a8:	e1fffd0b 	ldhu	r7,-12(fp)
  80e8ac:	e0fffe0b 	ldhu	r3,-8(fp)
  80e8b0:	e0800417 	ldw	r2,16(fp)
  80e8b4:	d8800015 	stw	r2,0(sp)
  80e8b8:	e0800517 	ldw	r2,20(fp)
  80e8bc:	d8800115 	stw	r2,4(sp)
  80e8c0:	d8c00215 	stw	r3,8(sp)
  80e8c4:	e17ff817 	ldw	r5,-32(fp)
  80e8c8:	e1800317 	ldw	r6,12(fp)
  80e8cc:	0809b940 	call	809b94 <OS_TCBInit>
  80e8d0:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
  80e8d4:	e0bff703 	ldbu	r2,-36(fp)
  80e8d8:	1004c03a 	cmpne	r2,r2,zero
  80e8dc:	1000081e 	bne	r2,zero,80e900 <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
  80e8e0:	00802074 	movhi	r2,129
  80e8e4:	109f3e44 	addi	r2,r2,31993
  80e8e8:	10800003 	ldbu	r2,0(r2)
  80e8ec:	10803fcc 	andi	r2,r2,255
  80e8f0:	10800058 	cmpnei	r2,r2,1
  80e8f4:	1000151e 	bne	r2,zero,80e94c <OSTaskCreateExt+0x1c4>
                OS_Sched();
  80e8f8:	080978c0 	call	80978c <OS_Sched>
  80e8fc:	00001306 	br	80e94c <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e900:	0005303a 	rdctl	r2,status
  80e904:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e908:	e0fff217 	ldw	r3,-56(fp)
  80e90c:	00bfff84 	movi	r2,-2
  80e910:	1884703a 	and	r2,r3,r2
  80e914:	1001703a 	wrctl	status,r2
  
  return context;
  80e918:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  80e91c:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
  80e920:	e0bffc03 	ldbu	r2,-16(fp)
  80e924:	00c020b4 	movhi	r3,130
  80e928:	18fbd304 	addi	r3,r3,-4276
  80e92c:	1085883a 	add	r2,r2,r2
  80e930:	1085883a 	add	r2,r2,r2
  80e934:	10c5883a 	add	r2,r2,r3
  80e938:	10000015 	stw	zero,0(r2)
  80e93c:	e0bff617 	ldw	r2,-40(fp)
  80e940:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e944:	e0bff117 	ldw	r2,-60(fp)
  80e948:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  80e94c:	e0bff703 	ldbu	r2,-36(fp)
  80e950:	e0bfff15 	stw	r2,-4(fp)
  80e954:	00000606 	br	80e970 <OSTaskCreateExt+0x1e8>
  80e958:	e0bff617 	ldw	r2,-40(fp)
  80e95c:	e0bff015 	stw	r2,-64(fp)
  80e960:	e0bff017 	ldw	r2,-64(fp)
  80e964:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  80e968:	00800a04 	movi	r2,40
  80e96c:	e0bfff15 	stw	r2,-4(fp)
  80e970:	e0bfff17 	ldw	r2,-4(fp)
}
  80e974:	e037883a 	mov	sp,fp
  80e978:	dfc00117 	ldw	ra,4(sp)
  80e97c:	df000017 	ldw	fp,0(sp)
  80e980:	dec00204 	addi	sp,sp,8
  80e984:	f800283a 	ret

0080e988 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
  80e988:	defff304 	addi	sp,sp,-52
  80e98c:	dfc00c15 	stw	ra,48(sp)
  80e990:	df000b15 	stw	fp,44(sp)
  80e994:	df000b04 	addi	fp,sp,44
  80e998:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
  80e99c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
  80e9a0:	00802074 	movhi	r2,129
  80e9a4:	109f4c04 	addi	r2,r2,32048
  80e9a8:	10800003 	ldbu	r2,0(r2)
  80e9ac:	10803fcc 	andi	r2,r2,255
  80e9b0:	1005003a 	cmpeq	r2,r2,zero
  80e9b4:	1000031e 	bne	r2,zero,80e9c4 <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
  80e9b8:	00801004 	movi	r2,64
  80e9bc:	e0bfff15 	stw	r2,-4(fp)
  80e9c0:	0000ee06 	br	80ed7c <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
  80e9c4:	e0bffe03 	ldbu	r2,-8(fp)
  80e9c8:	10800518 	cmpnei	r2,r2,20
  80e9cc:	1000031e 	bne	r2,zero,80e9dc <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
  80e9d0:	00800f84 	movi	r2,62
  80e9d4:	e0bfff15 	stw	r2,-4(fp)
  80e9d8:	0000e806 	br	80ed7c <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
  80e9dc:	e0bffe03 	ldbu	r2,-8(fp)
  80e9e0:	10800530 	cmpltui	r2,r2,20
  80e9e4:	1000061e 	bne	r2,zero,80ea00 <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
  80e9e8:	e0bffe03 	ldbu	r2,-8(fp)
  80e9ec:	10803fe0 	cmpeqi	r2,r2,255
  80e9f0:	1000031e 	bne	r2,zero,80ea00 <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
  80e9f4:	00800a84 	movi	r2,42
  80e9f8:	e0bfff15 	stw	r2,-4(fp)
  80e9fc:	0000df06 	br	80ed7c <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ea00:	0005303a 	rdctl	r2,status
  80ea04:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ea08:	e0fffa17 	ldw	r3,-24(fp)
  80ea0c:	00bfff84 	movi	r2,-2
  80ea10:	1884703a 	and	r2,r3,r2
  80ea14:	1001703a 	wrctl	status,r2
  
  return context;
  80ea18:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
  80ea1c:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
  80ea20:	e0bffe03 	ldbu	r2,-8(fp)
  80ea24:	10803fd8 	cmpnei	r2,r2,255
  80ea28:	1000051e 	bne	r2,zero,80ea40 <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
  80ea2c:	00802074 	movhi	r2,129
  80ea30:	109f4d04 	addi	r2,r2,32052
  80ea34:	10800017 	ldw	r2,0(r2)
  80ea38:	10800c83 	ldbu	r2,50(r2)
  80ea3c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  80ea40:	e0bffe03 	ldbu	r2,-8(fp)
  80ea44:	00c020b4 	movhi	r3,130
  80ea48:	18fbd304 	addi	r3,r3,-4276
  80ea4c:	1085883a 	add	r2,r2,r2
  80ea50:	1085883a 	add	r2,r2,r2
  80ea54:	10c5883a 	add	r2,r2,r3
  80ea58:	10800017 	ldw	r2,0(r2)
  80ea5c:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
  80ea60:	e0bffc17 	ldw	r2,-16(fp)
  80ea64:	1004c03a 	cmpne	r2,r2,zero
  80ea68:	1000071e 	bne	r2,zero,80ea88 <OSTaskDel+0x100>
  80ea6c:	e0bffb17 	ldw	r2,-20(fp)
  80ea70:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ea74:	e0bff917 	ldw	r2,-28(fp)
  80ea78:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  80ea7c:	008010c4 	movi	r2,67
  80ea80:	e0bfff15 	stw	r2,-4(fp)
  80ea84:	0000bd06 	br	80ed7c <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
  80ea88:	e0bffc17 	ldw	r2,-16(fp)
  80ea8c:	10800058 	cmpnei	r2,r2,1
  80ea90:	1000071e 	bne	r2,zero,80eab0 <OSTaskDel+0x128>
  80ea94:	e0bffb17 	ldw	r2,-20(fp)
  80ea98:	e0bff815 	stw	r2,-32(fp)
  80ea9c:	e0bff817 	ldw	r2,-32(fp)
  80eaa0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  80eaa4:	00800f44 	movi	r2,61
  80eaa8:	e0bfff15 	stw	r2,-4(fp)
  80eaac:	0000b306 	br	80ed7c <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
  80eab0:	e0bffc17 	ldw	r2,-16(fp)
  80eab4:	10800d03 	ldbu	r2,52(r2)
  80eab8:	11003fcc 	andi	r4,r2,255
  80eabc:	e0bffc17 	ldw	r2,-16(fp)
  80eac0:	10800d03 	ldbu	r2,52(r2)
  80eac4:	10c03fcc 	andi	r3,r2,255
  80eac8:	00802074 	movhi	r2,129
  80eacc:	109f4a44 	addi	r2,r2,32041
  80ead0:	10c5883a 	add	r2,r2,r3
  80ead4:	10800003 	ldbu	r2,0(r2)
  80ead8:	1007883a 	mov	r3,r2
  80eadc:	e0bffc17 	ldw	r2,-16(fp)
  80eae0:	10800d43 	ldbu	r2,53(r2)
  80eae4:	0084303a 	nor	r2,zero,r2
  80eae8:	1884703a 	and	r2,r3,r2
  80eaec:	1007883a 	mov	r3,r2
  80eaf0:	00802074 	movhi	r2,129
  80eaf4:	109f4a44 	addi	r2,r2,32041
  80eaf8:	1105883a 	add	r2,r2,r4
  80eafc:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
  80eb00:	e0bffc17 	ldw	r2,-16(fp)
  80eb04:	10800d03 	ldbu	r2,52(r2)
  80eb08:	10c03fcc 	andi	r3,r2,255
  80eb0c:	00802074 	movhi	r2,129
  80eb10:	109f4a44 	addi	r2,r2,32041
  80eb14:	10c5883a 	add	r2,r2,r3
  80eb18:	10800003 	ldbu	r2,0(r2)
  80eb1c:	10803fcc 	andi	r2,r2,255
  80eb20:	1004c03a 	cmpne	r2,r2,zero
  80eb24:	10000c1e 	bne	r2,zero,80eb58 <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
  80eb28:	e0bffc17 	ldw	r2,-16(fp)
  80eb2c:	10800d83 	ldbu	r2,54(r2)
  80eb30:	0084303a 	nor	r2,zero,r2
  80eb34:	1007883a 	mov	r3,r2
  80eb38:	00802074 	movhi	r2,129
  80eb3c:	109f4a04 	addi	r2,r2,32040
  80eb40:	10800003 	ldbu	r2,0(r2)
  80eb44:	1884703a 	and	r2,r3,r2
  80eb48:	1007883a 	mov	r3,r2
  80eb4c:	00802074 	movhi	r2,129
  80eb50:	109f4a04 	addi	r2,r2,32040
  80eb54:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
  80eb58:	e0bffc17 	ldw	r2,-16(fp)
  80eb5c:	10800717 	ldw	r2,28(r2)
  80eb60:	1005003a 	cmpeq	r2,r2,zero
  80eb64:	1000041e 	bne	r2,zero,80eb78 <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
  80eb68:	e0bffc17 	ldw	r2,-16(fp)
  80eb6c:	11400717 	ldw	r5,28(r2)
  80eb70:	e13ffc17 	ldw	r4,-16(fp)
  80eb74:	08091440 	call	809144 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
  80eb78:	e0bffc17 	ldw	r2,-16(fp)
  80eb7c:	10800817 	ldw	r2,32(r2)
  80eb80:	1005003a 	cmpeq	r2,r2,zero
  80eb84:	1000041e 	bne	r2,zero,80eb98 <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  80eb88:	e0bffc17 	ldw	r2,-16(fp)
  80eb8c:	11400817 	ldw	r5,32(r2)
  80eb90:	e13ffc17 	ldw	r4,-16(fp)
  80eb94:	08091fc0 	call	8091fc <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
  80eb98:	e0bffc17 	ldw	r2,-16(fp)
  80eb9c:	10800a17 	ldw	r2,40(r2)
  80eba0:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
  80eba4:	e0bffd17 	ldw	r2,-12(fp)
  80eba8:	1005003a 	cmpeq	r2,r2,zero
  80ebac:	1000021e 	bne	r2,zero,80ebb8 <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
  80ebb0:	e13ffd17 	ldw	r4,-12(fp)
  80ebb4:	080b8900 	call	80b890 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
  80ebb8:	e0bffc17 	ldw	r2,-16(fp)
  80ebbc:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
  80ebc0:	e0bffc17 	ldw	r2,-16(fp)
  80ebc4:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  80ebc8:	e0bffc17 	ldw	r2,-16(fp)
  80ebcc:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
  80ebd0:	00802074 	movhi	r2,129
  80ebd4:	109f3e04 	addi	r2,r2,31992
  80ebd8:	10800003 	ldbu	r2,0(r2)
  80ebdc:	10803fcc 	andi	r2,r2,255
  80ebe0:	10803fe0 	cmpeqi	r2,r2,255
  80ebe4:	1000081e 	bne	r2,zero,80ec08 <OSTaskDel+0x280>
        OSLockNesting++;
  80ebe8:	00802074 	movhi	r2,129
  80ebec:	109f3e04 	addi	r2,r2,31992
  80ebf0:	10800003 	ldbu	r2,0(r2)
  80ebf4:	10800044 	addi	r2,r2,1
  80ebf8:	1007883a 	mov	r3,r2
  80ebfc:	00802074 	movhi	r2,129
  80ec00:	109f3e04 	addi	r2,r2,31992
  80ec04:	10c00005 	stb	r3,0(r2)
  80ec08:	e0bffb17 	ldw	r2,-20(fp)
  80ec0c:	e0bff715 	stw	r2,-36(fp)
  80ec10:	e0bff717 	ldw	r2,-36(fp)
  80ec14:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
  80ec18:	0808d300 	call	808d30 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ec1c:	0005303a 	rdctl	r2,status
  80ec20:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ec24:	e0fff617 	ldw	r3,-40(fp)
  80ec28:	00bfff84 	movi	r2,-2
  80ec2c:	1884703a 	and	r2,r3,r2
  80ec30:	1001703a 	wrctl	status,r2
  
  return context;
  80ec34:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
  80ec38:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
  80ec3c:	00802074 	movhi	r2,129
  80ec40:	109f3e04 	addi	r2,r2,31992
  80ec44:	10800003 	ldbu	r2,0(r2)
  80ec48:	10803fcc 	andi	r2,r2,255
  80ec4c:	1005003a 	cmpeq	r2,r2,zero
  80ec50:	1000081e 	bne	r2,zero,80ec74 <OSTaskDel+0x2ec>
        OSLockNesting--;
  80ec54:	00802074 	movhi	r2,129
  80ec58:	109f3e04 	addi	r2,r2,31992
  80ec5c:	10800003 	ldbu	r2,0(r2)
  80ec60:	10bfffc4 	addi	r2,r2,-1
  80ec64:	1007883a 	mov	r3,r2
  80ec68:	00802074 	movhi	r2,129
  80ec6c:	109f3e04 	addi	r2,r2,31992
  80ec70:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
  80ec74:	e13ffc17 	ldw	r4,-16(fp)
  80ec78:	08139480 	call	813948 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
  80ec7c:	00802074 	movhi	r2,129
  80ec80:	109f4644 	addi	r2,r2,32025
  80ec84:	10800003 	ldbu	r2,0(r2)
  80ec88:	10bfffc4 	addi	r2,r2,-1
  80ec8c:	1007883a 	mov	r3,r2
  80ec90:	00802074 	movhi	r2,129
  80ec94:	109f4644 	addi	r2,r2,32025
  80ec98:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
  80ec9c:	e0bffe03 	ldbu	r2,-8(fp)
  80eca0:	00c020b4 	movhi	r3,130
  80eca4:	18fbd304 	addi	r3,r3,-4276
  80eca8:	1085883a 	add	r2,r2,r2
  80ecac:	1085883a 	add	r2,r2,r2
  80ecb0:	10c5883a 	add	r2,r2,r3
  80ecb4:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
  80ecb8:	e0bffc17 	ldw	r2,-16(fp)
  80ecbc:	10800617 	ldw	r2,24(r2)
  80ecc0:	1004c03a 	cmpne	r2,r2,zero
  80ecc4:	1000091e 	bne	r2,zero,80ecec <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
  80ecc8:	e0bffc17 	ldw	r2,-16(fp)
  80eccc:	10800517 	ldw	r2,20(r2)
  80ecd0:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
  80ecd4:	e0bffc17 	ldw	r2,-16(fp)
  80ecd8:	10c00517 	ldw	r3,20(r2)
  80ecdc:	00802074 	movhi	r2,129
  80ece0:	109f4104 	addi	r2,r2,32004
  80ece4:	10c00015 	stw	r3,0(r2)
  80ece8:	00000a06 	br	80ed14 <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
  80ecec:	e0bffc17 	ldw	r2,-16(fp)
  80ecf0:	10c00617 	ldw	r3,24(r2)
  80ecf4:	e0bffc17 	ldw	r2,-16(fp)
  80ecf8:	10800517 	ldw	r2,20(r2)
  80ecfc:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
  80ed00:	e0bffc17 	ldw	r2,-16(fp)
  80ed04:	10c00517 	ldw	r3,20(r2)
  80ed08:	e0bffc17 	ldw	r2,-16(fp)
  80ed0c:	10800617 	ldw	r2,24(r2)
  80ed10:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
  80ed14:	00802074 	movhi	r2,129
  80ed18:	109f4504 	addi	r2,r2,32020
  80ed1c:	10c00017 	ldw	r3,0(r2)
  80ed20:	e0bffc17 	ldw	r2,-16(fp)
  80ed24:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
  80ed28:	00c02074 	movhi	r3,129
  80ed2c:	18df4504 	addi	r3,r3,32020
  80ed30:	e0bffc17 	ldw	r2,-16(fp)
  80ed34:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
  80ed38:	e0fffc17 	ldw	r3,-16(fp)
  80ed3c:	00800fc4 	movi	r2,63
  80ed40:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  80ed44:	e0bffc17 	ldw	r2,-16(fp)
  80ed48:	10001345 	stb	zero,77(r2)
  80ed4c:	e0bffb17 	ldw	r2,-20(fp)
  80ed50:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ed54:	e0bff517 	ldw	r2,-44(fp)
  80ed58:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  80ed5c:	00802074 	movhi	r2,129
  80ed60:	109f3e44 	addi	r2,r2,31993
  80ed64:	10800003 	ldbu	r2,0(r2)
  80ed68:	10803fcc 	andi	r2,r2,255
  80ed6c:	10800058 	cmpnei	r2,r2,1
  80ed70:	1000011e 	bne	r2,zero,80ed78 <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
  80ed74:	080978c0 	call	80978c <OS_Sched>
    }
    return (OS_ERR_NONE);
  80ed78:	e03fff15 	stw	zero,-4(fp)
  80ed7c:	e0bfff17 	ldw	r2,-4(fp)
}
  80ed80:	e037883a 	mov	sp,fp
  80ed84:	dfc00117 	ldw	ra,4(sp)
  80ed88:	df000017 	ldw	fp,0(sp)
  80ed8c:	dec00204 	addi	sp,sp,8
  80ed90:	f800283a 	ret

0080ed94 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
  80ed94:	defff404 	addi	sp,sp,-48
  80ed98:	df000b15 	stw	fp,44(sp)
  80ed9c:	df000b04 	addi	fp,sp,44
  80eda0:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80eda4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
  80eda8:	e0bffe03 	ldbu	r2,-8(fp)
  80edac:	10800518 	cmpnei	r2,r2,20
  80edb0:	1000031e 	bne	r2,zero,80edc0 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
  80edb4:	00800f84 	movi	r2,62
  80edb8:	e0bfff15 	stw	r2,-4(fp)
  80edbc:	00004c06 	br	80eef0 <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  80edc0:	e0bffe03 	ldbu	r2,-8(fp)
  80edc4:	10800530 	cmpltui	r2,r2,20
  80edc8:	1000061e 	bne	r2,zero,80ede4 <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
  80edcc:	e0bffe03 	ldbu	r2,-8(fp)
  80edd0:	10803fe0 	cmpeqi	r2,r2,255
  80edd4:	1000031e 	bne	r2,zero,80ede4 <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
  80edd8:	00800a84 	movi	r2,42
  80eddc:	e0bfff15 	stw	r2,-4(fp)
  80ede0:	00004306 	br	80eef0 <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
  80ede4:	e0bffe03 	ldbu	r2,-8(fp)
  80ede8:	10803fd8 	cmpnei	r2,r2,255
  80edec:	1000141e 	bne	r2,zero,80ee40 <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80edf0:	0005303a 	rdctl	r2,status
  80edf4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80edf8:	e0fffa17 	ldw	r3,-24(fp)
  80edfc:	00bfff84 	movi	r2,-2
  80ee00:	1884703a 	and	r2,r3,r2
  80ee04:	1001703a 	wrctl	status,r2
  
  return context;
  80ee08:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
  80ee0c:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
  80ee10:	00802074 	movhi	r2,129
  80ee14:	109f4d04 	addi	r2,r2,32052
  80ee18:	10800017 	ldw	r2,0(r2)
  80ee1c:	10800dc3 	ldbu	r2,55(r2)
  80ee20:	e0bffd05 	stb	r2,-12(fp)
  80ee24:	e0bffb17 	ldw	r2,-20(fp)
  80ee28:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ee2c:	e0bff917 	ldw	r2,-28(fp)
  80ee30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
  80ee34:	e0bffd03 	ldbu	r2,-12(fp)
  80ee38:	e0bfff15 	stw	r2,-4(fp)
  80ee3c:	00002c06 	br	80eef0 <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ee40:	0005303a 	rdctl	r2,status
  80ee44:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ee48:	e0fff817 	ldw	r3,-32(fp)
  80ee4c:	00bfff84 	movi	r2,-2
  80ee50:	1884703a 	and	r2,r3,r2
  80ee54:	1001703a 	wrctl	status,r2
  
  return context;
  80ee58:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  80ee5c:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
  80ee60:	e0bffe03 	ldbu	r2,-8(fp)
  80ee64:	00c020b4 	movhi	r3,130
  80ee68:	18fbd304 	addi	r3,r3,-4276
  80ee6c:	1085883a 	add	r2,r2,r2
  80ee70:	1085883a 	add	r2,r2,r2
  80ee74:	10c5883a 	add	r2,r2,r3
  80ee78:	10800017 	ldw	r2,0(r2)
  80ee7c:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
  80ee80:	e0bffc17 	ldw	r2,-16(fp)
  80ee84:	1004c03a 	cmpne	r2,r2,zero
  80ee88:	1000071e 	bne	r2,zero,80eea8 <OSTaskDelReq+0x114>
  80ee8c:	e0bffb17 	ldw	r2,-20(fp)
  80ee90:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ee94:	e0bff717 	ldw	r2,-36(fp)
  80ee98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
  80ee9c:	008010c4 	movi	r2,67
  80eea0:	e0bfff15 	stw	r2,-4(fp)
  80eea4:	00001206 	br	80eef0 <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
  80eea8:	e0bffc17 	ldw	r2,-16(fp)
  80eeac:	10800058 	cmpnei	r2,r2,1
  80eeb0:	1000071e 	bne	r2,zero,80eed0 <OSTaskDelReq+0x13c>
  80eeb4:	e0bffb17 	ldw	r2,-20(fp)
  80eeb8:	e0bff615 	stw	r2,-40(fp)
  80eebc:	e0bff617 	ldw	r2,-40(fp)
  80eec0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  80eec4:	00800f44 	movi	r2,61
  80eec8:	e0bfff15 	stw	r2,-4(fp)
  80eecc:	00000806 	br	80eef0 <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
  80eed0:	e0fffc17 	ldw	r3,-16(fp)
  80eed4:	00800fc4 	movi	r2,63
  80eed8:	18800dc5 	stb	r2,55(r3)
  80eedc:	e0bffb17 	ldw	r2,-20(fp)
  80eee0:	e0bff515 	stw	r2,-44(fp)
  80eee4:	e0bff517 	ldw	r2,-44(fp)
  80eee8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80eeec:	e03fff15 	stw	zero,-4(fp)
  80eef0:	e0bfff17 	ldw	r2,-4(fp)
}
  80eef4:	e037883a 	mov	sp,fp
  80eef8:	df000017 	ldw	fp,0(sp)
  80eefc:	dec00104 	addi	sp,sp,4
  80ef00:	f800283a 	ret

0080ef04 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
  80ef04:	defff304 	addi	sp,sp,-52
  80ef08:	dfc00c15 	stw	ra,48(sp)
  80ef0c:	df000b15 	stw	fp,44(sp)
  80ef10:	df000b04 	addi	fp,sp,44
  80ef14:	e17ffd15 	stw	r5,-12(fp)
  80ef18:	e1bffe15 	stw	r6,-8(fp)
  80ef1c:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
  80ef20:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
  80ef24:	e0bffe17 	ldw	r2,-8(fp)
  80ef28:	1004c03a 	cmpne	r2,r2,zero
  80ef2c:	1000021e 	bne	r2,zero,80ef38 <OSTaskNameGet+0x34>
        return (0);
  80ef30:	e03fff15 	stw	zero,-4(fp)
  80ef34:	00005b06 	br	80f0a4 <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
  80ef38:	e0bffc03 	ldbu	r2,-16(fp)
  80ef3c:	10800570 	cmpltui	r2,r2,21
  80ef40:	1000081e 	bne	r2,zero,80ef64 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
  80ef44:	e0bffc03 	ldbu	r2,-16(fp)
  80ef48:	10803fe0 	cmpeqi	r2,r2,255
  80ef4c:	1000051e 	bne	r2,zero,80ef64 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
  80ef50:	e0fffe17 	ldw	r3,-8(fp)
  80ef54:	00800a84 	movi	r2,42
  80ef58:	18800005 	stb	r2,0(r3)
            return (0);
  80ef5c:	e03fff15 	stw	zero,-4(fp)
  80ef60:	00005006 	br	80f0a4 <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
  80ef64:	e0bffd17 	ldw	r2,-12(fp)
  80ef68:	1004c03a 	cmpne	r2,r2,zero
  80ef6c:	1000051e 	bne	r2,zero,80ef84 <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
  80ef70:	e0fffe17 	ldw	r3,-8(fp)
  80ef74:	00800304 	movi	r2,12
  80ef78:	18800005 	stb	r2,0(r3)
        return (0);
  80ef7c:	e03fff15 	stw	zero,-4(fp)
  80ef80:	00004806 	br	80f0a4 <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
  80ef84:	00802074 	movhi	r2,129
  80ef88:	109f4c04 	addi	r2,r2,32048
  80ef8c:	10800003 	ldbu	r2,0(r2)
  80ef90:	10803fcc 	andi	r2,r2,255
  80ef94:	1005003a 	cmpeq	r2,r2,zero
  80ef98:	1000051e 	bne	r2,zero,80efb0 <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
  80ef9c:	e0fffe17 	ldw	r3,-8(fp)
  80efa0:	00800444 	movi	r2,17
  80efa4:	18800005 	stb	r2,0(r3)
        return (0);
  80efa8:	e03fff15 	stw	zero,-4(fp)
  80efac:	00003d06 	br	80f0a4 <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80efb0:	0005303a 	rdctl	r2,status
  80efb4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80efb8:	e0fff817 	ldw	r3,-32(fp)
  80efbc:	00bfff84 	movi	r2,-2
  80efc0:	1884703a 	and	r2,r3,r2
  80efc4:	1001703a 	wrctl	status,r2
  
  return context;
  80efc8:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  80efcc:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
  80efd0:	e0bffc03 	ldbu	r2,-16(fp)
  80efd4:	10803fd8 	cmpnei	r2,r2,255
  80efd8:	1000051e 	bne	r2,zero,80eff0 <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
  80efdc:	00802074 	movhi	r2,129
  80efe0:	109f4d04 	addi	r2,r2,32052
  80efe4:	10800017 	ldw	r2,0(r2)
  80efe8:	10800c83 	ldbu	r2,50(r2)
  80efec:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  80eff0:	e0bffc03 	ldbu	r2,-16(fp)
  80eff4:	00c020b4 	movhi	r3,130
  80eff8:	18fbd304 	addi	r3,r3,-4276
  80effc:	1085883a 	add	r2,r2,r2
  80f000:	1085883a 	add	r2,r2,r2
  80f004:	10c5883a 	add	r2,r2,r3
  80f008:	10800017 	ldw	r2,0(r2)
  80f00c:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
  80f010:	e0bffb17 	ldw	r2,-20(fp)
  80f014:	1004c03a 	cmpne	r2,r2,zero
  80f018:	1000091e 	bne	r2,zero,80f040 <OSTaskNameGet+0x13c>
  80f01c:	e0bff917 	ldw	r2,-28(fp)
  80f020:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f024:	e0bff717 	ldw	r2,-36(fp)
  80f028:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
  80f02c:	e0fffe17 	ldw	r3,-8(fp)
  80f030:	008010c4 	movi	r2,67
  80f034:	18800005 	stb	r2,0(r3)
        return (0);
  80f038:	e03fff15 	stw	zero,-4(fp)
  80f03c:	00001906 	br	80f0a4 <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
  80f040:	e0bffb17 	ldw	r2,-20(fp)
  80f044:	10800058 	cmpnei	r2,r2,1
  80f048:	1000091e 	bne	r2,zero,80f070 <OSTaskNameGet+0x16c>
  80f04c:	e0bff917 	ldw	r2,-28(fp)
  80f050:	e0bff615 	stw	r2,-40(fp)
  80f054:	e0bff617 	ldw	r2,-40(fp)
  80f058:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
  80f05c:	e0fffe17 	ldw	r3,-8(fp)
  80f060:	008010c4 	movi	r2,67
  80f064:	18800005 	stb	r2,0(r3)
        return (0);
  80f068:	e03fff15 	stw	zero,-4(fp)
  80f06c:	00000d06 	br	80f0a4 <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
  80f070:	e0bffb17 	ldw	r2,-20(fp)
  80f074:	11401304 	addi	r5,r2,76
  80f078:	e13ffd17 	ldw	r4,-12(fp)
  80f07c:	08098d00 	call	8098d0 <OS_StrCopy>
  80f080:	e0bffa05 	stb	r2,-24(fp)
  80f084:	e0bff917 	ldw	r2,-28(fp)
  80f088:	e0bff515 	stw	r2,-44(fp)
  80f08c:	e0bff517 	ldw	r2,-44(fp)
  80f090:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80f094:	e0bffe17 	ldw	r2,-8(fp)
  80f098:	10000005 	stb	zero,0(r2)
    return (len);
  80f09c:	e0bffa03 	ldbu	r2,-24(fp)
  80f0a0:	e0bfff15 	stw	r2,-4(fp)
  80f0a4:	e0bfff17 	ldw	r2,-4(fp)
}
  80f0a8:	e037883a 	mov	sp,fp
  80f0ac:	dfc00117 	ldw	ra,4(sp)
  80f0b0:	df000017 	ldw	fp,0(sp)
  80f0b4:	dec00204 	addi	sp,sp,8
  80f0b8:	f800283a 	ret

0080f0bc <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
  80f0bc:	defff304 	addi	sp,sp,-52
  80f0c0:	dfc00c15 	stw	ra,48(sp)
  80f0c4:	df000b15 	stw	fp,44(sp)
  80f0c8:	df000b04 	addi	fp,sp,44
  80f0cc:	e17ffe15 	stw	r5,-8(fp)
  80f0d0:	e1bfff15 	stw	r6,-4(fp)
  80f0d4:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  80f0d8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  80f0dc:	e0bfff17 	ldw	r2,-4(fp)
  80f0e0:	1005003a 	cmpeq	r2,r2,zero
  80f0e4:	1000611e 	bne	r2,zero,80f26c <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
  80f0e8:	e0bffd03 	ldbu	r2,-12(fp)
  80f0ec:	10800570 	cmpltui	r2,r2,21
  80f0f0:	1000071e 	bne	r2,zero,80f110 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
  80f0f4:	e0bffd03 	ldbu	r2,-12(fp)
  80f0f8:	10803fe0 	cmpeqi	r2,r2,255
  80f0fc:	1000041e 	bne	r2,zero,80f110 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
  80f100:	e0ffff17 	ldw	r3,-4(fp)
  80f104:	00800a84 	movi	r2,42
  80f108:	18800005 	stb	r2,0(r3)
            return;
  80f10c:	00005706 	br	80f26c <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
  80f110:	e0bffe17 	ldw	r2,-8(fp)
  80f114:	1004c03a 	cmpne	r2,r2,zero
  80f118:	1000041e 	bne	r2,zero,80f12c <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
  80f11c:	e0ffff17 	ldw	r3,-4(fp)
  80f120:	00800304 	movi	r2,12
  80f124:	18800005 	stb	r2,0(r3)
        return;
  80f128:	00005006 	br	80f26c <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
  80f12c:	00802074 	movhi	r2,129
  80f130:	109f4c04 	addi	r2,r2,32048
  80f134:	10800003 	ldbu	r2,0(r2)
  80f138:	10803fcc 	andi	r2,r2,255
  80f13c:	1005003a 	cmpeq	r2,r2,zero
  80f140:	1000041e 	bne	r2,zero,80f154 <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
  80f144:	e0ffff17 	ldw	r3,-4(fp)
  80f148:	00800484 	movi	r2,18
  80f14c:	18800005 	stb	r2,0(r3)
        return;
  80f150:	00004606 	br	80f26c <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f154:	0005303a 	rdctl	r2,status
  80f158:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f15c:	e0fff917 	ldw	r3,-28(fp)
  80f160:	00bfff84 	movi	r2,-2
  80f164:	1884703a 	and	r2,r3,r2
  80f168:	1001703a 	wrctl	status,r2
  
  return context;
  80f16c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80f170:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
  80f174:	e0bffd03 	ldbu	r2,-12(fp)
  80f178:	10803fd8 	cmpnei	r2,r2,255
  80f17c:	1000051e 	bne	r2,zero,80f194 <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
  80f180:	00802074 	movhi	r2,129
  80f184:	109f4d04 	addi	r2,r2,32052
  80f188:	10800017 	ldw	r2,0(r2)
  80f18c:	10800c83 	ldbu	r2,50(r2)
  80f190:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  80f194:	e0bffd03 	ldbu	r2,-12(fp)
  80f198:	00c020b4 	movhi	r3,130
  80f19c:	18fbd304 	addi	r3,r3,-4276
  80f1a0:	1085883a 	add	r2,r2,r2
  80f1a4:	1085883a 	add	r2,r2,r2
  80f1a8:	10c5883a 	add	r2,r2,r3
  80f1ac:	10800017 	ldw	r2,0(r2)
  80f1b0:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
  80f1b4:	e0bffb17 	ldw	r2,-20(fp)
  80f1b8:	1004c03a 	cmpne	r2,r2,zero
  80f1bc:	1000081e 	bne	r2,zero,80f1e0 <OSTaskNameSet+0x124>
  80f1c0:	e0bffa17 	ldw	r2,-24(fp)
  80f1c4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f1c8:	e0bff817 	ldw	r2,-32(fp)
  80f1cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
  80f1d0:	e0ffff17 	ldw	r3,-4(fp)
  80f1d4:	008010c4 	movi	r2,67
  80f1d8:	18800005 	stb	r2,0(r3)
        return;
  80f1dc:	00002306 	br	80f26c <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
  80f1e0:	e0bffb17 	ldw	r2,-20(fp)
  80f1e4:	10800058 	cmpnei	r2,r2,1
  80f1e8:	1000081e 	bne	r2,zero,80f20c <OSTaskNameSet+0x150>
  80f1ec:	e0bffa17 	ldw	r2,-24(fp)
  80f1f0:	e0bff715 	stw	r2,-36(fp)
  80f1f4:	e0bff717 	ldw	r2,-36(fp)
  80f1f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
  80f1fc:	e0ffff17 	ldw	r3,-4(fp)
  80f200:	008010c4 	movi	r2,67
  80f204:	18800005 	stb	r2,0(r3)
        return;
  80f208:	00001806 	br	80f26c <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
  80f20c:	e13ffe17 	ldw	r4,-8(fp)
  80f210:	08099500 	call	809950 <OS_StrLen>
  80f214:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
  80f218:	e0bffc03 	ldbu	r2,-16(fp)
  80f21c:	10800830 	cmpltui	r2,r2,32
  80f220:	1000081e 	bne	r2,zero,80f244 <OSTaskNameSet+0x188>
  80f224:	e0bffa17 	ldw	r2,-24(fp)
  80f228:	e0bff615 	stw	r2,-40(fp)
  80f22c:	e0bff617 	ldw	r2,-40(fp)
  80f230:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
  80f234:	e0ffff17 	ldw	r3,-4(fp)
  80f238:	00801044 	movi	r2,65
  80f23c:	18800005 	stb	r2,0(r3)
        return;
  80f240:	00000a06 	br	80f26c <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
  80f244:	e0bffb17 	ldw	r2,-20(fp)
  80f248:	11001304 	addi	r4,r2,76
  80f24c:	e17ffe17 	ldw	r5,-8(fp)
  80f250:	08098d00 	call	8098d0 <OS_StrCopy>
  80f254:	e0bffa17 	ldw	r2,-24(fp)
  80f258:	e0bff515 	stw	r2,-44(fp)
  80f25c:	e0bff517 	ldw	r2,-44(fp)
  80f260:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80f264:	e0bfff17 	ldw	r2,-4(fp)
  80f268:	10000005 	stb	zero,0(r2)
}
  80f26c:	e037883a 	mov	sp,fp
  80f270:	dfc00117 	ldw	ra,4(sp)
  80f274:	df000017 	ldw	fp,0(sp)
  80f278:	dec00204 	addi	sp,sp,8
  80f27c:	f800283a 	ret

0080f280 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
  80f280:	defff304 	addi	sp,sp,-52
  80f284:	dfc00c15 	stw	ra,48(sp)
  80f288:	df000b15 	stw	fp,44(sp)
  80f28c:	df000b04 	addi	fp,sp,44
  80f290:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  80f294:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
  80f298:	e0bffe03 	ldbu	r2,-8(fp)
  80f29c:	10800530 	cmpltui	r2,r2,20
  80f2a0:	1000031e 	bne	r2,zero,80f2b0 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  80f2a4:	00800a84 	movi	r2,42
  80f2a8:	e0bfff15 	stw	r2,-4(fp)
  80f2ac:	00007406 	br	80f480 <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f2b0:	0005303a 	rdctl	r2,status
  80f2b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f2b8:	e0fffb17 	ldw	r3,-20(fp)
  80f2bc:	00bfff84 	movi	r2,-2
  80f2c0:	1884703a 	and	r2,r3,r2
  80f2c4:	1001703a 	wrctl	status,r2
  
  return context;
  80f2c8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80f2cc:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
  80f2d0:	e0bffe03 	ldbu	r2,-8(fp)
  80f2d4:	00c020b4 	movhi	r3,130
  80f2d8:	18fbd304 	addi	r3,r3,-4276
  80f2dc:	1085883a 	add	r2,r2,r2
  80f2e0:	1085883a 	add	r2,r2,r2
  80f2e4:	10c5883a 	add	r2,r2,r3
  80f2e8:	10800017 	ldw	r2,0(r2)
  80f2ec:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
  80f2f0:	e0bffd17 	ldw	r2,-12(fp)
  80f2f4:	1004c03a 	cmpne	r2,r2,zero
  80f2f8:	1000071e 	bne	r2,zero,80f318 <OSTaskResume+0x98>
  80f2fc:	e0bffc17 	ldw	r2,-16(fp)
  80f300:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f304:	e0bffa17 	ldw	r2,-24(fp)
  80f308:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
  80f30c:	00801184 	movi	r2,70
  80f310:	e0bfff15 	stw	r2,-4(fp)
  80f314:	00005a06 	br	80f480 <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
  80f318:	e0bffd17 	ldw	r2,-12(fp)
  80f31c:	10800058 	cmpnei	r2,r2,1
  80f320:	1000071e 	bne	r2,zero,80f340 <OSTaskResume+0xc0>
  80f324:	e0bffc17 	ldw	r2,-16(fp)
  80f328:	e0bff915 	stw	r2,-28(fp)
  80f32c:	e0bff917 	ldw	r2,-28(fp)
  80f330:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  80f334:	008010c4 	movi	r2,67
  80f338:	e0bfff15 	stw	r2,-4(fp)
  80f33c:	00005006 	br	80f480 <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
  80f340:	e0bffd17 	ldw	r2,-12(fp)
  80f344:	10800c03 	ldbu	r2,48(r2)
  80f348:	10803fcc 	andi	r2,r2,255
  80f34c:	1080020c 	andi	r2,r2,8
  80f350:	1005003a 	cmpeq	r2,r2,zero
  80f354:	1000441e 	bne	r2,zero,80f468 <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
  80f358:	e0bffd17 	ldw	r2,-12(fp)
  80f35c:	10c00c03 	ldbu	r3,48(r2)
  80f360:	00bffdc4 	movi	r2,-9
  80f364:	1884703a 	and	r2,r3,r2
  80f368:	1007883a 	mov	r3,r2
  80f36c:	e0bffd17 	ldw	r2,-12(fp)
  80f370:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
  80f374:	e0bffd17 	ldw	r2,-12(fp)
  80f378:	10800c03 	ldbu	r2,48(r2)
  80f37c:	10803fcc 	andi	r2,r2,255
  80f380:	1004c03a 	cmpne	r2,r2,zero
  80f384:	1000321e 	bne	r2,zero,80f450 <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
  80f388:	e0bffd17 	ldw	r2,-12(fp)
  80f38c:	10800b8b 	ldhu	r2,46(r2)
  80f390:	10bfffcc 	andi	r2,r2,65535
  80f394:	1004c03a 	cmpne	r2,r2,zero
  80f398:	1000281e 	bne	r2,zero,80f43c <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
  80f39c:	e0bffd17 	ldw	r2,-12(fp)
  80f3a0:	10c00d83 	ldbu	r3,54(r2)
  80f3a4:	00802074 	movhi	r2,129
  80f3a8:	109f4a04 	addi	r2,r2,32040
  80f3ac:	10800003 	ldbu	r2,0(r2)
  80f3b0:	1884b03a 	or	r2,r3,r2
  80f3b4:	1007883a 	mov	r3,r2
  80f3b8:	00802074 	movhi	r2,129
  80f3bc:	109f4a04 	addi	r2,r2,32040
  80f3c0:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  80f3c4:	e0bffd17 	ldw	r2,-12(fp)
  80f3c8:	10800d03 	ldbu	r2,52(r2)
  80f3cc:	11003fcc 	andi	r4,r2,255
  80f3d0:	e0bffd17 	ldw	r2,-12(fp)
  80f3d4:	10800d03 	ldbu	r2,52(r2)
  80f3d8:	10c03fcc 	andi	r3,r2,255
  80f3dc:	00802074 	movhi	r2,129
  80f3e0:	109f4a44 	addi	r2,r2,32041
  80f3e4:	10c5883a 	add	r2,r2,r3
  80f3e8:	10c00003 	ldbu	r3,0(r2)
  80f3ec:	e0bffd17 	ldw	r2,-12(fp)
  80f3f0:	10800d43 	ldbu	r2,53(r2)
  80f3f4:	1884b03a 	or	r2,r3,r2
  80f3f8:	1007883a 	mov	r3,r2
  80f3fc:	00802074 	movhi	r2,129
  80f400:	109f4a44 	addi	r2,r2,32041
  80f404:	1105883a 	add	r2,r2,r4
  80f408:	10c00005 	stb	r3,0(r2)
  80f40c:	e0bffc17 	ldw	r2,-16(fp)
  80f410:	e0bff815 	stw	r2,-32(fp)
  80f414:	e0bff817 	ldw	r2,-32(fp)
  80f418:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
  80f41c:	00802074 	movhi	r2,129
  80f420:	109f3e44 	addi	r2,r2,31993
  80f424:	10800003 	ldbu	r2,0(r2)
  80f428:	10803fcc 	andi	r2,r2,255
  80f42c:	10800058 	cmpnei	r2,r2,1
  80f430:	10000b1e 	bne	r2,zero,80f460 <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
  80f434:	080978c0 	call	80978c <OS_Sched>
  80f438:	00000906 	br	80f460 <OSTaskResume+0x1e0>
  80f43c:	e0bffc17 	ldw	r2,-16(fp)
  80f440:	e0bff715 	stw	r2,-36(fp)
  80f444:	e0bff717 	ldw	r2,-36(fp)
  80f448:	1001703a 	wrctl	status,r2
  80f44c:	00000406 	br	80f460 <OSTaskResume+0x1e0>
  80f450:	e0bffc17 	ldw	r2,-16(fp)
  80f454:	e0bff615 	stw	r2,-40(fp)
  80f458:	e0bff617 	ldw	r2,-40(fp)
  80f45c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
  80f460:	e03fff15 	stw	zero,-4(fp)
  80f464:	00000606 	br	80f480 <OSTaskResume+0x200>
  80f468:	e0bffc17 	ldw	r2,-16(fp)
  80f46c:	e0bff515 	stw	r2,-44(fp)
  80f470:	e0bff517 	ldw	r2,-44(fp)
  80f474:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
  80f478:	00801104 	movi	r2,68
  80f47c:	e0bfff15 	stw	r2,-4(fp)
  80f480:	e0bfff17 	ldw	r2,-4(fp)
}
  80f484:	e037883a 	mov	sp,fp
  80f488:	dfc00117 	ldw	ra,4(sp)
  80f48c:	df000017 	ldw	fp,0(sp)
  80f490:	dec00204 	addi	sp,sp,8
  80f494:	f800283a 	ret

0080f498 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
  80f498:	defff204 	addi	sp,sp,-56
  80f49c:	df000d15 	stw	fp,52(sp)
  80f4a0:	df000d04 	addi	fp,sp,52
  80f4a4:	e17ffe15 	stw	r5,-8(fp)
  80f4a8:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  80f4ac:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
  80f4b0:	e0bffd03 	ldbu	r2,-12(fp)
  80f4b4:	10800570 	cmpltui	r2,r2,21
  80f4b8:	1000061e 	bne	r2,zero,80f4d4 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
  80f4bc:	e0bffd03 	ldbu	r2,-12(fp)
  80f4c0:	10803fe0 	cmpeqi	r2,r2,255
  80f4c4:	1000031e 	bne	r2,zero,80f4d4 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
  80f4c8:	00800a84 	movi	r2,42
  80f4cc:	e0bfff15 	stw	r2,-4(fp)
  80f4d0:	00006b06 	br	80f680 <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
  80f4d4:	e0bffe17 	ldw	r2,-8(fp)
  80f4d8:	1004c03a 	cmpne	r2,r2,zero
  80f4dc:	1000031e 	bne	r2,zero,80f4ec <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
  80f4e0:	00800244 	movi	r2,9
  80f4e4:	e0bfff15 	stw	r2,-4(fp)
  80f4e8:	00006506 	br	80f680 <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
  80f4ec:	e0bffe17 	ldw	r2,-8(fp)
  80f4f0:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
  80f4f4:	e0bffe17 	ldw	r2,-8(fp)
  80f4f8:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f4fc:	0005303a 	rdctl	r2,status
  80f500:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f504:	e0fff717 	ldw	r3,-36(fp)
  80f508:	00bfff84 	movi	r2,-2
  80f50c:	1884703a 	and	r2,r3,r2
  80f510:	1001703a 	wrctl	status,r2
  
  return context;
  80f514:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  80f518:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
  80f51c:	e0bffd03 	ldbu	r2,-12(fp)
  80f520:	10803fd8 	cmpnei	r2,r2,255
  80f524:	1000051e 	bne	r2,zero,80f53c <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
  80f528:	00802074 	movhi	r2,129
  80f52c:	109f4d04 	addi	r2,r2,32052
  80f530:	10800017 	ldw	r2,0(r2)
  80f534:	10800c83 	ldbu	r2,50(r2)
  80f538:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  80f53c:	e0bffd03 	ldbu	r2,-12(fp)
  80f540:	00c020b4 	movhi	r3,130
  80f544:	18fbd304 	addi	r3,r3,-4276
  80f548:	1085883a 	add	r2,r2,r2
  80f54c:	1085883a 	add	r2,r2,r2
  80f550:	10c5883a 	add	r2,r2,r3
  80f554:	10800017 	ldw	r2,0(r2)
  80f558:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
  80f55c:	e0bffc17 	ldw	r2,-16(fp)
  80f560:	1004c03a 	cmpne	r2,r2,zero
  80f564:	1000071e 	bne	r2,zero,80f584 <OSTaskStkChk+0xec>
  80f568:	e0bff817 	ldw	r2,-32(fp)
  80f56c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f570:	e0bff617 	ldw	r2,-40(fp)
  80f574:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  80f578:	008010c4 	movi	r2,67
  80f57c:	e0bfff15 	stw	r2,-4(fp)
  80f580:	00003f06 	br	80f680 <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
  80f584:	e0bffc17 	ldw	r2,-16(fp)
  80f588:	10800058 	cmpnei	r2,r2,1
  80f58c:	1000071e 	bne	r2,zero,80f5ac <OSTaskStkChk+0x114>
  80f590:	e0bff817 	ldw	r2,-32(fp)
  80f594:	e0bff515 	stw	r2,-44(fp)
  80f598:	e0bff517 	ldw	r2,-44(fp)
  80f59c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  80f5a0:	008010c4 	movi	r2,67
  80f5a4:	e0bfff15 	stw	r2,-4(fp)
  80f5a8:	00003506 	br	80f680 <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
  80f5ac:	e0bffc17 	ldw	r2,-16(fp)
  80f5b0:	1080040b 	ldhu	r2,16(r2)
  80f5b4:	10bfffcc 	andi	r2,r2,65535
  80f5b8:	1080004c 	andi	r2,r2,1
  80f5bc:	1004c03a 	cmpne	r2,r2,zero
  80f5c0:	1000071e 	bne	r2,zero,80f5e0 <OSTaskStkChk+0x148>
  80f5c4:	e0bff817 	ldw	r2,-32(fp)
  80f5c8:	e0bff415 	stw	r2,-48(fp)
  80f5cc:	e0bff417 	ldw	r2,-48(fp)
  80f5d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
  80f5d4:	00801144 	movi	r2,69
  80f5d8:	e0bfff15 	stw	r2,-4(fp)
  80f5dc:	00002806 	br	80f680 <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
  80f5e0:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
  80f5e4:	e0bffc17 	ldw	r2,-16(fp)
  80f5e8:	10800317 	ldw	r2,12(r2)
  80f5ec:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
  80f5f0:	e0bffc17 	ldw	r2,-16(fp)
  80f5f4:	10800217 	ldw	r2,8(r2)
  80f5f8:	e0bffb15 	stw	r2,-20(fp)
  80f5fc:	e0bff817 	ldw	r2,-32(fp)
  80f600:	e0bff315 	stw	r2,-52(fp)
  80f604:	e0bff317 	ldw	r2,-52(fp)
  80f608:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  80f60c:	00000306 	br	80f61c <OSTaskStkChk+0x184>
        nfree++;
  80f610:	e0bffa17 	ldw	r2,-24(fp)
  80f614:	10800044 	addi	r2,r2,1
  80f618:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  80f61c:	e0bffb17 	ldw	r2,-20(fp)
  80f620:	10800017 	ldw	r2,0(r2)
  80f624:	1005003a 	cmpeq	r2,r2,zero
  80f628:	1007883a 	mov	r3,r2
  80f62c:	e0bffb17 	ldw	r2,-20(fp)
  80f630:	10800104 	addi	r2,r2,4
  80f634:	e0bffb15 	stw	r2,-20(fp)
  80f638:	18803fcc 	andi	r2,r3,255
  80f63c:	1004c03a 	cmpne	r2,r2,zero
  80f640:	103ff31e 	bne	r2,zero,80f610 <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
  80f644:	e0bffa17 	ldw	r2,-24(fp)
  80f648:	1085883a 	add	r2,r2,r2
  80f64c:	1085883a 	add	r2,r2,r2
  80f650:	1007883a 	mov	r3,r2
  80f654:	e0bffe17 	ldw	r2,-8(fp)
  80f658:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
  80f65c:	e0fff917 	ldw	r3,-28(fp)
  80f660:	e0bffa17 	ldw	r2,-24(fp)
  80f664:	1885c83a 	sub	r2,r3,r2
  80f668:	1085883a 	add	r2,r2,r2
  80f66c:	1085883a 	add	r2,r2,r2
  80f670:	1007883a 	mov	r3,r2
  80f674:	e0bffe17 	ldw	r2,-8(fp)
  80f678:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
  80f67c:	e03fff15 	stw	zero,-4(fp)
  80f680:	e0bfff17 	ldw	r2,-4(fp)
}
  80f684:	e037883a 	mov	sp,fp
  80f688:	df000017 	ldw	fp,0(sp)
  80f68c:	dec00104 	addi	sp,sp,4
  80f690:	f800283a 	ret

0080f694 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
  80f694:	defff404 	addi	sp,sp,-48
  80f698:	dfc00b15 	stw	ra,44(sp)
  80f69c:	df000a15 	stw	fp,40(sp)
  80f6a0:	df000a04 	addi	fp,sp,40
  80f6a4:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80f6a8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
  80f6ac:	e0bffe03 	ldbu	r2,-8(fp)
  80f6b0:	10800518 	cmpnei	r2,r2,20
  80f6b4:	1000031e 	bne	r2,zero,80f6c4 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
  80f6b8:	008011c4 	movi	r2,71
  80f6bc:	e0bfff15 	stw	r2,-4(fp)
  80f6c0:	00007906 	br	80f8a8 <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  80f6c4:	e0bffe03 	ldbu	r2,-8(fp)
  80f6c8:	10800530 	cmpltui	r2,r2,20
  80f6cc:	1000061e 	bne	r2,zero,80f6e8 <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
  80f6d0:	e0bffe03 	ldbu	r2,-8(fp)
  80f6d4:	10803fe0 	cmpeqi	r2,r2,255
  80f6d8:	1000031e 	bne	r2,zero,80f6e8 <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
  80f6dc:	00800a84 	movi	r2,42
  80f6e0:	e0bfff15 	stw	r2,-4(fp)
  80f6e4:	00007006 	br	80f8a8 <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f6e8:	0005303a 	rdctl	r2,status
  80f6ec:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f6f0:	e0fff917 	ldw	r3,-28(fp)
  80f6f4:	00bfff84 	movi	r2,-2
  80f6f8:	1884703a 	and	r2,r3,r2
  80f6fc:	1001703a 	wrctl	status,r2
  
  return context;
  80f700:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
  80f704:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
  80f708:	e0bffe03 	ldbu	r2,-8(fp)
  80f70c:	10803fd8 	cmpnei	r2,r2,255
  80f710:	1000081e 	bne	r2,zero,80f734 <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
  80f714:	00802074 	movhi	r2,129
  80f718:	109f4d04 	addi	r2,r2,32052
  80f71c:	10800017 	ldw	r2,0(r2)
  80f720:	10800c83 	ldbu	r2,50(r2)
  80f724:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
  80f728:	00800044 	movi	r2,1
  80f72c:	e0bffd05 	stb	r2,-12(fp)
  80f730:	00000b06 	br	80f760 <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
  80f734:	00802074 	movhi	r2,129
  80f738:	109f4d04 	addi	r2,r2,32052
  80f73c:	10800017 	ldw	r2,0(r2)
  80f740:	10800c83 	ldbu	r2,50(r2)
  80f744:	10c03fcc 	andi	r3,r2,255
  80f748:	e0bffe03 	ldbu	r2,-8(fp)
  80f74c:	1880031e 	bne	r3,r2,80f75c <OSTaskSuspend+0xc8>
        self = OS_TRUE;
  80f750:	00800044 	movi	r2,1
  80f754:	e0bffd05 	stb	r2,-12(fp)
  80f758:	00000106 	br	80f760 <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
  80f75c:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  80f760:	e0bffe03 	ldbu	r2,-8(fp)
  80f764:	00c020b4 	movhi	r3,130
  80f768:	18fbd304 	addi	r3,r3,-4276
  80f76c:	1085883a 	add	r2,r2,r2
  80f770:	1085883a 	add	r2,r2,r2
  80f774:	10c5883a 	add	r2,r2,r3
  80f778:	10800017 	ldw	r2,0(r2)
  80f77c:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
  80f780:	e0bffc17 	ldw	r2,-16(fp)
  80f784:	1004c03a 	cmpne	r2,r2,zero
  80f788:	1000071e 	bne	r2,zero,80f7a8 <OSTaskSuspend+0x114>
  80f78c:	e0bffa17 	ldw	r2,-24(fp)
  80f790:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f794:	e0bff817 	ldw	r2,-32(fp)
  80f798:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
  80f79c:	00801204 	movi	r2,72
  80f7a0:	e0bfff15 	stw	r2,-4(fp)
  80f7a4:	00004006 	br	80f8a8 <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
  80f7a8:	e0bffc17 	ldw	r2,-16(fp)
  80f7ac:	10800058 	cmpnei	r2,r2,1
  80f7b0:	1000071e 	bne	r2,zero,80f7d0 <OSTaskSuspend+0x13c>
  80f7b4:	e0bffa17 	ldw	r2,-24(fp)
  80f7b8:	e0bff715 	stw	r2,-36(fp)
  80f7bc:	e0bff717 	ldw	r2,-36(fp)
  80f7c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  80f7c4:	008010c4 	movi	r2,67
  80f7c8:	e0bfff15 	stw	r2,-4(fp)
  80f7cc:	00003606 	br	80f8a8 <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
  80f7d0:	e0bffc17 	ldw	r2,-16(fp)
  80f7d4:	10800d03 	ldbu	r2,52(r2)
  80f7d8:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
  80f7dc:	e13ffb03 	ldbu	r4,-20(fp)
  80f7e0:	e0fffb03 	ldbu	r3,-20(fp)
  80f7e4:	00802074 	movhi	r2,129
  80f7e8:	109f4a44 	addi	r2,r2,32041
  80f7ec:	10c5883a 	add	r2,r2,r3
  80f7f0:	10800003 	ldbu	r2,0(r2)
  80f7f4:	1007883a 	mov	r3,r2
  80f7f8:	e0bffc17 	ldw	r2,-16(fp)
  80f7fc:	10800d43 	ldbu	r2,53(r2)
  80f800:	0084303a 	nor	r2,zero,r2
  80f804:	1884703a 	and	r2,r3,r2
  80f808:	1007883a 	mov	r3,r2
  80f80c:	00802074 	movhi	r2,129
  80f810:	109f4a44 	addi	r2,r2,32041
  80f814:	1105883a 	add	r2,r2,r4
  80f818:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  80f81c:	e0fffb03 	ldbu	r3,-20(fp)
  80f820:	00802074 	movhi	r2,129
  80f824:	109f4a44 	addi	r2,r2,32041
  80f828:	10c5883a 	add	r2,r2,r3
  80f82c:	10800003 	ldbu	r2,0(r2)
  80f830:	10803fcc 	andi	r2,r2,255
  80f834:	1004c03a 	cmpne	r2,r2,zero
  80f838:	10000c1e 	bne	r2,zero,80f86c <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
  80f83c:	e0bffc17 	ldw	r2,-16(fp)
  80f840:	10800d83 	ldbu	r2,54(r2)
  80f844:	0084303a 	nor	r2,zero,r2
  80f848:	1007883a 	mov	r3,r2
  80f84c:	00802074 	movhi	r2,129
  80f850:	109f4a04 	addi	r2,r2,32040
  80f854:	10800003 	ldbu	r2,0(r2)
  80f858:	1884703a 	and	r2,r3,r2
  80f85c:	1007883a 	mov	r3,r2
  80f860:	00802074 	movhi	r2,129
  80f864:	109f4a04 	addi	r2,r2,32040
  80f868:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
  80f86c:	e0bffc17 	ldw	r2,-16(fp)
  80f870:	10800c03 	ldbu	r2,48(r2)
  80f874:	10800214 	ori	r2,r2,8
  80f878:	1007883a 	mov	r3,r2
  80f87c:	e0bffc17 	ldw	r2,-16(fp)
  80f880:	10c00c05 	stb	r3,48(r2)
  80f884:	e0bffa17 	ldw	r2,-24(fp)
  80f888:	e0bff615 	stw	r2,-40(fp)
  80f88c:	e0bff617 	ldw	r2,-40(fp)
  80f890:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
  80f894:	e0bffd03 	ldbu	r2,-12(fp)
  80f898:	10800058 	cmpnei	r2,r2,1
  80f89c:	1000011e 	bne	r2,zero,80f8a4 <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
  80f8a0:	080978c0 	call	80978c <OS_Sched>
    }
    return (OS_ERR_NONE);
  80f8a4:	e03fff15 	stw	zero,-4(fp)
  80f8a8:	e0bfff17 	ldw	r2,-4(fp)
}
  80f8ac:	e037883a 	mov	sp,fp
  80f8b0:	dfc00117 	ldw	ra,4(sp)
  80f8b4:	df000017 	ldw	fp,0(sp)
  80f8b8:	dec00204 	addi	sp,sp,8
  80f8bc:	f800283a 	ret

0080f8c0 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
  80f8c0:	defff504 	addi	sp,sp,-44
  80f8c4:	dfc00a15 	stw	ra,40(sp)
  80f8c8:	df000915 	stw	fp,36(sp)
  80f8cc:	df000904 	addi	fp,sp,36
  80f8d0:	e17ffe15 	stw	r5,-8(fp)
  80f8d4:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80f8d8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
  80f8dc:	e0bffd03 	ldbu	r2,-12(fp)
  80f8e0:	10800570 	cmpltui	r2,r2,21
  80f8e4:	1000061e 	bne	r2,zero,80f900 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
  80f8e8:	e0bffd03 	ldbu	r2,-12(fp)
  80f8ec:	10803fe0 	cmpeqi	r2,r2,255
  80f8f0:	1000031e 	bne	r2,zero,80f900 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
  80f8f4:	00800a84 	movi	r2,42
  80f8f8:	e0bfff15 	stw	r2,-4(fp)
  80f8fc:	00003b06 	br	80f9ec <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
  80f900:	e0bffe17 	ldw	r2,-8(fp)
  80f904:	1004c03a 	cmpne	r2,r2,zero
  80f908:	1000031e 	bne	r2,zero,80f918 <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
  80f90c:	00800244 	movi	r2,9
  80f910:	e0bfff15 	stw	r2,-4(fp)
  80f914:	00003506 	br	80f9ec <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f918:	0005303a 	rdctl	r2,status
  80f91c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f920:	e0fffa17 	ldw	r3,-24(fp)
  80f924:	00bfff84 	movi	r2,-2
  80f928:	1884703a 	and	r2,r3,r2
  80f92c:	1001703a 	wrctl	status,r2
  
  return context;
  80f930:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80f934:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
  80f938:	e0bffd03 	ldbu	r2,-12(fp)
  80f93c:	10803fd8 	cmpnei	r2,r2,255
  80f940:	1000051e 	bne	r2,zero,80f958 <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
  80f944:	00802074 	movhi	r2,129
  80f948:	109f4d04 	addi	r2,r2,32052
  80f94c:	10800017 	ldw	r2,0(r2)
  80f950:	10800c83 	ldbu	r2,50(r2)
  80f954:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  80f958:	e0bffd03 	ldbu	r2,-12(fp)
  80f95c:	00c020b4 	movhi	r3,130
  80f960:	18fbd304 	addi	r3,r3,-4276
  80f964:	1085883a 	add	r2,r2,r2
  80f968:	1085883a 	add	r2,r2,r2
  80f96c:	10c5883a 	add	r2,r2,r3
  80f970:	10800017 	ldw	r2,0(r2)
  80f974:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
  80f978:	e0bffc17 	ldw	r2,-16(fp)
  80f97c:	1004c03a 	cmpne	r2,r2,zero
  80f980:	1000071e 	bne	r2,zero,80f9a0 <OSTaskQuery+0xe0>
  80f984:	e0bffb17 	ldw	r2,-20(fp)
  80f988:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f98c:	e0bff917 	ldw	r2,-28(fp)
  80f990:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
  80f994:	00800a44 	movi	r2,41
  80f998:	e0bfff15 	stw	r2,-4(fp)
  80f99c:	00001306 	br	80f9ec <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
  80f9a0:	e0bffc17 	ldw	r2,-16(fp)
  80f9a4:	10800058 	cmpnei	r2,r2,1
  80f9a8:	1000071e 	bne	r2,zero,80f9c8 <OSTaskQuery+0x108>
  80f9ac:	e0bffb17 	ldw	r2,-20(fp)
  80f9b0:	e0bff815 	stw	r2,-32(fp)
  80f9b4:	e0bff817 	ldw	r2,-32(fp)
  80f9b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  80f9bc:	008010c4 	movi	r2,67
  80f9c0:	e0bfff15 	stw	r2,-4(fp)
  80f9c4:	00000906 	br	80f9ec <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
  80f9c8:	e13ffe17 	ldw	r4,-8(fp)
  80f9cc:	e17ffc17 	ldw	r5,-16(fp)
  80f9d0:	01801b04 	movi	r6,108
  80f9d4:	08097200 	call	809720 <OS_MemCopy>
  80f9d8:	e0bffb17 	ldw	r2,-20(fp)
  80f9dc:	e0bff715 	stw	r2,-36(fp)
  80f9e0:	e0bff717 	ldw	r2,-36(fp)
  80f9e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80f9e8:	e03fff15 	stw	zero,-4(fp)
  80f9ec:	e0bfff17 	ldw	r2,-4(fp)
}
  80f9f0:	e037883a 	mov	sp,fp
  80f9f4:	dfc00117 	ldw	ra,4(sp)
  80f9f8:	df000017 	ldw	fp,0(sp)
  80f9fc:	dec00204 	addi	sp,sp,8
  80fa00:	f800283a 	ret

0080fa04 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
  80fa04:	defffc04 	addi	sp,sp,-16
  80fa08:	df000315 	stw	fp,12(sp)
  80fa0c:	df000304 	addi	fp,sp,12
  80fa10:	e13ffd15 	stw	r4,-12(fp)
  80fa14:	e17ffe15 	stw	r5,-8(fp)
  80fa18:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
  80fa1c:	e0bfff0b 	ldhu	r2,-4(fp)
  80fa20:	1080004c 	andi	r2,r2,1
  80fa24:	10803fcc 	andi	r2,r2,255
  80fa28:	1005003a 	cmpeq	r2,r2,zero
  80fa2c:	1000101e 	bne	r2,zero,80fa70 <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
  80fa30:	e0bfff0b 	ldhu	r2,-4(fp)
  80fa34:	1080008c 	andi	r2,r2,2
  80fa38:	1005003a 	cmpeq	r2,r2,zero
  80fa3c:	10000c1e 	bne	r2,zero,80fa70 <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  80fa40:	00000806 	br	80fa64 <OS_TaskStkClr+0x60>
                size--;
  80fa44:	e0bffe17 	ldw	r2,-8(fp)
  80fa48:	10bfffc4 	addi	r2,r2,-1
  80fa4c:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
  80fa50:	e0bffd17 	ldw	r2,-12(fp)
  80fa54:	10000015 	stw	zero,0(r2)
  80fa58:	e0bffd17 	ldw	r2,-12(fp)
  80fa5c:	10800104 	addi	r2,r2,4
  80fa60:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  80fa64:	e0bffe17 	ldw	r2,-8(fp)
  80fa68:	1004c03a 	cmpne	r2,r2,zero
  80fa6c:	103ff51e 	bne	r2,zero,80fa44 <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
  80fa70:	e037883a 	mov	sp,fp
  80fa74:	df000017 	ldw	fp,0(sp)
  80fa78:	dec00104 	addi	sp,sp,4
  80fa7c:	f800283a 	ret

0080fa80 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
  80fa80:	defff904 	addi	sp,sp,-28
  80fa84:	dfc00615 	stw	ra,24(sp)
  80fa88:	df000515 	stw	fp,20(sp)
  80fa8c:	df000504 	addi	fp,sp,20
  80fa90:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80fa94:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80fa98:	00802074 	movhi	r2,129
  80fa9c:	109f4c04 	addi	r2,r2,32048
  80faa0:	10800003 	ldbu	r2,0(r2)
  80faa4:	10803fcc 	andi	r2,r2,255
  80faa8:	1004c03a 	cmpne	r2,r2,zero
  80faac:	1000421e 	bne	r2,zero,80fbb8 <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
  80fab0:	e0bfff0b 	ldhu	r2,-4(fp)
  80fab4:	1005003a 	cmpeq	r2,r2,zero
  80fab8:	10003f1e 	bne	r2,zero,80fbb8 <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fabc:	0005303a 	rdctl	r2,status
  80fac0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fac4:	e0fffc17 	ldw	r3,-16(fp)
  80fac8:	00bfff84 	movi	r2,-2
  80facc:	1884703a 	and	r2,r3,r2
  80fad0:	1001703a 	wrctl	status,r2
  
  return context;
  80fad4:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
  80fad8:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
  80fadc:	00802074 	movhi	r2,129
  80fae0:	109f4d04 	addi	r2,r2,32052
  80fae4:	10800017 	ldw	r2,0(r2)
  80fae8:	10800d03 	ldbu	r2,52(r2)
  80faec:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  80faf0:	e13ffe03 	ldbu	r4,-8(fp)
  80faf4:	e0fffe03 	ldbu	r3,-8(fp)
  80faf8:	00802074 	movhi	r2,129
  80fafc:	109f4a44 	addi	r2,r2,32041
  80fb00:	10c5883a 	add	r2,r2,r3
  80fb04:	10800003 	ldbu	r2,0(r2)
  80fb08:	1007883a 	mov	r3,r2
  80fb0c:	00802074 	movhi	r2,129
  80fb10:	109f4d04 	addi	r2,r2,32052
  80fb14:	10800017 	ldw	r2,0(r2)
  80fb18:	10800d43 	ldbu	r2,53(r2)
  80fb1c:	0084303a 	nor	r2,zero,r2
  80fb20:	1884703a 	and	r2,r3,r2
  80fb24:	1007883a 	mov	r3,r2
  80fb28:	00802074 	movhi	r2,129
  80fb2c:	109f4a44 	addi	r2,r2,32041
  80fb30:	1105883a 	add	r2,r2,r4
  80fb34:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
  80fb38:	e0fffe03 	ldbu	r3,-8(fp)
  80fb3c:	00802074 	movhi	r2,129
  80fb40:	109f4a44 	addi	r2,r2,32041
  80fb44:	10c5883a 	add	r2,r2,r3
  80fb48:	10800003 	ldbu	r2,0(r2)
  80fb4c:	10803fcc 	andi	r2,r2,255
  80fb50:	1004c03a 	cmpne	r2,r2,zero
  80fb54:	10000e1e 	bne	r2,zero,80fb90 <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  80fb58:	00802074 	movhi	r2,129
  80fb5c:	109f4d04 	addi	r2,r2,32052
  80fb60:	10800017 	ldw	r2,0(r2)
  80fb64:	10800d83 	ldbu	r2,54(r2)
  80fb68:	0084303a 	nor	r2,zero,r2
  80fb6c:	1007883a 	mov	r3,r2
  80fb70:	00802074 	movhi	r2,129
  80fb74:	109f4a04 	addi	r2,r2,32040
  80fb78:	10800003 	ldbu	r2,0(r2)
  80fb7c:	1884703a 	and	r2,r3,r2
  80fb80:	1007883a 	mov	r3,r2
  80fb84:	00802074 	movhi	r2,129
  80fb88:	109f4a04 	addi	r2,r2,32040
  80fb8c:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
  80fb90:	00802074 	movhi	r2,129
  80fb94:	109f4d04 	addi	r2,r2,32052
  80fb98:	10c00017 	ldw	r3,0(r2)
  80fb9c:	e0bfff0b 	ldhu	r2,-4(fp)
  80fba0:	18800b8d 	sth	r2,46(r3)
  80fba4:	e0bffd17 	ldw	r2,-12(fp)
  80fba8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fbac:	e0bffb17 	ldw	r2,-20(fp)
  80fbb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
  80fbb4:	080978c0 	call	80978c <OS_Sched>
    }
}
  80fbb8:	e037883a 	mov	sp,fp
  80fbbc:	dfc00117 	ldw	ra,4(sp)
  80fbc0:	df000017 	ldw	fp,0(sp)
  80fbc4:	dec00204 	addi	sp,sp,8
  80fbc8:	f800283a 	ret

0080fbcc <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
  80fbcc:	defff604 	addi	sp,sp,-40
  80fbd0:	dfc00915 	stw	ra,36(sp)
  80fbd4:	df000815 	stw	fp,32(sp)
  80fbd8:	dc000715 	stw	r16,28(sp)
  80fbdc:	df000704 	addi	fp,sp,28
  80fbe0:	e13ffb05 	stb	r4,-20(fp)
  80fbe4:	e17ffc05 	stb	r5,-16(fp)
  80fbe8:	e1bffd05 	stb	r6,-12(fp)
  80fbec:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80fbf0:	00802074 	movhi	r2,129
  80fbf4:	109f4c04 	addi	r2,r2,32048
  80fbf8:	10800003 	ldbu	r2,0(r2)
  80fbfc:	10803fcc 	andi	r2,r2,255
  80fc00:	1005003a 	cmpeq	r2,r2,zero
  80fc04:	1000031e 	bne	r2,zero,80fc14 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
  80fc08:	00801544 	movi	r2,85
  80fc0c:	e0bfff15 	stw	r2,-4(fp)
  80fc10:	00004406 	br	80fd24 <OSTimeDlyHMSM+0x158>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
  80fc14:	e0bffb03 	ldbu	r2,-20(fp)
  80fc18:	1004c03a 	cmpne	r2,r2,zero
  80fc1c:	10000c1e 	bne	r2,zero,80fc50 <OSTimeDlyHMSM+0x84>
        if (minutes == 0) {
  80fc20:	e0bffc03 	ldbu	r2,-16(fp)
  80fc24:	1004c03a 	cmpne	r2,r2,zero
  80fc28:	1000091e 	bne	r2,zero,80fc50 <OSTimeDlyHMSM+0x84>
            if (seconds == 0) {
  80fc2c:	e0bffd03 	ldbu	r2,-12(fp)
  80fc30:	1004c03a 	cmpne	r2,r2,zero
  80fc34:	1000061e 	bne	r2,zero,80fc50 <OSTimeDlyHMSM+0x84>
                if (ms == 0) {
  80fc38:	e0bffe0b 	ldhu	r2,-8(fp)
  80fc3c:	1004c03a 	cmpne	r2,r2,zero
  80fc40:	1000031e 	bne	r2,zero,80fc50 <OSTimeDlyHMSM+0x84>
                    return (OS_ERR_TIME_ZERO_DLY);
  80fc44:	00801504 	movi	r2,84
  80fc48:	e0bfff15 	stw	r2,-4(fp)
  80fc4c:	00003506 	br	80fd24 <OSTimeDlyHMSM+0x158>
                }
            }
        }
    }
    if (minutes > 59) {
  80fc50:	e0bffc03 	ldbu	r2,-16(fp)
  80fc54:	10800f30 	cmpltui	r2,r2,60
  80fc58:	1000031e 	bne	r2,zero,80fc68 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
  80fc5c:	00801444 	movi	r2,81
  80fc60:	e0bfff15 	stw	r2,-4(fp)
  80fc64:	00002f06 	br	80fd24 <OSTimeDlyHMSM+0x158>
    }
    if (seconds > 59) {
  80fc68:	e0bffd03 	ldbu	r2,-12(fp)
  80fc6c:	10800f30 	cmpltui	r2,r2,60
  80fc70:	1000031e 	bne	r2,zero,80fc80 <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_SECONDS);
  80fc74:	00801484 	movi	r2,82
  80fc78:	e0bfff15 	stw	r2,-4(fp)
  80fc7c:	00002906 	br	80fd24 <OSTimeDlyHMSM+0x158>
    }
    if (ms > 999) {
  80fc80:	e0bffe0b 	ldhu	r2,-8(fp)
  80fc84:	1080fa30 	cmpltui	r2,r2,1000
  80fc88:	1000031e 	bne	r2,zero,80fc98 <OSTimeDlyHMSM+0xcc>
        return (OS_ERR_TIME_INVALID_MS);
  80fc8c:	008014c4 	movi	r2,83
  80fc90:	e0bfff15 	stw	r2,-4(fp)
  80fc94:	00002306 	br	80fd24 <OSTimeDlyHMSM+0x158>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  80fc98:	e0bffb03 	ldbu	r2,-20(fp)
  80fc9c:	10c38424 	muli	r3,r2,3600
  80fca0:	e0bffc03 	ldbu	r2,-16(fp)
  80fca4:	10800f24 	muli	r2,r2,60
  80fca8:	1887883a 	add	r3,r3,r2
  80fcac:	e0bffd03 	ldbu	r2,-12(fp)
  80fcb0:	1885883a 	add	r2,r3,r2
  80fcb4:	1400fa24 	muli	r16,r2,1000
  80fcb8:	e0bffe0b 	ldhu	r2,-8(fp)
  80fcbc:	1100fa24 	muli	r4,r2,1000
  80fcc0:	0140fa04 	movi	r5,1000
  80fcc4:	08141b80 	call	8141b8 <__udivsi3>
  80fcc8:	8085883a 	add	r2,r16,r2
  80fccc:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
  80fcd0:	e0bffa17 	ldw	r2,-24(fp)
  80fcd4:	1004d43a 	srli	r2,r2,16
  80fcd8:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
  80fcdc:	e0bffa17 	ldw	r2,-24(fp)
  80fce0:	10bfffcc 	andi	r2,r2,65535
  80fce4:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
  80fce8:	e0bffa17 	ldw	r2,-24(fp)
  80fcec:	113fffcc 	andi	r4,r2,65535
  80fcf0:	080fa800 	call	80fa80 <OSTimeDly>
    while (loops > 0) {
  80fcf4:	00000706 	br	80fd14 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
  80fcf8:	01200014 	movui	r4,32768
  80fcfc:	080fa800 	call	80fa80 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
  80fd00:	01200014 	movui	r4,32768
  80fd04:	080fa800 	call	80fa80 <OSTimeDly>
        loops--;
  80fd08:	e0bff90b 	ldhu	r2,-28(fp)
  80fd0c:	10bfffc4 	addi	r2,r2,-1
  80fd10:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
  80fd14:	e0bff90b 	ldhu	r2,-28(fp)
  80fd18:	1004c03a 	cmpne	r2,r2,zero
  80fd1c:	103ff61e 	bne	r2,zero,80fcf8 <OSTimeDlyHMSM+0x12c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
  80fd20:	e03fff15 	stw	zero,-4(fp)
  80fd24:	e0bfff17 	ldw	r2,-4(fp)
}
  80fd28:	e037883a 	mov	sp,fp
  80fd2c:	dfc00217 	ldw	ra,8(sp)
  80fd30:	df000117 	ldw	fp,4(sp)
  80fd34:	dc000017 	ldw	r16,0(sp)
  80fd38:	dec00304 	addi	sp,sp,12
  80fd3c:	f800283a 	ret

0080fd40 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
  80fd40:	defff404 	addi	sp,sp,-48
  80fd44:	dfc00b15 	stw	ra,44(sp)
  80fd48:	df000a15 	stw	fp,40(sp)
  80fd4c:	df000a04 	addi	fp,sp,40
  80fd50:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80fd54:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
  80fd58:	e0bffe03 	ldbu	r2,-8(fp)
  80fd5c:	10800530 	cmpltui	r2,r2,20
  80fd60:	1000031e 	bne	r2,zero,80fd70 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  80fd64:	00800a84 	movi	r2,42
  80fd68:	e0bfff15 	stw	r2,-4(fp)
  80fd6c:	00007206 	br	80ff38 <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fd70:	0005303a 	rdctl	r2,status
  80fd74:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fd78:	e0fffb17 	ldw	r3,-20(fp)
  80fd7c:	00bfff84 	movi	r2,-2
  80fd80:	1884703a 	and	r2,r3,r2
  80fd84:	1001703a 	wrctl	status,r2
  
  return context;
  80fd88:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  80fd8c:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
  80fd90:	e0bffe03 	ldbu	r2,-8(fp)
  80fd94:	00c020b4 	movhi	r3,130
  80fd98:	18fbd304 	addi	r3,r3,-4276
  80fd9c:	1085883a 	add	r2,r2,r2
  80fda0:	1085883a 	add	r2,r2,r2
  80fda4:	10c5883a 	add	r2,r2,r3
  80fda8:	10800017 	ldw	r2,0(r2)
  80fdac:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
  80fdb0:	e0bffd17 	ldw	r2,-12(fp)
  80fdb4:	1004c03a 	cmpne	r2,r2,zero
  80fdb8:	1000071e 	bne	r2,zero,80fdd8 <OSTimeDlyResume+0x98>
  80fdbc:	e0bffc17 	ldw	r2,-16(fp)
  80fdc0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fdc4:	e0bffa17 	ldw	r2,-24(fp)
  80fdc8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  80fdcc:	008010c4 	movi	r2,67
  80fdd0:	e0bfff15 	stw	r2,-4(fp)
  80fdd4:	00005806 	br	80ff38 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
  80fdd8:	e0bffd17 	ldw	r2,-12(fp)
  80fddc:	10800058 	cmpnei	r2,r2,1
  80fde0:	1000071e 	bne	r2,zero,80fe00 <OSTimeDlyResume+0xc0>
  80fde4:	e0bffc17 	ldw	r2,-16(fp)
  80fde8:	e0bff915 	stw	r2,-28(fp)
  80fdec:	e0bff917 	ldw	r2,-28(fp)
  80fdf0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  80fdf4:	008010c4 	movi	r2,67
  80fdf8:	e0bfff15 	stw	r2,-4(fp)
  80fdfc:	00004e06 	br	80ff38 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
  80fe00:	e0bffd17 	ldw	r2,-12(fp)
  80fe04:	10800b8b 	ldhu	r2,46(r2)
  80fe08:	10bfffcc 	andi	r2,r2,65535
  80fe0c:	1004c03a 	cmpne	r2,r2,zero
  80fe10:	1000071e 	bne	r2,zero,80fe30 <OSTimeDlyResume+0xf0>
  80fe14:	e0bffc17 	ldw	r2,-16(fp)
  80fe18:	e0bff815 	stw	r2,-32(fp)
  80fe1c:	e0bff817 	ldw	r2,-32(fp)
  80fe20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
  80fe24:	00801404 	movi	r2,80
  80fe28:	e0bfff15 	stw	r2,-4(fp)
  80fe2c:	00004206 	br	80ff38 <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
  80fe30:	e0bffd17 	ldw	r2,-12(fp)
  80fe34:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  80fe38:	e0bffd17 	ldw	r2,-12(fp)
  80fe3c:	10800c03 	ldbu	r2,48(r2)
  80fe40:	10803fcc 	andi	r2,r2,255
  80fe44:	10800dcc 	andi	r2,r2,55
  80fe48:	1005003a 	cmpeq	r2,r2,zero
  80fe4c:	10000b1e 	bne	r2,zero,80fe7c <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
  80fe50:	e0bffd17 	ldw	r2,-12(fp)
  80fe54:	10c00c03 	ldbu	r3,48(r2)
  80fe58:	00bff204 	movi	r2,-56
  80fe5c:	1884703a 	and	r2,r3,r2
  80fe60:	1007883a 	mov	r3,r2
  80fe64:	e0bffd17 	ldw	r2,-12(fp)
  80fe68:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
  80fe6c:	e0fffd17 	ldw	r3,-12(fp)
  80fe70:	00800044 	movi	r2,1
  80fe74:	18800c45 	stb	r2,49(r3)
  80fe78:	00000206 	br	80fe84 <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
  80fe7c:	e0bffd17 	ldw	r2,-12(fp)
  80fe80:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
  80fe84:	e0bffd17 	ldw	r2,-12(fp)
  80fe88:	10800c03 	ldbu	r2,48(r2)
  80fe8c:	10803fcc 	andi	r2,r2,255
  80fe90:	1080020c 	andi	r2,r2,8
  80fe94:	1004c03a 	cmpne	r2,r2,zero
  80fe98:	1000221e 	bne	r2,zero,80ff24 <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
  80fe9c:	e0bffd17 	ldw	r2,-12(fp)
  80fea0:	10c00d83 	ldbu	r3,54(r2)
  80fea4:	00802074 	movhi	r2,129
  80fea8:	109f4a04 	addi	r2,r2,32040
  80feac:	10800003 	ldbu	r2,0(r2)
  80feb0:	1884b03a 	or	r2,r3,r2
  80feb4:	1007883a 	mov	r3,r2
  80feb8:	00802074 	movhi	r2,129
  80febc:	109f4a04 	addi	r2,r2,32040
  80fec0:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  80fec4:	e0bffd17 	ldw	r2,-12(fp)
  80fec8:	10800d03 	ldbu	r2,52(r2)
  80fecc:	11003fcc 	andi	r4,r2,255
  80fed0:	e0bffd17 	ldw	r2,-12(fp)
  80fed4:	10800d03 	ldbu	r2,52(r2)
  80fed8:	10c03fcc 	andi	r3,r2,255
  80fedc:	00802074 	movhi	r2,129
  80fee0:	109f4a44 	addi	r2,r2,32041
  80fee4:	10c5883a 	add	r2,r2,r3
  80fee8:	10c00003 	ldbu	r3,0(r2)
  80feec:	e0bffd17 	ldw	r2,-12(fp)
  80fef0:	10800d43 	ldbu	r2,53(r2)
  80fef4:	1884b03a 	or	r2,r3,r2
  80fef8:	1007883a 	mov	r3,r2
  80fefc:	00802074 	movhi	r2,129
  80ff00:	109f4a44 	addi	r2,r2,32041
  80ff04:	1105883a 	add	r2,r2,r4
  80ff08:	10c00005 	stb	r3,0(r2)
  80ff0c:	e0bffc17 	ldw	r2,-16(fp)
  80ff10:	e0bff715 	stw	r2,-36(fp)
  80ff14:	e0bff717 	ldw	r2,-36(fp)
  80ff18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
  80ff1c:	080978c0 	call	80978c <OS_Sched>
  80ff20:	00000406 	br	80ff34 <OSTimeDlyResume+0x1f4>
  80ff24:	e0bffc17 	ldw	r2,-16(fp)
  80ff28:	e0bff615 	stw	r2,-40(fp)
  80ff2c:	e0bff617 	ldw	r2,-40(fp)
  80ff30:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
  80ff34:	e03fff15 	stw	zero,-4(fp)
  80ff38:	e0bfff17 	ldw	r2,-4(fp)
}
  80ff3c:	e037883a 	mov	sp,fp
  80ff40:	dfc00117 	ldw	ra,4(sp)
  80ff44:	df000017 	ldw	fp,0(sp)
  80ff48:	dec00204 	addi	sp,sp,8
  80ff4c:	f800283a 	ret

0080ff50 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
  80ff50:	defffb04 	addi	sp,sp,-20
  80ff54:	df000415 	stw	fp,16(sp)
  80ff58:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80ff5c:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ff60:	0005303a 	rdctl	r2,status
  80ff64:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ff68:	e0fffd17 	ldw	r3,-12(fp)
  80ff6c:	00bfff84 	movi	r2,-2
  80ff70:	1884703a 	and	r2,r3,r2
  80ff74:	1001703a 	wrctl	status,r2
  
  return context;
  80ff78:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  80ff7c:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
  80ff80:	00802074 	movhi	r2,129
  80ff84:	109f4e04 	addi	r2,r2,32056
  80ff88:	10800017 	ldw	r2,0(r2)
  80ff8c:	e0bfff15 	stw	r2,-4(fp)
  80ff90:	e0bffe17 	ldw	r2,-8(fp)
  80ff94:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ff98:	e0bffc17 	ldw	r2,-16(fp)
  80ff9c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
  80ffa0:	e0bfff17 	ldw	r2,-4(fp)
}
  80ffa4:	e037883a 	mov	sp,fp
  80ffa8:	df000017 	ldw	fp,0(sp)
  80ffac:	dec00104 	addi	sp,sp,4
  80ffb0:	f800283a 	ret

0080ffb4 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
  80ffb4:	defffb04 	addi	sp,sp,-20
  80ffb8:	df000415 	stw	fp,16(sp)
  80ffbc:	df000404 	addi	fp,sp,16
  80ffc0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80ffc4:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ffc8:	0005303a 	rdctl	r2,status
  80ffcc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ffd0:	e0fffd17 	ldw	r3,-12(fp)
  80ffd4:	00bfff84 	movi	r2,-2
  80ffd8:	1884703a 	and	r2,r3,r2
  80ffdc:	1001703a 	wrctl	status,r2
  
  return context;
  80ffe0:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  80ffe4:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
  80ffe8:	00c02074 	movhi	r3,129
  80ffec:	18df4e04 	addi	r3,r3,32056
  80fff0:	e0bfff17 	ldw	r2,-4(fp)
  80fff4:	18800015 	stw	r2,0(r3)
  80fff8:	e0bffe17 	ldw	r2,-8(fp)
  80fffc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810000:	e0bffc17 	ldw	r2,-16(fp)
  810004:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  810008:	e037883a 	mov	sp,fp
  81000c:	df000017 	ldw	fp,0(sp)
  810010:	dec00104 	addi	sp,sp,4
  810014:	f800283a 	ret

00810018 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  810018:	defffd04 	addi	sp,sp,-12
  81001c:	dfc00215 	stw	ra,8(sp)
  810020:	df000115 	stw	fp,4(sp)
  810024:	df000104 	addi	fp,sp,4
  810028:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
  81002c:	08135280 	call	813528 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  810030:	00800044 	movi	r2,1
  810034:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  810038:	e037883a 	mov	sp,fp
  81003c:	dfc00117 	ldw	ra,4(sp)
  810040:	df000017 	ldw	fp,0(sp)
  810044:	dec00204 	addi	sp,sp,8
  810048:	f800283a 	ret

0081004c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  81004c:	defffe04 	addi	sp,sp,-8
  810050:	dfc00115 	stw	ra,4(sp)
  810054:	df000015 	stw	fp,0(sp)
  810058:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  81005c:	01004474 	movhi	r4,273
  810060:	21241004 	addi	r4,r4,-28608
  810064:	000b883a 	mov	r5,zero
  810068:	000d883a 	mov	r6,zero
  81006c:	01c0fa04 	movi	r7,1000
  810070:	081143c0 	call	81143c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO_0, fifo_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  810074:	01002074 	movhi	r4,129
  810078:	2113f604 	addi	r4,r4,20440
  81007c:	000b883a 	mov	r5,zero
  810080:	01800044 	movi	r6,1
  810084:	08107b80 	call	8107b8 <altera_avalon_jtag_uart_init>
  810088:	01002074 	movhi	r4,129
  81008c:	2113ec04 	addi	r4,r4,20400
  810090:	08100d80 	call	8100d8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
  810094:	01002074 	movhi	r4,129
  810098:	21180704 	addi	r4,r4,24604
  81009c:	08100d80 	call	8100d8 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_0, audio_0);
  8100a0:	01002074 	movhi	r4,129
  8100a4:	21181304 	addi	r4,r4,24652
  8100a8:	08100d80 	call	8100d8 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
  8100ac:	01002074 	movhi	r4,129
  8100b0:	21181f04 	addi	r4,r4,24700
  8100b4:	08125080 	call	812508 <alt_up_character_lcd_init>
  8100b8:	01002074 	movhi	r4,129
  8100bc:	21181f04 	addi	r4,r4,24700
  8100c0:	08100d80 	call	8100d8 <alt_dev_reg>
}
  8100c4:	e037883a 	mov	sp,fp
  8100c8:	dfc00117 	ldw	ra,4(sp)
  8100cc:	df000017 	ldw	fp,0(sp)
  8100d0:	dec00204 	addi	sp,sp,8
  8100d4:	f800283a 	ret

008100d8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  8100d8:	defffd04 	addi	sp,sp,-12
  8100dc:	dfc00215 	stw	ra,8(sp)
  8100e0:	df000115 	stw	fp,4(sp)
  8100e4:	df000104 	addi	fp,sp,4
  8100e8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  8100ec:	e13fff17 	ldw	r4,-4(fp)
  8100f0:	01402074 	movhi	r5,129
  8100f4:	29583104 	addi	r5,r5,24772
  8100f8:	0812b200 	call	812b20 <alt_dev_llist_insert>
}
  8100fc:	e037883a 	mov	sp,fp
  810100:	dfc00117 	ldw	ra,4(sp)
  810104:	df000017 	ldw	fp,0(sp)
  810108:	dec00204 	addi	sp,sp,8
  81010c:	f800283a 	ret

00810110 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
  810110:	defff904 	addi	sp,sp,-28
  810114:	dfc00615 	stw	ra,24(sp)
  810118:	df000515 	stw	fp,20(sp)
  81011c:	df000504 	addi	fp,sp,20
  810120:	e13ffb15 	stw	r4,-20(fp)
  810124:	e17ffc15 	stw	r5,-16(fp)
  810128:	e1bffd15 	stw	r6,-12(fp)
  81012c:	e1fffe15 	stw	r7,-8(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
  810130:	e13ffb17 	ldw	r4,-20(fp)
  810134:	01400fc4 	movi	r5,63
  810138:	08103000 	call	810300 <altera_avalon_fifo_clear_event>
  81013c:	1005003a 	cmpeq	r2,r2,zero
  810140:	1000031e 	bne	r2,zero,810150 <altera_avalon_fifo_init+0x40>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
  810144:	00bfffc4 	movi	r2,-1
  810148:	e0bfff15 	stw	r2,-4(fp)
  81014c:	00001906 	br	8101b4 <altera_avalon_fifo_init+0xa4>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
  810150:	e13ffb17 	ldw	r4,-20(fp)
  810154:	e17ffc17 	ldw	r5,-16(fp)
  810158:	08103680 	call	810368 <altera_avalon_fifo_write_ienable>
  81015c:	1005003a 	cmpeq	r2,r2,zero
  810160:	1000031e 	bne	r2,zero,810170 <altera_avalon_fifo_init+0x60>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
  810164:	00bfff84 	movi	r2,-2
  810168:	e0bfff15 	stw	r2,-4(fp)
  81016c:	00001106 	br	8101b4 <altera_avalon_fifo_init+0xa4>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
  810170:	e13ffb17 	ldw	r4,-20(fp)
  810174:	e17ffe17 	ldw	r5,-8(fp)
  810178:	08103c80 	call	8103c8 <altera_avalon_fifo_write_almostfull>
  81017c:	1005003a 	cmpeq	r2,r2,zero
  810180:	1000031e 	bne	r2,zero,810190 <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
  810184:	00bfff44 	movi	r2,-3
  810188:	e0bfff15 	stw	r2,-4(fp)
  81018c:	00000906 	br	8101b4 <altera_avalon_fifo_init+0xa4>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
  810190:	e13ffb17 	ldw	r4,-20(fp)
  810194:	e17ffd17 	ldw	r5,-12(fp)
  810198:	08104280 	call	810428 <altera_avalon_fifo_write_almostempty>
  81019c:	1005003a 	cmpeq	r2,r2,zero
  8101a0:	1000031e 	bne	r2,zero,8101b0 <altera_avalon_fifo_init+0xa0>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
  8101a4:	00bfff44 	movi	r2,-3
  8101a8:	e0bfff15 	stw	r2,-4(fp)
  8101ac:	00000106 	br	8101b4 <altera_avalon_fifo_init+0xa4>
    }

    return ALTERA_AVALON_FIFO_OK;
  8101b0:	e03fff15 	stw	zero,-4(fp)
  8101b4:	e0bfff17 	ldw	r2,-4(fp)
}
  8101b8:	e037883a 	mov	sp,fp
  8101bc:	dfc00117 	ldw	ra,4(sp)
  8101c0:	df000017 	ldw	fp,0(sp)
  8101c4:	dec00204 	addi	sp,sp,8
  8101c8:	f800283a 	ret

008101cc <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
  8101cc:	defffd04 	addi	sp,sp,-12
  8101d0:	df000215 	stw	fp,8(sp)
  8101d4:	df000204 	addi	fp,sp,8
  8101d8:	e13ffe15 	stw	r4,-8(fp)
  8101dc:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
  8101e0:	e0bffe17 	ldw	r2,-8(fp)
  8101e4:	10800104 	addi	r2,r2,4
  8101e8:	10800037 	ldwio	r2,0(r2)
  8101ec:	1007883a 	mov	r3,r2
  8101f0:	e0bfff17 	ldw	r2,-4(fp)
  8101f4:	1884703a 	and	r2,r3,r2
}
  8101f8:	e037883a 	mov	sp,fp
  8101fc:	df000017 	ldw	fp,0(sp)
  810200:	dec00104 	addi	sp,sp,4
  810204:	f800283a 	ret

00810208 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
  810208:	defffd04 	addi	sp,sp,-12
  81020c:	df000215 	stw	fp,8(sp)
  810210:	df000204 	addi	fp,sp,8
  810214:	e13ffe15 	stw	r4,-8(fp)
  810218:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
  81021c:	e0bffe17 	ldw	r2,-8(fp)
  810220:	10800304 	addi	r2,r2,12
  810224:	10800037 	ldwio	r2,0(r2)
  810228:	1007883a 	mov	r3,r2
  81022c:	e0bfff17 	ldw	r2,-4(fp)
  810230:	1884703a 	and	r2,r3,r2
}
  810234:	e037883a 	mov	sp,fp
  810238:	df000017 	ldw	fp,0(sp)
  81023c:	dec00104 	addi	sp,sp,4
  810240:	f800283a 	ret

00810244 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
  810244:	defffe04 	addi	sp,sp,-8
  810248:	df000115 	stw	fp,4(sp)
  81024c:	df000104 	addi	fp,sp,4
  810250:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
  810254:	e0bfff17 	ldw	r2,-4(fp)
  810258:	10800404 	addi	r2,r2,16
  81025c:	10800037 	ldwio	r2,0(r2)
}
  810260:	e037883a 	mov	sp,fp
  810264:	df000017 	ldw	fp,0(sp)
  810268:	dec00104 	addi	sp,sp,4
  81026c:	f800283a 	ret

00810270 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
  810270:	defffe04 	addi	sp,sp,-8
  810274:	df000115 	stw	fp,4(sp)
  810278:	df000104 	addi	fp,sp,4
  81027c:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
  810280:	e0bfff17 	ldw	r2,-4(fp)
  810284:	10800504 	addi	r2,r2,20
  810288:	10800037 	ldwio	r2,0(r2)
}
  81028c:	e037883a 	mov	sp,fp
  810290:	df000017 	ldw	fp,0(sp)
  810294:	dec00104 	addi	sp,sp,4
  810298:	f800283a 	ret

0081029c <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
  81029c:	defffd04 	addi	sp,sp,-12
  8102a0:	df000215 	stw	fp,8(sp)
  8102a4:	df000204 	addi	fp,sp,8
  8102a8:	e13ffe15 	stw	r4,-8(fp)
  8102ac:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
  8102b0:	e0bffe17 	ldw	r2,-8(fp)
  8102b4:	10800204 	addi	r2,r2,8
  8102b8:	10800037 	ldwio	r2,0(r2)
  8102bc:	1007883a 	mov	r3,r2
  8102c0:	e0bfff17 	ldw	r2,-4(fp)
  8102c4:	1884703a 	and	r2,r3,r2
}
  8102c8:	e037883a 	mov	sp,fp
  8102cc:	df000017 	ldw	fp,0(sp)
  8102d0:	dec00104 	addi	sp,sp,4
  8102d4:	f800283a 	ret

008102d8 <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
  8102d8:	defffe04 	addi	sp,sp,-8
  8102dc:	df000115 	stw	fp,4(sp)
  8102e0:	df000104 	addi	fp,sp,4
  8102e4:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
  8102e8:	e0bfff17 	ldw	r2,-4(fp)
  8102ec:	10800037 	ldwio	r2,0(r2)
}
  8102f0:	e037883a 	mov	sp,fp
  8102f4:	df000017 	ldw	fp,0(sp)
  8102f8:	dec00104 	addi	sp,sp,4
  8102fc:	f800283a 	ret

00810300 <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
  810300:	defffc04 	addi	sp,sp,-16
  810304:	df000315 	stw	fp,12(sp)
  810308:	df000304 	addi	fp,sp,12
  81030c:	e13ffd15 	stw	r4,-12(fp)
  810310:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
  810314:	e0bffd17 	ldw	r2,-12(fp)
  810318:	10800204 	addi	r2,r2,8
  81031c:	e0fffe17 	ldw	r3,-8(fp)
  810320:	10c00035 	stwio	r3,0(r2)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
  810324:	e0bffd17 	ldw	r2,-12(fp)
  810328:	10800204 	addi	r2,r2,8
  81032c:	10800037 	ldwio	r2,0(r2)
  810330:	1007883a 	mov	r3,r2
  810334:	e0bffe17 	ldw	r2,-8(fp)
  810338:	1884703a 	and	r2,r3,r2
  81033c:	1004c03a 	cmpne	r2,r2,zero
  810340:	1000021e 	bne	r2,zero,81034c <altera_avalon_fifo_clear_event+0x4c>
        return ALTERA_AVALON_FIFO_OK;
  810344:	e03fff15 	stw	zero,-4(fp)
  810348:	00000206 	br	810354 <altera_avalon_fifo_clear_event+0x54>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
  81034c:	00bfffc4 	movi	r2,-1
  810350:	e0bfff15 	stw	r2,-4(fp)
  810354:	e0bfff17 	ldw	r2,-4(fp)
}
  810358:	e037883a 	mov	sp,fp
  81035c:	df000017 	ldw	fp,0(sp)
  810360:	dec00104 	addi	sp,sp,4
  810364:	f800283a 	ret

00810368 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
  810368:	defffc04 	addi	sp,sp,-16
  81036c:	df000315 	stw	fp,12(sp)
  810370:	df000304 	addi	fp,sp,12
  810374:	e13ffd15 	stw	r4,-12(fp)
  810378:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
  81037c:	e0bffd17 	ldw	r2,-12(fp)
  810380:	10800304 	addi	r2,r2,12
  810384:	e0fffe17 	ldw	r3,-8(fp)
  810388:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
  81038c:	e0bffd17 	ldw	r2,-12(fp)
  810390:	10800304 	addi	r2,r2,12
  810394:	10800037 	ldwio	r2,0(r2)
  810398:	1007883a 	mov	r3,r2
  81039c:	e0bffe17 	ldw	r2,-8(fp)
  8103a0:	1880021e 	bne	r3,r2,8103ac <altera_avalon_fifo_write_ienable+0x44>
        return ALTERA_AVALON_FIFO_OK;
  8103a4:	e03fff15 	stw	zero,-4(fp)
  8103a8:	00000206 	br	8103b4 <altera_avalon_fifo_write_ienable+0x4c>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
  8103ac:	00bfff84 	movi	r2,-2
  8103b0:	e0bfff15 	stw	r2,-4(fp)
  8103b4:	e0bfff17 	ldw	r2,-4(fp)
}
  8103b8:	e037883a 	mov	sp,fp
  8103bc:	df000017 	ldw	fp,0(sp)
  8103c0:	dec00104 	addi	sp,sp,4
  8103c4:	f800283a 	ret

008103c8 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
  8103c8:	defffc04 	addi	sp,sp,-16
  8103cc:	df000315 	stw	fp,12(sp)
  8103d0:	df000304 	addi	fp,sp,12
  8103d4:	e13ffd15 	stw	r4,-12(fp)
  8103d8:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
  8103dc:	e0bffd17 	ldw	r2,-12(fp)
  8103e0:	10800404 	addi	r2,r2,16
  8103e4:	e0fffe17 	ldw	r3,-8(fp)
  8103e8:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
  8103ec:	e0bffd17 	ldw	r2,-12(fp)
  8103f0:	10800404 	addi	r2,r2,16
  8103f4:	10800037 	ldwio	r2,0(r2)
  8103f8:	1007883a 	mov	r3,r2
  8103fc:	e0bffe17 	ldw	r2,-8(fp)
  810400:	1880021e 	bne	r3,r2,81040c <altera_avalon_fifo_write_almostfull+0x44>
        return ALTERA_AVALON_FIFO_OK;
  810404:	e03fff15 	stw	zero,-4(fp)
  810408:	00000206 	br	810414 <altera_avalon_fifo_write_almostfull+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
  81040c:	00bfff44 	movi	r2,-3
  810410:	e0bfff15 	stw	r2,-4(fp)
  810414:	e0bfff17 	ldw	r2,-4(fp)
}
  810418:	e037883a 	mov	sp,fp
  81041c:	df000017 	ldw	fp,0(sp)
  810420:	dec00104 	addi	sp,sp,4
  810424:	f800283a 	ret

00810428 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
  810428:	defffc04 	addi	sp,sp,-16
  81042c:	df000315 	stw	fp,12(sp)
  810430:	df000304 	addi	fp,sp,12
  810434:	e13ffd15 	stw	r4,-12(fp)
  810438:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
  81043c:	e0bffd17 	ldw	r2,-12(fp)
  810440:	10800504 	addi	r2,r2,20
  810444:	e0fffe17 	ldw	r3,-8(fp)
  810448:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
  81044c:	e0bffd17 	ldw	r2,-12(fp)
  810450:	10800504 	addi	r2,r2,20
  810454:	10800037 	ldwio	r2,0(r2)
  810458:	1007883a 	mov	r3,r2
  81045c:	e0bffe17 	ldw	r2,-8(fp)
  810460:	1880021e 	bne	r3,r2,81046c <altera_avalon_fifo_write_almostempty+0x44>
        return ALTERA_AVALON_FIFO_OK;
  810464:	e03fff15 	stw	zero,-4(fp)
  810468:	00000206 	br	810474 <altera_avalon_fifo_write_almostempty+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
  81046c:	00bfff44 	movi	r2,-3
  810470:	e0bfff15 	stw	r2,-4(fp)
  810474:	e0bfff17 	ldw	r2,-4(fp)
}
  810478:	e037883a 	mov	sp,fp
  81047c:	df000017 	ldw	fp,0(sp)
  810480:	dec00104 	addi	sp,sp,4
  810484:	f800283a 	ret

00810488 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
  810488:	defffa04 	addi	sp,sp,-24
  81048c:	dfc00515 	stw	ra,20(sp)
  810490:	df000415 	stw	fp,16(sp)
  810494:	df000404 	addi	fp,sp,16
  810498:	e13ffc15 	stw	r4,-16(fp)
  81049c:	e17ffd15 	stw	r5,-12(fp)
  8104a0:	e1bffe15 	stw	r6,-8(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
  8104a4:	e13ffd17 	ldw	r4,-12(fp)
  8104a8:	01400044 	movi	r5,1
  8104ac:	08101cc0 	call	8101cc <altera_avalon_fifo_read_status>
  8104b0:	1004c03a 	cmpne	r2,r2,zero
  8104b4:	1000051e 	bne	r2,zero,8104cc <altera_avalon_fifo_write_fifo+0x44>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
  8104b8:	e0bffc17 	ldw	r2,-16(fp)
  8104bc:	e0fffe17 	ldw	r3,-8(fp)
  8104c0:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
  8104c4:	e03fff15 	stw	zero,-4(fp)
  8104c8:	00000206 	br	8104d4 <altera_avalon_fifo_write_fifo+0x4c>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
  8104cc:	00bfff04 	movi	r2,-4
  8104d0:	e0bfff15 	stw	r2,-4(fp)
  8104d4:	e0bfff17 	ldw	r2,-4(fp)
    }
}
  8104d8:	e037883a 	mov	sp,fp
  8104dc:	dfc00117 	ldw	ra,4(sp)
  8104e0:	df000017 	ldw	fp,0(sp)
  8104e4:	dec00204 	addi	sp,sp,8
  8104e8:	f800283a 	ret

008104ec <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
  8104ec:	defffa04 	addi	sp,sp,-24
  8104f0:	dfc00515 	stw	ra,20(sp)
  8104f4:	df000415 	stw	fp,16(sp)
  8104f8:	df000404 	addi	fp,sp,16
  8104fc:	e13ffd15 	stw	r4,-12(fp)
  810500:	e17ffe15 	stw	r5,-8(fp)
  810504:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
  810508:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
  81050c:	e0bfff17 	ldw	r2,-4(fp)
  810510:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
  810514:	e13ffe17 	ldw	r4,-8(fp)
  810518:	01400084 	movi	r5,2
  81051c:	08101cc0 	call	8101cc <altera_avalon_fifo_read_status>
  810520:	1004c03a 	cmpne	r2,r2,zero
  810524:	1000071e 	bne	r2,zero,810544 <altera_avalon_read_fifo+0x58>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
  810528:	e13ffe17 	ldw	r4,-8(fp)
  81052c:	08102d80 	call	8102d8 <altera_avalon_fifo_read_level>
  810530:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
  810534:	e0bffd17 	ldw	r2,-12(fp)
  810538:	10c00037 	ldwio	r3,0(r2)
  81053c:	e0bfff17 	ldw	r2,-4(fp)
  810540:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
  810544:	e0bffc17 	ldw	r2,-16(fp)
}
  810548:	e037883a 	mov	sp,fp
  81054c:	dfc00117 	ldw	ra,4(sp)
  810550:	df000017 	ldw	fp,0(sp)
  810554:	dec00204 	addi	sp,sp,8
  810558:	f800283a 	ret

0081055c <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
  81055c:	defffb04 	addi	sp,sp,-20
  810560:	dfc00415 	stw	ra,16(sp)
  810564:	df000315 	stw	fp,12(sp)
  810568:	df000304 	addi	fp,sp,12
  81056c:	e13ffd15 	stw	r4,-12(fp)
  810570:	e17ffe15 	stw	r5,-8(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
  810574:	e13ffe17 	ldw	r4,-8(fp)
  810578:	01400084 	movi	r5,2
  81057c:	08101cc0 	call	8101cc <altera_avalon_fifo_read_status>
  810580:	1004c03a 	cmpne	r2,r2,zero
  810584:	1000041e 	bne	r2,zero,810598 <altera_avalon_fifo_read_fifo+0x3c>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
  810588:	e0bffd17 	ldw	r2,-12(fp)
  81058c:	10800037 	ldwio	r2,0(r2)
  810590:	e0bfff15 	stw	r2,-4(fp)
  810594:	00000106 	br	81059c <altera_avalon_fifo_read_fifo+0x40>
    }
    return 0;
  810598:	e03fff15 	stw	zero,-4(fp)
  81059c:	e0bfff17 	ldw	r2,-4(fp)
}
  8105a0:	e037883a 	mov	sp,fp
  8105a4:	dfc00117 	ldw	ra,4(sp)
  8105a8:	df000017 	ldw	fp,0(sp)
  8105ac:	dec00204 	addi	sp,sp,8
  8105b0:	f800283a 	ret

008105b4 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
  8105b4:	defffa04 	addi	sp,sp,-24
  8105b8:	dfc00515 	stw	ra,20(sp)
  8105bc:	df000415 	stw	fp,16(sp)
  8105c0:	df000404 	addi	fp,sp,16
  8105c4:	e13ffc15 	stw	r4,-16(fp)
  8105c8:	e17ffd15 	stw	r5,-12(fp)
  8105cc:	e1bffe15 	stw	r6,-8(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
  8105d0:	e13ffd17 	ldw	r4,-12(fp)
  8105d4:	01400044 	movi	r5,1
  8105d8:	08101cc0 	call	8101cc <altera_avalon_fifo_read_status>
  8105dc:	1004c03a 	cmpne	r2,r2,zero
  8105e0:	1000061e 	bne	r2,zero,8105fc <altera_avalon_fifo_write_other_info+0x48>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
  8105e4:	e0bffc17 	ldw	r2,-16(fp)
  8105e8:	10800104 	addi	r2,r2,4
  8105ec:	e0fffe17 	ldw	r3,-8(fp)
  8105f0:	10c00035 	stwio	r3,0(r2)
	return ALTERA_AVALON_FIFO_OK;
  8105f4:	e03fff15 	stw	zero,-4(fp)
  8105f8:	00000206 	br	810604 <altera_avalon_fifo_write_other_info+0x50>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
  8105fc:	00bfff04 	movi	r2,-4
  810600:	e0bfff15 	stw	r2,-4(fp)
  810604:	e0bfff17 	ldw	r2,-4(fp)
    }
}
  810608:	e037883a 	mov	sp,fp
  81060c:	dfc00117 	ldw	ra,4(sp)
  810610:	df000017 	ldw	fp,0(sp)
  810614:	dec00204 	addi	sp,sp,8
  810618:	f800283a 	ret

0081061c <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
  81061c:	defffe04 	addi	sp,sp,-8
  810620:	df000115 	stw	fp,4(sp)
  810624:	df000104 	addi	fp,sp,4
  810628:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
  81062c:	e0bfff17 	ldw	r2,-4(fp)
  810630:	10800104 	addi	r2,r2,4
  810634:	10800037 	ldwio	r2,0(r2)
}
  810638:	e037883a 	mov	sp,fp
  81063c:	df000017 	ldw	fp,0(sp)
  810640:	dec00104 	addi	sp,sp,4
  810644:	f800283a 	ret

00810648 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
  810648:	defffe04 	addi	sp,sp,-8
  81064c:	df000115 	stw	fp,4(sp)
  810650:	df000104 	addi	fp,sp,4
  810654:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
  810658:	e0bfff17 	ldw	r2,-4(fp)
  81065c:	10800037 	ldwio	r2,0(r2)
}
  810660:	e037883a 	mov	sp,fp
  810664:	df000017 	ldw	fp,0(sp)
  810668:	dec00104 	addi	sp,sp,4
  81066c:	f800283a 	ret

00810670 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  810670:	defffa04 	addi	sp,sp,-24
  810674:	dfc00515 	stw	ra,20(sp)
  810678:	df000415 	stw	fp,16(sp)
  81067c:	df000404 	addi	fp,sp,16
  810680:	e13ffd15 	stw	r4,-12(fp)
  810684:	e17ffe15 	stw	r5,-8(fp)
  810688:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  81068c:	e0bffd17 	ldw	r2,-12(fp)
  810690:	10800017 	ldw	r2,0(r2)
  810694:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  810698:	e0bffc17 	ldw	r2,-16(fp)
  81069c:	11000a04 	addi	r4,r2,40
  8106a0:	e0bffd17 	ldw	r2,-12(fp)
  8106a4:	11c00217 	ldw	r7,8(r2)
  8106a8:	e17ffe17 	ldw	r5,-8(fp)
  8106ac:	e1bfff17 	ldw	r6,-4(fp)
  8106b0:	0810e2c0 	call	810e2c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  8106b4:	e037883a 	mov	sp,fp
  8106b8:	dfc00117 	ldw	ra,4(sp)
  8106bc:	df000017 	ldw	fp,0(sp)
  8106c0:	dec00204 	addi	sp,sp,8
  8106c4:	f800283a 	ret

008106c8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8106c8:	defffa04 	addi	sp,sp,-24
  8106cc:	dfc00515 	stw	ra,20(sp)
  8106d0:	df000415 	stw	fp,16(sp)
  8106d4:	df000404 	addi	fp,sp,16
  8106d8:	e13ffd15 	stw	r4,-12(fp)
  8106dc:	e17ffe15 	stw	r5,-8(fp)
  8106e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8106e4:	e0bffd17 	ldw	r2,-12(fp)
  8106e8:	10800017 	ldw	r2,0(r2)
  8106ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  8106f0:	e0bffc17 	ldw	r2,-16(fp)
  8106f4:	11000a04 	addi	r4,r2,40
  8106f8:	e0bffd17 	ldw	r2,-12(fp)
  8106fc:	11c00217 	ldw	r7,8(r2)
  810700:	e17ffe17 	ldw	r5,-8(fp)
  810704:	e1bfff17 	ldw	r6,-4(fp)
  810708:	08110ec0 	call	8110ec <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  81070c:	e037883a 	mov	sp,fp
  810710:	dfc00117 	ldw	ra,4(sp)
  810714:	df000017 	ldw	fp,0(sp)
  810718:	dec00204 	addi	sp,sp,8
  81071c:	f800283a 	ret

00810720 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  810720:	defffc04 	addi	sp,sp,-16
  810724:	dfc00315 	stw	ra,12(sp)
  810728:	df000215 	stw	fp,8(sp)
  81072c:	df000204 	addi	fp,sp,8
  810730:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  810734:	e0bfff17 	ldw	r2,-4(fp)
  810738:	10800017 	ldw	r2,0(r2)
  81073c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  810740:	e0bffe17 	ldw	r2,-8(fp)
  810744:	11000a04 	addi	r4,r2,40
  810748:	e0bfff17 	ldw	r2,-4(fp)
  81074c:	11400217 	ldw	r5,8(r2)
  810750:	0810cc40 	call	810cc4 <altera_avalon_jtag_uart_close>
}
  810754:	e037883a 	mov	sp,fp
  810758:	dfc00117 	ldw	ra,4(sp)
  81075c:	df000017 	ldw	fp,0(sp)
  810760:	dec00204 	addi	sp,sp,8
  810764:	f800283a 	ret

00810768 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  810768:	defffa04 	addi	sp,sp,-24
  81076c:	dfc00515 	stw	ra,20(sp)
  810770:	df000415 	stw	fp,16(sp)
  810774:	df000404 	addi	fp,sp,16
  810778:	e13ffd15 	stw	r4,-12(fp)
  81077c:	e17ffe15 	stw	r5,-8(fp)
  810780:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  810784:	e0bffd17 	ldw	r2,-12(fp)
  810788:	10800017 	ldw	r2,0(r2)
  81078c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  810790:	e0bffc17 	ldw	r2,-16(fp)
  810794:	11000a04 	addi	r4,r2,40
  810798:	e17ffe17 	ldw	r5,-8(fp)
  81079c:	e1bfff17 	ldw	r6,-4(fp)
  8107a0:	0810d380 	call	810d38 <altera_avalon_jtag_uart_ioctl>
}
  8107a4:	e037883a 	mov	sp,fp
  8107a8:	dfc00117 	ldw	ra,4(sp)
  8107ac:	df000017 	ldw	fp,0(sp)
  8107b0:	dec00204 	addi	sp,sp,8
  8107b4:	f800283a 	ret

008107b8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  8107b8:	defff504 	addi	sp,sp,-44
  8107bc:	dfc00a15 	stw	ra,40(sp)
  8107c0:	df000915 	stw	fp,36(sp)
  8107c4:	df000904 	addi	fp,sp,36
  8107c8:	e13ffd15 	stw	r4,-12(fp)
  8107cc:	e17ffe15 	stw	r5,-8(fp)
  8107d0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  8107d4:	e0bffd17 	ldw	r2,-12(fp)
  8107d8:	10800c04 	addi	r2,r2,48
  8107dc:	e0bffb15 	stw	r2,-20(fp)
  8107e0:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
  8107e4:	e13ffc0b 	ldhu	r4,-16(fp)
  8107e8:	e17ffc84 	addi	r5,fp,-14
  8107ec:	080a3340 	call	80a334 <OSFlagCreate>
  8107f0:	1007883a 	mov	r3,r2
  8107f4:	e0bffb17 	ldw	r2,-20(fp)
  8107f8:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
  8107fc:	e0bffd17 	ldw	r2,-12(fp)
  810800:	10800a04 	addi	r2,r2,40
  810804:	e0bff915 	stw	r2,-28(fp)
  810808:	00800044 	movi	r2,1
  81080c:	e0bffa0d 	sth	r2,-24(fp)
  810810:	e13ffa0b 	ldhu	r4,-24(fp)
  810814:	080d5380 	call	80d538 <OSSemCreate>
  810818:	1007883a 	mov	r3,r2
  81081c:	e0bff917 	ldw	r2,-28(fp)
  810820:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
  810824:	e0bffd17 	ldw	r2,-12(fp)
  810828:	10800b04 	addi	r2,r2,44
  81082c:	e0bff715 	stw	r2,-36(fp)
  810830:	00800044 	movi	r2,1
  810834:	e0bff80d 	sth	r2,-32(fp)
  810838:	e13ff80b 	ldhu	r4,-32(fp)
  81083c:	080d5380 	call	80d538 <OSSemCreate>
  810840:	1007883a 	mov	r3,r2
  810844:	e0bff717 	ldw	r2,-36(fp)
  810848:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  81084c:	e0fffd17 	ldw	r3,-12(fp)
  810850:	00800044 	movi	r2,1
  810854:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  810858:	e0bffd17 	ldw	r2,-12(fp)
  81085c:	10800017 	ldw	r2,0(r2)
  810860:	11000104 	addi	r4,r2,4
  810864:	e0bffd17 	ldw	r2,-12(fp)
  810868:	10800817 	ldw	r2,32(r2)
  81086c:	1007883a 	mov	r3,r2
  810870:	2005883a 	mov	r2,r4
  810874:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
  810878:	e13fff17 	ldw	r4,-4(fp)
  81087c:	e17ffd17 	ldw	r5,-12(fp)
  810880:	01802074 	movhi	r6,129
  810884:	31823a04 	addi	r6,r6,2280
  810888:	0812efc0 	call	812efc <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  81088c:	e0bffd17 	ldw	r2,-12(fp)
  810890:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  810894:	e0bffd17 	ldw	r2,-12(fp)
  810898:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  81089c:	00802074 	movhi	r2,129
  8108a0:	109f5304 	addi	r2,r2,32076
  8108a4:	10800017 	ldw	r2,0(r2)
  8108a8:	100b883a 	mov	r5,r2
  8108ac:	01802074 	movhi	r6,129
  8108b0:	3182ec04 	addi	r6,r6,2992
  8108b4:	e1fffd17 	ldw	r7,-12(fp)
  8108b8:	08129880 	call	812988 <alt_alarm_start>
  8108bc:	1004403a 	cmpge	r2,r2,zero
  8108c0:	1000041e 	bne	r2,zero,8108d4 <altera_avalon_jtag_uart_init+0x11c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  8108c4:	e0fffd17 	ldw	r3,-12(fp)
  8108c8:	00a00034 	movhi	r2,32768
  8108cc:	10bfffc4 	addi	r2,r2,-1
  8108d0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  8108d4:	e037883a 	mov	sp,fp
  8108d8:	dfc00117 	ldw	ra,4(sp)
  8108dc:	df000017 	ldw	fp,0(sp)
  8108e0:	dec00204 	addi	sp,sp,8
  8108e4:	f800283a 	ret

008108e8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  8108e8:	defff104 	addi	sp,sp,-60
  8108ec:	dfc00e15 	stw	ra,56(sp)
  8108f0:	df000d15 	stw	fp,52(sp)
  8108f4:	df000d04 	addi	fp,sp,52
  8108f8:	e13ffe15 	stw	r4,-8(fp)
  8108fc:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  810900:	e0bffe17 	ldw	r2,-8(fp)
  810904:	e0bffc15 	stw	r2,-16(fp)
  unsigned int base = sp->base;
  810908:	e0bffc17 	ldw	r2,-16(fp)
  81090c:	10800017 	ldw	r2,0(r2)
  810910:	e0bffb15 	stw	r2,-20(fp)
  810914:	00000006 	br	810918 <altera_avalon_jtag_uart_irq+0x30>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  810918:	e0bffb17 	ldw	r2,-20(fp)
  81091c:	10800104 	addi	r2,r2,4
  810920:	10800037 	ldwio	r2,0(r2)
  810924:	e0bffa15 	stw	r2,-24(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  810928:	e0bffa17 	ldw	r2,-24(fp)
  81092c:	1080c00c 	andi	r2,r2,768
  810930:	1005003a 	cmpeq	r2,r2,zero
  810934:	1000991e 	bne	r2,zero,810b9c <altera_avalon_jtag_uart_irq+0x2b4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  810938:	e0bffa17 	ldw	r2,-24(fp)
  81093c:	1080400c 	andi	r2,r2,256
  810940:	1005003a 	cmpeq	r2,r2,zero
  810944:	1000481e 	bne	r2,zero,810a68 <altera_avalon_jtag_uart_irq+0x180>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  810948:	00800074 	movhi	r2,1
  81094c:	e0bff915 	stw	r2,-28(fp)
  810950:	00000006 	br	810954 <altera_avalon_jtag_uart_irq+0x6c>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810954:	e0bffc17 	ldw	r2,-16(fp)
  810958:	10800d17 	ldw	r2,52(r2)
  81095c:	10800044 	addi	r2,r2,1
  810960:	1081ffcc 	andi	r2,r2,2047
  810964:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
  810968:	e0bffc17 	ldw	r2,-16(fp)
  81096c:	10c00e17 	ldw	r3,56(r2)
  810970:	e0bff817 	ldw	r2,-32(fp)
  810974:	18802826 	beq	r3,r2,810a18 <altera_avalon_jtag_uart_irq+0x130>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  810978:	e0bffb17 	ldw	r2,-20(fp)
  81097c:	10800037 	ldwio	r2,0(r2)
  810980:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  810984:	e0bff917 	ldw	r2,-28(fp)
  810988:	10a0000c 	andi	r2,r2,32768
  81098c:	1005003a 	cmpeq	r2,r2,zero
  810990:	1000211e 	bne	r2,zero,810a18 <altera_avalon_jtag_uart_irq+0x130>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  810994:	e0bffc17 	ldw	r2,-16(fp)
  810998:	10c00d17 	ldw	r3,52(r2)
  81099c:	e0bff917 	ldw	r2,-28(fp)
  8109a0:	1009883a 	mov	r4,r2
  8109a4:	e0bffc17 	ldw	r2,-16(fp)
  8109a8:	1885883a 	add	r2,r3,r2
  8109ac:	10801104 	addi	r2,r2,68
  8109b0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8109b4:	e0bffc17 	ldw	r2,-16(fp)
  8109b8:	10800d17 	ldw	r2,52(r2)
  8109bc:	10800044 	addi	r2,r2,1
  8109c0:	10c1ffcc 	andi	r3,r2,2047
  8109c4:	e0bffc17 	ldw	r2,-16(fp)
  8109c8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
  8109cc:	e0bffc17 	ldw	r2,-16(fp)
  8109d0:	10800c17 	ldw	r2,48(r2)
  8109d4:	e0bff515 	stw	r2,-44(fp)
  8109d8:	00800044 	movi	r2,1
  8109dc:	e0bff60d 	sth	r2,-40(fp)
  8109e0:	00800044 	movi	r2,1
  8109e4:	e0bff685 	stb	r2,-38(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  8109e8:	00802074 	movhi	r2,129
  8109ec:	109f3e44 	addi	r2,r2,31993
  8109f0:	10800003 	ldbu	r2,0(r2)
  8109f4:	10803fcc 	andi	r2,r2,255
  8109f8:	1005003a 	cmpeq	r2,r2,zero
  8109fc:	103fd51e 	bne	r2,zero,810954 <altera_avalon_jtag_uart_irq+0x6c>
  {
    OSFlagPost (group, flags, opt, &err);
  810a00:	e17ff60b 	ldhu	r5,-40(fp)
  810a04:	e1bff683 	ldbu	r6,-38(fp)
  810a08:	e1fffd04 	addi	r7,fp,-12
  810a0c:	e13ff517 	ldw	r4,-44(fp)
  810a10:	080b05c0 	call	80b05c <OSFlagPost>
    return err;
  810a14:	003fcf06 	br	810954 <altera_avalon_jtag_uart_irq+0x6c>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  810a18:	e0bff917 	ldw	r2,-28(fp)
  810a1c:	10bfffec 	andhi	r2,r2,65535
  810a20:	1005003a 	cmpeq	r2,r2,zero
  810a24:	1000101e 	bne	r2,zero,810a68 <altera_avalon_jtag_uart_irq+0x180>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  810a28:	e0bffc17 	ldw	r2,-16(fp)
  810a2c:	10c00817 	ldw	r3,32(r2)
  810a30:	00bfff84 	movi	r2,-2
  810a34:	1886703a 	and	r3,r3,r2
  810a38:	e0bffc17 	ldw	r2,-16(fp)
  810a3c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  810a40:	e0bffb17 	ldw	r2,-20(fp)
  810a44:	11000104 	addi	r4,r2,4
  810a48:	e0bffc17 	ldw	r2,-16(fp)
  810a4c:	10800817 	ldw	r2,32(r2)
  810a50:	1007883a 	mov	r3,r2
  810a54:	2005883a 	mov	r2,r4
  810a58:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  810a5c:	e0bffb17 	ldw	r2,-20(fp)
  810a60:	10800104 	addi	r2,r2,4
  810a64:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  810a68:	e0bffa17 	ldw	r2,-24(fp)
  810a6c:	1080800c 	andi	r2,r2,512
  810a70:	1005003a 	cmpeq	r2,r2,zero
  810a74:	103fa81e 	bne	r2,zero,810918 <altera_avalon_jtag_uart_irq+0x30>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  810a78:	e0bffa17 	ldw	r2,-24(fp)
  810a7c:	10bfffec 	andhi	r2,r2,65535
  810a80:	1004d43a 	srli	r2,r2,16
  810a84:	e0bff715 	stw	r2,-36(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  810a88:	00002706 	br	810b28 <altera_avalon_jtag_uart_irq+0x240>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  810a8c:	e13ffb17 	ldw	r4,-20(fp)
  810a90:	e0bffc17 	ldw	r2,-16(fp)
  810a94:	10c01017 	ldw	r3,64(r2)
  810a98:	e0bffc17 	ldw	r2,-16(fp)
  810a9c:	1885883a 	add	r2,r3,r2
  810aa0:	10821104 	addi	r2,r2,2116
  810aa4:	10800003 	ldbu	r2,0(r2)
  810aa8:	10c03fcc 	andi	r3,r2,255
  810aac:	18c0201c 	xori	r3,r3,128
  810ab0:	18ffe004 	addi	r3,r3,-128
  810ab4:	2005883a 	mov	r2,r4
  810ab8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810abc:	e0bffc17 	ldw	r2,-16(fp)
  810ac0:	10801017 	ldw	r2,64(r2)
  810ac4:	10800044 	addi	r2,r2,1
  810ac8:	10c1ffcc 	andi	r3,r2,2047
  810acc:	e0bffc17 	ldw	r2,-16(fp)
  810ad0:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
  810ad4:	e0bffc17 	ldw	r2,-16(fp)
  810ad8:	10800c17 	ldw	r2,48(r2)
  810adc:	e0bff315 	stw	r2,-52(fp)
  810ae0:	00800084 	movi	r2,2
  810ae4:	e0bff40d 	sth	r2,-48(fp)
  810ae8:	00800044 	movi	r2,1
  810aec:	e0bff485 	stb	r2,-46(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  810af0:	00802074 	movhi	r2,129
  810af4:	109f3e44 	addi	r2,r2,31993
  810af8:	10800003 	ldbu	r2,0(r2)
  810afc:	10803fcc 	andi	r2,r2,255
  810b00:	1005003a 	cmpeq	r2,r2,zero
  810b04:	1000051e 	bne	r2,zero,810b1c <altera_avalon_jtag_uart_irq+0x234>
  {
    OSFlagPost (group, flags, opt, &err);
  810b08:	e17ff40b 	ldhu	r5,-48(fp)
  810b0c:	e1bff483 	ldbu	r6,-46(fp)
  810b10:	e1fffd44 	addi	r7,fp,-11
  810b14:	e13ff317 	ldw	r4,-52(fp)
  810b18:	080b05c0 	call	80b05c <OSFlagPost>

        space--;
  810b1c:	e0bff717 	ldw	r2,-36(fp)
  810b20:	10bfffc4 	addi	r2,r2,-1
  810b24:	e0bff715 	stw	r2,-36(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  810b28:	e0bff717 	ldw	r2,-36(fp)
  810b2c:	1005003a 	cmpeq	r2,r2,zero
  810b30:	1000051e 	bne	r2,zero,810b48 <altera_avalon_jtag_uart_irq+0x260>
  810b34:	e0bffc17 	ldw	r2,-16(fp)
  810b38:	10c01017 	ldw	r3,64(r2)
  810b3c:	e0bffc17 	ldw	r2,-16(fp)
  810b40:	10800f17 	ldw	r2,60(r2)
  810b44:	18bfd11e 	bne	r3,r2,810a8c <altera_avalon_jtag_uart_irq+0x1a4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  810b48:	e0bff717 	ldw	r2,-36(fp)
  810b4c:	1005003a 	cmpeq	r2,r2,zero
  810b50:	103f711e 	bne	r2,zero,810918 <altera_avalon_jtag_uart_irq+0x30>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  810b54:	e0bffc17 	ldw	r2,-16(fp)
  810b58:	10c00817 	ldw	r3,32(r2)
  810b5c:	00bfff44 	movi	r2,-3
  810b60:	1886703a 	and	r3,r3,r2
  810b64:	e0bffc17 	ldw	r2,-16(fp)
  810b68:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  810b6c:	e0bffc17 	ldw	r2,-16(fp)
  810b70:	10800017 	ldw	r2,0(r2)
  810b74:	11000104 	addi	r4,r2,4
  810b78:	e0bffc17 	ldw	r2,-16(fp)
  810b7c:	10800817 	ldw	r2,32(r2)
  810b80:	1007883a 	mov	r3,r2
  810b84:	2005883a 	mov	r2,r4
  810b88:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  810b8c:	e0bffb17 	ldw	r2,-20(fp)
  810b90:	10800104 	addi	r2,r2,4
  810b94:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  810b98:	003f5f06 	br	810918 <altera_avalon_jtag_uart_irq+0x30>
}
  810b9c:	e037883a 	mov	sp,fp
  810ba0:	dfc00117 	ldw	ra,4(sp)
  810ba4:	df000017 	ldw	fp,0(sp)
  810ba8:	dec00204 	addi	sp,sp,8
  810bac:	f800283a 	ret

00810bb0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  810bb0:	defff804 	addi	sp,sp,-32
  810bb4:	dfc00715 	stw	ra,28(sp)
  810bb8:	df000615 	stw	fp,24(sp)
  810bbc:	df000604 	addi	fp,sp,24
  810bc0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  810bc4:	e0bfff17 	ldw	r2,-4(fp)
  810bc8:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  810bcc:	e0bffd17 	ldw	r2,-12(fp)
  810bd0:	10800017 	ldw	r2,0(r2)
  810bd4:	10800104 	addi	r2,r2,4
  810bd8:	10800037 	ldwio	r2,0(r2)
  810bdc:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  810be0:	e0bffc17 	ldw	r2,-16(fp)
  810be4:	1081000c 	andi	r2,r2,1024
  810be8:	1005003a 	cmpeq	r2,r2,zero
  810bec:	10000c1e 	bne	r2,zero,810c20 <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  810bf0:	e0bffd17 	ldw	r2,-12(fp)
  810bf4:	10800017 	ldw	r2,0(r2)
  810bf8:	11000104 	addi	r4,r2,4
  810bfc:	e0bffd17 	ldw	r2,-12(fp)
  810c00:	10800817 	ldw	r2,32(r2)
  810c04:	10810014 	ori	r2,r2,1024
  810c08:	1007883a 	mov	r3,r2
  810c0c:	2005883a 	mov	r2,r4
  810c10:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  810c14:	e0bffd17 	ldw	r2,-12(fp)
  810c18:	10000915 	stw	zero,36(r2)
  810c1c:	00002106 	br	810ca4 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  810c20:	e0bffd17 	ldw	r2,-12(fp)
  810c24:	10c00917 	ldw	r3,36(r2)
  810c28:	00a00034 	movhi	r2,32768
  810c2c:	10bfff04 	addi	r2,r2,-4
  810c30:	10c01c36 	bltu	r2,r3,810ca4 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
  810c34:	e0bffd17 	ldw	r2,-12(fp)
  810c38:	10800917 	ldw	r2,36(r2)
  810c3c:	10c00044 	addi	r3,r2,1
  810c40:	e0bffd17 	ldw	r2,-12(fp)
  810c44:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
  810c48:	e0bffd17 	ldw	r2,-12(fp)
  810c4c:	10c00917 	ldw	r3,36(r2)
  810c50:	e0bffd17 	ldw	r2,-12(fp)
  810c54:	10800117 	ldw	r2,4(r2)
  810c58:	18801236 	bltu	r3,r2,810ca4 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
  810c5c:	e0bffd17 	ldw	r2,-12(fp)
  810c60:	10800c17 	ldw	r2,48(r2)
  810c64:	e0bffa15 	stw	r2,-24(fp)
  810c68:	00800104 	movi	r2,4
  810c6c:	e0bffb0d 	sth	r2,-20(fp)
  810c70:	00800044 	movi	r2,1
  810c74:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  810c78:	00802074 	movhi	r2,129
  810c7c:	109f3e44 	addi	r2,r2,31993
  810c80:	10800003 	ldbu	r2,0(r2)
  810c84:	10803fcc 	andi	r2,r2,255
  810c88:	1005003a 	cmpeq	r2,r2,zero
  810c8c:	1000051e 	bne	r2,zero,810ca4 <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
  810c90:	e17ffb0b 	ldhu	r5,-20(fp)
  810c94:	e1bffb83 	ldbu	r6,-18(fp)
  810c98:	e1fffe04 	addi	r7,fp,-8
  810c9c:	e13ffa17 	ldw	r4,-24(fp)
  810ca0:	080b05c0 	call	80b05c <OSFlagPost>
  810ca4:	00802074 	movhi	r2,129
  810ca8:	109f5304 	addi	r2,r2,32076
  810cac:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
  810cb0:	e037883a 	mov	sp,fp
  810cb4:	dfc00117 	ldw	ra,4(sp)
  810cb8:	df000017 	ldw	fp,0(sp)
  810cbc:	dec00204 	addi	sp,sp,8
  810cc0:	f800283a 	ret

00810cc4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  810cc4:	defffc04 	addi	sp,sp,-16
  810cc8:	df000315 	stw	fp,12(sp)
  810ccc:	df000304 	addi	fp,sp,12
  810cd0:	e13ffd15 	stw	r4,-12(fp)
  810cd4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  810cd8:	00000706 	br	810cf8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  810cdc:	e0bffe17 	ldw	r2,-8(fp)
  810ce0:	1090000c 	andi	r2,r2,16384
  810ce4:	1005003a 	cmpeq	r2,r2,zero
  810ce8:	1000031e 	bne	r2,zero,810cf8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  810cec:	00bffd44 	movi	r2,-11
  810cf0:	e0bfff15 	stw	r2,-4(fp)
  810cf4:	00000b06 	br	810d24 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  810cf8:	e0bffd17 	ldw	r2,-12(fp)
  810cfc:	10c01017 	ldw	r3,64(r2)
  810d00:	e0bffd17 	ldw	r2,-12(fp)
  810d04:	10800f17 	ldw	r2,60(r2)
  810d08:	18800526 	beq	r3,r2,810d20 <altera_avalon_jtag_uart_close+0x5c>
  810d0c:	e0bffd17 	ldw	r2,-12(fp)
  810d10:	10c00917 	ldw	r3,36(r2)
  810d14:	e0bffd17 	ldw	r2,-12(fp)
  810d18:	10800117 	ldw	r2,4(r2)
  810d1c:	18bfef36 	bltu	r3,r2,810cdc <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  810d20:	e03fff15 	stw	zero,-4(fp)
  810d24:	e0bfff17 	ldw	r2,-4(fp)
}
  810d28:	e037883a 	mov	sp,fp
  810d2c:	df000017 	ldw	fp,0(sp)
  810d30:	dec00104 	addi	sp,sp,4
  810d34:	f800283a 	ret

00810d38 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  810d38:	defff804 	addi	sp,sp,-32
  810d3c:	df000715 	stw	fp,28(sp)
  810d40:	df000704 	addi	fp,sp,28
  810d44:	e13ffb15 	stw	r4,-20(fp)
  810d48:	e17ffc15 	stw	r5,-16(fp)
  810d4c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  810d50:	00bff9c4 	movi	r2,-25
  810d54:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  810d58:	e0bffc17 	ldw	r2,-16(fp)
  810d5c:	e0bfff15 	stw	r2,-4(fp)
  810d60:	e0ffff17 	ldw	r3,-4(fp)
  810d64:	189a8060 	cmpeqi	r2,r3,27137
  810d68:	1000041e 	bne	r2,zero,810d7c <altera_avalon_jtag_uart_ioctl+0x44>
  810d6c:	e0ffff17 	ldw	r3,-4(fp)
  810d70:	189a80a0 	cmpeqi	r2,r3,27138
  810d74:	10001b1e 	bne	r2,zero,810de4 <altera_avalon_jtag_uart_ioctl+0xac>
  810d78:	00002706 	br	810e18 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  810d7c:	e0bffb17 	ldw	r2,-20(fp)
  810d80:	10c00117 	ldw	r3,4(r2)
  810d84:	00a00034 	movhi	r2,32768
  810d88:	10bfffc4 	addi	r2,r2,-1
  810d8c:	18802226 	beq	r3,r2,810e18 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  810d90:	e0bffd17 	ldw	r2,-12(fp)
  810d94:	10800017 	ldw	r2,0(r2)
  810d98:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  810d9c:	e0bff917 	ldw	r2,-28(fp)
  810da0:	10800090 	cmplti	r2,r2,2
  810da4:	1000071e 	bne	r2,zero,810dc4 <altera_avalon_jtag_uart_ioctl+0x8c>
  810da8:	e0fff917 	ldw	r3,-28(fp)
  810dac:	00a00034 	movhi	r2,32768
  810db0:	10bfffc4 	addi	r2,r2,-1
  810db4:	18800326 	beq	r3,r2,810dc4 <altera_avalon_jtag_uart_ioctl+0x8c>
  810db8:	e0bff917 	ldw	r2,-28(fp)
  810dbc:	e0bffe15 	stw	r2,-8(fp)
  810dc0:	00000306 	br	810dd0 <altera_avalon_jtag_uart_ioctl+0x98>
  810dc4:	00e00034 	movhi	r3,32768
  810dc8:	18ffff84 	addi	r3,r3,-2
  810dcc:	e0fffe15 	stw	r3,-8(fp)
  810dd0:	e0bffb17 	ldw	r2,-20(fp)
  810dd4:	e0fffe17 	ldw	r3,-8(fp)
  810dd8:	10c00115 	stw	r3,4(r2)
      rc = 0;
  810ddc:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  810de0:	00000d06 	br	810e18 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  810de4:	e0bffb17 	ldw	r2,-20(fp)
  810de8:	10c00117 	ldw	r3,4(r2)
  810dec:	00a00034 	movhi	r2,32768
  810df0:	10bfffc4 	addi	r2,r2,-1
  810df4:	18800826 	beq	r3,r2,810e18 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  810df8:	e13ffd17 	ldw	r4,-12(fp)
  810dfc:	e0bffb17 	ldw	r2,-20(fp)
  810e00:	10c00917 	ldw	r3,36(r2)
  810e04:	e0bffb17 	ldw	r2,-20(fp)
  810e08:	10800117 	ldw	r2,4(r2)
  810e0c:	1885803a 	cmpltu	r2,r3,r2
  810e10:	20800015 	stw	r2,0(r4)
      rc = 0;
  810e14:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  810e18:	e0bffa17 	ldw	r2,-24(fp)
}
  810e1c:	e037883a 	mov	sp,fp
  810e20:	df000017 	ldw	fp,0(sp)
  810e24:	dec00104 	addi	sp,sp,4
  810e28:	f800283a 	ret

00810e2c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  810e2c:	deffeb04 	addi	sp,sp,-84
  810e30:	dfc01415 	stw	ra,80(sp)
  810e34:	df001315 	stw	fp,76(sp)
  810e38:	df001304 	addi	fp,sp,76
  810e3c:	e13ffb15 	stw	r4,-20(fp)
  810e40:	e17ffc15 	stw	r5,-16(fp)
  810e44:	e1bffd15 	stw	r6,-12(fp)
  810e48:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  810e4c:	e0bffc17 	ldw	r2,-16(fp)
  810e50:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
  810e54:	e0bffb17 	ldw	r2,-20(fp)
  810e58:	10800a17 	ldw	r2,40(r2)
  810e5c:	e0bff315 	stw	r2,-52(fp)
  810e60:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  810e64:	e17ff40b 	ldhu	r5,-48(fp)
  810e68:	e1bffa44 	addi	r6,fp,-23
  810e6c:	e13ff317 	ldw	r4,-52(fp)
  810e70:	080d8ec0 	call	80d8ec <OSSemPend>

  while (space > 0)
  810e74:	00006406 	br	811008 <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  810e78:	e0bffb17 	ldw	r2,-20(fp)
  810e7c:	10800d17 	ldw	r2,52(r2)
  810e80:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
  810e84:	e0bffb17 	ldw	r2,-20(fp)
  810e88:	10800e17 	ldw	r2,56(r2)
  810e8c:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
  810e90:	e0fff617 	ldw	r3,-40(fp)
  810e94:	e0bff517 	ldw	r2,-44(fp)
  810e98:	18800536 	bltu	r3,r2,810eb0 <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
  810e9c:	e0bff617 	ldw	r2,-40(fp)
  810ea0:	e0fff517 	ldw	r3,-44(fp)
  810ea4:	10c5c83a 	sub	r2,r2,r3
  810ea8:	e0bff715 	stw	r2,-36(fp)
  810eac:	00000406 	br	810ec0 <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  810eb0:	00820004 	movi	r2,2048
  810eb4:	e0fff517 	ldw	r3,-44(fp)
  810eb8:	10c5c83a 	sub	r2,r2,r3
  810ebc:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
  810ec0:	e0bff717 	ldw	r2,-36(fp)
  810ec4:	1005003a 	cmpeq	r2,r2,zero
  810ec8:	10001f1e 	bne	r2,zero,810f48 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
  810ecc:	e0fffd17 	ldw	r3,-12(fp)
  810ed0:	e0bff717 	ldw	r2,-36(fp)
  810ed4:	1880022e 	bgeu	r3,r2,810ee0 <altera_avalon_jtag_uart_read+0xb4>
        n = space;
  810ed8:	e0bffd17 	ldw	r2,-12(fp)
  810edc:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  810ee0:	e0bffb17 	ldw	r2,-20(fp)
  810ee4:	10c01104 	addi	r3,r2,68
  810ee8:	e0bff517 	ldw	r2,-44(fp)
  810eec:	1887883a 	add	r3,r3,r2
  810ef0:	e0bff917 	ldw	r2,-28(fp)
  810ef4:	1009883a 	mov	r4,r2
  810ef8:	180b883a 	mov	r5,r3
  810efc:	e1bff717 	ldw	r6,-36(fp)
  810f00:	08054480 	call	805448 <memcpy>
      ptr   += n;
  810f04:	e0fff717 	ldw	r3,-36(fp)
  810f08:	e0bff917 	ldw	r2,-28(fp)
  810f0c:	10c5883a 	add	r2,r2,r3
  810f10:	e0bff915 	stw	r2,-28(fp)
      space -= n;
  810f14:	e0fffd17 	ldw	r3,-12(fp)
  810f18:	e0bff717 	ldw	r2,-36(fp)
  810f1c:	1885c83a 	sub	r2,r3,r2
  810f20:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810f24:	e0fff517 	ldw	r3,-44(fp)
  810f28:	e0bff717 	ldw	r2,-36(fp)
  810f2c:	1885883a 	add	r2,r3,r2
  810f30:	10c1ffcc 	andi	r3,r2,2047
  810f34:	e0bffb17 	ldw	r2,-20(fp)
  810f38:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
  810f3c:	e0bffd17 	ldw	r2,-12(fp)
  810f40:	10800048 	cmpgei	r2,r2,1
  810f44:	103fcc1e 	bne	r2,zero,810e78 <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
  810f48:	e0fff917 	ldw	r3,-28(fp)
  810f4c:	e0bffc17 	ldw	r2,-16(fp)
  810f50:	1880301e 	bne	r3,r2,811014 <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  810f54:	e0bffe17 	ldw	r2,-8(fp)
  810f58:	1090000c 	andi	r2,r2,16384
  810f5c:	1004c03a 	cmpne	r2,r2,zero
  810f60:	10002c1e 	bne	r2,zero,811014 <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
  810f64:	00802074 	movhi	r2,129
  810f68:	109f3e44 	addi	r2,r2,31993
  810f6c:	10800003 	ldbu	r2,0(r2)
  810f70:	10803fcc 	andi	r2,r2,255
  810f74:	10800058 	cmpnei	r2,r2,1
  810f78:	1000161e 	bne	r2,zero,810fd4 <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
  810f7c:	e0bffb17 	ldw	r2,-20(fp)
  810f80:	10800c17 	ldw	r2,48(r2)
  810f84:	e0bff015 	stw	r2,-64(fp)
  810f88:	00800144 	movi	r2,5
  810f8c:	e0bff10d 	sth	r2,-60(fp)
  810f90:	00bfe0c4 	movi	r2,-125
  810f94:	e0bff185 	stb	r2,-58(fp)
  810f98:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  810f9c:	00802074 	movhi	r2,129
  810fa0:	109f3e44 	addi	r2,r2,31993
  810fa4:	10800003 	ldbu	r2,0(r2)
  810fa8:	10803fcc 	andi	r2,r2,255
  810fac:	1005003a 	cmpeq	r2,r2,zero
  810fb0:	1000111e 	bne	r2,zero,810ff8 <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  810fb4:	e17ff10b 	ldhu	r5,-60(fp)
  810fb8:	e1bff183 	ldbu	r6,-58(fp)
  810fbc:	e1fff20b 	ldhu	r7,-56(fp)
  810fc0:	e0bffa04 	addi	r2,fp,-24
  810fc4:	d8800015 	stw	r2,0(sp)
  810fc8:	e13ff017 	ldw	r4,-64(fp)
  810fcc:	080a9b00 	call	80a9b0 <OSFlagPend>
    return err;
  810fd0:	00000906 	br	810ff8 <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  810fd4:	e0bffb17 	ldw	r2,-20(fp)
  810fd8:	10c00d17 	ldw	r3,52(r2)
  810fdc:	e0bff617 	ldw	r2,-40(fp)
  810fe0:	1880051e 	bne	r3,r2,810ff8 <altera_avalon_jtag_uart_read+0x1cc>
  810fe4:	e0bffb17 	ldw	r2,-20(fp)
  810fe8:	10c00917 	ldw	r3,36(r2)
  810fec:	e0bffb17 	ldw	r2,-20(fp)
  810ff0:	10800117 	ldw	r2,4(r2)
  810ff4:	18bff736 	bltu	r3,r2,810fd4 <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  810ff8:	e0bffb17 	ldw	r2,-20(fp)
  810ffc:	10c00d17 	ldw	r3,52(r2)
  811000:	e0bff617 	ldw	r2,-40(fp)
  811004:	18800326 	beq	r3,r2,811014 <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  811008:	e0bffd17 	ldw	r2,-12(fp)
  81100c:	10800048 	cmpgei	r2,r2,1
  811010:	103f991e 	bne	r2,zero,810e78 <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
  811014:	e0bffb17 	ldw	r2,-20(fp)
  811018:	11000a17 	ldw	r4,40(r2)
  81101c:	080dce40 	call	80dce4 <OSSemPost>

  if (ptr != buffer)
  811020:	e0fff917 	ldw	r3,-28(fp)
  811024:	e0bffc17 	ldw	r2,-16(fp)
  811028:	18801926 	beq	r3,r2,811090 <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81102c:	0005303a 	rdctl	r2,status
  811030:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811034:	e0ffef17 	ldw	r3,-68(fp)
  811038:	00bfff84 	movi	r2,-2
  81103c:	1884703a 	and	r2,r3,r2
  811040:	1001703a 	wrctl	status,r2
  
  return context;
  811044:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  811048:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  81104c:	e0bffb17 	ldw	r2,-20(fp)
  811050:	10800817 	ldw	r2,32(r2)
  811054:	10c00054 	ori	r3,r2,1
  811058:	e0bffb17 	ldw	r2,-20(fp)
  81105c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  811060:	e0bffb17 	ldw	r2,-20(fp)
  811064:	10800017 	ldw	r2,0(r2)
  811068:	11000104 	addi	r4,r2,4
  81106c:	e0bffb17 	ldw	r2,-20(fp)
  811070:	10800817 	ldw	r2,32(r2)
  811074:	1007883a 	mov	r3,r2
  811078:	2005883a 	mov	r2,r4
  81107c:	10c00035 	stwio	r3,0(r2)
  811080:	e0bff817 	ldw	r2,-32(fp)
  811084:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811088:	e0bfee17 	ldw	r2,-72(fp)
  81108c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  811090:	e0fff917 	ldw	r3,-28(fp)
  811094:	e0bffc17 	ldw	r2,-16(fp)
  811098:	18800526 	beq	r3,r2,8110b0 <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
  81109c:	e0fff917 	ldw	r3,-28(fp)
  8110a0:	e0bffc17 	ldw	r2,-16(fp)
  8110a4:	1887c83a 	sub	r3,r3,r2
  8110a8:	e0ffff15 	stw	r3,-4(fp)
  8110ac:	00000906 	br	8110d4 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
  8110b0:	e0bffe17 	ldw	r2,-8(fp)
  8110b4:	1090000c 	andi	r2,r2,16384
  8110b8:	1005003a 	cmpeq	r2,r2,zero
  8110bc:	1000031e 	bne	r2,zero,8110cc <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
  8110c0:	00bffd44 	movi	r2,-11
  8110c4:	e0bfff15 	stw	r2,-4(fp)
  8110c8:	00000206 	br	8110d4 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
  8110cc:	00bffec4 	movi	r2,-5
  8110d0:	e0bfff15 	stw	r2,-4(fp)
  8110d4:	e0bfff17 	ldw	r2,-4(fp)
}
  8110d8:	e037883a 	mov	sp,fp
  8110dc:	dfc00117 	ldw	ra,4(sp)
  8110e0:	df000017 	ldw	fp,0(sp)
  8110e4:	dec00204 	addi	sp,sp,8
  8110e8:	f800283a 	ret

008110ec <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  8110ec:	deffeb04 	addi	sp,sp,-84
  8110f0:	dfc01415 	stw	ra,80(sp)
  8110f4:	df001315 	stw	fp,76(sp)
  8110f8:	df001304 	addi	fp,sp,76
  8110fc:	e13ffb15 	stw	r4,-20(fp)
  811100:	e17ffc15 	stw	r5,-16(fp)
  811104:	e1bffd15 	stw	r6,-12(fp)
  811108:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  81110c:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  811110:	e0bffc17 	ldw	r2,-16(fp)
  811114:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
  811118:	e0bffb17 	ldw	r2,-20(fp)
  81111c:	10800b17 	ldw	r2,44(r2)
  811120:	e0bff315 	stw	r2,-52(fp)
  811124:	e03ff40d 	sth	zero,-48(fp)
  811128:	e17ff40b 	ldhu	r5,-48(fp)
  81112c:	e1bffa04 	addi	r6,fp,-24
  811130:	e13ff317 	ldw	r4,-52(fp)
  811134:	080d8ec0 	call	80d8ec <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  811138:	00003a06 	br	811224 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  81113c:	e0bffb17 	ldw	r2,-20(fp)
  811140:	10800f17 	ldw	r2,60(r2)
  811144:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  811148:	e0bffb17 	ldw	r2,-20(fp)
  81114c:	10801017 	ldw	r2,64(r2)
  811150:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
  811154:	e0fff917 	ldw	r3,-28(fp)
  811158:	e0bff817 	ldw	r2,-32(fp)
  81115c:	1880062e 	bgeu	r3,r2,811178 <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
  811160:	e0fff817 	ldw	r3,-32(fp)
  811164:	e0bff917 	ldw	r2,-28(fp)
  811168:	1885c83a 	sub	r2,r3,r2
  81116c:	10bfffc4 	addi	r2,r2,-1
  811170:	e0bff715 	stw	r2,-36(fp)
  811174:	00000c06 	br	8111a8 <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
  811178:	e0bff817 	ldw	r2,-32(fp)
  81117c:	1005003a 	cmpeq	r2,r2,zero
  811180:	1000051e 	bne	r2,zero,811198 <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  811184:	00820004 	movi	r2,2048
  811188:	e0fff917 	ldw	r3,-28(fp)
  81118c:	10c5c83a 	sub	r2,r2,r3
  811190:	e0bff715 	stw	r2,-36(fp)
  811194:	00000406 	br	8111a8 <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  811198:	0081ffc4 	movi	r2,2047
  81119c:	e0fff917 	ldw	r3,-28(fp)
  8111a0:	10c5c83a 	sub	r2,r2,r3
  8111a4:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
  8111a8:	e0bff717 	ldw	r2,-36(fp)
  8111ac:	1005003a 	cmpeq	r2,r2,zero
  8111b0:	10001f1e 	bne	r2,zero,811230 <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
  8111b4:	e0fffd17 	ldw	r3,-12(fp)
  8111b8:	e0bff717 	ldw	r2,-36(fp)
  8111bc:	1880022e 	bgeu	r3,r2,8111c8 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
  8111c0:	e0bffd17 	ldw	r2,-12(fp)
  8111c4:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  8111c8:	e0bffb17 	ldw	r2,-20(fp)
  8111cc:	10c21104 	addi	r3,r2,2116
  8111d0:	e0bff917 	ldw	r2,-28(fp)
  8111d4:	1885883a 	add	r2,r3,r2
  8111d8:	e0fffc17 	ldw	r3,-16(fp)
  8111dc:	1009883a 	mov	r4,r2
  8111e0:	180b883a 	mov	r5,r3
  8111e4:	e1bff717 	ldw	r6,-36(fp)
  8111e8:	08054480 	call	805448 <memcpy>
      ptr   += n;
  8111ec:	e0fff717 	ldw	r3,-36(fp)
  8111f0:	e0bffc17 	ldw	r2,-16(fp)
  8111f4:	10c5883a 	add	r2,r2,r3
  8111f8:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  8111fc:	e0fffd17 	ldw	r3,-12(fp)
  811200:	e0bff717 	ldw	r2,-36(fp)
  811204:	1885c83a 	sub	r2,r3,r2
  811208:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  81120c:	e0fff917 	ldw	r3,-28(fp)
  811210:	e0bff717 	ldw	r2,-36(fp)
  811214:	1885883a 	add	r2,r3,r2
  811218:	10c1ffcc 	andi	r3,r2,2047
  81121c:	e0bffb17 	ldw	r2,-20(fp)
  811220:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  811224:	e0bffd17 	ldw	r2,-12(fp)
  811228:	10800048 	cmpgei	r2,r2,1
  81122c:	103fc31e 	bne	r2,zero,81113c <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811230:	0005303a 	rdctl	r2,status
  811234:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811238:	e0fff217 	ldw	r3,-56(fp)
  81123c:	00bfff84 	movi	r2,-2
  811240:	1884703a 	and	r2,r3,r2
  811244:	1001703a 	wrctl	status,r2
  
  return context;
  811248:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  81124c:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  811250:	e0bffb17 	ldw	r2,-20(fp)
  811254:	10800817 	ldw	r2,32(r2)
  811258:	10c00094 	ori	r3,r2,2
  81125c:	e0bffb17 	ldw	r2,-20(fp)
  811260:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  811264:	e0bffb17 	ldw	r2,-20(fp)
  811268:	10800017 	ldw	r2,0(r2)
  81126c:	11000104 	addi	r4,r2,4
  811270:	e0bffb17 	ldw	r2,-20(fp)
  811274:	10800817 	ldw	r2,32(r2)
  811278:	1007883a 	mov	r3,r2
  81127c:	2005883a 	mov	r2,r4
  811280:	10c00035 	stwio	r3,0(r2)
  811284:	e0bff617 	ldw	r2,-40(fp)
  811288:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81128c:	e0bff117 	ldw	r2,-60(fp)
  811290:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  811294:	e0bffd17 	ldw	r2,-12(fp)
  811298:	10800050 	cmplti	r2,r2,1
  81129c:	10002d1e 	bne	r2,zero,811354 <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
  8112a0:	e0bffe17 	ldw	r2,-8(fp)
  8112a4:	1090000c 	andi	r2,r2,16384
  8112a8:	1004c03a 	cmpne	r2,r2,zero
  8112ac:	10002c1e 	bne	r2,zero,811360 <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
  8112b0:	00802074 	movhi	r2,129
  8112b4:	109f3e44 	addi	r2,r2,31993
  8112b8:	10800003 	ldbu	r2,0(r2)
  8112bc:	10803fcc 	andi	r2,r2,255
  8112c0:	10800058 	cmpnei	r2,r2,1
  8112c4:	1000161e 	bne	r2,zero,811320 <altera_avalon_jtag_uart_write+0x234>
         * When running in a multi-threaded mode, we pend on the write event
         * flag set or the timeout flag in the isr. This avoids wasting CPU
         * cycles waiting in this thread, when we could be doing something
         * more profitable elsewhere.
         */
        ALT_FLAG_PEND (sp->events,
  8112c8:	e0bffb17 	ldw	r2,-20(fp)
  8112cc:	10800c17 	ldw	r2,48(r2)
  8112d0:	e0bfee15 	stw	r2,-72(fp)
  8112d4:	00800184 	movi	r2,6
  8112d8:	e0bfef0d 	sth	r2,-68(fp)
  8112dc:	00bfe0c4 	movi	r2,-125
  8112e0:	e0bfef85 	stb	r2,-66(fp)
  8112e4:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  8112e8:	00802074 	movhi	r2,129
  8112ec:	109f3e44 	addi	r2,r2,31993
  8112f0:	10800003 	ldbu	r2,0(r2)
  8112f4:	10803fcc 	andi	r2,r2,255
  8112f8:	1005003a 	cmpeq	r2,r2,zero
  8112fc:	1000111e 	bne	r2,zero,811344 <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  811300:	e17fef0b 	ldhu	r5,-68(fp)
  811304:	e1bfef83 	ldbu	r6,-66(fp)
  811308:	e1fff00b 	ldhu	r7,-64(fp)
  81130c:	e0bffa44 	addi	r2,fp,-23
  811310:	d8800015 	stw	r2,0(sp)
  811314:	e13fee17 	ldw	r4,-72(fp)
  811318:	080a9b00 	call	80a9b0 <OSFlagPend>
    return err;
  81131c:	00000906 	br	811344 <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  811320:	e0bffb17 	ldw	r2,-20(fp)
  811324:	10c01017 	ldw	r3,64(r2)
  811328:	e0bff817 	ldw	r2,-32(fp)
  81132c:	1880051e 	bne	r3,r2,811344 <altera_avalon_jtag_uart_write+0x258>
  811330:	e0bffb17 	ldw	r2,-20(fp)
  811334:	10c00917 	ldw	r3,36(r2)
  811338:	e0bffb17 	ldw	r2,-20(fp)
  81133c:	10800117 	ldw	r2,4(r2)
  811340:	18bff736 	bltu	r3,r2,811320 <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  811344:	e0bffb17 	ldw	r2,-20(fp)
  811348:	10c01017 	ldw	r3,64(r2)
  81134c:	e0bff817 	ldw	r2,-32(fp)
  811350:	18800326 	beq	r3,r2,811360 <altera_avalon_jtag_uart_write+0x274>
        break;
    }
  }
  while (count > 0);
  811354:	e0bffd17 	ldw	r2,-12(fp)
  811358:	10800048 	cmpgei	r2,r2,1
  81135c:	103fb11e 	bne	r2,zero,811224 <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
  811360:	e0bffb17 	ldw	r2,-20(fp)
  811364:	11000b17 	ldw	r4,44(r2)
  811368:	080dce40 	call	80dce4 <OSSemPost>

  if (ptr != start)
  81136c:	e0fffc17 	ldw	r3,-16(fp)
  811370:	e0bff517 	ldw	r2,-44(fp)
  811374:	18800526 	beq	r3,r2,81138c <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
  811378:	e0fffc17 	ldw	r3,-16(fp)
  81137c:	e0bff517 	ldw	r2,-44(fp)
  811380:	1887c83a 	sub	r3,r3,r2
  811384:	e0ffff15 	stw	r3,-4(fp)
  811388:	00000906 	br	8113b0 <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
  81138c:	e0bffe17 	ldw	r2,-8(fp)
  811390:	1090000c 	andi	r2,r2,16384
  811394:	1005003a 	cmpeq	r2,r2,zero
  811398:	1000031e 	bne	r2,zero,8113a8 <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
  81139c:	00bffd44 	movi	r2,-11
  8113a0:	e0bfff15 	stw	r2,-4(fp)
  8113a4:	00000206 	br	8113b0 <altera_avalon_jtag_uart_write+0x2c4>
  else
    return -EIO; /* Host not connected */
  8113a8:	00bffec4 	movi	r2,-5
  8113ac:	e0bfff15 	stw	r2,-4(fp)
  8113b0:	e0bfff17 	ldw	r2,-4(fp)
}
  8113b4:	e037883a 	mov	sp,fp
  8113b8:	dfc00117 	ldw	ra,4(sp)
  8113bc:	df000017 	ldw	fp,0(sp)
  8113c0:	dec00204 	addi	sp,sp,8
  8113c4:	f800283a 	ret

008113c8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  8113c8:	defff904 	addi	sp,sp,-28
  8113cc:	dfc00615 	stw	ra,24(sp)
  8113d0:	df000515 	stw	fp,20(sp)
  8113d4:	df000504 	addi	fp,sp,20
  8113d8:	e13ffe15 	stw	r4,-8(fp)
  8113dc:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  8113e0:	e0bffe17 	ldw	r2,-8(fp)
  8113e4:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  8113e8:	e0bffe17 	ldw	r2,-8(fp)
  8113ec:	10800104 	addi	r2,r2,4
  8113f0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8113f4:	0005303a 	rdctl	r2,status
  8113f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8113fc:	e0fffc17 	ldw	r3,-16(fp)
  811400:	00bfff84 	movi	r2,-2
  811404:	1884703a 	and	r2,r3,r2
  811408:	1001703a 	wrctl	status,r2
  
  return context;
  81140c:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  811410:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
  811414:	08134180 	call	813418 <alt_tick>
  811418:	e0bffd17 	ldw	r2,-12(fp)
  81141c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811420:	e0bffb17 	ldw	r2,-20(fp)
  811424:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  811428:	e037883a 	mov	sp,fp
  81142c:	dfc00117 	ldw	ra,4(sp)
  811430:	df000017 	ldw	fp,0(sp)
  811434:	dec00204 	addi	sp,sp,8
  811438:	f800283a 	ret

0081143c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  81143c:	defff904 	addi	sp,sp,-28
  811440:	dfc00615 	stw	ra,24(sp)
  811444:	df000515 	stw	fp,20(sp)
  811448:	df000504 	addi	fp,sp,20
  81144c:	e13ffc15 	stw	r4,-16(fp)
  811450:	e17ffd15 	stw	r5,-12(fp)
  811454:	e1bffe15 	stw	r6,-8(fp)
  811458:	e1ffff15 	stw	r7,-4(fp)
  81145c:	e0bfff17 	ldw	r2,-4(fp)
  811460:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  811464:	00802074 	movhi	r2,129
  811468:	109f5304 	addi	r2,r2,32076
  81146c:	10800017 	ldw	r2,0(r2)
  811470:	1004c03a 	cmpne	r2,r2,zero
  811474:	1000041e 	bne	r2,zero,811488 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  811478:	00c02074 	movhi	r3,129
  81147c:	18df5304 	addi	r3,r3,32076
  811480:	e0bffb17 	ldw	r2,-20(fp)
  811484:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  811488:	e0bffc17 	ldw	r2,-16(fp)
  81148c:	10800104 	addi	r2,r2,4
  811490:	1007883a 	mov	r3,r2
  811494:	008001c4 	movi	r2,7
  811498:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
  81149c:	e13ffe17 	ldw	r4,-8(fp)
  8114a0:	e17ffc17 	ldw	r5,-16(fp)
  8114a4:	01802074 	movhi	r6,129
  8114a8:	3184f204 	addi	r6,r6,5064
  8114ac:	0812efc0 	call	812efc <alt_irq_register>
#endif  
}
  8114b0:	e037883a 	mov	sp,fp
  8114b4:	dfc00117 	ldw	ra,4(sp)
  8114b8:	df000017 	ldw	fp,0(sp)
  8114bc:	dec00204 	addi	sp,sp,8
  8114c0:	f800283a 	ret

008114c4 <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
  8114c4:	defffc04 	addi	sp,sp,-16
  8114c8:	dfc00315 	stw	ra,12(sp)
  8114cc:	df000215 	stw	fp,8(sp)
  8114d0:	df000204 	addi	fp,sp,8
  8114d4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
  8114d8:	e13fff17 	ldw	r4,-4(fp)
  8114dc:	01402074 	movhi	r5,129
  8114e0:	29583104 	addi	r5,r5,24772
  8114e4:	0812cfc0 	call	812cfc <alt_find_dev>
  8114e8:	e0bffe15 	stw	r2,-8(fp)
  return dev;
  8114ec:	e0bffe17 	ldw	r2,-8(fp)
}
  8114f0:	e037883a 	mov	sp,fp
  8114f4:	dfc00117 	ldw	ra,4(sp)
  8114f8:	df000017 	ldw	fp,0(sp)
  8114fc:	dec00204 	addi	sp,sp,8
  811500:	f800283a 	ret

00811504 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
  811504:	defffd04 	addi	sp,sp,-12
  811508:	df000215 	stw	fp,8(sp)
  81150c:	df000204 	addi	fp,sp,8
  811510:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  811514:	e0bfff17 	ldw	r2,-4(fp)
  811518:	10800a17 	ldw	r2,40(r2)
  81151c:	10800037 	ldwio	r2,0(r2)
  811520:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
  811524:	e0bffe17 	ldw	r2,-8(fp)
  811528:	10800054 	ori	r2,r2,1
  81152c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  811530:	e0bfff17 	ldw	r2,-4(fp)
  811534:	10800a17 	ldw	r2,40(r2)
  811538:	e0fffe17 	ldw	r3,-8(fp)
  81153c:	10c00035 	stwio	r3,0(r2)
}
  811540:	e037883a 	mov	sp,fp
  811544:	df000017 	ldw	fp,0(sp)
  811548:	dec00104 	addi	sp,sp,4
  81154c:	f800283a 	ret

00811550 <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
  811550:	defffd04 	addi	sp,sp,-12
  811554:	df000215 	stw	fp,8(sp)
  811558:	df000204 	addi	fp,sp,8
  81155c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  811560:	e0bfff17 	ldw	r2,-4(fp)
  811564:	10800a17 	ldw	r2,40(r2)
  811568:	10800037 	ldwio	r2,0(r2)
  81156c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
  811570:	e0fffe17 	ldw	r3,-8(fp)
  811574:	00bfff84 	movi	r2,-2
  811578:	1884703a 	and	r2,r3,r2
  81157c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  811580:	e0bfff17 	ldw	r2,-4(fp)
  811584:	10800a17 	ldw	r2,40(r2)
  811588:	e0fffe17 	ldw	r3,-8(fp)
  81158c:	10c00035 	stwio	r3,0(r2)
}
  811590:	e037883a 	mov	sp,fp
  811594:	df000017 	ldw	fp,0(sp)
  811598:	dec00104 	addi	sp,sp,4
  81159c:	f800283a 	ret

008115a0 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
  8115a0:	defffd04 	addi	sp,sp,-12
  8115a4:	df000215 	stw	fp,8(sp)
  8115a8:	df000204 	addi	fp,sp,8
  8115ac:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  8115b0:	e0bfff17 	ldw	r2,-4(fp)
  8115b4:	10800a17 	ldw	r2,40(r2)
  8115b8:	10800037 	ldwio	r2,0(r2)
  8115bc:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
  8115c0:	e0bffe17 	ldw	r2,-8(fp)
  8115c4:	10800094 	ori	r2,r2,2
  8115c8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  8115cc:	e0bfff17 	ldw	r2,-4(fp)
  8115d0:	10800a17 	ldw	r2,40(r2)
  8115d4:	e0fffe17 	ldw	r3,-8(fp)
  8115d8:	10c00035 	stwio	r3,0(r2)
}
  8115dc:	e037883a 	mov	sp,fp
  8115e0:	df000017 	ldw	fp,0(sp)
  8115e4:	dec00104 	addi	sp,sp,4
  8115e8:	f800283a 	ret

008115ec <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
  8115ec:	defffd04 	addi	sp,sp,-12
  8115f0:	df000215 	stw	fp,8(sp)
  8115f4:	df000204 	addi	fp,sp,8
  8115f8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  8115fc:	e0bfff17 	ldw	r2,-4(fp)
  811600:	10800a17 	ldw	r2,40(r2)
  811604:	10800037 	ldwio	r2,0(r2)
  811608:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
  81160c:	e0fffe17 	ldw	r3,-8(fp)
  811610:	00bfff44 	movi	r2,-3
  811614:	1884703a 	and	r2,r3,r2
  811618:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  81161c:	e0bfff17 	ldw	r2,-4(fp)
  811620:	10800a17 	ldw	r2,40(r2)
  811624:	e0fffe17 	ldw	r3,-8(fp)
  811628:	10c00035 	stwio	r3,0(r2)
}
  81162c:	e037883a 	mov	sp,fp
  811630:	df000017 	ldw	fp,0(sp)
  811634:	dec00104 	addi	sp,sp,4
  811638:	f800283a 	ret

0081163c <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
  81163c:	defffd04 	addi	sp,sp,-12
  811640:	df000215 	stw	fp,8(sp)
  811644:	df000204 	addi	fp,sp,8
  811648:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  81164c:	e0bfff17 	ldw	r2,-4(fp)
  811650:	10800a17 	ldw	r2,40(r2)
  811654:	10800037 	ldwio	r2,0(r2)
  811658:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
  81165c:	e0bffe17 	ldw	r2,-8(fp)
  811660:	1080400c 	andi	r2,r2,256
  811664:	1004c03a 	cmpne	r2,r2,zero
}
  811668:	e037883a 	mov	sp,fp
  81166c:	df000017 	ldw	fp,0(sp)
  811670:	dec00104 	addi	sp,sp,4
  811674:	f800283a 	ret

00811678 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
  811678:	defffd04 	addi	sp,sp,-12
  81167c:	df000215 	stw	fp,8(sp)
  811680:	df000204 	addi	fp,sp,8
  811684:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  811688:	e0bfff17 	ldw	r2,-4(fp)
  81168c:	10800a17 	ldw	r2,40(r2)
  811690:	10800037 	ldwio	r2,0(r2)
  811694:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
  811698:	e0bffe17 	ldw	r2,-8(fp)
  81169c:	1080800c 	andi	r2,r2,512
  8116a0:	1004c03a 	cmpne	r2,r2,zero
}
  8116a4:	e037883a 	mov	sp,fp
  8116a8:	df000017 	ldw	fp,0(sp)
  8116ac:	dec00104 	addi	sp,sp,4
  8116b0:	f800283a 	ret

008116b4 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
  8116b4:	defffd04 	addi	sp,sp,-12
  8116b8:	df000215 	stw	fp,8(sp)
  8116bc:	df000204 	addi	fp,sp,8
  8116c0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  8116c4:	e0bfff17 	ldw	r2,-4(fp)
  8116c8:	10800a17 	ldw	r2,40(r2)
  8116cc:	10800037 	ldwio	r2,0(r2)
  8116d0:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
  8116d4:	e0bffe17 	ldw	r2,-8(fp)
  8116d8:	10800114 	ori	r2,r2,4
  8116dc:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
  8116e0:	e0bffe17 	ldw	r2,-8(fp)
  8116e4:	10800214 	ori	r2,r2,8
  8116e8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  8116ec:	e0bfff17 	ldw	r2,-4(fp)
  8116f0:	10800a17 	ldw	r2,40(r2)
  8116f4:	e0fffe17 	ldw	r3,-8(fp)
  8116f8:	10c00035 	stwio	r3,0(r2)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
  8116fc:	e0fffe17 	ldw	r3,-8(fp)
  811700:	00bffec4 	movi	r2,-5
  811704:	1884703a 	and	r2,r3,r2
  811708:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
  81170c:	e0fffe17 	ldw	r3,-8(fp)
  811710:	00bffdc4 	movi	r2,-9
  811714:	1884703a 	and	r2,r3,r2
  811718:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  81171c:	e0bfff17 	ldw	r2,-4(fp)
  811720:	10800a17 	ldw	r2,40(r2)
  811724:	e0fffe17 	ldw	r3,-8(fp)
  811728:	10c00035 	stwio	r3,0(r2)
}
  81172c:	e037883a 	mov	sp,fp
  811730:	df000017 	ldw	fp,0(sp)
  811734:	dec00104 	addi	sp,sp,4
  811738:	f800283a 	ret

0081173c <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
  81173c:	defffb04 	addi	sp,sp,-20
  811740:	df000415 	stw	fp,16(sp)
  811744:	df000404 	addi	fp,sp,16
  811748:	e13ffd15 	stw	r4,-12(fp)
  81174c:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  811750:	e0bffd17 	ldw	r2,-12(fp)
  811754:	10800a17 	ldw	r2,40(r2)
  811758:	10800104 	addi	r2,r2,4
  81175c:	10800037 	ldwio	r2,0(r2)
  811760:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  811764:	e0bffe17 	ldw	r2,-8(fp)
  811768:	1004c03a 	cmpne	r2,r2,zero
  81176c:	1000051e 	bne	r2,zero,811784 <alt_up_audio_read_fifo_avail+0x48>
  811770:	e0bffc17 	ldw	r2,-16(fp)
  811774:	10bfc00c 	andi	r2,r2,65280
  811778:	1004d23a 	srli	r2,r2,8
  81177c:	e0bfff15 	stw	r2,-4(fp)
  811780:	00000306 	br	811790 <alt_up_audio_read_fifo_avail+0x54>
  811784:	e0bffc17 	ldw	r2,-16(fp)
  811788:	10803fcc 	andi	r2,r2,255
  81178c:	e0bfff15 	stw	r2,-4(fp)
  811790:	e0bfff17 	ldw	r2,-4(fp)
  811794:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
  811798:	e0bffc17 	ldw	r2,-16(fp)
}
  81179c:	e037883a 	mov	sp,fp
  8117a0:	df000017 	ldw	fp,0(sp)
  8117a4:	dec00104 	addi	sp,sp,4
  8117a8:	f800283a 	ret

008117ac <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  8117ac:	defff904 	addi	sp,sp,-28
  8117b0:	dfc00615 	stw	ra,24(sp)
  8117b4:	df000515 	stw	fp,20(sp)
  8117b8:	df000504 	addi	fp,sp,20
  8117bc:	e13ffc15 	stw	r4,-16(fp)
  8117c0:	e17ffd15 	stw	r5,-12(fp)
  8117c4:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
  8117c8:	e13ffc17 	ldw	r4,-16(fp)
  8117cc:	01400044 	movi	r5,1
  8117d0:	081173c0 	call	81173c <alt_up_audio_read_fifo_avail>
  8117d4:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
  8117d8:	e0bffb17 	ldw	r2,-20(fp)
  8117dc:	10801868 	cmpgeui	r2,r2,97
  8117e0:	1000021e 	bne	r2,zero,8117ec <alt_up_audio_record_r+0x40>
		return 0;
  8117e4:	e03fff15 	stw	zero,-4(fp)
  8117e8:	00000606 	br	811804 <alt_up_audio_record_r+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  8117ec:	e13ffc17 	ldw	r4,-16(fp)
  8117f0:	e17ffd17 	ldw	r5,-12(fp)
  8117f4:	e1bffe17 	ldw	r6,-8(fp)
  8117f8:	01c00044 	movi	r7,1
  8117fc:	08119e00 	call	8119e0 <alt_up_audio_read_fifo>
  811800:	e0bfff15 	stw	r2,-4(fp)
  811804:	e0bfff17 	ldw	r2,-4(fp)
}
  811808:	e037883a 	mov	sp,fp
  81180c:	dfc00117 	ldw	ra,4(sp)
  811810:	df000017 	ldw	fp,0(sp)
  811814:	dec00204 	addi	sp,sp,8
  811818:	f800283a 	ret

0081181c <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  81181c:	defff904 	addi	sp,sp,-28
  811820:	dfc00615 	stw	ra,24(sp)
  811824:	df000515 	stw	fp,20(sp)
  811828:	df000504 	addi	fp,sp,20
  81182c:	e13ffc15 	stw	r4,-16(fp)
  811830:	e17ffd15 	stw	r5,-12(fp)
  811834:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
  811838:	e13ffc17 	ldw	r4,-16(fp)
  81183c:	000b883a 	mov	r5,zero
  811840:	081173c0 	call	81173c <alt_up_audio_read_fifo_avail>
  811844:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
  811848:	e0bffb17 	ldw	r2,-20(fp)
  81184c:	10801868 	cmpgeui	r2,r2,97
  811850:	1000021e 	bne	r2,zero,81185c <alt_up_audio_record_l+0x40>
		return 0;
  811854:	e03fff15 	stw	zero,-4(fp)
  811858:	00000606 	br	811874 <alt_up_audio_record_l+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  81185c:	e13ffc17 	ldw	r4,-16(fp)
  811860:	e17ffd17 	ldw	r5,-12(fp)
  811864:	e1bffe17 	ldw	r6,-8(fp)
  811868:	000f883a 	mov	r7,zero
  81186c:	08119e00 	call	8119e0 <alt_up_audio_read_fifo>
  811870:	e0bfff15 	stw	r2,-4(fp)
  811874:	e0bfff17 	ldw	r2,-4(fp)
}
  811878:	e037883a 	mov	sp,fp
  81187c:	dfc00117 	ldw	ra,4(sp)
  811880:	df000017 	ldw	fp,0(sp)
  811884:	dec00204 	addi	sp,sp,8
  811888:	f800283a 	ret

0081188c <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
  81188c:	defffb04 	addi	sp,sp,-20
  811890:	df000415 	stw	fp,16(sp)
  811894:	df000404 	addi	fp,sp,16
  811898:	e13ffd15 	stw	r4,-12(fp)
  81189c:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  8118a0:	e0bffd17 	ldw	r2,-12(fp)
  8118a4:	10800a17 	ldw	r2,40(r2)
  8118a8:	10800104 	addi	r2,r2,4
  8118ac:	10800037 	ldwio	r2,0(r2)
  8118b0:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  8118b4:	e0bffe17 	ldw	r2,-8(fp)
  8118b8:	1004c03a 	cmpne	r2,r2,zero
  8118bc:	1000051e 	bne	r2,zero,8118d4 <alt_up_audio_write_fifo_space+0x48>
  8118c0:	e0bffc17 	ldw	r2,-16(fp)
  8118c4:	10bfc02c 	andhi	r2,r2,65280
  8118c8:	1004d63a 	srli	r2,r2,24
  8118cc:	e0bfff15 	stw	r2,-4(fp)
  8118d0:	00000406 	br	8118e4 <alt_up_audio_write_fifo_space+0x58>
  8118d4:	e0bffc17 	ldw	r2,-16(fp)
  8118d8:	10803fec 	andhi	r2,r2,255
  8118dc:	1004d43a 	srli	r2,r2,16
  8118e0:	e0bfff15 	stw	r2,-4(fp)
  8118e4:	e0bfff17 	ldw	r2,-4(fp)
  8118e8:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
  8118ec:	e0bffc17 	ldw	r2,-16(fp)
}
  8118f0:	e037883a 	mov	sp,fp
  8118f4:	df000017 	ldw	fp,0(sp)
  8118f8:	dec00104 	addi	sp,sp,4
  8118fc:	f800283a 	ret

00811900 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  811900:	defff904 	addi	sp,sp,-28
  811904:	dfc00615 	stw	ra,24(sp)
  811908:	df000515 	stw	fp,20(sp)
  81190c:	df000504 	addi	fp,sp,20
  811910:	e13ffc15 	stw	r4,-16(fp)
  811914:	e17ffd15 	stw	r5,-12(fp)
  811918:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
  81191c:	e13ffc17 	ldw	r4,-16(fp)
  811920:	01400044 	movi	r5,1
  811924:	081188c0 	call	81188c <alt_up_audio_write_fifo_space>
  811928:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
  81192c:	e0bffb17 	ldw	r2,-20(fp)
  811930:	10801868 	cmpgeui	r2,r2,97
  811934:	1000021e 	bne	r2,zero,811940 <alt_up_audio_play_r+0x40>
		return 0;
  811938:	e03fff15 	stw	zero,-4(fp)
  81193c:	00000606 	br	811958 <alt_up_audio_play_r+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  811940:	e13ffc17 	ldw	r4,-16(fp)
  811944:	e17ffd17 	ldw	r5,-12(fp)
  811948:	e1bffe17 	ldw	r6,-8(fp)
  81194c:	01c00044 	movi	r7,1
  811950:	0811ae40 	call	811ae4 <alt_up_audio_write_fifo>
  811954:	e0bfff15 	stw	r2,-4(fp)
  811958:	e0bfff17 	ldw	r2,-4(fp)
}
  81195c:	e037883a 	mov	sp,fp
  811960:	dfc00117 	ldw	ra,4(sp)
  811964:	df000017 	ldw	fp,0(sp)
  811968:	dec00204 	addi	sp,sp,8
  81196c:	f800283a 	ret

00811970 <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  811970:	defff904 	addi	sp,sp,-28
  811974:	dfc00615 	stw	ra,24(sp)
  811978:	df000515 	stw	fp,20(sp)
  81197c:	df000504 	addi	fp,sp,20
  811980:	e13ffc15 	stw	r4,-16(fp)
  811984:	e17ffd15 	stw	r5,-12(fp)
  811988:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
  81198c:	e13ffc17 	ldw	r4,-16(fp)
  811990:	000b883a 	mov	r5,zero
  811994:	081188c0 	call	81188c <alt_up_audio_write_fifo_space>
  811998:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
  81199c:	e0bffb17 	ldw	r2,-20(fp)
  8119a0:	10801868 	cmpgeui	r2,r2,97
  8119a4:	1000021e 	bne	r2,zero,8119b0 <alt_up_audio_play_l+0x40>
		return 0;
  8119a8:	e03fff15 	stw	zero,-4(fp)
  8119ac:	00000606 	br	8119c8 <alt_up_audio_play_l+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  8119b0:	e13ffc17 	ldw	r4,-16(fp)
  8119b4:	e17ffd17 	ldw	r5,-12(fp)
  8119b8:	e1bffe17 	ldw	r6,-8(fp)
  8119bc:	000f883a 	mov	r7,zero
  8119c0:	0811ae40 	call	811ae4 <alt_up_audio_write_fifo>
  8119c4:	e0bfff15 	stw	r2,-4(fp)
  8119c8:	e0bfff17 	ldw	r2,-4(fp)
}
  8119cc:	e037883a 	mov	sp,fp
  8119d0:	dfc00117 	ldw	ra,4(sp)
  8119d4:	df000017 	ldw	fp,0(sp)
  8119d8:	dec00204 	addi	sp,sp,8
  8119dc:	f800283a 	ret

008119e0 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  8119e0:	defff604 	addi	sp,sp,-40
  8119e4:	df000915 	stw	fp,36(sp)
  8119e8:	df000904 	addi	fp,sp,36
  8119ec:	e13ff915 	stw	r4,-28(fp)
  8119f0:	e17ffa15 	stw	r5,-24(fp)
  8119f4:	e1bffb15 	stw	r6,-20(fp)
  8119f8:	e1fffc15 	stw	r7,-16(fp)
	unsigned int fifospace;
	int count = 0;
  8119fc:	e03ff715 	stw	zero,-36(fp)
	while ( count < len ) 
  811a00:	00003006 	br	811ac4 <alt_up_audio_read_fifo+0xe4>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  811a04:	e0bff917 	ldw	r2,-28(fp)
  811a08:	10800a17 	ldw	r2,40(r2)
  811a0c:	10800104 	addi	r2,r2,4
  811a10:	10800037 	ldwio	r2,0(r2)
  811a14:	e0bff815 	stw	r2,-32(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  811a18:	e0bffc17 	ldw	r2,-16(fp)
  811a1c:	1004c03a 	cmpne	r2,r2,zero
  811a20:	1000051e 	bne	r2,zero,811a38 <alt_up_audio_read_fifo+0x58>
  811a24:	e0bff817 	ldw	r2,-32(fp)
  811a28:	10bfc00c 	andi	r2,r2,65280
  811a2c:	1004d23a 	srli	r2,r2,8
  811a30:	e0bfff15 	stw	r2,-4(fp)
  811a34:	00000306 	br	811a44 <alt_up_audio_read_fifo+0x64>
  811a38:	e0bff817 	ldw	r2,-32(fp)
  811a3c:	10803fcc 	andi	r2,r2,255
  811a40:	e0bfff15 	stw	r2,-4(fp)
  811a44:	e0bfff17 	ldw	r2,-4(fp)
  811a48:	e0bff815 	stw	r2,-32(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
  811a4c:	e0bff817 	ldw	r2,-32(fp)
  811a50:	1005003a 	cmpeq	r2,r2,zero
  811a54:	10001e1e 	bne	r2,zero,811ad0 <alt_up_audio_read_fifo+0xf0>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
  811a58:	e0bff717 	ldw	r2,-36(fp)
  811a5c:	1085883a 	add	r2,r2,r2
  811a60:	1085883a 	add	r2,r2,r2
  811a64:	1007883a 	mov	r3,r2
  811a68:	e0bffa17 	ldw	r2,-24(fp)
  811a6c:	1887883a 	add	r3,r3,r2
  811a70:	e0fffe15 	stw	r3,-8(fp)
  811a74:	e0bffc17 	ldw	r2,-16(fp)
  811a78:	1004c03a 	cmpne	r2,r2,zero
  811a7c:	1000061e 	bne	r2,zero,811a98 <alt_up_audio_read_fifo+0xb8>
  811a80:	e0bff917 	ldw	r2,-28(fp)
  811a84:	10800a17 	ldw	r2,40(r2)
  811a88:	10800204 	addi	r2,r2,8
  811a8c:	10800037 	ldwio	r2,0(r2)
  811a90:	e0bffd15 	stw	r2,-12(fp)
  811a94:	00000506 	br	811aac <alt_up_audio_read_fifo+0xcc>
  811a98:	e0bff917 	ldw	r2,-28(fp)
  811a9c:	10800a17 	ldw	r2,40(r2)
  811aa0:	10800304 	addi	r2,r2,12
  811aa4:	10800037 	ldwio	r2,0(r2)
  811aa8:	e0bffd15 	stw	r2,-12(fp)
  811aac:	e0fffd17 	ldw	r3,-12(fp)
  811ab0:	e0bffe17 	ldw	r2,-8(fp)
  811ab4:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
  811ab8:	e0bff717 	ldw	r2,-36(fp)
  811abc:	10800044 	addi	r2,r2,1
  811ac0:	e0bff715 	stw	r2,-36(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  811ac4:	e0fff717 	ldw	r3,-36(fp)
  811ac8:	e0bffb17 	ldw	r2,-20(fp)
  811acc:	18bfcd16 	blt	r3,r2,811a04 <alt_up_audio_read_fifo+0x24>
		{
			// no more data to read
			break;
		}
	}
	return count;
  811ad0:	e0bff717 	ldw	r2,-36(fp)
}
  811ad4:	e037883a 	mov	sp,fp
  811ad8:	df000017 	ldw	fp,0(sp)
  811adc:	dec00104 	addi	sp,sp,4
  811ae0:	f800283a 	ret

00811ae4 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  811ae4:	defff804 	addi	sp,sp,-32
  811ae8:	df000715 	stw	fp,28(sp)
  811aec:	df000704 	addi	fp,sp,28
  811af0:	e13ffb15 	stw	r4,-20(fp)
  811af4:	e17ffc15 	stw	r5,-16(fp)
  811af8:	e1bffd15 	stw	r6,-12(fp)
  811afc:	e1fffe15 	stw	r7,-8(fp)
	unsigned int fifospace;
	int count = 0;
  811b00:	e03ff915 	stw	zero,-28(fp)
	while ( count < len ) 
  811b04:	00003a06 	br	811bf0 <alt_up_audio_write_fifo+0x10c>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  811b08:	e0bffb17 	ldw	r2,-20(fp)
  811b0c:	10800a17 	ldw	r2,40(r2)
  811b10:	10800104 	addi	r2,r2,4
  811b14:	10800037 	ldwio	r2,0(r2)
  811b18:	e0bffa15 	stw	r2,-24(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  811b1c:	e0bffe17 	ldw	r2,-8(fp)
  811b20:	1004c03a 	cmpne	r2,r2,zero
  811b24:	1000051e 	bne	r2,zero,811b3c <alt_up_audio_write_fifo+0x58>
  811b28:	e0bffa17 	ldw	r2,-24(fp)
  811b2c:	10bfc02c 	andhi	r2,r2,65280
  811b30:	1004d63a 	srli	r2,r2,24
  811b34:	e0bfff15 	stw	r2,-4(fp)
  811b38:	00000406 	br	811b4c <alt_up_audio_write_fifo+0x68>
  811b3c:	e0bffa17 	ldw	r2,-24(fp)
  811b40:	10803fec 	andhi	r2,r2,255
  811b44:	1004d43a 	srli	r2,r2,16
  811b48:	e0bfff15 	stw	r2,-4(fp)
  811b4c:	e0bfff17 	ldw	r2,-4(fp)
  811b50:	e0bffa15 	stw	r2,-24(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
  811b54:	e0bffa17 	ldw	r2,-24(fp)
  811b58:	1005003a 	cmpeq	r2,r2,zero
  811b5c:	1000271e 	bne	r2,zero,811bfc <alt_up_audio_write_fifo+0x118>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
  811b60:	e0bffe17 	ldw	r2,-8(fp)
  811b64:	1004c03a 	cmpne	r2,r2,zero
  811b68:	1000111e 	bne	r2,zero,811bb0 <alt_up_audio_write_fifo+0xcc>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
  811b6c:	e0bffb17 	ldw	r2,-20(fp)
  811b70:	10800a17 	ldw	r2,40(r2)
  811b74:	11000204 	addi	r4,r2,8
  811b78:	e0bff917 	ldw	r2,-28(fp)
  811b7c:	1085883a 	add	r2,r2,r2
  811b80:	1085883a 	add	r2,r2,r2
  811b84:	1007883a 	mov	r3,r2
  811b88:	e0bffc17 	ldw	r2,-16(fp)
  811b8c:	1885883a 	add	r2,r3,r2
  811b90:	10800017 	ldw	r2,0(r2)
  811b94:	1007883a 	mov	r3,r2
  811b98:	e0bff917 	ldw	r2,-28(fp)
  811b9c:	10800044 	addi	r2,r2,1
  811ba0:	e0bff915 	stw	r2,-28(fp)
  811ba4:	2005883a 	mov	r2,r4
  811ba8:	10c00035 	stwio	r3,0(r2)
  811bac:	00001006 	br	811bf0 <alt_up_audio_write_fifo+0x10c>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
  811bb0:	e0bffb17 	ldw	r2,-20(fp)
  811bb4:	10800a17 	ldw	r2,40(r2)
  811bb8:	11000304 	addi	r4,r2,12
  811bbc:	e0bff917 	ldw	r2,-28(fp)
  811bc0:	1085883a 	add	r2,r2,r2
  811bc4:	1085883a 	add	r2,r2,r2
  811bc8:	1007883a 	mov	r3,r2
  811bcc:	e0bffc17 	ldw	r2,-16(fp)
  811bd0:	1885883a 	add	r2,r3,r2
  811bd4:	10800017 	ldw	r2,0(r2)
  811bd8:	1007883a 	mov	r3,r2
  811bdc:	e0bff917 	ldw	r2,-28(fp)
  811be0:	10800044 	addi	r2,r2,1
  811be4:	e0bff915 	stw	r2,-28(fp)
  811be8:	2005883a 	mov	r2,r4
  811bec:	10c00035 	stwio	r3,0(r2)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  811bf0:	e0fff917 	ldw	r3,-28(fp)
  811bf4:	e0bffd17 	ldw	r2,-12(fp)
  811bf8:	18bfc316 	blt	r3,r2,811b08 <alt_up_audio_write_fifo+0x24>
		{
			// no more space to write
			break;
		}
	}
	return count;
  811bfc:	e0bff917 	ldw	r2,-28(fp)
}
  811c00:	e037883a 	mov	sp,fp
  811c04:	df000017 	ldw	fp,0(sp)
  811c08:	dec00104 	addi	sp,sp,4
  811c0c:	f800283a 	ret

00811c10 <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
  811c10:	defffc04 	addi	sp,sp,-16
  811c14:	df000315 	stw	fp,12(sp)
  811c18:	df000304 	addi	fp,sp,12
  811c1c:	e13ffd15 	stw	r4,-12(fp)
  811c20:	e17ffe15 	stw	r5,-8(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
  811c24:	e0bffe17 	ldw	r2,-8(fp)
  811c28:	1004c03a 	cmpne	r2,r2,zero
  811c2c:	1000061e 	bne	r2,zero,811c48 <alt_up_audio_read_fifo_head+0x38>
  811c30:	e0bffd17 	ldw	r2,-12(fp)
  811c34:	10800a17 	ldw	r2,40(r2)
  811c38:	10800204 	addi	r2,r2,8
  811c3c:	10800037 	ldwio	r2,0(r2)
  811c40:	e0bfff15 	stw	r2,-4(fp)
  811c44:	00000506 	br	811c5c <alt_up_audio_read_fifo_head+0x4c>
  811c48:	e0bffd17 	ldw	r2,-12(fp)
  811c4c:	10800a17 	ldw	r2,40(r2)
  811c50:	10800304 	addi	r2,r2,12
  811c54:	10800037 	ldwio	r2,0(r2)
  811c58:	e0bfff15 	stw	r2,-4(fp)
  811c5c:	e0bfff17 	ldw	r2,-4(fp)
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
}
  811c60:	e037883a 	mov	sp,fp
  811c64:	df000017 	ldw	fp,0(sp)
  811c68:	dec00104 	addi	sp,sp,4
  811c6c:	f800283a 	ret

00811c70 <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
  811c70:	defffc04 	addi	sp,sp,-16
  811c74:	df000315 	stw	fp,12(sp)
  811c78:	df000304 	addi	fp,sp,12
  811c7c:	e13ffd15 	stw	r4,-12(fp)
  811c80:	e17ffe15 	stw	r5,-8(fp)
  811c84:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
  811c88:	e0bfff17 	ldw	r2,-4(fp)
  811c8c:	1004c03a 	cmpne	r2,r2,zero
  811c90:	1000061e 	bne	r2,zero,811cac <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
  811c94:	e0bffd17 	ldw	r2,-12(fp)
  811c98:	10800a17 	ldw	r2,40(r2)
  811c9c:	10800204 	addi	r2,r2,8
  811ca0:	e0fffe17 	ldw	r3,-8(fp)
  811ca4:	10c00035 	stwio	r3,0(r2)
  811ca8:	00000506 	br	811cc0 <alt_up_audio_write_fifo_head+0x50>
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
  811cac:	e0bffd17 	ldw	r2,-12(fp)
  811cb0:	10800a17 	ldw	r2,40(r2)
  811cb4:	10800304 	addi	r2,r2,12
  811cb8:	e0fffe17 	ldw	r3,-8(fp)
  811cbc:	10c00035 	stwio	r3,0(r2)
}
  811cc0:	e037883a 	mov	sp,fp
  811cc4:	df000017 	ldw	fp,0(sp)
  811cc8:	dec00104 	addi	sp,sp,4
  811ccc:	f800283a 	ret

00811cd0 <alt_up_av_config_open_dev>:

#include "altera_up_avalon_audio_and_video_config.h"
#include "altera_up_avalon_audio_and_video_config_regs.h"

alt_up_av_config_dev* alt_up_av_config_open_dev(const char* name)
{
  811cd0:	defffc04 	addi	sp,sp,-16
  811cd4:	dfc00315 	stw	ra,12(sp)
  811cd8:	df000215 	stw	fp,8(sp)
  811cdc:	df000204 	addi	fp,sp,8
  811ce0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_av_config_dev *dev = (alt_up_av_config_dev*)alt_find_dev(name, &alt_dev_list);
  811ce4:	e13fff17 	ldw	r4,-4(fp)
  811ce8:	01402074 	movhi	r5,129
  811cec:	29583104 	addi	r5,r5,24772
  811cf0:	0812cfc0 	call	812cfc <alt_find_dev>
  811cf4:	e0bffe15 	stw	r2,-8(fp)
  dev->type = (IORD_ALT_UP_AV_CONFIG_STATUS(dev->base) & ALT_UP_AV_CONFIG_STATUS_CFG_MSK) >> ALT_UP_AV_CONFIG_STATUS_CFG_OFST;
  811cf8:	e0bffe17 	ldw	r2,-8(fp)
  811cfc:	10800a17 	ldw	r2,40(r2)
  811d00:	10800104 	addi	r2,r2,4
  811d04:	10800037 	ldwio	r2,0(r2)
  811d08:	10803fec 	andhi	r2,r2,255
  811d0c:	1005d43a 	srai	r2,r2,16
  811d10:	1007883a 	mov	r3,r2
  811d14:	e0bffe17 	ldw	r2,-8(fp)
  811d18:	10c00b15 	stw	r3,44(r2)

  return dev;
  811d1c:	e0bffe17 	ldw	r2,-8(fp)
}
  811d20:	e037883a 	mov	sp,fp
  811d24:	dfc00117 	ldw	ra,4(sp)
  811d28:	df000017 	ldw	fp,0(sp)
  811d2c:	dec00204 	addi	sp,sp,8
  811d30:	f800283a 	ret

00811d34 <alt_up_av_config_write_data>:
 * @param data --  the data to be sent
 *
 * @return 0 for success
 **/
int alt_up_av_config_write_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  811d34:	defffc04 	addi	sp,sp,-16
  811d38:	df000315 	stw	fp,12(sp)
  811d3c:	df000304 	addi	fp,sp,12
  811d40:	e13ffd15 	stw	r4,-12(fp)
  811d44:	e17ffe15 	stw	r5,-8(fp)
  811d48:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  811d4c:	e0bffd17 	ldw	r2,-12(fp)
  811d50:	10800a17 	ldw	r2,40(r2)
  811d54:	11000204 	addi	r4,r2,8
  811d58:	e0bffe17 	ldw	r2,-8(fp)
  811d5c:	10c03fcc 	andi	r3,r2,255
  811d60:	2005883a 	mov	r2,r4
  811d64:	10c00035 	stwio	r3,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_AV_CONFIG_DATA(av_config->base, data & ALT_UP_AV_CONFIG_DATA_VALID_MSK); 
  811d68:	e0bffd17 	ldw	r2,-12(fp)
  811d6c:	10800a17 	ldw	r2,40(r2)
  811d70:	11000304 	addi	r4,r2,12
  811d74:	e0bfff17 	ldw	r2,-4(fp)
  811d78:	10ffffcc 	andi	r3,r2,65535
  811d7c:	2005883a 	mov	r2,r4
  811d80:	10c00035 	stwio	r3,0(r2)

	return 0;
  811d84:	0005883a 	mov	r2,zero
}
  811d88:	e037883a 	mov	sp,fp
  811d8c:	df000017 	ldw	fp,0(sp)
  811d90:	dec00104 	addi	sp,sp,4
  811d94:	f800283a 	ret

00811d98 <alt_up_av_config_read_data>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_av_config_read_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 * data)
{
  811d98:	defffa04 	addi	sp,sp,-24
  811d9c:	dfc00515 	stw	ra,20(sp)
  811da0:	df000415 	stw	fp,16(sp)
  811da4:	df000404 	addi	fp,sp,16
  811da8:	e13ffc15 	stw	r4,-16(fp)
  811dac:	e17ffd15 	stw	r5,-12(fp)
  811db0:	e1bffe15 	stw	r6,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  811db4:	e0bffc17 	ldw	r2,-16(fp)
  811db8:	10800a17 	ldw	r2,40(r2)
  811dbc:	11000204 	addi	r4,r2,8
  811dc0:	e0bffd17 	ldw	r2,-12(fp)
  811dc4:	10c03fcc 	andi	r3,r2,255
  811dc8:	2005883a 	mov	r2,r4
  811dcc:	10c00035 	stwio	r3,0(r2)

	// write data to the device Data register
	*(data) = IORD_ALT_UP_AV_CONFIG_DATA(av_config->base); 
  811dd0:	e0bffc17 	ldw	r2,-16(fp)
  811dd4:	10800a17 	ldw	r2,40(r2)
  811dd8:	10800304 	addi	r2,r2,12
  811ddc:	10800037 	ldwio	r2,0(r2)
  811de0:	1007883a 	mov	r3,r2
  811de4:	e0bffe17 	ldw	r2,-8(fp)
  811de8:	10c00015 	stw	r3,0(r2)

	// check acknowledge is 0
	if (alt_up_av_config_read_acknowledge(av_config))
  811dec:	e13ffc17 	ldw	r4,-16(fp)
  811df0:	0811ec40 	call	811ec4 <alt_up_av_config_read_acknowledge>
  811df4:	1005003a 	cmpeq	r2,r2,zero
  811df8:	1000031e 	bne	r2,zero,811e08 <alt_up_av_config_read_data+0x70>
		return -1;
  811dfc:	00bfffc4 	movi	r2,-1
  811e00:	e0bfff15 	stw	r2,-4(fp)
  811e04:	00000106 	br	811e0c <alt_up_av_config_read_data+0x74>

	return 0;
  811e08:	e03fff15 	stw	zero,-4(fp)
  811e0c:	e0bfff17 	ldw	r2,-4(fp)
}
  811e10:	e037883a 	mov	sp,fp
  811e14:	dfc00117 	ldw	ra,4(sp)
  811e18:	df000017 	ldw	fp,0(sp)
  811e1c:	dec00204 	addi	sp,sp,8
  811e20:	f800283a 	ret

00811e24 <alt_up_av_config_reset>:

int alt_up_av_config_reset(alt_up_av_config_dev *av_config)
{
  811e24:	defffe04 	addi	sp,sp,-8
  811e28:	df000115 	stw	fp,4(sp)
  811e2c:	df000104 	addi	fp,sp,4
  811e30:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RESET(av_config->base);
  811e34:	e0bfff17 	ldw	r2,-4(fp)
  811e38:	10800a17 	ldw	r2,40(r2)
  811e3c:	1007883a 	mov	r3,r2
  811e40:	00800044 	movi	r2,1
  811e44:	18800025 	stbio	r2,0(r3)
	return 0;
  811e48:	0005883a 	mov	r2,zero
}
  811e4c:	e037883a 	mov	sp,fp
  811e50:	df000017 	ldw	fp,0(sp)
  811e54:	dec00104 	addi	sp,sp,4
  811e58:	f800283a 	ret

00811e5c <alt_up_av_config_enable_interrupt>:

int alt_up_av_config_enable_interrupt(alt_up_av_config_dev *av_config)
{
  811e5c:	defffe04 	addi	sp,sp,-8
  811e60:	df000115 	stw	fp,4(sp)
  811e64:	df000104 	addi	fp,sp,4
  811e68:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_ENABLE(av_config->base);
  811e6c:	e0bfff17 	ldw	r2,-4(fp)
  811e70:	10800a17 	ldw	r2,40(r2)
  811e74:	1007883a 	mov	r3,r2
  811e78:	00800084 	movi	r2,2
  811e7c:	18800025 	stbio	r2,0(r3)
	return 0;
  811e80:	0005883a 	mov	r2,zero
}
  811e84:	e037883a 	mov	sp,fp
  811e88:	df000017 	ldw	fp,0(sp)
  811e8c:	dec00104 	addi	sp,sp,4
  811e90:	f800283a 	ret

00811e94 <alt_up_av_config_disable_interrupt>:

int alt_up_av_config_disable_interrupt(alt_up_av_config_dev *av_config)
{
  811e94:	defffe04 	addi	sp,sp,-8
  811e98:	df000115 	stw	fp,4(sp)
  811e9c:	df000104 	addi	fp,sp,4
  811ea0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_DISABLE(av_config->base);
  811ea4:	e0bfff17 	ldw	r2,-4(fp)
  811ea8:	10800a17 	ldw	r2,40(r2)
  811eac:	10000025 	stbio	zero,0(r2)
	return 0;
  811eb0:	0005883a 	mov	r2,zero
}
  811eb4:	e037883a 	mov	sp,fp
  811eb8:	df000017 	ldw	fp,0(sp)
  811ebc:	dec00104 	addi	sp,sp,4
  811ec0:	f800283a 	ret

00811ec4 <alt_up_av_config_read_acknowledge>:

int alt_up_av_config_read_acknowledge(alt_up_av_config_dev *av_config)
{
  811ec4:	defffd04 	addi	sp,sp,-12
  811ec8:	df000215 	stw	fp,8(sp)
  811ecc:	df000204 	addi	fp,sp,8
  811ed0:	e13ffe15 	stw	r4,-8(fp)
	if ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST)
  811ed4:	e0bffe17 	ldw	r2,-8(fp)
  811ed8:	10800a17 	ldw	r2,40(r2)
  811edc:	10800104 	addi	r2,r2,4
  811ee0:	10800037 	ldwio	r2,0(r2)
  811ee4:	1080008c 	andi	r2,r2,2
  811ee8:	1005d07a 	srai	r2,r2,1
  811eec:	1005003a 	cmpeq	r2,r2,zero
  811ef0:	1000071e 	bne	r2,zero,811f10 <alt_up_av_config_read_acknowledge+0x4c>
		return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_ACK_MSK) >> ALT_UP_AV_CONFIG_STATUS_ACK_OFST);
  811ef4:	e0bffe17 	ldw	r2,-8(fp)
  811ef8:	10800a17 	ldw	r2,40(r2)
  811efc:	10800104 	addi	r2,r2,4
  811f00:	10800037 	ldwio	r2,0(r2)
  811f04:	1080004c 	andi	r2,r2,1
  811f08:	e0bfff15 	stw	r2,-4(fp)
  811f0c:	00000206 	br	811f18 <alt_up_av_config_read_acknowledge+0x54>
	return -1;
  811f10:	00bfffc4 	movi	r2,-1
  811f14:	e0bfff15 	stw	r2,-4(fp)
  811f18:	e0bfff17 	ldw	r2,-4(fp)
}
  811f1c:	e037883a 	mov	sp,fp
  811f20:	df000017 	ldw	fp,0(sp)
  811f24:	dec00104 	addi	sp,sp,4
  811f28:	f800283a 	ret

00811f2c <alt_up_av_config_read_ready>:

int alt_up_av_config_read_ready(alt_up_av_config_dev *av_config)
{
  811f2c:	defffe04 	addi	sp,sp,-8
  811f30:	df000115 	stw	fp,4(sp)
  811f34:	df000104 	addi	fp,sp,4
  811f38:	e13fff15 	stw	r4,-4(fp)
	return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST);
  811f3c:	e0bfff17 	ldw	r2,-4(fp)
  811f40:	10800a17 	ldw	r2,40(r2)
  811f44:	10800104 	addi	r2,r2,4
  811f48:	10800037 	ldwio	r2,0(r2)
  811f4c:	1080008c 	andi	r2,r2,2
  811f50:	1005d07a 	srai	r2,r2,1
}
  811f54:	e037883a 	mov	sp,fp
  811f58:	df000017 	ldw	fp,0(sp)
  811f5c:	dec00104 	addi	sp,sp,4
  811f60:	f800283a 	ret

00811f64 <alt_up_av_config_write_audio_cfg_register>:

int alt_up_av_config_write_audio_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  811f64:	defff904 	addi	sp,sp,-28
  811f68:	dfc00615 	stw	ra,24(sp)
  811f6c:	df000515 	stw	fp,20(sp)
  811f70:	df000504 	addi	fp,sp,20
  811f74:	e13ffc15 	stw	r4,-16(fp)
  811f78:	e17ffd15 	stw	r5,-12(fp)
  811f7c:	e1bffe15 	stw	r6,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_AUDIO_ONLY_CONFIG && av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  811f80:	e0bffc17 	ldw	r2,-16(fp)
  811f84:	10800b17 	ldw	r2,44(r2)
  811f88:	10800060 	cmpeqi	r2,r2,1
  811f8c:	10000f1e 	bne	r2,zero,811fcc <alt_up_av_config_write_audio_cfg_register+0x68>
  811f90:	e0bffc17 	ldw	r2,-16(fp)
  811f94:	10800b17 	ldw	r2,44(r2)
  811f98:	108000a0 	cmpeqi	r2,r2,2
  811f9c:	10000b1e 	bne	r2,zero,811fcc <alt_up_av_config_write_audio_cfg_register+0x68>
  811fa0:	e0bffc17 	ldw	r2,-16(fp)
  811fa4:	10800b17 	ldw	r2,44(r2)
  811fa8:	108000e0 	cmpeqi	r2,r2,3
  811fac:	1000071e 	bne	r2,zero,811fcc <alt_up_av_config_write_audio_cfg_register+0x68>
  811fb0:	e0bffc17 	ldw	r2,-16(fp)
  811fb4:	10800b17 	ldw	r2,44(r2)
  811fb8:	10800120 	cmpeqi	r2,r2,4
  811fbc:	1000031e 	bne	r2,zero,811fcc <alt_up_av_config_write_audio_cfg_register+0x68>
		return -EINVAL;
  811fc0:	00bffa84 	movi	r2,-22
  811fc4:	e0bfff15 	stw	r2,-4(fp)
  811fc8:	00000b06 	br	811ff8 <alt_up_av_config_write_audio_cfg_register+0x94>

	// set the audio device to be configured in the Control register
	SELECTED_ON_BOARD_DEVICE device = AUDIO_DEVICE;
  811fcc:	e03ffb15 	stw	zero,-20(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, device);
  811fd0:	e0bffc17 	ldw	r2,-16(fp)
  811fd4:	10800a17 	ldw	r2,40(r2)
  811fd8:	10800084 	addi	r2,r2,2
  811fdc:	e0fffb17 	ldw	r3,-20(fp)
  811fe0:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_write_data(av_config, addr, data);
  811fe4:	e13ffc17 	ldw	r4,-16(fp)
  811fe8:	e17ffd17 	ldw	r5,-12(fp)
  811fec:	e1bffe17 	ldw	r6,-8(fp)
  811ff0:	0811d340 	call	811d34 <alt_up_av_config_write_data>
  811ff4:	e0bfff15 	stw	r2,-4(fp)
  811ff8:	e0bfff17 	ldw	r2,-4(fp)
}
  811ffc:	e037883a 	mov	sp,fp
  812000:	dfc00117 	ldw	ra,4(sp)
  812004:	df000017 	ldw	fp,0(sp)
  812008:	dec00204 	addi	sp,sp,8
  81200c:	f800283a 	ret

00812010 <alt_up_av_config_read_video_cfg_register>:

int alt_up_av_config_read_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data, SELECTED_ON_BOARD_DEVICE video_port)
{
  812010:	defff904 	addi	sp,sp,-28
  812014:	dfc00615 	stw	ra,24(sp)
  812018:	df000515 	stw	fp,20(sp)
  81201c:	df000504 	addi	fp,sp,20
  812020:	e13ffb15 	stw	r4,-20(fp)
  812024:	e17ffc15 	stw	r5,-16(fp)
  812028:	e1bffd15 	stw	r6,-12(fp)
  81202c:	e1fffe15 	stw	r7,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  812030:	e0bffb17 	ldw	r2,-20(fp)
  812034:	10800b17 	ldw	r2,44(r2)
  812038:	108000a0 	cmpeqi	r2,r2,2
  81203c:	10000b1e 	bne	r2,zero,81206c <alt_up_av_config_read_video_cfg_register+0x5c>
  812040:	e0bffb17 	ldw	r2,-20(fp)
  812044:	10800b17 	ldw	r2,44(r2)
  812048:	108000e0 	cmpeqi	r2,r2,3
  81204c:	1000071e 	bne	r2,zero,81206c <alt_up_av_config_read_video_cfg_register+0x5c>
  812050:	e0bffb17 	ldw	r2,-20(fp)
  812054:	10800b17 	ldw	r2,44(r2)
  812058:	10800120 	cmpeqi	r2,r2,4
  81205c:	1000031e 	bne	r2,zero,81206c <alt_up_av_config_read_video_cfg_register+0x5c>
		return -EINVAL;
  812060:	00bffa84 	movi	r2,-22
  812064:	e0bfff15 	stw	r2,-4(fp)
  812068:	00002106 	br	8120f0 <alt_up_av_config_read_video_cfg_register+0xe0>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
  81206c:	e0bffb17 	ldw	r2,-20(fp)
  812070:	10800b17 	ldw	r2,44(r2)
  812074:	108000a0 	cmpeqi	r2,r2,2
  812078:	1000041e 	bne	r2,zero,81208c <alt_up_av_config_read_video_cfg_register+0x7c>
  81207c:	e0bffb17 	ldw	r2,-20(fp)
  812080:	10800b17 	ldw	r2,44(r2)
  812084:	10800118 	cmpnei	r2,r2,4
  812088:	1000061e 	bne	r2,zero,8120a4 <alt_up_av_config_read_video_cfg_register+0x94>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
  81208c:	e0bffe17 	ldw	r2,-8(fp)
  812090:	10800060 	cmpeqi	r2,r2,1
  812094:	10000c1e 	bne	r2,zero,8120c8 <alt_up_av_config_read_video_cfg_register+0xb8>
			return -EINVAL;
  812098:	00bffa84 	movi	r2,-22
  81209c:	e0bfff15 	stw	r2,-4(fp)
  8120a0:	00001306 	br	8120f0 <alt_up_av_config_read_video_cfg_register+0xe0>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
  8120a4:	e0bffe17 	ldw	r2,-8(fp)
  8120a8:	10800060 	cmpeqi	r2,r2,1
  8120ac:	1000061e 	bne	r2,zero,8120c8 <alt_up_av_config_read_video_cfg_register+0xb8>
  8120b0:	e0bffe17 	ldw	r2,-8(fp)
  8120b4:	108000a0 	cmpeqi	r2,r2,2
  8120b8:	1000031e 	bne	r2,zero,8120c8 <alt_up_av_config_read_video_cfg_register+0xb8>
			return -EINVAL;
  8120bc:	00bffa84 	movi	r2,-22
  8120c0:	e0bfff15 	stw	r2,-4(fp)
  8120c4:	00000a06 	br	8120f0 <alt_up_av_config_read_video_cfg_register+0xe0>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
  8120c8:	e0bffb17 	ldw	r2,-20(fp)
  8120cc:	10800a17 	ldw	r2,40(r2)
  8120d0:	10800084 	addi	r2,r2,2
  8120d4:	e0fffe17 	ldw	r3,-8(fp)
  8120d8:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_read_data(av_config, addr, data);
  8120dc:	e13ffb17 	ldw	r4,-20(fp)
  8120e0:	e17ffc17 	ldw	r5,-16(fp)
  8120e4:	e1bffd17 	ldw	r6,-12(fp)
  8120e8:	0811d980 	call	811d98 <alt_up_av_config_read_data>
  8120ec:	e0bfff15 	stw	r2,-4(fp)
  8120f0:	e0bfff17 	ldw	r2,-4(fp)
}
  8120f4:	e037883a 	mov	sp,fp
  8120f8:	dfc00117 	ldw	ra,4(sp)
  8120fc:	df000017 	ldw	fp,0(sp)
  812100:	dec00204 	addi	sp,sp,8
  812104:	f800283a 	ret

00812108 <alt_up_av_config_write_video_cfg_register>:

int alt_up_av_config_write_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data, SELECTED_ON_BOARD_DEVICE video_port)
{
  812108:	defff904 	addi	sp,sp,-28
  81210c:	dfc00615 	stw	ra,24(sp)
  812110:	df000515 	stw	fp,20(sp)
  812114:	df000504 	addi	fp,sp,20
  812118:	e13ffb15 	stw	r4,-20(fp)
  81211c:	e17ffc15 	stw	r5,-16(fp)
  812120:	e1bffd15 	stw	r6,-12(fp)
  812124:	e1fffe15 	stw	r7,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  812128:	e0bffb17 	ldw	r2,-20(fp)
  81212c:	10800b17 	ldw	r2,44(r2)
  812130:	108000a0 	cmpeqi	r2,r2,2
  812134:	10000b1e 	bne	r2,zero,812164 <alt_up_av_config_write_video_cfg_register+0x5c>
  812138:	e0bffb17 	ldw	r2,-20(fp)
  81213c:	10800b17 	ldw	r2,44(r2)
  812140:	108000e0 	cmpeqi	r2,r2,3
  812144:	1000071e 	bne	r2,zero,812164 <alt_up_av_config_write_video_cfg_register+0x5c>
  812148:	e0bffb17 	ldw	r2,-20(fp)
  81214c:	10800b17 	ldw	r2,44(r2)
  812150:	10800120 	cmpeqi	r2,r2,4
  812154:	1000031e 	bne	r2,zero,812164 <alt_up_av_config_write_video_cfg_register+0x5c>
		return -EINVAL;
  812158:	00bffa84 	movi	r2,-22
  81215c:	e0bfff15 	stw	r2,-4(fp)
  812160:	00002106 	br	8121e8 <alt_up_av_config_write_video_cfg_register+0xe0>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
  812164:	e0bffb17 	ldw	r2,-20(fp)
  812168:	10800b17 	ldw	r2,44(r2)
  81216c:	108000a0 	cmpeqi	r2,r2,2
  812170:	1000041e 	bne	r2,zero,812184 <alt_up_av_config_write_video_cfg_register+0x7c>
  812174:	e0bffb17 	ldw	r2,-20(fp)
  812178:	10800b17 	ldw	r2,44(r2)
  81217c:	10800118 	cmpnei	r2,r2,4
  812180:	1000061e 	bne	r2,zero,81219c <alt_up_av_config_write_video_cfg_register+0x94>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
  812184:	e0bffe17 	ldw	r2,-8(fp)
  812188:	10800060 	cmpeqi	r2,r2,1
  81218c:	10000c1e 	bne	r2,zero,8121c0 <alt_up_av_config_write_video_cfg_register+0xb8>
			return -EINVAL;
  812190:	00bffa84 	movi	r2,-22
  812194:	e0bfff15 	stw	r2,-4(fp)
  812198:	00001306 	br	8121e8 <alt_up_av_config_write_video_cfg_register+0xe0>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
  81219c:	e0bffe17 	ldw	r2,-8(fp)
  8121a0:	10800060 	cmpeqi	r2,r2,1
  8121a4:	1000061e 	bne	r2,zero,8121c0 <alt_up_av_config_write_video_cfg_register+0xb8>
  8121a8:	e0bffe17 	ldw	r2,-8(fp)
  8121ac:	108000a0 	cmpeqi	r2,r2,2
  8121b0:	1000031e 	bne	r2,zero,8121c0 <alt_up_av_config_write_video_cfg_register+0xb8>
			return -EINVAL;
  8121b4:	00bffa84 	movi	r2,-22
  8121b8:	e0bfff15 	stw	r2,-4(fp)
  8121bc:	00000a06 	br	8121e8 <alt_up_av_config_write_video_cfg_register+0xe0>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
  8121c0:	e0bffb17 	ldw	r2,-20(fp)
  8121c4:	10800a17 	ldw	r2,40(r2)
  8121c8:	10800084 	addi	r2,r2,2
  8121cc:	e0fffe17 	ldw	r3,-8(fp)
  8121d0:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_write_data(av_config, addr, data);
  8121d4:	e13ffb17 	ldw	r4,-20(fp)
  8121d8:	e17ffc17 	ldw	r5,-16(fp)
  8121dc:	e1bffd17 	ldw	r6,-12(fp)
  8121e0:	0811d340 	call	811d34 <alt_up_av_config_write_data>
  8121e4:	e0bfff15 	stw	r2,-4(fp)
  8121e8:	e0bfff17 	ldw	r2,-4(fp)
}
  8121ec:	e037883a 	mov	sp,fp
  8121f0:	dfc00117 	ldw	ra,4(sp)
  8121f4:	df000017 	ldw	fp,0(sp)
  8121f8:	dec00204 	addi	sp,sp,8
  8121fc:	f800283a 	ret

00812200 <alt_up_av_config_read_DC2_cfg_register>:

int alt_up_av_config_read_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  812200:	defffa04 	addi	sp,sp,-24
  812204:	dfc00515 	stw	ra,20(sp)
  812208:	df000415 	stw	fp,16(sp)
  81220c:	df000404 	addi	fp,sp,16
  812210:	e13ffc15 	stw	r4,-16(fp)
  812214:	e17ffd15 	stw	r5,-12(fp)
  812218:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
  81221c:	e0bffc17 	ldw	r2,-16(fp)
  812220:	10800b17 	ldw	r2,44(r2)
  812224:	10800220 	cmpeqi	r2,r2,8
  812228:	1000031e 	bne	r2,zero,812238 <alt_up_av_config_read_DC2_cfg_register+0x38>
		return -EINVAL;
  81222c:	00bffa84 	movi	r2,-22
  812230:	e0bfff15 	stw	r2,-4(fp)
  812234:	00000506 	br	81224c <alt_up_av_config_read_DC2_cfg_register+0x4c>

	return alt_up_av_config_read_data(av_config, addr, data);
  812238:	e13ffc17 	ldw	r4,-16(fp)
  81223c:	e17ffd17 	ldw	r5,-12(fp)
  812240:	e1bffe17 	ldw	r6,-8(fp)
  812244:	0811d980 	call	811d98 <alt_up_av_config_read_data>
  812248:	e0bfff15 	stw	r2,-4(fp)
  81224c:	e0bfff17 	ldw	r2,-4(fp)
}
  812250:	e037883a 	mov	sp,fp
  812254:	dfc00117 	ldw	ra,4(sp)
  812258:	df000017 	ldw	fp,0(sp)
  81225c:	dec00204 	addi	sp,sp,8
  812260:	f800283a 	ret

00812264 <alt_up_av_config_write_DC2_cfg_register>:

int alt_up_av_config_write_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  812264:	defffa04 	addi	sp,sp,-24
  812268:	dfc00515 	stw	ra,20(sp)
  81226c:	df000415 	stw	fp,16(sp)
  812270:	df000404 	addi	fp,sp,16
  812274:	e13ffc15 	stw	r4,-16(fp)
  812278:	e17ffd15 	stw	r5,-12(fp)
  81227c:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
  812280:	e0bffc17 	ldw	r2,-16(fp)
  812284:	10800b17 	ldw	r2,44(r2)
  812288:	10800220 	cmpeqi	r2,r2,8
  81228c:	1000031e 	bne	r2,zero,81229c <alt_up_av_config_write_DC2_cfg_register+0x38>
		return -EINVAL;
  812290:	00bffa84 	movi	r2,-22
  812294:	e0bfff15 	stw	r2,-4(fp)
  812298:	00000506 	br	8122b0 <alt_up_av_config_write_DC2_cfg_register+0x4c>

	return alt_up_av_config_write_data(av_config, addr, data);
  81229c:	e13ffc17 	ldw	r4,-16(fp)
  8122a0:	e17ffd17 	ldw	r5,-12(fp)
  8122a4:	e1bffe17 	ldw	r6,-8(fp)
  8122a8:	0811d340 	call	811d34 <alt_up_av_config_write_data>
  8122ac:	e0bfff15 	stw	r2,-4(fp)
  8122b0:	e0bfff17 	ldw	r2,-4(fp)
}
  8122b4:	e037883a 	mov	sp,fp
  8122b8:	dfc00117 	ldw	ra,4(sp)
  8122bc:	df000017 	ldw	fp,0(sp)
  8122c0:	dec00204 	addi	sp,sp,8
  8122c4:	f800283a 	ret

008122c8 <alt_up_av_config_read_D5M_cfg_register>:

int alt_up_av_config_read_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  8122c8:	defffa04 	addi	sp,sp,-24
  8122cc:	dfc00515 	stw	ra,20(sp)
  8122d0:	df000415 	stw	fp,16(sp)
  8122d4:	df000404 	addi	fp,sp,16
  8122d8:	e13ffc15 	stw	r4,-16(fp)
  8122dc:	e17ffd15 	stw	r5,-12(fp)
  8122e0:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
  8122e4:	e0bffc17 	ldw	r2,-16(fp)
  8122e8:	10800b17 	ldw	r2,44(r2)
  8122ec:	10800260 	cmpeqi	r2,r2,9
  8122f0:	1000031e 	bne	r2,zero,812300 <alt_up_av_config_read_D5M_cfg_register+0x38>
		return -EINVAL;
  8122f4:	00bffa84 	movi	r2,-22
  8122f8:	e0bfff15 	stw	r2,-4(fp)
  8122fc:	00000506 	br	812314 <alt_up_av_config_read_D5M_cfg_register+0x4c>
	
	return alt_up_av_config_read_data(av_config, addr, data);
  812300:	e13ffc17 	ldw	r4,-16(fp)
  812304:	e17ffd17 	ldw	r5,-12(fp)
  812308:	e1bffe17 	ldw	r6,-8(fp)
  81230c:	0811d980 	call	811d98 <alt_up_av_config_read_data>
  812310:	e0bfff15 	stw	r2,-4(fp)
  812314:	e0bfff17 	ldw	r2,-4(fp)
}
  812318:	e037883a 	mov	sp,fp
  81231c:	dfc00117 	ldw	ra,4(sp)
  812320:	df000017 	ldw	fp,0(sp)
  812324:	dec00204 	addi	sp,sp,8
  812328:	f800283a 	ret

0081232c <alt_up_av_config_write_D5M_cfg_register>:

int alt_up_av_config_write_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  81232c:	defffa04 	addi	sp,sp,-24
  812330:	dfc00515 	stw	ra,20(sp)
  812334:	df000415 	stw	fp,16(sp)
  812338:	df000404 	addi	fp,sp,16
  81233c:	e13ffc15 	stw	r4,-16(fp)
  812340:	e17ffd15 	stw	r5,-12(fp)
  812344:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
  812348:	e0bffc17 	ldw	r2,-16(fp)
  81234c:	10800b17 	ldw	r2,44(r2)
  812350:	10800260 	cmpeqi	r2,r2,9
  812354:	1000031e 	bne	r2,zero,812364 <alt_up_av_config_write_D5M_cfg_register+0x38>
		return -EINVAL;
  812358:	00bffa84 	movi	r2,-22
  81235c:	e0bfff15 	stw	r2,-4(fp)
  812360:	00000506 	br	812378 <alt_up_av_config_write_D5M_cfg_register+0x4c>
	
	return alt_up_av_config_write_data(av_config, addr, data);
  812364:	e13ffc17 	ldw	r4,-16(fp)
  812368:	e17ffd17 	ldw	r5,-12(fp)
  81236c:	e1bffe17 	ldw	r6,-8(fp)
  812370:	0811d340 	call	811d34 <alt_up_av_config_write_data>
  812374:	e0bfff15 	stw	r2,-4(fp)
  812378:	e0bfff17 	ldw	r2,-4(fp)
}
  81237c:	e037883a 	mov	sp,fp
  812380:	dfc00117 	ldw	ra,4(sp)
  812384:	df000017 	ldw	fp,0(sp)
  812388:	dec00204 	addi	sp,sp,8
  81238c:	f800283a 	ret

00812390 <alt_up_av_config_read_LTM_cfg_register>:

int alt_up_av_config_read_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  812390:	defffa04 	addi	sp,sp,-24
  812394:	dfc00515 	stw	ra,20(sp)
  812398:	df000415 	stw	fp,16(sp)
  81239c:	df000404 	addi	fp,sp,16
  8123a0:	e13ffc15 	stw	r4,-16(fp)
  8123a4:	e17ffd15 	stw	r5,-12(fp)
  8123a8:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
  8123ac:	e0bffc17 	ldw	r2,-16(fp)
  8123b0:	10800b17 	ldw	r2,44(r2)
  8123b4:	108002a0 	cmpeqi	r2,r2,10
  8123b8:	1000031e 	bne	r2,zero,8123c8 <alt_up_av_config_read_LTM_cfg_register+0x38>
		return -EINVAL;
  8123bc:	00bffa84 	movi	r2,-22
  8123c0:	e0bfff15 	stw	r2,-4(fp)
  8123c4:	00000506 	br	8123dc <alt_up_av_config_read_LTM_cfg_register+0x4c>

	return alt_up_av_config_read_data(av_config, addr, data);
  8123c8:	e13ffc17 	ldw	r4,-16(fp)
  8123cc:	e17ffd17 	ldw	r5,-12(fp)
  8123d0:	e1bffe17 	ldw	r6,-8(fp)
  8123d4:	0811d980 	call	811d98 <alt_up_av_config_read_data>
  8123d8:	e0bfff15 	stw	r2,-4(fp)
  8123dc:	e0bfff17 	ldw	r2,-4(fp)
}
  8123e0:	e037883a 	mov	sp,fp
  8123e4:	dfc00117 	ldw	ra,4(sp)
  8123e8:	df000017 	ldw	fp,0(sp)
  8123ec:	dec00204 	addi	sp,sp,8
  8123f0:	f800283a 	ret

008123f4 <alt_up_av_config_write_LTM_cfg_register>:

int alt_up_av_config_write_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  8123f4:	defffa04 	addi	sp,sp,-24
  8123f8:	dfc00515 	stw	ra,20(sp)
  8123fc:	df000415 	stw	fp,16(sp)
  812400:	df000404 	addi	fp,sp,16
  812404:	e13ffc15 	stw	r4,-16(fp)
  812408:	e17ffd15 	stw	r5,-12(fp)
  81240c:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
  812410:	e0bffc17 	ldw	r2,-16(fp)
  812414:	10800b17 	ldw	r2,44(r2)
  812418:	108002a0 	cmpeqi	r2,r2,10
  81241c:	1000031e 	bne	r2,zero,81242c <alt_up_av_config_write_LTM_cfg_register+0x38>
		return -EINVAL;
  812420:	00bffa84 	movi	r2,-22
  812424:	e0bfff15 	stw	r2,-4(fp)
  812428:	00000506 	br	812440 <alt_up_av_config_write_LTM_cfg_register+0x4c>

	return alt_up_av_config_write_data(av_config, addr, data);
  81242c:	e13ffc17 	ldw	r4,-16(fp)
  812430:	e17ffd17 	ldw	r5,-12(fp)
  812434:	e1bffe17 	ldw	r6,-8(fp)
  812438:	0811d340 	call	811d34 <alt_up_av_config_write_data>
  81243c:	e0bfff15 	stw	r2,-4(fp)
  812440:	e0bfff17 	ldw	r2,-4(fp)
}
  812444:	e037883a 	mov	sp,fp
  812448:	dfc00117 	ldw	ra,4(sp)
  81244c:	df000017 	ldw	fp,0(sp)
  812450:	dec00204 	addi	sp,sp,8
  812454:	f800283a 	ret

00812458 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
  812458:	defffc04 	addi	sp,sp,-16
  81245c:	df000315 	stw	fp,12(sp)
  812460:	df000304 	addi	fp,sp,12
  812464:	e13ffe15 	stw	r4,-8(fp)
  812468:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
  81246c:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
  812470:	e0bfff17 	ldw	r2,-4(fp)
  812474:	1004c03a 	cmpne	r2,r2,zero
  812478:	1000061e 	bne	r2,zero,812494 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
  81247c:	e0bffe17 	ldw	r2,-8(fp)
  812480:	1007883a 	mov	r3,r2
  812484:	e0bffd03 	ldbu	r2,-12(fp)
  812488:	10c4b03a 	or	r2,r2,r3
  81248c:	e0bffd05 	stb	r2,-12(fp)
  812490:	00000806 	br	8124b4 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
  812494:	e0bffe17 	ldw	r2,-8(fp)
  812498:	1007883a 	mov	r3,r2
  81249c:	e0bffd03 	ldbu	r2,-12(fp)
  8124a0:	10c4b03a 	or	r2,r2,r3
  8124a4:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
  8124a8:	e0bffd03 	ldbu	r2,-12(fp)
  8124ac:	10801014 	ori	r2,r2,64
  8124b0:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
  8124b4:	e0fffd03 	ldbu	r3,-12(fp)
  8124b8:	00bfe004 	movi	r2,-128
  8124bc:	1884b03a 	or	r2,r3,r2
  8124c0:	10803fcc 	andi	r2,r2,255
}
  8124c4:	e037883a 	mov	sp,fp
  8124c8:	df000017 	ldw	fp,0(sp)
  8124cc:	dec00104 	addi	sp,sp,4
  8124d0:	f800283a 	ret

008124d4 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
  8124d4:	defffd04 	addi	sp,sp,-12
  8124d8:	df000215 	stw	fp,8(sp)
  8124dc:	df000204 	addi	fp,sp,8
  8124e0:	e13ffe15 	stw	r4,-8(fp)
  8124e4:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
  8124e8:	e0bffe17 	ldw	r2,-8(fp)
  8124ec:	10800a17 	ldw	r2,40(r2)
  8124f0:	e0ffff03 	ldbu	r3,-4(fp)
  8124f4:	10c00025 	stbio	r3,0(r2)
}
  8124f8:	e037883a 	mov	sp,fp
  8124fc:	df000017 	ldw	fp,0(sp)
  812500:	dec00104 	addi	sp,sp,4
  812504:	f800283a 	ret

00812508 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
  812508:	defffe04 	addi	sp,sp,-8
  81250c:	df000115 	stw	fp,4(sp)
  812510:	df000104 	addi	fp,sp,4
  812514:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
  812518:	e0bfff17 	ldw	r2,-4(fp)
  81251c:	10800a17 	ldw	r2,40(r2)
  812520:	1007883a 	mov	r3,r2
  812524:	00800044 	movi	r2,1
  812528:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
  81252c:	e037883a 	mov	sp,fp
  812530:	df000017 	ldw	fp,0(sp)
  812534:	dec00104 	addi	sp,sp,4
  812538:	f800283a 	ret

0081253c <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
  81253c:	defffc04 	addi	sp,sp,-16
  812540:	dfc00315 	stw	ra,12(sp)
  812544:	df000215 	stw	fp,8(sp)
  812548:	df000204 	addi	fp,sp,8
  81254c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
  812550:	e13fff17 	ldw	r4,-4(fp)
  812554:	01402074 	movhi	r5,129
  812558:	29583104 	addi	r5,r5,24772
  81255c:	0812cfc0 	call	812cfc <alt_find_dev>
  812560:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  812564:	e0bffe17 	ldw	r2,-8(fp)
}
  812568:	e037883a 	mov	sp,fp
  81256c:	dfc00117 	ldw	ra,4(sp)
  812570:	df000017 	ldw	fp,0(sp)
  812574:	dec00204 	addi	sp,sp,8
  812578:	f800283a 	ret

0081257c <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
  81257c:	defffb04 	addi	sp,sp,-20
  812580:	df000415 	stw	fp,16(sp)
  812584:	df000404 	addi	fp,sp,16
  812588:	e13ffd15 	stw	r4,-12(fp)
  81258c:	e17ffe15 	stw	r5,-8(fp)
  812590:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
  812594:	e03ffc15 	stw	zero,-16(fp)
  812598:	00000f06 	br	8125d8 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
  81259c:	e0bffd17 	ldw	r2,-12(fp)
  8125a0:	10800a17 	ldw	r2,40(r2)
  8125a4:	11000044 	addi	r4,r2,1
  8125a8:	e0fffc17 	ldw	r3,-16(fp)
  8125ac:	e0bffe17 	ldw	r2,-8(fp)
  8125b0:	1885883a 	add	r2,r3,r2
  8125b4:	10800003 	ldbu	r2,0(r2)
  8125b8:	10c03fcc 	andi	r3,r2,255
  8125bc:	18c0201c 	xori	r3,r3,128
  8125c0:	18ffe004 	addi	r3,r3,-128
  8125c4:	2005883a 	mov	r2,r4
  8125c8:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
  8125cc:	e0bffc17 	ldw	r2,-16(fp)
  8125d0:	10800044 	addi	r2,r2,1
  8125d4:	e0bffc15 	stw	r2,-16(fp)
  8125d8:	e0fffc17 	ldw	r3,-16(fp)
  8125dc:	e0bfff17 	ldw	r2,-4(fp)
  8125e0:	18bfee36 	bltu	r3,r2,81259c <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
  8125e4:	e037883a 	mov	sp,fp
  8125e8:	df000017 	ldw	fp,0(sp)
  8125ec:	dec00104 	addi	sp,sp,4
  8125f0:	f800283a 	ret

008125f4 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
  8125f4:	defffd04 	addi	sp,sp,-12
  8125f8:	df000215 	stw	fp,8(sp)
  8125fc:	df000204 	addi	fp,sp,8
  812600:	e13ffe15 	stw	r4,-8(fp)
  812604:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
  812608:	00000d06 	br	812640 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
  81260c:	e0bffe17 	ldw	r2,-8(fp)
  812610:	10800a17 	ldw	r2,40(r2)
  812614:	11000044 	addi	r4,r2,1
  812618:	e0bfff17 	ldw	r2,-4(fp)
  81261c:	10800003 	ldbu	r2,0(r2)
  812620:	10c03fcc 	andi	r3,r2,255
  812624:	18c0201c 	xori	r3,r3,128
  812628:	18ffe004 	addi	r3,r3,-128
  81262c:	2005883a 	mov	r2,r4
  812630:	10c00025 	stbio	r3,0(r2)
		++ptr;
  812634:	e0bfff17 	ldw	r2,-4(fp)
  812638:	10800044 	addi	r2,r2,1
  81263c:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
  812640:	e0bfff17 	ldw	r2,-4(fp)
  812644:	10800003 	ldbu	r2,0(r2)
  812648:	10803fcc 	andi	r2,r2,255
  81264c:	1080201c 	xori	r2,r2,128
  812650:	10bfe004 	addi	r2,r2,-128
  812654:	1004c03a 	cmpne	r2,r2,zero
  812658:	103fec1e 	bne	r2,zero,81260c <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
  81265c:	e037883a 	mov	sp,fp
  812660:	df000017 	ldw	fp,0(sp)
  812664:	dec00104 	addi	sp,sp,4
  812668:	f800283a 	ret

0081266c <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
  81266c:	defffb04 	addi	sp,sp,-20
  812670:	dfc00415 	stw	ra,16(sp)
  812674:	df000315 	stw	fp,12(sp)
  812678:	df000304 	addi	fp,sp,12
  81267c:	e13ffd15 	stw	r4,-12(fp)
  812680:	e17ffe15 	stw	r5,-8(fp)
  812684:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
  812688:	e0bffd17 	ldw	r2,-12(fp)
  81268c:	10800017 	ldw	r2,0(r2)
  812690:	1009883a 	mov	r4,r2
  812694:	e1bfff17 	ldw	r6,-4(fp)
  812698:	e17ffe17 	ldw	r5,-8(fp)
  81269c:	081257c0 	call	81257c <alt_up_character_lcd_write>
	return 0;
  8126a0:	0005883a 	mov	r2,zero
}
  8126a4:	e037883a 	mov	sp,fp
  8126a8:	dfc00117 	ldw	ra,4(sp)
  8126ac:	df000017 	ldw	fp,0(sp)
  8126b0:	dec00204 	addi	sp,sp,8
  8126b4:	f800283a 	ret

008126b8 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
  8126b8:	defff904 	addi	sp,sp,-28
  8126bc:	dfc00615 	stw	ra,24(sp)
  8126c0:	df000515 	stw	fp,20(sp)
  8126c4:	df000504 	addi	fp,sp,20
  8126c8:	e13ffc15 	stw	r4,-16(fp)
  8126cc:	e17ffd15 	stw	r5,-12(fp)
  8126d0:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
  8126d4:	e0bffd17 	ldw	r2,-12(fp)
  8126d8:	10800a28 	cmpgeui	r2,r2,40
  8126dc:	1000031e 	bne	r2,zero,8126ec <alt_up_character_lcd_set_cursor_pos+0x34>
  8126e0:	e0bffe17 	ldw	r2,-8(fp)
  8126e4:	108000b0 	cmpltui	r2,r2,2
  8126e8:	1000031e 	bne	r2,zero,8126f8 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
  8126ec:	00bfffc4 	movi	r2,-1
  8126f0:	e0bfff15 	stw	r2,-4(fp)
  8126f4:	00000806 	br	812718 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  8126f8:	e13ffd17 	ldw	r4,-12(fp)
  8126fc:	e17ffe17 	ldw	r5,-8(fp)
  812700:	08124580 	call	812458 <get_DDRAM_addr>
  812704:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
  812708:	e17ffb03 	ldbu	r5,-20(fp)
  81270c:	e13ffc17 	ldw	r4,-16(fp)
  812710:	08124d40 	call	8124d4 <alt_up_character_lcd_send_cmd>
	return 0;
  812714:	e03fff15 	stw	zero,-4(fp)
  812718:	e0bfff17 	ldw	r2,-4(fp)
}
  81271c:	e037883a 	mov	sp,fp
  812720:	dfc00117 	ldw	ra,4(sp)
  812724:	df000017 	ldw	fp,0(sp)
  812728:	dec00204 	addi	sp,sp,8
  81272c:	f800283a 	ret

00812730 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  812730:	defff904 	addi	sp,sp,-28
  812734:	dfc00615 	stw	ra,24(sp)
  812738:	df000515 	stw	fp,20(sp)
  81273c:	df000504 	addi	fp,sp,20
  812740:	e13ffc15 	stw	r4,-16(fp)
  812744:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  812748:	e0bffd17 	ldw	r2,-12(fp)
  81274c:	1005003a 	cmpeq	r2,r2,zero
  812750:	10001e1e 	bne	r2,zero,8127cc <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
  812754:	e0bffd17 	ldw	r2,-12(fp)
  812758:	10800050 	cmplti	r2,r2,1
  81275c:	1000031e 	bne	r2,zero,81276c <alt_up_character_lcd_shift_cursor+0x3c>
  812760:	00800504 	movi	r2,20
  812764:	e0bfff05 	stb	r2,-4(fp)
  812768:	00000206 	br	812774 <alt_up_character_lcd_shift_cursor+0x44>
  81276c:	00c00404 	movi	r3,16
  812770:	e0ffff05 	stb	r3,-4(fp)
  812774:	e0bfff03 	ldbu	r2,-4(fp)
  812778:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  81277c:	e0fffd17 	ldw	r3,-12(fp)
  812780:	e0fffe15 	stw	r3,-8(fp)
  812784:	e0fffe17 	ldw	r3,-8(fp)
  812788:	1804403a 	cmpge	r2,r3,zero
  81278c:	1000031e 	bne	r2,zero,81279c <alt_up_character_lcd_shift_cursor+0x6c>
  812790:	e0bffe17 	ldw	r2,-8(fp)
  812794:	0085c83a 	sub	r2,zero,r2
  812798:	e0bffe15 	stw	r2,-8(fp)
  81279c:	e0fffe17 	ldw	r3,-8(fp)
  8127a0:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  8127a4:	00000306 	br	8127b4 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  8127a8:	e17ffb43 	ldbu	r5,-19(fp)
  8127ac:	e13ffc17 	ldw	r4,-16(fp)
  8127b0:	08124d40 	call	8124d4 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  8127b4:	e0bffb03 	ldbu	r2,-20(fp)
  8127b8:	10bfffc4 	addi	r2,r2,-1
  8127bc:	e0bffb05 	stb	r2,-20(fp)
  8127c0:	e0bffb03 	ldbu	r2,-20(fp)
  8127c4:	10803fd8 	cmpnei	r2,r2,255
  8127c8:	103ff71e 	bne	r2,zero,8127a8 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  8127cc:	e037883a 	mov	sp,fp
  8127d0:	dfc00117 	ldw	ra,4(sp)
  8127d4:	df000017 	ldw	fp,0(sp)
  8127d8:	dec00204 	addi	sp,sp,8
  8127dc:	f800283a 	ret

008127e0 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  8127e0:	defff904 	addi	sp,sp,-28
  8127e4:	dfc00615 	stw	ra,24(sp)
  8127e8:	df000515 	stw	fp,20(sp)
  8127ec:	df000504 	addi	fp,sp,20
  8127f0:	e13ffc15 	stw	r4,-16(fp)
  8127f4:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  8127f8:	e0bffd17 	ldw	r2,-12(fp)
  8127fc:	1005003a 	cmpeq	r2,r2,zero
  812800:	10001e1e 	bne	r2,zero,81287c <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
  812804:	e0bffd17 	ldw	r2,-12(fp)
  812808:	10800050 	cmplti	r2,r2,1
  81280c:	1000031e 	bne	r2,zero,81281c <alt_up_character_lcd_shift_display+0x3c>
  812810:	00800704 	movi	r2,28
  812814:	e0bfff05 	stb	r2,-4(fp)
  812818:	00000206 	br	812824 <alt_up_character_lcd_shift_display+0x44>
  81281c:	00c00604 	movi	r3,24
  812820:	e0ffff05 	stb	r3,-4(fp)
  812824:	e0bfff03 	ldbu	r2,-4(fp)
  812828:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  81282c:	e0fffd17 	ldw	r3,-12(fp)
  812830:	e0fffe15 	stw	r3,-8(fp)
  812834:	e0fffe17 	ldw	r3,-8(fp)
  812838:	1804403a 	cmpge	r2,r3,zero
  81283c:	1000031e 	bne	r2,zero,81284c <alt_up_character_lcd_shift_display+0x6c>
  812840:	e0bffe17 	ldw	r2,-8(fp)
  812844:	0085c83a 	sub	r2,zero,r2
  812848:	e0bffe15 	stw	r2,-8(fp)
  81284c:	e0fffe17 	ldw	r3,-8(fp)
  812850:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  812854:	00000306 	br	812864 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  812858:	e17ffb43 	ldbu	r5,-19(fp)
  81285c:	e13ffc17 	ldw	r4,-16(fp)
  812860:	08124d40 	call	8124d4 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  812864:	e0bffb03 	ldbu	r2,-20(fp)
  812868:	10bfffc4 	addi	r2,r2,-1
  81286c:	e0bffb05 	stb	r2,-20(fp)
  812870:	e0bffb03 	ldbu	r2,-20(fp)
  812874:	10803fd8 	cmpnei	r2,r2,255
  812878:	103ff71e 	bne	r2,zero,812858 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  81287c:	e037883a 	mov	sp,fp
  812880:	dfc00117 	ldw	ra,4(sp)
  812884:	df000017 	ldw	fp,0(sp)
  812888:	dec00204 	addi	sp,sp,8
  81288c:	f800283a 	ret

00812890 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
  812890:	defff904 	addi	sp,sp,-28
  812894:	dfc00615 	stw	ra,24(sp)
  812898:	df000515 	stw	fp,20(sp)
  81289c:	df000504 	addi	fp,sp,20
  8128a0:	e13ffc15 	stw	r4,-16(fp)
  8128a4:	e17ffd15 	stw	r5,-12(fp)
  8128a8:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
  8128ac:	e0bffd17 	ldw	r2,-12(fp)
  8128b0:	10800a28 	cmpgeui	r2,r2,40
  8128b4:	1000031e 	bne	r2,zero,8128c4 <alt_up_character_lcd_erase_pos+0x34>
  8128b8:	e0bffe17 	ldw	r2,-8(fp)
  8128bc:	108000b0 	cmpltui	r2,r2,2
  8128c0:	1000031e 	bne	r2,zero,8128d0 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
  8128c4:	00bfffc4 	movi	r2,-1
  8128c8:	e0bfff15 	stw	r2,-4(fp)
  8128cc:	00000e06 	br	812908 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  8128d0:	e13ffd17 	ldw	r4,-12(fp)
  8128d4:	e17ffe17 	ldw	r5,-8(fp)
  8128d8:	08124580 	call	812458 <get_DDRAM_addr>
  8128dc:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
  8128e0:	e17ffb03 	ldbu	r5,-20(fp)
  8128e4:	e13ffc17 	ldw	r4,-16(fp)
  8128e8:	08124d40 	call	8124d4 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	// NEM Bug Fix. Next loc sends | to the LCD instead of erase
	// Changed to send a simple space. Not really erase but good enough
	//IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, ' ');
  8128ec:	e0bffc17 	ldw	r2,-16(fp)
  8128f0:	10800a17 	ldw	r2,40(r2)
  8128f4:	10800044 	addi	r2,r2,1
  8128f8:	1007883a 	mov	r3,r2
  8128fc:	00800804 	movi	r2,32
  812900:	18800025 	stbio	r2,0(r3)
	// END NEM Bug Fixs
	return 0;
  812904:	e03fff15 	stw	zero,-4(fp)
  812908:	e0bfff17 	ldw	r2,-4(fp)
}
  81290c:	e037883a 	mov	sp,fp
  812910:	dfc00117 	ldw	ra,4(sp)
  812914:	df000017 	ldw	fp,0(sp)
  812918:	dec00204 	addi	sp,sp,8
  81291c:	f800283a 	ret

00812920 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
  812920:	defffd04 	addi	sp,sp,-12
  812924:	dfc00215 	stw	ra,8(sp)
  812928:	df000115 	stw	fp,4(sp)
  81292c:	df000104 	addi	fp,sp,4
  812930:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
  812934:	e13fff17 	ldw	r4,-4(fp)
  812938:	01400304 	movi	r5,12
  81293c:	08124d40 	call	8124d4 <alt_up_character_lcd_send_cmd>
}
  812940:	e037883a 	mov	sp,fp
  812944:	dfc00117 	ldw	ra,4(sp)
  812948:	df000017 	ldw	fp,0(sp)
  81294c:	dec00204 	addi	sp,sp,8
  812950:	f800283a 	ret

00812954 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
  812954:	defffd04 	addi	sp,sp,-12
  812958:	dfc00215 	stw	ra,8(sp)
  81295c:	df000115 	stw	fp,4(sp)
  812960:	df000104 	addi	fp,sp,4
  812964:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
  812968:	e13fff17 	ldw	r4,-4(fp)
  81296c:	014003c4 	movi	r5,15
  812970:	08124d40 	call	8124d4 <alt_up_character_lcd_send_cmd>
}
  812974:	e037883a 	mov	sp,fp
  812978:	dfc00117 	ldw	ra,4(sp)
  81297c:	df000017 	ldw	fp,0(sp)
  812980:	dec00204 	addi	sp,sp,8
  812984:	f800283a 	ret

00812988 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  812988:	defff404 	addi	sp,sp,-48
  81298c:	df000b15 	stw	fp,44(sp)
  812990:	df000b04 	addi	fp,sp,44
  812994:	e13ffb15 	stw	r4,-20(fp)
  812998:	e17ffc15 	stw	r5,-16(fp)
  81299c:	e1bffd15 	stw	r6,-12(fp)
  8129a0:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  8129a4:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8129a8:	00802074 	movhi	r2,129
  8129ac:	109f5304 	addi	r2,r2,32076
  8129b0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  8129b4:	1005003a 	cmpeq	r2,r2,zero
  8129b8:	1000411e 	bne	r2,zero,812ac0 <alt_alarm_start+0x138>
  {
    if (alarm)
  8129bc:	e0bffb17 	ldw	r2,-20(fp)
  8129c0:	1005003a 	cmpeq	r2,r2,zero
  8129c4:	10003b1e 	bne	r2,zero,812ab4 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  8129c8:	e0fffb17 	ldw	r3,-20(fp)
  8129cc:	e0bffd17 	ldw	r2,-12(fp)
  8129d0:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  8129d4:	e0fffb17 	ldw	r3,-20(fp)
  8129d8:	e0bffe17 	ldw	r2,-8(fp)
  8129dc:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8129e0:	0005303a 	rdctl	r2,status
  8129e4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8129e8:	e0fff817 	ldw	r3,-32(fp)
  8129ec:	00bfff84 	movi	r2,-2
  8129f0:	1884703a 	and	r2,r3,r2
  8129f4:	1001703a 	wrctl	status,r2
  
  return context;
  8129f8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  8129fc:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  812a00:	00802074 	movhi	r2,129
  812a04:	109f5404 	addi	r2,r2,32080
  812a08:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  812a0c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  812a10:	e0fffc17 	ldw	r3,-16(fp)
  812a14:	e0bff917 	ldw	r2,-28(fp)
  812a18:	1885883a 	add	r2,r3,r2
  812a1c:	10c00044 	addi	r3,r2,1
  812a20:	e0bffb17 	ldw	r2,-20(fp)
  812a24:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  812a28:	e0bffb17 	ldw	r2,-20(fp)
  812a2c:	10c00217 	ldw	r3,8(r2)
  812a30:	e0bff917 	ldw	r2,-28(fp)
  812a34:	1880042e 	bgeu	r3,r2,812a48 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  812a38:	e0fffb17 	ldw	r3,-20(fp)
  812a3c:	00800044 	movi	r2,1
  812a40:	18800405 	stb	r2,16(r3)
  812a44:	00000206 	br	812a50 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  812a48:	e0bffb17 	ldw	r2,-20(fp)
  812a4c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  812a50:	e0fffb17 	ldw	r3,-20(fp)
  812a54:	00802074 	movhi	r2,129
  812a58:	10985604 	addi	r2,r2,24920
  812a5c:	e0bff615 	stw	r2,-40(fp)
  812a60:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  812a64:	e0fff717 	ldw	r3,-36(fp)
  812a68:	e0bff617 	ldw	r2,-40(fp)
  812a6c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  812a70:	e0bff617 	ldw	r2,-40(fp)
  812a74:	10c00017 	ldw	r3,0(r2)
  812a78:	e0bff717 	ldw	r2,-36(fp)
  812a7c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  812a80:	e0bff617 	ldw	r2,-40(fp)
  812a84:	10c00017 	ldw	r3,0(r2)
  812a88:	e0bff717 	ldw	r2,-36(fp)
  812a8c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  812a90:	e0fff617 	ldw	r3,-40(fp)
  812a94:	e0bff717 	ldw	r2,-36(fp)
  812a98:	18800015 	stw	r2,0(r3)
  812a9c:	e0bffa17 	ldw	r2,-24(fp)
  812aa0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812aa4:	e0bff517 	ldw	r2,-44(fp)
  812aa8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  812aac:	e03fff15 	stw	zero,-4(fp)
  812ab0:	00000506 	br	812ac8 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  812ab4:	00bffa84 	movi	r2,-22
  812ab8:	e0bfff15 	stw	r2,-4(fp)
  812abc:	00000206 	br	812ac8 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  812ac0:	00bfde84 	movi	r2,-134
  812ac4:	e0bfff15 	stw	r2,-4(fp)
  812ac8:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  812acc:	e037883a 	mov	sp,fp
  812ad0:	df000017 	ldw	fp,0(sp)
  812ad4:	dec00104 	addi	sp,sp,4
  812ad8:	f800283a 	ret

00812adc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  812adc:	defffe04 	addi	sp,sp,-8
  812ae0:	df000115 	stw	fp,4(sp)
  812ae4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  812ae8:	e03fff15 	stw	zero,-4(fp)
  812aec:	00000506 	br	812b04 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  812af0:	e0bfff17 	ldw	r2,-4(fp)
  812af4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  812af8:	e0bfff17 	ldw	r2,-4(fp)
  812afc:	10800804 	addi	r2,r2,32
  812b00:	e0bfff15 	stw	r2,-4(fp)
  812b04:	e0bfff17 	ldw	r2,-4(fp)
  812b08:	10820030 	cmpltui	r2,r2,2048
  812b0c:	103ff81e 	bne	r2,zero,812af0 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  812b10:	e037883a 	mov	sp,fp
  812b14:	df000017 	ldw	fp,0(sp)
  812b18:	dec00104 	addi	sp,sp,4
  812b1c:	f800283a 	ret

00812b20 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  812b20:	defff904 	addi	sp,sp,-28
  812b24:	dfc00615 	stw	ra,24(sp)
  812b28:	df000515 	stw	fp,20(sp)
  812b2c:	df000504 	addi	fp,sp,20
  812b30:	e13ffd15 	stw	r4,-12(fp)
  812b34:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  812b38:	e0bffd17 	ldw	r2,-12(fp)
  812b3c:	1005003a 	cmpeq	r2,r2,zero
  812b40:	1000041e 	bne	r2,zero,812b54 <alt_dev_llist_insert+0x34>
  812b44:	e0bffd17 	ldw	r2,-12(fp)
  812b48:	10800217 	ldw	r2,8(r2)
  812b4c:	1004c03a 	cmpne	r2,r2,zero
  812b50:	1000071e 	bne	r2,zero,812b70 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  812b54:	0812bd40 	call	812bd4 <alt_get_errno>
  812b58:	1007883a 	mov	r3,r2
  812b5c:	00800584 	movi	r2,22
  812b60:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  812b64:	00bffa84 	movi	r2,-22
  812b68:	e0bfff15 	stw	r2,-4(fp)
  812b6c:	00001306 	br	812bbc <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  812b70:	e0fffd17 	ldw	r3,-12(fp)
  812b74:	e0bffe17 	ldw	r2,-8(fp)
  812b78:	e0bffb15 	stw	r2,-20(fp)
  812b7c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  812b80:	e0fffc17 	ldw	r3,-16(fp)
  812b84:	e0bffb17 	ldw	r2,-20(fp)
  812b88:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  812b8c:	e0bffb17 	ldw	r2,-20(fp)
  812b90:	10c00017 	ldw	r3,0(r2)
  812b94:	e0bffc17 	ldw	r2,-16(fp)
  812b98:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  812b9c:	e0bffb17 	ldw	r2,-20(fp)
  812ba0:	10c00017 	ldw	r3,0(r2)
  812ba4:	e0bffc17 	ldw	r2,-16(fp)
  812ba8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  812bac:	e0fffb17 	ldw	r3,-20(fp)
  812bb0:	e0bffc17 	ldw	r2,-16(fp)
  812bb4:	18800015 	stw	r2,0(r3)

  return 0;  
  812bb8:	e03fff15 	stw	zero,-4(fp)
  812bbc:	e0bfff17 	ldw	r2,-4(fp)
}
  812bc0:	e037883a 	mov	sp,fp
  812bc4:	dfc00117 	ldw	ra,4(sp)
  812bc8:	df000017 	ldw	fp,0(sp)
  812bcc:	dec00204 	addi	sp,sp,8
  812bd0:	f800283a 	ret

00812bd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812bd4:	defffd04 	addi	sp,sp,-12
  812bd8:	dfc00215 	stw	ra,8(sp)
  812bdc:	df000115 	stw	fp,4(sp)
  812be0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  812be4:	00802074 	movhi	r2,129
  812be8:	10983404 	addi	r2,r2,24784
  812bec:	10800017 	ldw	r2,0(r2)
  812bf0:	1005003a 	cmpeq	r2,r2,zero
  812bf4:	1000061e 	bne	r2,zero,812c10 <alt_get_errno+0x3c>
  812bf8:	00802074 	movhi	r2,129
  812bfc:	10983404 	addi	r2,r2,24784
  812c00:	10800017 	ldw	r2,0(r2)
  812c04:	103ee83a 	callr	r2
  812c08:	e0bfff15 	stw	r2,-4(fp)
  812c0c:	00000306 	br	812c1c <alt_get_errno+0x48>
  812c10:	00802074 	movhi	r2,129
  812c14:	109f3504 	addi	r2,r2,31956
  812c18:	e0bfff15 	stw	r2,-4(fp)
  812c1c:	e0bfff17 	ldw	r2,-4(fp)
}
  812c20:	e037883a 	mov	sp,fp
  812c24:	dfc00117 	ldw	ra,4(sp)
  812c28:	df000017 	ldw	fp,0(sp)
  812c2c:	dec00204 	addi	sp,sp,8
  812c30:	f800283a 	ret

00812c34 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  812c34:	defffd04 	addi	sp,sp,-12
  812c38:	dfc00215 	stw	ra,8(sp)
  812c3c:	df000115 	stw	fp,4(sp)
  812c40:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  812c44:	00bfff04 	movi	r2,-4
  812c48:	00c02074 	movhi	r3,129
  812c4c:	18d08e04 	addi	r3,r3,16952
  812c50:	1885883a 	add	r2,r3,r2
  812c54:	e0bfff15 	stw	r2,-4(fp)
  812c58:	00000606 	br	812c74 <_do_ctors+0x40>
        (*ctor) (); 
  812c5c:	e0bfff17 	ldw	r2,-4(fp)
  812c60:	10800017 	ldw	r2,0(r2)
  812c64:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  812c68:	e0bfff17 	ldw	r2,-4(fp)
  812c6c:	10bfff04 	addi	r2,r2,-4
  812c70:	e0bfff15 	stw	r2,-4(fp)
  812c74:	e0ffff17 	ldw	r3,-4(fp)
  812c78:	00802074 	movhi	r2,129
  812c7c:	10908d04 	addi	r2,r2,16948
  812c80:	18bff62e 	bgeu	r3,r2,812c5c <_do_ctors+0x28>
        (*ctor) (); 
}
  812c84:	e037883a 	mov	sp,fp
  812c88:	dfc00117 	ldw	ra,4(sp)
  812c8c:	df000017 	ldw	fp,0(sp)
  812c90:	dec00204 	addi	sp,sp,8
  812c94:	f800283a 	ret

00812c98 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  812c98:	defffd04 	addi	sp,sp,-12
  812c9c:	dfc00215 	stw	ra,8(sp)
  812ca0:	df000115 	stw	fp,4(sp)
  812ca4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  812ca8:	00bfff04 	movi	r2,-4
  812cac:	00c02074 	movhi	r3,129
  812cb0:	18d08e04 	addi	r3,r3,16952
  812cb4:	1885883a 	add	r2,r3,r2
  812cb8:	e0bfff15 	stw	r2,-4(fp)
  812cbc:	00000606 	br	812cd8 <_do_dtors+0x40>
        (*dtor) (); 
  812cc0:	e0bfff17 	ldw	r2,-4(fp)
  812cc4:	10800017 	ldw	r2,0(r2)
  812cc8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  812ccc:	e0bfff17 	ldw	r2,-4(fp)
  812cd0:	10bfff04 	addi	r2,r2,-4
  812cd4:	e0bfff15 	stw	r2,-4(fp)
  812cd8:	e0ffff17 	ldw	r3,-4(fp)
  812cdc:	00802074 	movhi	r2,129
  812ce0:	10908e04 	addi	r2,r2,16952
  812ce4:	18bff62e 	bgeu	r3,r2,812cc0 <_do_dtors+0x28>
        (*dtor) (); 
}
  812ce8:	e037883a 	mov	sp,fp
  812cec:	dfc00117 	ldw	ra,4(sp)
  812cf0:	df000017 	ldw	fp,0(sp)
  812cf4:	dec00204 	addi	sp,sp,8
  812cf8:	f800283a 	ret

00812cfc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  812cfc:	defff904 	addi	sp,sp,-28
  812d00:	dfc00615 	stw	ra,24(sp)
  812d04:	df000515 	stw	fp,20(sp)
  812d08:	df000504 	addi	fp,sp,20
  812d0c:	e13ffd15 	stw	r4,-12(fp)
  812d10:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  812d14:	e0bffe17 	ldw	r2,-8(fp)
  812d18:	10800017 	ldw	r2,0(r2)
  812d1c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  812d20:	e13ffd17 	ldw	r4,-12(fp)
  812d24:	08047140 	call	804714 <strlen>
  812d28:	10800044 	addi	r2,r2,1
  812d2c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  812d30:	00000d06 	br	812d68 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  812d34:	e0bffc17 	ldw	r2,-16(fp)
  812d38:	11000217 	ldw	r4,8(r2)
  812d3c:	e1bffb17 	ldw	r6,-20(fp)
  812d40:	e17ffd17 	ldw	r5,-12(fp)
  812d44:	0813d200 	call	813d20 <memcmp>
  812d48:	1004c03a 	cmpne	r2,r2,zero
  812d4c:	1000031e 	bne	r2,zero,812d5c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  812d50:	e0bffc17 	ldw	r2,-16(fp)
  812d54:	e0bfff15 	stw	r2,-4(fp)
  812d58:	00000706 	br	812d78 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  812d5c:	e0bffc17 	ldw	r2,-16(fp)
  812d60:	10800017 	ldw	r2,0(r2)
  812d64:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  812d68:	e0fffe17 	ldw	r3,-8(fp)
  812d6c:	e0bffc17 	ldw	r2,-16(fp)
  812d70:	10fff01e 	bne	r2,r3,812d34 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  812d74:	e03fff15 	stw	zero,-4(fp)
  812d78:	e0bfff17 	ldw	r2,-4(fp)
}
  812d7c:	e037883a 	mov	sp,fp
  812d80:	dfc00117 	ldw	ra,4(sp)
  812d84:	df000017 	ldw	fp,0(sp)
  812d88:	dec00204 	addi	sp,sp,8
  812d8c:	f800283a 	ret

00812d90 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  812d90:	defffe04 	addi	sp,sp,-8
  812d94:	dfc00115 	stw	ra,4(sp)
  812d98:	df000015 	stw	fp,0(sp)
  812d9c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  812da0:	0009883a 	mov	r4,zero
  812da4:	01440004 	movi	r5,4096
  812da8:	0813c440 	call	813c44 <alt_icache_flush>
#endif
}
  812dac:	e037883a 	mov	sp,fp
  812db0:	dfc00117 	ldw	ra,4(sp)
  812db4:	df000017 	ldw	fp,0(sp)
  812db8:	dec00204 	addi	sp,sp,8
  812dbc:	f800283a 	ret

00812dc0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  812dc0:	defff904 	addi	sp,sp,-28
  812dc4:	dfc00615 	stw	ra,24(sp)
  812dc8:	df000515 	stw	fp,20(sp)
  812dcc:	df000504 	addi	fp,sp,20
  812dd0:	e13ffc15 	stw	r4,-16(fp)
  812dd4:	e17ffd15 	stw	r5,-12(fp)
  812dd8:	e1bffe15 	stw	r6,-8(fp)
  812ddc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  812de0:	e13ffd17 	ldw	r4,-12(fp)
  812de4:	e17ffe17 	ldw	r5,-8(fp)
  812de8:	e1bfff17 	ldw	r6,-4(fp)
  812dec:	08131980 	call	813198 <open>
  812df0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  812df4:	e0bffb17 	ldw	r2,-20(fp)
  812df8:	1004803a 	cmplt	r2,r2,zero
  812dfc:	10001c1e 	bne	r2,zero,812e70 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  812e00:	e0bffb17 	ldw	r2,-20(fp)
  812e04:	00c02074 	movhi	r3,129
  812e08:	18d38c04 	addi	r3,r3,20016
  812e0c:	10800324 	muli	r2,r2,12
  812e10:	10c5883a 	add	r2,r2,r3
  812e14:	10c00017 	ldw	r3,0(r2)
  812e18:	e0bffc17 	ldw	r2,-16(fp)
  812e1c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  812e20:	e0bffb17 	ldw	r2,-20(fp)
  812e24:	00c02074 	movhi	r3,129
  812e28:	18d38c04 	addi	r3,r3,20016
  812e2c:	10800324 	muli	r2,r2,12
  812e30:	10c5883a 	add	r2,r2,r3
  812e34:	10800104 	addi	r2,r2,4
  812e38:	10c00017 	ldw	r3,0(r2)
  812e3c:	e0bffc17 	ldw	r2,-16(fp)
  812e40:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  812e44:	e0bffb17 	ldw	r2,-20(fp)
  812e48:	00c02074 	movhi	r3,129
  812e4c:	18d38c04 	addi	r3,r3,20016
  812e50:	10800324 	muli	r2,r2,12
  812e54:	10c5883a 	add	r2,r2,r3
  812e58:	10800204 	addi	r2,r2,8
  812e5c:	10c00017 	ldw	r3,0(r2)
  812e60:	e0bffc17 	ldw	r2,-16(fp)
  812e64:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  812e68:	e13ffb17 	ldw	r4,-20(fp)
  812e6c:	08077d00 	call	8077d0 <alt_release_fd>
  }
} 
  812e70:	e037883a 	mov	sp,fp
  812e74:	dfc00117 	ldw	ra,4(sp)
  812e78:	df000017 	ldw	fp,0(sp)
  812e7c:	dec00204 	addi	sp,sp,8
  812e80:	f800283a 	ret

00812e84 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  812e84:	defffb04 	addi	sp,sp,-20
  812e88:	dfc00415 	stw	ra,16(sp)
  812e8c:	df000315 	stw	fp,12(sp)
  812e90:	df000304 	addi	fp,sp,12
  812e94:	e13ffd15 	stw	r4,-12(fp)
  812e98:	e17ffe15 	stw	r5,-8(fp)
  812e9c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  812ea0:	01002074 	movhi	r4,129
  812ea4:	21138f04 	addi	r4,r4,20028
  812ea8:	e17ffd17 	ldw	r5,-12(fp)
  812eac:	01800044 	movi	r6,1
  812eb0:	01c07fc4 	movi	r7,511
  812eb4:	0812dc00 	call	812dc0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  812eb8:	01002074 	movhi	r4,129
  812ebc:	21138c04 	addi	r4,r4,20016
  812ec0:	e17ffe17 	ldw	r5,-8(fp)
  812ec4:	000d883a 	mov	r6,zero
  812ec8:	01c07fc4 	movi	r7,511
  812ecc:	0812dc00 	call	812dc0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  812ed0:	01002074 	movhi	r4,129
  812ed4:	21139204 	addi	r4,r4,20040
  812ed8:	e17fff17 	ldw	r5,-4(fp)
  812edc:	01800044 	movi	r6,1
  812ee0:	01c07fc4 	movi	r7,511
  812ee4:	0812dc00 	call	812dc0 <alt_open_fd>
}  
  812ee8:	e037883a 	mov	sp,fp
  812eec:	dfc00117 	ldw	ra,4(sp)
  812ef0:	df000017 	ldw	fp,0(sp)
  812ef4:	dec00204 	addi	sp,sp,8
  812ef8:	f800283a 	ret

00812efc <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  812efc:	deffef04 	addi	sp,sp,-68
  812f00:	df001015 	stw	fp,64(sp)
  812f04:	df001004 	addi	fp,sp,64
  812f08:	e13ffc15 	stw	r4,-16(fp)
  812f0c:	e17ffd15 	stw	r5,-12(fp)
  812f10:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
  812f14:	00bffa84 	movi	r2,-22
  812f18:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  812f1c:	e0bffc17 	ldw	r2,-16(fp)
  812f20:	10800828 	cmpgeui	r2,r2,32
  812f24:	1000601e 	bne	r2,zero,8130a8 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812f28:	0005303a 	rdctl	r2,status
  812f2c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812f30:	e0fff917 	ldw	r3,-28(fp)
  812f34:	00bfff84 	movi	r2,-2
  812f38:	1884703a 	and	r2,r3,r2
  812f3c:	1001703a 	wrctl	status,r2
  
  return context;
  812f40:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  812f44:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
  812f48:	e0bffc17 	ldw	r2,-16(fp)
  812f4c:	00c020b4 	movhi	r3,130
  812f50:	18fbe804 	addi	r3,r3,-4192
  812f54:	100490fa 	slli	r2,r2,3
  812f58:	10c7883a 	add	r3,r2,r3
  812f5c:	e0bffe17 	ldw	r2,-8(fp)
  812f60:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  812f64:	e0bffc17 	ldw	r2,-16(fp)
  812f68:	00c020b4 	movhi	r3,130
  812f6c:	18fbe804 	addi	r3,r3,-4192
  812f70:	100490fa 	slli	r2,r2,3
  812f74:	10c5883a 	add	r2,r2,r3
  812f78:	10c00104 	addi	r3,r2,4
  812f7c:	e0bffd17 	ldw	r2,-12(fp)
  812f80:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  812f84:	e0bffe17 	ldw	r2,-8(fp)
  812f88:	1005003a 	cmpeq	r2,r2,zero
  812f8c:	1000201e 	bne	r2,zero,813010 <alt_irq_register+0x114>
  812f90:	e0bffc17 	ldw	r2,-16(fp)
  812f94:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812f98:	0005303a 	rdctl	r2,status
  812f9c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812fa0:	e0fff617 	ldw	r3,-40(fp)
  812fa4:	00bfff84 	movi	r2,-2
  812fa8:	1884703a 	and	r2,r3,r2
  812fac:	1001703a 	wrctl	status,r2
  
  return context;
  812fb0:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  812fb4:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  812fb8:	e0fff717 	ldw	r3,-36(fp)
  812fbc:	00800044 	movi	r2,1
  812fc0:	10c4983a 	sll	r2,r2,r3
  812fc4:	1007883a 	mov	r3,r2
  812fc8:	00802074 	movhi	r2,129
  812fcc:	109f5204 	addi	r2,r2,32072
  812fd0:	10800017 	ldw	r2,0(r2)
  812fd4:	1886b03a 	or	r3,r3,r2
  812fd8:	00802074 	movhi	r2,129
  812fdc:	109f5204 	addi	r2,r2,32072
  812fe0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  812fe4:	00802074 	movhi	r2,129
  812fe8:	109f5204 	addi	r2,r2,32072
  812fec:	10800017 	ldw	r2,0(r2)
  812ff0:	100170fa 	wrctl	ienable,r2
  812ff4:	e0bff817 	ldw	r2,-32(fp)
  812ff8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812ffc:	e0bff517 	ldw	r2,-44(fp)
  813000:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  813004:	0005883a 	mov	r2,zero
  813008:	e0bfff15 	stw	r2,-4(fp)
  81300c:	00002006 	br	813090 <alt_irq_register+0x194>
  813010:	e0bffc17 	ldw	r2,-16(fp)
  813014:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813018:	0005303a 	rdctl	r2,status
  81301c:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813020:	e0fff217 	ldw	r3,-56(fp)
  813024:	00bfff84 	movi	r2,-2
  813028:	1884703a 	and	r2,r3,r2
  81302c:	1001703a 	wrctl	status,r2
  
  return context;
  813030:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  813034:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
  813038:	e0fff317 	ldw	r3,-52(fp)
  81303c:	00800044 	movi	r2,1
  813040:	10c4983a 	sll	r2,r2,r3
  813044:	0084303a 	nor	r2,zero,r2
  813048:	1007883a 	mov	r3,r2
  81304c:	00802074 	movhi	r2,129
  813050:	109f5204 	addi	r2,r2,32072
  813054:	10800017 	ldw	r2,0(r2)
  813058:	1886703a 	and	r3,r3,r2
  81305c:	00802074 	movhi	r2,129
  813060:	109f5204 	addi	r2,r2,32072
  813064:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  813068:	00802074 	movhi	r2,129
  81306c:	109f5204 	addi	r2,r2,32072
  813070:	10800017 	ldw	r2,0(r2)
  813074:	100170fa 	wrctl	ienable,r2
  813078:	e0bff417 	ldw	r2,-48(fp)
  81307c:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813080:	e0bff117 	ldw	r2,-60(fp)
  813084:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  813088:	0005883a 	mov	r2,zero
  81308c:	e0bfff15 	stw	r2,-4(fp)
  813090:	e0bfff17 	ldw	r2,-4(fp)
  813094:	e0bffb15 	stw	r2,-20(fp)
  813098:	e0bffa17 	ldw	r2,-24(fp)
  81309c:	e0bff015 	stw	r2,-64(fp)
  8130a0:	e0bff017 	ldw	r2,-64(fp)
  8130a4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  8130a8:	e0bffb17 	ldw	r2,-20(fp)
}
  8130ac:	e037883a 	mov	sp,fp
  8130b0:	df000017 	ldw	fp,0(sp)
  8130b4:	dec00104 	addi	sp,sp,4
  8130b8:	f800283a 	ret

008130bc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  8130bc:	defffc04 	addi	sp,sp,-16
  8130c0:	df000315 	stw	fp,12(sp)
  8130c4:	df000304 	addi	fp,sp,12
  8130c8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  8130cc:	e0bffe17 	ldw	r2,-8(fp)
  8130d0:	10800217 	ldw	r2,8(r2)
  8130d4:	10d00034 	orhi	r3,r2,16384
  8130d8:	e0bffe17 	ldw	r2,-8(fp)
  8130dc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8130e0:	e03ffd15 	stw	zero,-12(fp)
  8130e4:	00002006 	br	813168 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8130e8:	e0bffd17 	ldw	r2,-12(fp)
  8130ec:	00c02074 	movhi	r3,129
  8130f0:	18d38c04 	addi	r3,r3,20016
  8130f4:	10800324 	muli	r2,r2,12
  8130f8:	10c5883a 	add	r2,r2,r3
  8130fc:	10c00017 	ldw	r3,0(r2)
  813100:	e0bffe17 	ldw	r2,-8(fp)
  813104:	10800017 	ldw	r2,0(r2)
  813108:	1880141e 	bne	r3,r2,81315c <alt_file_locked+0xa0>
  81310c:	e0bffd17 	ldw	r2,-12(fp)
  813110:	00c02074 	movhi	r3,129
  813114:	18d38c04 	addi	r3,r3,20016
  813118:	10800324 	muli	r2,r2,12
  81311c:	10c5883a 	add	r2,r2,r3
  813120:	10800204 	addi	r2,r2,8
  813124:	10800017 	ldw	r2,0(r2)
  813128:	1004403a 	cmpge	r2,r2,zero
  81312c:	10000b1e 	bne	r2,zero,81315c <alt_file_locked+0xa0>
  813130:	e0bffd17 	ldw	r2,-12(fp)
  813134:	10800324 	muli	r2,r2,12
  813138:	1007883a 	mov	r3,r2
  81313c:	00802074 	movhi	r2,129
  813140:	10938c04 	addi	r2,r2,20016
  813144:	1887883a 	add	r3,r3,r2
  813148:	e0bffe17 	ldw	r2,-8(fp)
  81314c:	18800326 	beq	r3,r2,81315c <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  813150:	00bffcc4 	movi	r2,-13
  813154:	e0bfff15 	stw	r2,-4(fp)
  813158:	00000a06 	br	813184 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  81315c:	e0bffd17 	ldw	r2,-12(fp)
  813160:	10800044 	addi	r2,r2,1
  813164:	e0bffd15 	stw	r2,-12(fp)
  813168:	00802074 	movhi	r2,129
  81316c:	10983304 	addi	r2,r2,24780
  813170:	10800017 	ldw	r2,0(r2)
  813174:	1007883a 	mov	r3,r2
  813178:	e0bffd17 	ldw	r2,-12(fp)
  81317c:	18bfda2e 	bgeu	r3,r2,8130e8 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  813180:	e03fff15 	stw	zero,-4(fp)
  813184:	e0bfff17 	ldw	r2,-4(fp)
}
  813188:	e037883a 	mov	sp,fp
  81318c:	df000017 	ldw	fp,0(sp)
  813190:	dec00104 	addi	sp,sp,4
  813194:	f800283a 	ret

00813198 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  813198:	defff404 	addi	sp,sp,-48
  81319c:	dfc00b15 	stw	ra,44(sp)
  8131a0:	df000a15 	stw	fp,40(sp)
  8131a4:	df000a04 	addi	fp,sp,40
  8131a8:	e13ffb15 	stw	r4,-20(fp)
  8131ac:	e17ffc15 	stw	r5,-16(fp)
  8131b0:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  8131b4:	00bfffc4 	movi	r2,-1
  8131b8:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  8131bc:	00bffb44 	movi	r2,-19
  8131c0:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  8131c4:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  8131c8:	e13ffb17 	ldw	r4,-20(fp)
  8131cc:	01402074 	movhi	r5,129
  8131d0:	29583104 	addi	r5,r5,24772
  8131d4:	0812cfc0 	call	812cfc <alt_find_dev>
  8131d8:	e0bffa15 	stw	r2,-24(fp)
  8131dc:	e0bffa17 	ldw	r2,-24(fp)
  8131e0:	1004c03a 	cmpne	r2,r2,zero
  8131e4:	1000051e 	bne	r2,zero,8131fc <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  8131e8:	e13ffb17 	ldw	r4,-20(fp)
  8131ec:	0813a300 	call	813a30 <alt_find_file>
  8131f0:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  8131f4:	00800044 	movi	r2,1
  8131f8:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  8131fc:	e0bffa17 	ldw	r2,-24(fp)
  813200:	1005003a 	cmpeq	r2,r2,zero
  813204:	1000301e 	bne	r2,zero,8132c8 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  813208:	e13ffa17 	ldw	r4,-24(fp)
  81320c:	0813b500 	call	813b50 <alt_get_fd>
  813210:	e0bff815 	stw	r2,-32(fp)
  813214:	e0bff817 	ldw	r2,-32(fp)
  813218:	1004403a 	cmpge	r2,r2,zero
  81321c:	1000031e 	bne	r2,zero,81322c <open+0x94>
    {
      status = index;
  813220:	e0bff817 	ldw	r2,-32(fp)
  813224:	e0bff715 	stw	r2,-36(fp)
  813228:	00002906 	br	8132d0 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  81322c:	e0bff817 	ldw	r2,-32(fp)
  813230:	10800324 	muli	r2,r2,12
  813234:	1007883a 	mov	r3,r2
  813238:	00802074 	movhi	r2,129
  81323c:	10938c04 	addi	r2,r2,20016
  813240:	1885883a 	add	r2,r3,r2
  813244:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  813248:	e0fffc17 	ldw	r3,-16(fp)
  81324c:	00900034 	movhi	r2,16384
  813250:	10bfffc4 	addi	r2,r2,-1
  813254:	1886703a 	and	r3,r3,r2
  813258:	e0bff917 	ldw	r2,-28(fp)
  81325c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  813260:	e0bff617 	ldw	r2,-40(fp)
  813264:	1004c03a 	cmpne	r2,r2,zero
  813268:	1000061e 	bne	r2,zero,813284 <open+0xec>
  81326c:	e13ff917 	ldw	r4,-28(fp)
  813270:	08130bc0 	call	8130bc <alt_file_locked>
  813274:	e0bff715 	stw	r2,-36(fp)
  813278:	e0bff717 	ldw	r2,-36(fp)
  81327c:	1004803a 	cmplt	r2,r2,zero
  813280:	1000131e 	bne	r2,zero,8132d0 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  813284:	e0bffa17 	ldw	r2,-24(fp)
  813288:	10800317 	ldw	r2,12(r2)
  81328c:	1005003a 	cmpeq	r2,r2,zero
  813290:	1000091e 	bne	r2,zero,8132b8 <open+0x120>
  813294:	e0bffa17 	ldw	r2,-24(fp)
  813298:	10800317 	ldw	r2,12(r2)
  81329c:	e13ff917 	ldw	r4,-28(fp)
  8132a0:	e17ffb17 	ldw	r5,-20(fp)
  8132a4:	e1bffc17 	ldw	r6,-16(fp)
  8132a8:	e1fffd17 	ldw	r7,-12(fp)
  8132ac:	103ee83a 	callr	r2
  8132b0:	e0bfff15 	stw	r2,-4(fp)
  8132b4:	00000106 	br	8132bc <open+0x124>
  8132b8:	e03fff15 	stw	zero,-4(fp)
  8132bc:	e0bfff17 	ldw	r2,-4(fp)
  8132c0:	e0bff715 	stw	r2,-36(fp)
  8132c4:	00000206 	br	8132d0 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  8132c8:	00bffb44 	movi	r2,-19
  8132cc:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  8132d0:	e0bff717 	ldw	r2,-36(fp)
  8132d4:	1004403a 	cmpge	r2,r2,zero
  8132d8:	1000091e 	bne	r2,zero,813300 <open+0x168>
  {
    alt_release_fd (index);  
  8132dc:	e13ff817 	ldw	r4,-32(fp)
  8132e0:	08077d00 	call	8077d0 <alt_release_fd>
    ALT_ERRNO = -status;
  8132e4:	08133200 	call	813320 <alt_get_errno>
  8132e8:	e0fff717 	ldw	r3,-36(fp)
  8132ec:	00c7c83a 	sub	r3,zero,r3
  8132f0:	10c00015 	stw	r3,0(r2)
    return -1;
  8132f4:	00bfffc4 	movi	r2,-1
  8132f8:	e0bffe15 	stw	r2,-8(fp)
  8132fc:	00000206 	br	813308 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  813300:	e0bff817 	ldw	r2,-32(fp)
  813304:	e0bffe15 	stw	r2,-8(fp)
  813308:	e0bffe17 	ldw	r2,-8(fp)
}
  81330c:	e037883a 	mov	sp,fp
  813310:	dfc00117 	ldw	ra,4(sp)
  813314:	df000017 	ldw	fp,0(sp)
  813318:	dec00204 	addi	sp,sp,8
  81331c:	f800283a 	ret

00813320 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813320:	defffd04 	addi	sp,sp,-12
  813324:	dfc00215 	stw	ra,8(sp)
  813328:	df000115 	stw	fp,4(sp)
  81332c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  813330:	00802074 	movhi	r2,129
  813334:	10983404 	addi	r2,r2,24784
  813338:	10800017 	ldw	r2,0(r2)
  81333c:	1005003a 	cmpeq	r2,r2,zero
  813340:	1000061e 	bne	r2,zero,81335c <alt_get_errno+0x3c>
  813344:	00802074 	movhi	r2,129
  813348:	10983404 	addi	r2,r2,24784
  81334c:	10800017 	ldw	r2,0(r2)
  813350:	103ee83a 	callr	r2
  813354:	e0bfff15 	stw	r2,-4(fp)
  813358:	00000306 	br	813368 <alt_get_errno+0x48>
  81335c:	00802074 	movhi	r2,129
  813360:	109f3504 	addi	r2,r2,31956
  813364:	e0bfff15 	stw	r2,-4(fp)
  813368:	e0bfff17 	ldw	r2,-4(fp)
}
  81336c:	e037883a 	mov	sp,fp
  813370:	dfc00117 	ldw	ra,4(sp)
  813374:	df000017 	ldw	fp,0(sp)
  813378:	dec00204 	addi	sp,sp,8
  81337c:	f800283a 	ret

00813380 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  813380:	defffa04 	addi	sp,sp,-24
  813384:	df000515 	stw	fp,20(sp)
  813388:	df000504 	addi	fp,sp,20
  81338c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813390:	0005303a 	rdctl	r2,status
  813394:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813398:	e0fffd17 	ldw	r3,-12(fp)
  81339c:	00bfff84 	movi	r2,-2
  8133a0:	1884703a 	and	r2,r3,r2
  8133a4:	1001703a 	wrctl	status,r2
  
  return context;
  8133a8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  8133ac:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  8133b0:	e0bfff17 	ldw	r2,-4(fp)
  8133b4:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  8133b8:	e0bffc17 	ldw	r2,-16(fp)
  8133bc:	10c00017 	ldw	r3,0(r2)
  8133c0:	e0bffc17 	ldw	r2,-16(fp)
  8133c4:	10800117 	ldw	r2,4(r2)
  8133c8:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  8133cc:	e0bffc17 	ldw	r2,-16(fp)
  8133d0:	10c00117 	ldw	r3,4(r2)
  8133d4:	e0bffc17 	ldw	r2,-16(fp)
  8133d8:	10800017 	ldw	r2,0(r2)
  8133dc:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  8133e0:	e0fffc17 	ldw	r3,-16(fp)
  8133e4:	e0bffc17 	ldw	r2,-16(fp)
  8133e8:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  8133ec:	e0fffc17 	ldw	r3,-16(fp)
  8133f0:	e0bffc17 	ldw	r2,-16(fp)
  8133f4:	18800015 	stw	r2,0(r3)
  8133f8:	e0bffe17 	ldw	r2,-8(fp)
  8133fc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813400:	e0bffb17 	ldw	r2,-20(fp)
  813404:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  813408:	e037883a 	mov	sp,fp
  81340c:	df000017 	ldw	fp,0(sp)
  813410:	dec00104 	addi	sp,sp,4
  813414:	f800283a 	ret

00813418 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  813418:	defffb04 	addi	sp,sp,-20
  81341c:	dfc00415 	stw	ra,16(sp)
  813420:	df000315 	stw	fp,12(sp)
  813424:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  813428:	d0a02c17 	ldw	r2,-32592(gp)
  81342c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  813430:	d0a72a17 	ldw	r2,-25432(gp)
  813434:	10800044 	addi	r2,r2,1
  813438:	d0a72a15 	stw	r2,-25432(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  81343c:	00003106 	br	813504 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  813440:	e0bffe17 	ldw	r2,-8(fp)
  813444:	10800017 	ldw	r2,0(r2)
  813448:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  81344c:	e0bffe17 	ldw	r2,-8(fp)
  813450:	10800403 	ldbu	r2,16(r2)
  813454:	10803fcc 	andi	r2,r2,255
  813458:	1005003a 	cmpeq	r2,r2,zero
  81345c:	1000051e 	bne	r2,zero,813474 <alt_tick+0x5c>
  813460:	d0a72a17 	ldw	r2,-25432(gp)
  813464:	1004c03a 	cmpne	r2,r2,zero
  813468:	1000021e 	bne	r2,zero,813474 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  81346c:	e0bffe17 	ldw	r2,-8(fp)
  813470:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  813474:	e0bffe17 	ldw	r2,-8(fp)
  813478:	10c00217 	ldw	r3,8(r2)
  81347c:	d0a72a17 	ldw	r2,-25432(gp)
  813480:	10c01e36 	bltu	r2,r3,8134fc <alt_tick+0xe4>
  813484:	e0bffe17 	ldw	r2,-8(fp)
  813488:	10800403 	ldbu	r2,16(r2)
  81348c:	10803fcc 	andi	r2,r2,255
  813490:	1004c03a 	cmpne	r2,r2,zero
  813494:	1000191e 	bne	r2,zero,8134fc <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  813498:	e0bffe17 	ldw	r2,-8(fp)
  81349c:	10c00317 	ldw	r3,12(r2)
  8134a0:	e0bffe17 	ldw	r2,-8(fp)
  8134a4:	11000517 	ldw	r4,20(r2)
  8134a8:	183ee83a 	callr	r3
  8134ac:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  8134b0:	e0bffd17 	ldw	r2,-12(fp)
  8134b4:	1004c03a 	cmpne	r2,r2,zero
  8134b8:	1000031e 	bne	r2,zero,8134c8 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  8134bc:	e13ffe17 	ldw	r4,-8(fp)
  8134c0:	08133800 	call	813380 <alt_alarm_stop>
  8134c4:	00000d06 	br	8134fc <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  8134c8:	e0bffe17 	ldw	r2,-8(fp)
  8134cc:	10c00217 	ldw	r3,8(r2)
  8134d0:	e0bffd17 	ldw	r2,-12(fp)
  8134d4:	1887883a 	add	r3,r3,r2
  8134d8:	e0bffe17 	ldw	r2,-8(fp)
  8134dc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  8134e0:	e0bffe17 	ldw	r2,-8(fp)
  8134e4:	10c00217 	ldw	r3,8(r2)
  8134e8:	d0a72a17 	ldw	r2,-25432(gp)
  8134ec:	1880032e 	bgeu	r3,r2,8134fc <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  8134f0:	e0fffe17 	ldw	r3,-8(fp)
  8134f4:	00800044 	movi	r2,1
  8134f8:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  8134fc:	e0bfff17 	ldw	r2,-4(fp)
  813500:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  813504:	d0e02c04 	addi	r3,gp,-32592
  813508:	e0bffe17 	ldw	r2,-8(fp)
  81350c:	10ffcc1e 	bne	r2,r3,813440 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  813510:	0808ad00 	call	808ad0 <OSTimeTick>
}
  813514:	e037883a 	mov	sp,fp
  813518:	dfc00117 	ldw	ra,4(sp)
  81351c:	df000017 	ldw	fp,0(sp)
  813520:	dec00204 	addi	sp,sp,8
  813524:	f800283a 	ret

00813528 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  813528:	deffff04 	addi	sp,sp,-4
  81352c:	df000015 	stw	fp,0(sp)
  813530:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  813534:	000170fa 	wrctl	ienable,zero
}
  813538:	e037883a 	mov	sp,fp
  81353c:	df000017 	ldw	fp,0(sp)
  813540:	dec00104 	addi	sp,sp,4
  813544:	f800283a 	ret

00813548 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
  813548:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
  81354c:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
  813550:	d1272317 	ldw	r4,-25460(gp)

      stw ra,  0(sp)
  813554:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
  813558:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
  81355c:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
  813560:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
  813564:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
  813568:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
  81356c:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
  813570:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
  813574:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
  813578:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
  81357c:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
  813580:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  813584:	08139680 	call	813968 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
  813588:	d1271e17 	ldw	r4,-25480(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
  81358c:	d1671607 	ldb	r5,-25512(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
  813590:	d1272315 	stw	r4,-25460(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
  813594:	d1671645 	stb	r5,-25511(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
  813598:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
  81359c:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
  8135a0:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
  8135a4:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
  8135a8:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
  8135ac:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
  8135b0:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
  8135b4:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
  8135b8:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
  8135bc:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
  8135c0:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
  8135c4:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
  8135c8:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
  8135cc:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
  8135d0:	f800283a 	ret

008135d4 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
  8135d4:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
  8135d8:	047fff84 	movi	r17,-2
      and   r18, r18, r17
  8135dc:	9464703a 	and	r18,r18,r17
      wrctl status, r18
  8135e0:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  8135e4:	08139680 	call	813968 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
  8135e8:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
  8135ec:	d4a71445 	stb	r18,-25519(gp)

      /*
       * start execution of the new task.
       */

      br 9b
  8135f0:	003fe506 	br	813588 <OSCtxSw+0x40>

008135f4 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
  8135f4:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
  8135f8:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
  8135fc:	10800054 	ori	r2,r2,1
      wrctl status, r2
  813600:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
  813604:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
  813608:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
  81360c:	dec00204 	addi	sp,sp,8

      callr r2
  813610:	103ee83a 	callr	r2

      nop
  813614:	0001883a 	nop

00813618 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
  813618:	defff704 	addi	sp,sp,-36
  81361c:	dfc00815 	stw	ra,32(sp)
  813620:	df000715 	stw	fp,28(sp)
  813624:	df000704 	addi	fp,sp,28
  813628:	e13ffc15 	stw	r4,-16(fp)
  81362c:	e17ffd15 	stw	r5,-12(fp)
  813630:	e1bffe15 	stw	r6,-8(fp)
  813634:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
  813638:	e0bffe17 	ldw	r2,-8(fp)
  81363c:	1007883a 	mov	r3,r2
  813640:	00bfff04 	movi	r2,-4
  813644:	1884703a 	and	r2,r3,r2
  813648:	10bf0004 	addi	r2,r2,-1024
  81364c:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
  813650:	e0bff917 	ldw	r2,-28(fp)
  813654:	10000015 	stw	zero,0(r2)
  813658:	e0bff917 	ldw	r2,-28(fp)
  81365c:	10c0bb04 	addi	r3,r2,748
  813660:	e0bff917 	ldw	r2,-28(fp)
  813664:	10c00115 	stw	r3,4(r2)
  813668:	e0bff917 	ldw	r2,-28(fp)
  81366c:	1080bb04 	addi	r2,r2,748
  813670:	10c01704 	addi	r3,r2,92
  813674:	e0bff917 	ldw	r2,-28(fp)
  813678:	10c00215 	stw	r3,8(r2)
  81367c:	e0bff917 	ldw	r2,-28(fp)
  813680:	1080bb04 	addi	r2,r2,748
  813684:	10c02e04 	addi	r3,r2,184
  813688:	e0bff917 	ldw	r2,-28(fp)
  81368c:	10c00315 	stw	r3,12(r2)
  813690:	e0bff917 	ldw	r2,-28(fp)
  813694:	10000415 	stw	zero,16(r2)
  813698:	e0bff917 	ldw	r2,-28(fp)
  81369c:	10800504 	addi	r2,r2,20
  8136a0:	1009883a 	mov	r4,r2
  8136a4:	01800644 	movi	r6,25
  8136a8:	000b883a 	mov	r5,zero
  8136ac:	08069ac0 	call	8069ac <memset>
  8136b0:	e0bff917 	ldw	r2,-28(fp)
  8136b4:	10000c15 	stw	zero,48(r2)
  8136b8:	e0fff917 	ldw	r3,-28(fp)
  8136bc:	00802074 	movhi	r2,129
  8136c0:	10917f04 	addi	r2,r2,17916
  8136c4:	18800d15 	stw	r2,52(r3)
  8136c8:	e0bff917 	ldw	r2,-28(fp)
  8136cc:	10000e15 	stw	zero,56(r2)
  8136d0:	e0bff917 	ldw	r2,-28(fp)
  8136d4:	10000f15 	stw	zero,60(r2)
  8136d8:	e0bff917 	ldw	r2,-28(fp)
  8136dc:	10001015 	stw	zero,64(r2)
  8136e0:	e0bff917 	ldw	r2,-28(fp)
  8136e4:	10001115 	stw	zero,68(r2)
  8136e8:	e0bff917 	ldw	r2,-28(fp)
  8136ec:	10001215 	stw	zero,72(r2)
  8136f0:	e0bff917 	ldw	r2,-28(fp)
  8136f4:	10001315 	stw	zero,76(r2)
  8136f8:	e0bff917 	ldw	r2,-28(fp)
  8136fc:	10001415 	stw	zero,80(r2)
  813700:	e0bff917 	ldw	r2,-28(fp)
  813704:	10001515 	stw	zero,84(r2)
  813708:	e0bff917 	ldw	r2,-28(fp)
  81370c:	10001615 	stw	zero,88(r2)
  813710:	e0bff917 	ldw	r2,-28(fp)
  813714:	10001715 	stw	zero,92(r2)
  813718:	e0bff917 	ldw	r2,-28(fp)
  81371c:	10001805 	stb	zero,96(r2)
  813720:	e0bff917 	ldw	r2,-28(fp)
  813724:	10801f04 	addi	r2,r2,124
  813728:	10000015 	stw	zero,0(r2)
  81372c:	10000115 	stw	zero,4(r2)
  813730:	10000215 	stw	zero,8(r2)
  813734:	10000315 	stw	zero,12(r2)
  813738:	10000415 	stw	zero,16(r2)
  81373c:	10000515 	stw	zero,20(r2)
  813740:	10000615 	stw	zero,24(r2)
  813744:	10000715 	stw	zero,28(r2)
  813748:	10000815 	stw	zero,32(r2)
  81374c:	e0bff917 	ldw	r2,-28(fp)
  813750:	10002815 	stw	zero,160(r2)
  813754:	e0fff917 	ldw	r3,-28(fp)
  813758:	00800044 	movi	r2,1
  81375c:	18802915 	stw	r2,164(r3)
  813760:	18002a15 	stw	zero,168(r3)
  813764:	e0fff917 	ldw	r3,-28(fp)
  813768:	008cc384 	movi	r2,13070
  81376c:	18802b0d 	sth	r2,172(r3)
  813770:	e0fff917 	ldw	r3,-28(fp)
  813774:	00aaf344 	movi	r2,-21555
  813778:	18802b8d 	sth	r2,174(r3)
  81377c:	e0fff917 	ldw	r3,-28(fp)
  813780:	00848d04 	movi	r2,4660
  813784:	18802c0d 	sth	r2,176(r3)
  813788:	e0fff917 	ldw	r3,-28(fp)
  81378c:	00b99b44 	movi	r2,-6547
  813790:	18802c8d 	sth	r2,178(r3)
  813794:	e0fff917 	ldw	r3,-28(fp)
  813798:	00b7bb04 	movi	r2,-8468
  81379c:	18802d0d 	sth	r2,180(r3)
  8137a0:	e0fff917 	ldw	r3,-28(fp)
  8137a4:	00800144 	movi	r2,5
  8137a8:	18802d8d 	sth	r2,182(r3)
  8137ac:	e0fff917 	ldw	r3,-28(fp)
  8137b0:	008002c4 	movi	r2,11
  8137b4:	18802e0d 	sth	r2,184(r3)
  8137b8:	e0bff917 	ldw	r2,-28(fp)
  8137bc:	10002f15 	stw	zero,188(r2)
  8137c0:	e0bff917 	ldw	r2,-28(fp)
  8137c4:	10003015 	stw	zero,192(r2)
  8137c8:	e0bff917 	ldw	r2,-28(fp)
  8137cc:	10003115 	stw	zero,196(r2)
  8137d0:	e0bff917 	ldw	r2,-28(fp)
  8137d4:	10003215 	stw	zero,200(r2)
  8137d8:	e0bff917 	ldw	r2,-28(fp)
  8137dc:	10003315 	stw	zero,204(r2)
  8137e0:	e0bff917 	ldw	r2,-28(fp)
  8137e4:	10003415 	stw	zero,208(r2)
  8137e8:	e0bff917 	ldw	r2,-28(fp)
  8137ec:	10003e15 	stw	zero,248(r2)
  8137f0:	e0bff917 	ldw	r2,-28(fp)
  8137f4:	10003f15 	stw	zero,252(r2)
  8137f8:	e0bff917 	ldw	r2,-28(fp)
  8137fc:	10004015 	stw	zero,256(r2)
  813800:	e0bff917 	ldw	r2,-28(fp)
  813804:	10004115 	stw	zero,260(r2)
  813808:	e0bff917 	ldw	r2,-28(fp)
  81380c:	10004215 	stw	zero,264(r2)
  813810:	e0bff917 	ldw	r2,-28(fp)
  813814:	10004315 	stw	zero,268(r2)
  813818:	e0bff917 	ldw	r2,-28(fp)
  81381c:	10004415 	stw	zero,272(r2)
  813820:	e0bff917 	ldw	r2,-28(fp)
  813824:	10004515 	stw	zero,276(r2)
  813828:	e0bff917 	ldw	r2,-28(fp)
  81382c:	10004615 	stw	zero,280(r2)
  813830:	e0bff917 	ldw	r2,-28(fp)
  813834:	10004715 	stw	zero,284(r2)
  813838:	e0bff917 	ldw	r2,-28(fp)
  81383c:	10003505 	stb	zero,212(r2)
  813840:	e0bff917 	ldw	r2,-28(fp)
  813844:	10003705 	stb	zero,220(r2)
  813848:	e0bff917 	ldw	r2,-28(fp)
  81384c:	10003d15 	stw	zero,244(r2)
  813850:	e0bff917 	ldw	r2,-28(fp)
  813854:	10005215 	stw	zero,328(r2)
  813858:	e0bff917 	ldw	r2,-28(fp)
  81385c:	10005315 	stw	zero,332(r2)
  813860:	e0bff917 	ldw	r2,-28(fp)
  813864:	10005415 	stw	zero,336(r2)
  813868:	e0bff917 	ldw	r2,-28(fp)
  81386c:	10005515 	stw	zero,340(r2)
  813870:	e0bff917 	ldw	r2,-28(fp)
  813874:	1000b515 	stw	zero,724(r2)
  813878:	e0bff917 	ldw	r2,-28(fp)
  81387c:	10007515 	stw	zero,468(r2)
  813880:	e0bff917 	ldw	r2,-28(fp)
  813884:	1000b715 	stw	zero,732(r2)
  813888:	e0bff917 	ldw	r2,-28(fp)
  81388c:	1000b815 	stw	zero,736(r2)
  813890:	e0bff917 	ldw	r2,-28(fp)
  813894:	1000b915 	stw	zero,740(r2)
  813898:	e0bff917 	ldw	r2,-28(fp)
  81389c:	1000ba15 	stw	zero,744(r2)
  8138a0:	e0bff917 	ldw	r2,-28(fp)
  8138a4:	1080bb04 	addi	r2,r2,748
  8138a8:	1009883a 	mov	r4,r2
  8138ac:	01804504 	movi	r6,276
  8138b0:	000b883a 	mov	r5,zero
  8138b4:	08069ac0 	call	8069ac <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
  8138b8:	e0bff917 	ldw	r2,-28(fp)
  8138bc:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
  8138c0:	e0bffb17 	ldw	r2,-20(fp)
  8138c4:	10bff304 	addi	r2,r2,-52
  8138c8:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
  8138cc:	e0bffa17 	ldw	r2,-24(fp)
  8138d0:	10c00c04 	addi	r3,r2,48
  8138d4:	e0bffc17 	ldw	r2,-16(fp)
  8138d8:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
  8138dc:	e0bffa17 	ldw	r2,-24(fp)
  8138e0:	10c00b04 	addi	r3,r2,44
  8138e4:	e0bffd17 	ldw	r2,-12(fp)
  8138e8:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
  8138ec:	e0bffa17 	ldw	r2,-24(fp)
  8138f0:	10c00a04 	addi	r3,r2,40
  8138f4:	e0bff917 	ldw	r2,-28(fp)
  8138f8:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
  8138fc:	00802074 	movhi	r2,129
  813900:	108d7d04 	addi	r2,r2,13812
  813904:	10c00104 	addi	r3,r2,4
  813908:	e0bffa17 	ldw	r2,-24(fp)
  81390c:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
  813910:	e0bffa17 	ldw	r2,-24(fp)
}
  813914:	e037883a 	mov	sp,fp
  813918:	dfc00117 	ldw	ra,4(sp)
  81391c:	df000017 	ldw	fp,0(sp)
  813920:	dec00204 	addi	sp,sp,8
  813924:	f800283a 	ret

00813928 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
  813928:	defffe04 	addi	sp,sp,-8
  81392c:	df000115 	stw	fp,4(sp)
  813930:	df000104 	addi	fp,sp,4
  813934:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
  813938:	e037883a 	mov	sp,fp
  81393c:	df000017 	ldw	fp,0(sp)
  813940:	dec00104 	addi	sp,sp,4
  813944:	f800283a 	ret

00813948 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
  813948:	defffe04 	addi	sp,sp,-8
  81394c:	df000115 	stw	fp,4(sp)
  813950:	df000104 	addi	fp,sp,4
  813954:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
  813958:	e037883a 	mov	sp,fp
  81395c:	df000017 	ldw	fp,0(sp)
  813960:	dec00104 	addi	sp,sp,4
  813964:	f800283a 	ret

00813968 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
  813968:	deffff04 	addi	sp,sp,-4
  81396c:	df000015 	stw	fp,0(sp)
  813970:	d839883a 	mov	fp,sp
}
  813974:	e037883a 	mov	sp,fp
  813978:	df000017 	ldw	fp,0(sp)
  81397c:	dec00104 	addi	sp,sp,4
  813980:	f800283a 	ret

00813984 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
  813984:	deffff04 	addi	sp,sp,-4
  813988:	df000015 	stw	fp,0(sp)
  81398c:	d839883a 	mov	fp,sp
}
  813990:	e037883a 	mov	sp,fp
  813994:	df000017 	ldw	fp,0(sp)
  813998:	dec00104 	addi	sp,sp,4
  81399c:	f800283a 	ret

008139a0 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
  8139a0:	deffff04 	addi	sp,sp,-4
  8139a4:	df000015 	stw	fp,0(sp)
  8139a8:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
  8139ac:	e037883a 	mov	sp,fp
  8139b0:	df000017 	ldw	fp,0(sp)
  8139b4:	dec00104 	addi	sp,sp,4
  8139b8:	f800283a 	ret

008139bc <OSInitHookBegin>:

void OSInitHookBegin(void)
{
  8139bc:	deffff04 	addi	sp,sp,-4
  8139c0:	df000015 	stw	fp,0(sp)
  8139c4:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
  8139c8:	e037883a 	mov	sp,fp
  8139cc:	df000017 	ldw	fp,0(sp)
  8139d0:	dec00104 	addi	sp,sp,4
  8139d4:	f800283a 	ret

008139d8 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
  8139d8:	deffff04 	addi	sp,sp,-4
  8139dc:	df000015 	stw	fp,0(sp)
  8139e0:	d839883a 	mov	fp,sp
}
  8139e4:	e037883a 	mov	sp,fp
  8139e8:	df000017 	ldw	fp,0(sp)
  8139ec:	dec00104 	addi	sp,sp,4
  8139f0:	f800283a 	ret

008139f4 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
  8139f4:	deffff04 	addi	sp,sp,-4
  8139f8:	df000015 	stw	fp,0(sp)
  8139fc:	d839883a 	mov	fp,sp
}
  813a00:	e037883a 	mov	sp,fp
  813a04:	df000017 	ldw	fp,0(sp)
  813a08:	dec00104 	addi	sp,sp,4
  813a0c:	f800283a 	ret

00813a10 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
  813a10:	defffe04 	addi	sp,sp,-8
  813a14:	df000115 	stw	fp,4(sp)
  813a18:	df000104 	addi	fp,sp,4
  813a1c:	e13fff15 	stw	r4,-4(fp)
}
  813a20:	e037883a 	mov	sp,fp
  813a24:	df000017 	ldw	fp,0(sp)
  813a28:	dec00104 	addi	sp,sp,4
  813a2c:	f800283a 	ret

00813a30 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  813a30:	defffa04 	addi	sp,sp,-24
  813a34:	dfc00515 	stw	ra,20(sp)
  813a38:	df000415 	stw	fp,16(sp)
  813a3c:	df000404 	addi	fp,sp,16
  813a40:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  813a44:	00802074 	movhi	r2,129
  813a48:	10982f04 	addi	r2,r2,24764
  813a4c:	10800017 	ldw	r2,0(r2)
  813a50:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  813a54:	00003306 	br	813b24 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  813a58:	e0bffd17 	ldw	r2,-12(fp)
  813a5c:	11000217 	ldw	r4,8(r2)
  813a60:	08047140 	call	804714 <strlen>
  813a64:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  813a68:	e0bffd17 	ldw	r2,-12(fp)
  813a6c:	10c00217 	ldw	r3,8(r2)
  813a70:	e0bffc17 	ldw	r2,-16(fp)
  813a74:	1885883a 	add	r2,r3,r2
  813a78:	10bfffc4 	addi	r2,r2,-1
  813a7c:	10800003 	ldbu	r2,0(r2)
  813a80:	10803fcc 	andi	r2,r2,255
  813a84:	1080201c 	xori	r2,r2,128
  813a88:	10bfe004 	addi	r2,r2,-128
  813a8c:	10800bd8 	cmpnei	r2,r2,47
  813a90:	1000031e 	bne	r2,zero,813aa0 <alt_find_file+0x70>
    {
      len -= 1;
  813a94:	e0bffc17 	ldw	r2,-16(fp)
  813a98:	10bfffc4 	addi	r2,r2,-1
  813a9c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  813aa0:	e0bffc17 	ldw	r2,-16(fp)
  813aa4:	1007883a 	mov	r3,r2
  813aa8:	e0bffe17 	ldw	r2,-8(fp)
  813aac:	1885883a 	add	r2,r3,r2
  813ab0:	10800003 	ldbu	r2,0(r2)
  813ab4:	10803fcc 	andi	r2,r2,255
  813ab8:	1080201c 	xori	r2,r2,128
  813abc:	10bfe004 	addi	r2,r2,-128
  813ac0:	10800be0 	cmpeqi	r2,r2,47
  813ac4:	10000a1e 	bne	r2,zero,813af0 <alt_find_file+0xc0>
  813ac8:	e0bffc17 	ldw	r2,-16(fp)
  813acc:	1007883a 	mov	r3,r2
  813ad0:	e0bffe17 	ldw	r2,-8(fp)
  813ad4:	1885883a 	add	r2,r3,r2
  813ad8:	10800003 	ldbu	r2,0(r2)
  813adc:	10803fcc 	andi	r2,r2,255
  813ae0:	1080201c 	xori	r2,r2,128
  813ae4:	10bfe004 	addi	r2,r2,-128
  813ae8:	1004c03a 	cmpne	r2,r2,zero
  813aec:	10000a1e 	bne	r2,zero,813b18 <alt_find_file+0xe8>
  813af0:	e0bffd17 	ldw	r2,-12(fp)
  813af4:	11000217 	ldw	r4,8(r2)
  813af8:	e1bffc17 	ldw	r6,-16(fp)
  813afc:	e17ffe17 	ldw	r5,-8(fp)
  813b00:	0813d200 	call	813d20 <memcmp>
  813b04:	1004c03a 	cmpne	r2,r2,zero
  813b08:	1000031e 	bne	r2,zero,813b18 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  813b0c:	e0bffd17 	ldw	r2,-12(fp)
  813b10:	e0bfff15 	stw	r2,-4(fp)
  813b14:	00000806 	br	813b38 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  813b18:	e0bffd17 	ldw	r2,-12(fp)
  813b1c:	10800017 	ldw	r2,0(r2)
  813b20:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  813b24:	00c02074 	movhi	r3,129
  813b28:	18d82f04 	addi	r3,r3,24764
  813b2c:	e0bffd17 	ldw	r2,-12(fp)
  813b30:	10ffc91e 	bne	r2,r3,813a58 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  813b34:	e03fff15 	stw	zero,-4(fp)
  813b38:	e0bfff17 	ldw	r2,-4(fp)
}
  813b3c:	e037883a 	mov	sp,fp
  813b40:	dfc00117 	ldw	ra,4(sp)
  813b44:	df000017 	ldw	fp,0(sp)
  813b48:	dec00204 	addi	sp,sp,8
  813b4c:	f800283a 	ret

00813b50 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  813b50:	defff804 	addi	sp,sp,-32
  813b54:	dfc00715 	stw	ra,28(sp)
  813b58:	df000615 	stw	fp,24(sp)
  813b5c:	df000604 	addi	fp,sp,24
  813b60:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  813b64:	00bffa04 	movi	r2,-24
  813b68:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
  813b6c:	00802074 	movhi	r2,129
  813b70:	109f3604 	addi	r2,r2,31960
  813b74:	10800017 	ldw	r2,0(r2)
  813b78:	e0bffa15 	stw	r2,-24(fp)
  813b7c:	e03ffb0d 	sth	zero,-20(fp)
  813b80:	e17ffb0b 	ldhu	r5,-20(fp)
  813b84:	e1bffe04 	addi	r6,fp,-8
  813b88:	e13ffa17 	ldw	r4,-24(fp)
  813b8c:	080d8ec0 	call	80d8ec <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  813b90:	e03ffd15 	stw	zero,-12(fp)
  813b94:	00001e06 	br	813c10 <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
  813b98:	e0bffd17 	ldw	r2,-12(fp)
  813b9c:	00c02074 	movhi	r3,129
  813ba0:	18d38c04 	addi	r3,r3,20016
  813ba4:	10800324 	muli	r2,r2,12
  813ba8:	10c5883a 	add	r2,r2,r3
  813bac:	10800017 	ldw	r2,0(r2)
  813bb0:	1004c03a 	cmpne	r2,r2,zero
  813bb4:	1000131e 	bne	r2,zero,813c04 <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
  813bb8:	e0bffd17 	ldw	r2,-12(fp)
  813bbc:	00c02074 	movhi	r3,129
  813bc0:	18d38c04 	addi	r3,r3,20016
  813bc4:	10800324 	muli	r2,r2,12
  813bc8:	10c7883a 	add	r3,r2,r3
  813bcc:	e0bfff17 	ldw	r2,-4(fp)
  813bd0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  813bd4:	00802074 	movhi	r2,129
  813bd8:	10983304 	addi	r2,r2,24780
  813bdc:	10c00017 	ldw	r3,0(r2)
  813be0:	e0bffd17 	ldw	r2,-12(fp)
  813be4:	1880040e 	bge	r3,r2,813bf8 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
  813be8:	00c02074 	movhi	r3,129
  813bec:	18d83304 	addi	r3,r3,24780
  813bf0:	e0bffd17 	ldw	r2,-12(fp)
  813bf4:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  813bf8:	e0bffd17 	ldw	r2,-12(fp)
  813bfc:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
  813c00:	00000606 	br	813c1c <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  813c04:	e0bffd17 	ldw	r2,-12(fp)
  813c08:	10800044 	addi	r2,r2,1
  813c0c:	e0bffd15 	stw	r2,-12(fp)
  813c10:	e0bffd17 	ldw	r2,-12(fp)
  813c14:	10800810 	cmplti	r2,r2,32
  813c18:	103fdf1e 	bne	r2,zero,813b98 <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
  813c1c:	00802074 	movhi	r2,129
  813c20:	109f3604 	addi	r2,r2,31960
  813c24:	11000017 	ldw	r4,0(r2)
  813c28:	080dce40 	call	80dce4 <OSSemPost>

  return rc;
  813c2c:	e0bffc17 	ldw	r2,-16(fp)
}
  813c30:	e037883a 	mov	sp,fp
  813c34:	dfc00117 	ldw	ra,4(sp)
  813c38:	df000017 	ldw	fp,0(sp)
  813c3c:	dec00204 	addi	sp,sp,8
  813c40:	f800283a 	ret

00813c44 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  813c44:	defffb04 	addi	sp,sp,-20
  813c48:	df000415 	stw	fp,16(sp)
  813c4c:	df000404 	addi	fp,sp,16
  813c50:	e13ffe15 	stw	r4,-8(fp)
  813c54:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  813c58:	e0bfff17 	ldw	r2,-4(fp)
  813c5c:	10840070 	cmpltui	r2,r2,4097
  813c60:	1000021e 	bne	r2,zero,813c6c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  813c64:	00840004 	movi	r2,4096
  813c68:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  813c6c:	e0fffe17 	ldw	r3,-8(fp)
  813c70:	e0bfff17 	ldw	r2,-4(fp)
  813c74:	1885883a 	add	r2,r3,r2
  813c78:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  813c7c:	e0bffe17 	ldw	r2,-8(fp)
  813c80:	e0bffd15 	stw	r2,-12(fp)
  813c84:	00000506 	br	813c9c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  813c88:	e0bffd17 	ldw	r2,-12(fp)
  813c8c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  813c90:	e0bffd17 	ldw	r2,-12(fp)
  813c94:	10800804 	addi	r2,r2,32
  813c98:	e0bffd15 	stw	r2,-12(fp)
  813c9c:	e0fffd17 	ldw	r3,-12(fp)
  813ca0:	e0bffc17 	ldw	r2,-16(fp)
  813ca4:	18bff836 	bltu	r3,r2,813c88 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  813ca8:	e0bffe17 	ldw	r2,-8(fp)
  813cac:	108007cc 	andi	r2,r2,31
  813cb0:	1005003a 	cmpeq	r2,r2,zero
  813cb4:	1000021e 	bne	r2,zero,813cc0 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  813cb8:	e0bffd17 	ldw	r2,-12(fp)
  813cbc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  813cc0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  813cc4:	e037883a 	mov	sp,fp
  813cc8:	df000017 	ldw	fp,0(sp)
  813ccc:	dec00104 	addi	sp,sp,4
  813cd0:	f800283a 	ret

00813cd4 <atexit>:
  813cd4:	200b883a 	mov	r5,r4
  813cd8:	000d883a 	mov	r6,zero
  813cdc:	0009883a 	mov	r4,zero
  813ce0:	000f883a 	mov	r7,zero
  813ce4:	0813d941 	jmpi	813d94 <__register_exitproc>

00813ce8 <exit>:
  813ce8:	defffe04 	addi	sp,sp,-8
  813cec:	000b883a 	mov	r5,zero
  813cf0:	dc000015 	stw	r16,0(sp)
  813cf4:	dfc00115 	stw	ra,4(sp)
  813cf8:	2021883a 	mov	r16,r4
  813cfc:	0813ecc0 	call	813ecc <__call_exitprocs>
  813d00:	00802074 	movhi	r2,129
  813d04:	10982c04 	addi	r2,r2,24752
  813d08:	11000017 	ldw	r4,0(r2)
  813d0c:	20800f17 	ldw	r2,60(r4)
  813d10:	10000126 	beq	r2,zero,813d18 <exit+0x30>
  813d14:	103ee83a 	callr	r2
  813d18:	8009883a 	mov	r4,r16
  813d1c:	08142080 	call	814208 <_exit>

00813d20 <memcmp>:
  813d20:	00c000c4 	movi	r3,3
  813d24:	1980032e 	bgeu	r3,r6,813d34 <memcmp+0x14>
  813d28:	2144b03a 	or	r2,r4,r5
  813d2c:	10c4703a 	and	r2,r2,r3
  813d30:	10000f26 	beq	r2,zero,813d70 <memcmp+0x50>
  813d34:	31ffffc4 	addi	r7,r6,-1
  813d38:	3000061e 	bne	r6,zero,813d54 <memcmp+0x34>
  813d3c:	00000a06 	br	813d68 <memcmp+0x48>
  813d40:	39ffffc4 	addi	r7,r7,-1
  813d44:	00bfffc4 	movi	r2,-1
  813d48:	21000044 	addi	r4,r4,1
  813d4c:	29400044 	addi	r5,r5,1
  813d50:	38800526 	beq	r7,r2,813d68 <memcmp+0x48>
  813d54:	20c00003 	ldbu	r3,0(r4)
  813d58:	28800003 	ldbu	r2,0(r5)
  813d5c:	18bff826 	beq	r3,r2,813d40 <memcmp+0x20>
  813d60:	1885c83a 	sub	r2,r3,r2
  813d64:	f800283a 	ret
  813d68:	0005883a 	mov	r2,zero
  813d6c:	f800283a 	ret
  813d70:	180f883a 	mov	r7,r3
  813d74:	20c00017 	ldw	r3,0(r4)
  813d78:	28800017 	ldw	r2,0(r5)
  813d7c:	18bfed1e 	bne	r3,r2,813d34 <memcmp+0x14>
  813d80:	31bfff04 	addi	r6,r6,-4
  813d84:	21000104 	addi	r4,r4,4
  813d88:	29400104 	addi	r5,r5,4
  813d8c:	39bff936 	bltu	r7,r6,813d74 <memcmp+0x54>
  813d90:	003fe806 	br	813d34 <memcmp+0x14>

00813d94 <__register_exitproc>:
  813d94:	defffa04 	addi	sp,sp,-24
  813d98:	00802074 	movhi	r2,129
  813d9c:	10982c04 	addi	r2,r2,24752
  813da0:	dc000015 	stw	r16,0(sp)
  813da4:	14000017 	ldw	r16,0(r2)
  813da8:	dd000415 	stw	r20,16(sp)
  813dac:	2829883a 	mov	r20,r5
  813db0:	81405217 	ldw	r5,328(r16)
  813db4:	dcc00315 	stw	r19,12(sp)
  813db8:	dc800215 	stw	r18,8(sp)
  813dbc:	dc400115 	stw	r17,4(sp)
  813dc0:	dfc00515 	stw	ra,20(sp)
  813dc4:	2023883a 	mov	r17,r4
  813dc8:	3027883a 	mov	r19,r6
  813dcc:	3825883a 	mov	r18,r7
  813dd0:	28002526 	beq	r5,zero,813e68 <__register_exitproc+0xd4>
  813dd4:	29000117 	ldw	r4,4(r5)
  813dd8:	008007c4 	movi	r2,31
  813ddc:	11002716 	blt	r2,r4,813e7c <__register_exitproc+0xe8>
  813de0:	8800101e 	bne	r17,zero,813e24 <__register_exitproc+0x90>
  813de4:	2105883a 	add	r2,r4,r4
  813de8:	1085883a 	add	r2,r2,r2
  813dec:	20c00044 	addi	r3,r4,1
  813df0:	1145883a 	add	r2,r2,r5
  813df4:	0009883a 	mov	r4,zero
  813df8:	15000215 	stw	r20,8(r2)
  813dfc:	28c00115 	stw	r3,4(r5)
  813e00:	2005883a 	mov	r2,r4
  813e04:	dfc00517 	ldw	ra,20(sp)
  813e08:	dd000417 	ldw	r20,16(sp)
  813e0c:	dcc00317 	ldw	r19,12(sp)
  813e10:	dc800217 	ldw	r18,8(sp)
  813e14:	dc400117 	ldw	r17,4(sp)
  813e18:	dc000017 	ldw	r16,0(sp)
  813e1c:	dec00604 	addi	sp,sp,24
  813e20:	f800283a 	ret
  813e24:	29802204 	addi	r6,r5,136
  813e28:	00800044 	movi	r2,1
  813e2c:	110e983a 	sll	r7,r2,r4
  813e30:	30c04017 	ldw	r3,256(r6)
  813e34:	2105883a 	add	r2,r4,r4
  813e38:	1085883a 	add	r2,r2,r2
  813e3c:	1185883a 	add	r2,r2,r6
  813e40:	19c6b03a 	or	r3,r3,r7
  813e44:	14802015 	stw	r18,128(r2)
  813e48:	14c00015 	stw	r19,0(r2)
  813e4c:	00800084 	movi	r2,2
  813e50:	30c04015 	stw	r3,256(r6)
  813e54:	88bfe31e 	bne	r17,r2,813de4 <__register_exitproc+0x50>
  813e58:	30804117 	ldw	r2,260(r6)
  813e5c:	11c4b03a 	or	r2,r2,r7
  813e60:	30804115 	stw	r2,260(r6)
  813e64:	003fdf06 	br	813de4 <__register_exitproc+0x50>
  813e68:	008020b4 	movhi	r2,130
  813e6c:	10bc2804 	addi	r2,r2,-3936
  813e70:	100b883a 	mov	r5,r2
  813e74:	80805215 	stw	r2,328(r16)
  813e78:	003fd606 	br	813dd4 <__register_exitproc+0x40>
  813e7c:	00800034 	movhi	r2,0
  813e80:	10800004 	addi	r2,r2,0
  813e84:	1000021e 	bne	r2,zero,813e90 <__register_exitproc+0xfc>
  813e88:	013fffc4 	movi	r4,-1
  813e8c:	003fdc06 	br	813e00 <__register_exitproc+0x6c>
  813e90:	01006404 	movi	r4,400
  813e94:	103ee83a 	callr	r2
  813e98:	1007883a 	mov	r3,r2
  813e9c:	103ffa26 	beq	r2,zero,813e88 <__register_exitproc+0xf4>
  813ea0:	80805217 	ldw	r2,328(r16)
  813ea4:	180b883a 	mov	r5,r3
  813ea8:	18000115 	stw	zero,4(r3)
  813eac:	18800015 	stw	r2,0(r3)
  813eb0:	80c05215 	stw	r3,328(r16)
  813eb4:	18006215 	stw	zero,392(r3)
  813eb8:	18006315 	stw	zero,396(r3)
  813ebc:	0009883a 	mov	r4,zero
  813ec0:	883fc826 	beq	r17,zero,813de4 <__register_exitproc+0x50>
  813ec4:	003fd706 	br	813e24 <__register_exitproc+0x90>

00813ec8 <register_fini>:
  813ec8:	f800283a 	ret

00813ecc <__call_exitprocs>:
  813ecc:	00802074 	movhi	r2,129
  813ed0:	10982c04 	addi	r2,r2,24752
  813ed4:	10800017 	ldw	r2,0(r2)
  813ed8:	defff304 	addi	sp,sp,-52
  813edc:	df000b15 	stw	fp,44(sp)
  813ee0:	d8800115 	stw	r2,4(sp)
  813ee4:	00800034 	movhi	r2,0
  813ee8:	10800004 	addi	r2,r2,0
  813eec:	1005003a 	cmpeq	r2,r2,zero
  813ef0:	d8800215 	stw	r2,8(sp)
  813ef4:	d8800117 	ldw	r2,4(sp)
  813ef8:	dd400815 	stw	r21,32(sp)
  813efc:	dd000715 	stw	r20,28(sp)
  813f00:	10805204 	addi	r2,r2,328
  813f04:	dfc00c15 	stw	ra,48(sp)
  813f08:	ddc00a15 	stw	r23,40(sp)
  813f0c:	dd800915 	stw	r22,36(sp)
  813f10:	dcc00615 	stw	r19,24(sp)
  813f14:	dc800515 	stw	r18,20(sp)
  813f18:	dc400415 	stw	r17,16(sp)
  813f1c:	dc000315 	stw	r16,12(sp)
  813f20:	282b883a 	mov	r21,r5
  813f24:	2039883a 	mov	fp,r4
  813f28:	d8800015 	stw	r2,0(sp)
  813f2c:	2829003a 	cmpeq	r20,r5,zero
  813f30:	d8800117 	ldw	r2,4(sp)
  813f34:	14405217 	ldw	r17,328(r2)
  813f38:	88001026 	beq	r17,zero,813f7c <__call_exitprocs+0xb0>
  813f3c:	ddc00017 	ldw	r23,0(sp)
  813f40:	88800117 	ldw	r2,4(r17)
  813f44:	8c802204 	addi	r18,r17,136
  813f48:	143fffc4 	addi	r16,r2,-1
  813f4c:	80000916 	blt	r16,zero,813f74 <__call_exitprocs+0xa8>
  813f50:	05bfffc4 	movi	r22,-1
  813f54:	a000151e 	bne	r20,zero,813fac <__call_exitprocs+0xe0>
  813f58:	8409883a 	add	r4,r16,r16
  813f5c:	2105883a 	add	r2,r4,r4
  813f60:	1485883a 	add	r2,r2,r18
  813f64:	10c02017 	ldw	r3,128(r2)
  813f68:	a8c01126 	beq	r21,r3,813fb0 <__call_exitprocs+0xe4>
  813f6c:	843fffc4 	addi	r16,r16,-1
  813f70:	85bff81e 	bne	r16,r22,813f54 <__call_exitprocs+0x88>
  813f74:	d8800217 	ldw	r2,8(sp)
  813f78:	10003126 	beq	r2,zero,814040 <__call_exitprocs+0x174>
  813f7c:	dfc00c17 	ldw	ra,48(sp)
  813f80:	df000b17 	ldw	fp,44(sp)
  813f84:	ddc00a17 	ldw	r23,40(sp)
  813f88:	dd800917 	ldw	r22,36(sp)
  813f8c:	dd400817 	ldw	r21,32(sp)
  813f90:	dd000717 	ldw	r20,28(sp)
  813f94:	dcc00617 	ldw	r19,24(sp)
  813f98:	dc800517 	ldw	r18,20(sp)
  813f9c:	dc400417 	ldw	r17,16(sp)
  813fa0:	dc000317 	ldw	r16,12(sp)
  813fa4:	dec00d04 	addi	sp,sp,52
  813fa8:	f800283a 	ret
  813fac:	8409883a 	add	r4,r16,r16
  813fb0:	88c00117 	ldw	r3,4(r17)
  813fb4:	2105883a 	add	r2,r4,r4
  813fb8:	1445883a 	add	r2,r2,r17
  813fbc:	18ffffc4 	addi	r3,r3,-1
  813fc0:	11800217 	ldw	r6,8(r2)
  813fc4:	1c001526 	beq	r3,r16,81401c <__call_exitprocs+0x150>
  813fc8:	10000215 	stw	zero,8(r2)
  813fcc:	303fe726 	beq	r6,zero,813f6c <__call_exitprocs+0xa0>
  813fd0:	00c00044 	movi	r3,1
  813fd4:	1c06983a 	sll	r3,r3,r16
  813fd8:	90804017 	ldw	r2,256(r18)
  813fdc:	8cc00117 	ldw	r19,4(r17)
  813fe0:	1884703a 	and	r2,r3,r2
  813fe4:	10001426 	beq	r2,zero,814038 <__call_exitprocs+0x16c>
  813fe8:	90804117 	ldw	r2,260(r18)
  813fec:	1884703a 	and	r2,r3,r2
  813ff0:	10000c1e 	bne	r2,zero,814024 <__call_exitprocs+0x158>
  813ff4:	2105883a 	add	r2,r4,r4
  813ff8:	1485883a 	add	r2,r2,r18
  813ffc:	11400017 	ldw	r5,0(r2)
  814000:	e009883a 	mov	r4,fp
  814004:	303ee83a 	callr	r6
  814008:	88800117 	ldw	r2,4(r17)
  81400c:	98bfc81e 	bne	r19,r2,813f30 <__call_exitprocs+0x64>
  814010:	b8800017 	ldw	r2,0(r23)
  814014:	147fd526 	beq	r2,r17,813f6c <__call_exitprocs+0xa0>
  814018:	003fc506 	br	813f30 <__call_exitprocs+0x64>
  81401c:	8c000115 	stw	r16,4(r17)
  814020:	003fea06 	br	813fcc <__call_exitprocs+0x100>
  814024:	2105883a 	add	r2,r4,r4
  814028:	1485883a 	add	r2,r2,r18
  81402c:	11000017 	ldw	r4,0(r2)
  814030:	303ee83a 	callr	r6
  814034:	003ff406 	br	814008 <__call_exitprocs+0x13c>
  814038:	303ee83a 	callr	r6
  81403c:	003ff206 	br	814008 <__call_exitprocs+0x13c>
  814040:	88800117 	ldw	r2,4(r17)
  814044:	1000081e 	bne	r2,zero,814068 <__call_exitprocs+0x19c>
  814048:	89000017 	ldw	r4,0(r17)
  81404c:	20000726 	beq	r4,zero,81406c <__call_exitprocs+0x1a0>
  814050:	b9000015 	stw	r4,0(r23)
  814054:	8809883a 	mov	r4,r17
  814058:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
  81405c:	bc400017 	ldw	r17,0(r23)
  814060:	883fb71e 	bne	r17,zero,813f40 <__call_exitprocs+0x74>
  814064:	003fc506 	br	813f7c <__call_exitprocs+0xb0>
  814068:	89000017 	ldw	r4,0(r17)
  81406c:	882f883a 	mov	r23,r17
  814070:	2023883a 	mov	r17,r4
  814074:	883fb21e 	bne	r17,zero,813f40 <__call_exitprocs+0x74>
  814078:	003fc006 	br	813f7c <__call_exitprocs+0xb0>

0081407c <udivmodsi4>:
  81407c:	29001b2e 	bgeu	r5,r4,8140ec <udivmodsi4+0x70>
  814080:	28001a16 	blt	r5,zero,8140ec <udivmodsi4+0x70>
  814084:	00800044 	movi	r2,1
  814088:	0007883a 	mov	r3,zero
  81408c:	01c007c4 	movi	r7,31
  814090:	00000306 	br	8140a0 <udivmodsi4+0x24>
  814094:	19c01326 	beq	r3,r7,8140e4 <udivmodsi4+0x68>
  814098:	18c00044 	addi	r3,r3,1
  81409c:	28000416 	blt	r5,zero,8140b0 <udivmodsi4+0x34>
  8140a0:	294b883a 	add	r5,r5,r5
  8140a4:	1085883a 	add	r2,r2,r2
  8140a8:	293ffa36 	bltu	r5,r4,814094 <udivmodsi4+0x18>
  8140ac:	10000d26 	beq	r2,zero,8140e4 <udivmodsi4+0x68>
  8140b0:	0007883a 	mov	r3,zero
  8140b4:	21400236 	bltu	r4,r5,8140c0 <udivmodsi4+0x44>
  8140b8:	2149c83a 	sub	r4,r4,r5
  8140bc:	1886b03a 	or	r3,r3,r2
  8140c0:	1004d07a 	srli	r2,r2,1
  8140c4:	280ad07a 	srli	r5,r5,1
  8140c8:	103ffa1e 	bne	r2,zero,8140b4 <udivmodsi4+0x38>
  8140cc:	30000226 	beq	r6,zero,8140d8 <udivmodsi4+0x5c>
  8140d0:	2005883a 	mov	r2,r4
  8140d4:	f800283a 	ret
  8140d8:	1809883a 	mov	r4,r3
  8140dc:	2005883a 	mov	r2,r4
  8140e0:	f800283a 	ret
  8140e4:	0007883a 	mov	r3,zero
  8140e8:	003ff806 	br	8140cc <udivmodsi4+0x50>
  8140ec:	00800044 	movi	r2,1
  8140f0:	0007883a 	mov	r3,zero
  8140f4:	003fef06 	br	8140b4 <udivmodsi4+0x38>

008140f8 <__divsi3>:
  8140f8:	defffe04 	addi	sp,sp,-8
  8140fc:	dc000015 	stw	r16,0(sp)
  814100:	dfc00115 	stw	ra,4(sp)
  814104:	0021883a 	mov	r16,zero
  814108:	20000c16 	blt	r4,zero,81413c <__divsi3+0x44>
  81410c:	000d883a 	mov	r6,zero
  814110:	28000e16 	blt	r5,zero,81414c <__divsi3+0x54>
  814114:	081407c0 	call	81407c <udivmodsi4>
  814118:	1007883a 	mov	r3,r2
  81411c:	8005003a 	cmpeq	r2,r16,zero
  814120:	1000011e 	bne	r2,zero,814128 <__divsi3+0x30>
  814124:	00c7c83a 	sub	r3,zero,r3
  814128:	1805883a 	mov	r2,r3
  81412c:	dfc00117 	ldw	ra,4(sp)
  814130:	dc000017 	ldw	r16,0(sp)
  814134:	dec00204 	addi	sp,sp,8
  814138:	f800283a 	ret
  81413c:	0109c83a 	sub	r4,zero,r4
  814140:	04000044 	movi	r16,1
  814144:	000d883a 	mov	r6,zero
  814148:	283ff20e 	bge	r5,zero,814114 <__divsi3+0x1c>
  81414c:	014bc83a 	sub	r5,zero,r5
  814150:	8021003a 	cmpeq	r16,r16,zero
  814154:	003fef06 	br	814114 <__divsi3+0x1c>

00814158 <__modsi3>:
  814158:	deffff04 	addi	sp,sp,-4
  81415c:	dfc00015 	stw	ra,0(sp)
  814160:	01800044 	movi	r6,1
  814164:	2807883a 	mov	r3,r5
  814168:	20000416 	blt	r4,zero,81417c <__modsi3+0x24>
  81416c:	28000c16 	blt	r5,zero,8141a0 <__modsi3+0x48>
  814170:	dfc00017 	ldw	ra,0(sp)
  814174:	dec00104 	addi	sp,sp,4
  814178:	081407c1 	jmpi	81407c <udivmodsi4>
  81417c:	0109c83a 	sub	r4,zero,r4
  814180:	28000b16 	blt	r5,zero,8141b0 <__modsi3+0x58>
  814184:	180b883a 	mov	r5,r3
  814188:	01800044 	movi	r6,1
  81418c:	081407c0 	call	81407c <udivmodsi4>
  814190:	0085c83a 	sub	r2,zero,r2
  814194:	dfc00017 	ldw	ra,0(sp)
  814198:	dec00104 	addi	sp,sp,4
  81419c:	f800283a 	ret
  8141a0:	014bc83a 	sub	r5,zero,r5
  8141a4:	dfc00017 	ldw	ra,0(sp)
  8141a8:	dec00104 	addi	sp,sp,4
  8141ac:	081407c1 	jmpi	81407c <udivmodsi4>
  8141b0:	0147c83a 	sub	r3,zero,r5
  8141b4:	003ff306 	br	814184 <__modsi3+0x2c>

008141b8 <__udivsi3>:
  8141b8:	000d883a 	mov	r6,zero
  8141bc:	081407c1 	jmpi	81407c <udivmodsi4>

008141c0 <__umodsi3>:
  8141c0:	01800044 	movi	r6,1
  8141c4:	081407c1 	jmpi	81407c <udivmodsi4>

008141c8 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  8141c8:	defffd04 	addi	sp,sp,-12
  8141cc:	df000215 	stw	fp,8(sp)
  8141d0:	df000204 	addi	fp,sp,8
  8141d4:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  8141d8:	e0bfff17 	ldw	r2,-4(fp)
  8141dc:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  8141e0:	e0bffe17 	ldw	r2,-8(fp)
  8141e4:	1005003a 	cmpeq	r2,r2,zero
  8141e8:	1000021e 	bne	r2,zero,8141f4 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  8141ec:	002af070 	cmpltui	zero,zero,43969
  8141f0:	00000106 	br	8141f8 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  8141f4:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  8141f8:	e037883a 	mov	sp,fp
  8141fc:	df000017 	ldw	fp,0(sp)
  814200:	dec00104 	addi	sp,sp,4
  814204:	f800283a 	ret

00814208 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  814208:	defffd04 	addi	sp,sp,-12
  81420c:	dfc00215 	stw	ra,8(sp)
  814210:	df000115 	stw	fp,4(sp)
  814214:	df000104 	addi	fp,sp,4
  814218:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  81421c:	00802074 	movhi	r2,129
  814220:	109f3e44 	addi	r2,r2,31993
  814224:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  814228:	e13fff17 	ldw	r4,-4(fp)
  81422c:	08141c80 	call	8141c8 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  814230:	003fff06 	br	814230 <_exit+0x28>
  814234:	00813ec8 	cmpgei	r2,zero,1275
